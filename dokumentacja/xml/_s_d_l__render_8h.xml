<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="_s_d_l__render_8h" kind="file" language="C++">
    <compoundname>SDL_render.h</compoundname>
    <includes refid="_s_d_l__stdinc_8h" local="yes">SDL_stdinc.h</includes>
    <includes refid="_s_d_l__rect_8h" local="yes">SDL_rect.h</includes>
    <includes refid="_s_d_l__video_8h" local="yes">SDL_video.h</includes>
    <includes refid="begin__code_8h" local="yes">begin_code.h</includes>
    <includes refid="close__code_8h" local="yes">close_code.h</includes>
    <includedby refid="_s_d_l_8h" local="yes">D:/RayTracing/include/SDL.h</includedby>
    <includedby refid="_s_d_l__system_8h" local="yes">D:/RayTracing/include/SDL_system.h</includedby>
    <incdepgraph>
      <node id="16">
        <label>SDL_blendmode.h</label>
        <link refid="_s_d_l__blendmode_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>SDL_config.h</label>
        <link refid="_s_d_l__config_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>SDL_endian.h</label>
        <link refid="_s_d_l__endian_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>SDL_error.h</label>
        <link refid="_s_d_l__error_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>SDL_pixels.h</label>
        <link refid="_s_d_l__pixels_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>SDL_platform.h</label>
        <link refid="_s_d_l__platform_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>SDL_rect.h</label>
        <link refid="_s_d_l__rect_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>D:/RayTracing/include/SDL_render.h</label>
        <link refid="_s_d_l__render_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>SDL_rwops.h</label>
        <link refid="_s_d_l__rwops_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>SDL_stdinc.h</label>
        <link refid="_s_d_l__stdinc_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>SDL_surface.h</label>
        <link refid="_s_d_l__surface_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>SDL_video.h</label>
        <link refid="_s_d_l__video_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>begin_code.h</label>
        <link refid="begin__code_8h"/>
      </node>
      <node id="6">
        <label>close_code.h</label>
        <link refid="close__code_8h"/>
      </node>
      <node id="8">
        <label>stdarg.h</label>
      </node>
      <node id="7">
        <label>stddef.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4">
        <label>D:/RayTracing/CApp.cpp</label>
        <link refid="_c_app_8cpp"/>
      </node>
      <node id="3">
        <label>D:/RayTracing/CApp.h</label>
        <link refid="_c_app_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>D:/RayTracing/RayTrace/Image.cpp</label>
        <link refid="_image_8cpp"/>
      </node>
      <node id="6">
        <label>D:/RayTracing/RayTrace/Image.h</label>
        <link refid="_image_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>D:/RayTracing/RayTrace/Scene.cpp</label>
        <link refid="_scene_8cpp"/>
      </node>
      <node id="8">
        <label>D:/RayTracing/RayTrace/Scene.h</label>
        <link refid="_scene_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>D:/RayTracing/RayTrace/Textures/textureimage.cpp</label>
        <link refid="textureimage_8cpp"/>
      </node>
      <node id="10">
        <label>D:/RayTracing/RayTrace/Textures/textureimage.h</label>
        <link refid="textureimage_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>D:/RayTracing/include/SDL.h</label>
        <link refid="_s_d_l_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>D:/RayTracing/include/SDL_render.h</label>
        <link refid="_s_d_l__render_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>D:/RayTracing/include/SDL_system.h</label>
        <link refid="_s_d_l__system_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>D:/RayTracing/include/SDL_test.h</label>
        <link refid="_s_d_l__test_8h"/>
      </node>
      <node id="13">
        <label>D:/RayTracing/include/SDL_test_common.h</label>
        <link refid="_s_d_l__test__common_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>D:/RayTracing/include/SDL_test_compare.h</label>
        <link refid="_s_d_l__test__compare_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>D:/RayTracing/include/SDL_test_images.h</label>
        <link refid="_s_d_l__test__images_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>D:/RayTracing/main.cpp</label>
        <link refid="main_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_s_d_l___renderer_info" prot="public">SDL_RendererInfo</innerclass>
    <innerclass refid="struct_s_d_l___vertex" prot="public">SDL_Vertex</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="_s_d_l__render_8h_1a3a6e51bbee5fd3f8ee0c9f7504ae4130" prot="public" static="no" strong="no">
        <type></type>
        <name>SDL_RendererFlags</name>
        <enumvalue id="_s_d_l__render_8h_1a3a6e51bbee5fd3f8ee0c9f7504ae4130a02efc6cb7656c03d7a7d0164aced7e84" prot="public">
          <name>SDL_RENDERER_SOFTWARE</name>
          <initializer>= 0x00000001</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The renderer is a software fallback </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_s_d_l__render_8h_1a3a6e51bbee5fd3f8ee0c9f7504ae4130a1268ba2faaf6d9c7c7b71fc550f4248a" prot="public">
          <name>SDL_RENDERER_ACCELERATED</name>
          <initializer>= 0x00000002</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The renderer uses hardware acceleration </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_s_d_l__render_8h_1a3a6e51bbee5fd3f8ee0c9f7504ae4130a12abcfe685ff444f0fc727db981a0c83" prot="public">
          <name>SDL_RENDERER_PRESENTVSYNC</name>
          <initializer>= 0x00000004</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Present is synchronized with the refresh rate </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_s_d_l__render_8h_1a3a6e51bbee5fd3f8ee0c9f7504ae4130a77aa48df9c4f56f0b1c66c406da3ab81" prot="public">
          <name>SDL_RENDERER_TARGETTEXTURE</name>
          <initializer>= 0x00000008</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The renderer supports rendering to texture </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Flags used when creating a rendering context </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="64" column="1" bodyfile="D:/RayTracing/include/SDL_render.h" bodystart="65" bodyend="73"/>
      </memberdef>
      <memberdef kind="enum" id="_s_d_l__render_8h_1a7cee9cc7b0b54027860fde346ea26c71" prot="public" static="no" strong="no">
        <type></type>
        <name>SDL_ScaleMode</name>
        <enumvalue id="_s_d_l__render_8h_1a7cee9cc7b0b54027860fde346ea26c71af7de2943791eb2a873139506d40a305d" prot="public">
          <name>SDL_ScaleModeNearest</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>nearest pixel sampling </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_s_d_l__render_8h_1a7cee9cc7b0b54027860fde346ea26c71a9558b9559ab5d26ac398bb18cc731365" prot="public">
          <name>SDL_ScaleModeLinear</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>linear filtering </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_s_d_l__render_8h_1a7cee9cc7b0b54027860fde346ea26c71adaae98d92cef330646363f08cdef6f9e" prot="public">
          <name>SDL_ScaleModeBest</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>anisotropic filtering </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The scaling mode for a texture. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="101" column="1" bodyfile="D:/RayTracing/include/SDL_render.h" bodystart="102" bodyend="106"/>
      </memberdef>
      <memberdef kind="enum" id="_s_d_l__render_8h_1a6b8417d7af279e8a0d4a51233da99bc9" prot="public" static="no" strong="no">
        <type></type>
        <name>SDL_TextureAccess</name>
        <enumvalue id="_s_d_l__render_8h_1a6b8417d7af279e8a0d4a51233da99bc9a07c9015fe5cf4e0737d2836acdf00a34" prot="public">
          <name>SDL_TEXTUREACCESS_STATIC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Changes rarely, not lockable </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_s_d_l__render_8h_1a6b8417d7af279e8a0d4a51233da99bc9a19a4751f16e6b411aeb9c835d6c061b4" prot="public">
          <name>SDL_TEXTUREACCESS_STREAMING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Changes frequently, lockable </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_s_d_l__render_8h_1a6b8417d7af279e8a0d4a51233da99bc9a52249f41ca2ec4971ec96ee395868a9a" prot="public">
          <name>SDL_TEXTUREACCESS_TARGET</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Texture can be used as a render target </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The access pattern allowed for a texture. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="111" column="1" bodyfile="D:/RayTracing/include/SDL_render.h" bodystart="112" bodyend="116"/>
      </memberdef>
      <memberdef kind="enum" id="_s_d_l__render_8h_1a8d8aacd15cb2cb24e61ae1905e7a5ab5" prot="public" static="no" strong="no">
        <type></type>
        <name>SDL_TextureModulate</name>
        <enumvalue id="_s_d_l__render_8h_1a8d8aacd15cb2cb24e61ae1905e7a5ab5a3c1a49753bd4e0a8cfa7c64ed5a4b0df" prot="public">
          <name>SDL_TEXTUREMODULATE_NONE</name>
          <initializer>= 0x00000000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>No modulation </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_s_d_l__render_8h_1a8d8aacd15cb2cb24e61ae1905e7a5ab5a5a9d122094526405306483d856caa21e" prot="public">
          <name>SDL_TEXTUREMODULATE_COLOR</name>
          <initializer>= 0x00000001</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>srcC = srcC * color </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_s_d_l__render_8h_1a8d8aacd15cb2cb24e61ae1905e7a5ab5a431abaf1e024cd43df94a967ba1e836f" prot="public">
          <name>SDL_TEXTUREMODULATE_ALPHA</name>
          <initializer>= 0x00000002</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>srcA = srcA * alpha </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The texture channel modulation used in <ref refid="_s_d_l__render_8h_1a4b6c2353384c7b7128fd5960b24f2ae6" kindref="member">SDL_RenderCopy()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="121" column="1" bodyfile="D:/RayTracing/include/SDL_render.h" bodystart="122" bodyend="126"/>
      </memberdef>
      <memberdef kind="enum" id="_s_d_l__render_8h_1a6280e56838e0e684caa0869c7c973c12" prot="public" static="no" strong="no">
        <type></type>
        <name>SDL_RendererFlip</name>
        <enumvalue id="_s_d_l__render_8h_1a6280e56838e0e684caa0869c7c973c12a580b026a6ad4e3493677ad47f3bd939a" prot="public">
          <name>SDL_FLIP_NONE</name>
          <initializer>= 0x00000000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Do not flip </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_s_d_l__render_8h_1a6280e56838e0e684caa0869c7c973c12acfc2af6936e75fa246c98d316425c0ce" prot="public">
          <name>SDL_FLIP_HORIZONTAL</name>
          <initializer>= 0x00000001</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>flip horizontally </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_s_d_l__render_8h_1a6280e56838e0e684caa0869c7c973c12a27ec807eec1d9adffced6a70cd85ef01" prot="public">
          <name>SDL_FLIP_VERTICAL</name>
          <initializer>= 0x00000002</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>flip vertically </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Flip constants for SDL_RenderCopyEx </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="131" column="1" bodyfile="D:/RayTracing/include/SDL_render.h" bodystart="132" bodyend="136"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_s_d_l__render_8h_1a0e001c8e25de272084c29c6431a80811" prot="public" static="no">
        <type>struct <ref refid="struct_s_d_l___renderer_info" kindref="compound">SDL_RendererInfo</ref></type>
        <definition>typedef struct SDL_RendererInfo SDL_RendererInfo</definition>
        <argsstring></argsstring>
        <name>SDL_RendererInfo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Information on the capabilities of a render driver or context. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="86" column="18"/>
      </memberdef>
      <memberdef kind="typedef" id="_s_d_l__render_8h_1a2bd7b3f09dc5b728d6f2e34762bac869" prot="public" static="no">
        <type>struct <ref refid="struct_s_d_l___vertex" kindref="compound">SDL_Vertex</ref></type>
        <definition>typedef struct SDL_Vertex SDL_Vertex</definition>
        <argsstring></argsstring>
        <name>SDL_Vertex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Vertex structure </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="96" column="12"/>
      </memberdef>
      <memberdef kind="typedef" id="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" prot="public" static="no">
        <type>struct <ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref></type>
        <definition>typedef struct SDL_Renderer SDL_Renderer</definition>
        <argsstring></argsstring>
        <name>SDL_Renderer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="142" column="27" bodyfile="D:/RayTracing/include/SDL_render.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" prot="public" static="no">
        <type>struct <ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref></type>
        <definition>typedef struct SDL_Texture SDL_Texture</definition>
        <argsstring></argsstring>
        <name>SDL_Texture</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="148" column="26" bodyfile="D:/RayTracing/include/SDL_render.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_s_d_l__render_8h_1a4dd8a7e6e6f0948541a1ff6b2ecff192" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_GetNumRenderDrivers</definition>
        <argsstring>(void)</argsstring>
        <name>SDL_GetNumRenderDrivers</name>
        <param>
          <type><ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the number of 2D rendering drivers available for the current display.</para>
<para>A render driver is a set of code that handles rendering and texture management on a particular display. Normally there is only one, but some drivers may have several available with different capabilities.</para>
<para>There may be none if SDL was compiled without render support.</para>
<para><simplesect kind="return"><para>a number &gt;= 0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a4acc54236013e4ef625dcc362cc8b7d5" kindref="member">SDL_CreateRenderer</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1aa9a7e1ca629863212c2c1b17112f65bd" kindref="member">SDL_GetRenderDriverInfo</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="169" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="169" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1aa9a7e1ca629863212c2c1b17112f65bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_GetRenderDriverInfo</definition>
        <argsstring>(int index, SDL_RendererInfo *info)</argsstring>
        <name>SDL_GetRenderDriverInfo</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="struct_s_d_l___renderer_info" kindref="compound">SDL_RendererInfo</ref> *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get info about a specific 2D rendering driver for the current display.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the driver to query information about </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>an <ref refid="struct_s_d_l___renderer_info" kindref="compound">SDL_RendererInfo</ref> structure to be filled with information on the rendering driver </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a4acc54236013e4ef625dcc362cc8b7d5" kindref="member">SDL_CreateRenderer</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a4dd8a7e6e6f0948541a1ff6b2ecff192" kindref="member">SDL_GetNumRenderDrivers</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="185" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="185" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1ac3aa070e5cda5bab246621f7efc9f143" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_CreateWindowAndRenderer</definition>
        <argsstring>(int width, int height, Uint32 window_flags, SDL_Window **window, SDL_Renderer **renderer)</argsstring>
        <name>SDL_CreateWindowAndRenderer</name>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref></type>
          <declname>window_flags</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392" kindref="member">SDL_Window</ref> **</type>
          <declname>window</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> **</type>
          <declname>renderer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a window and default renderer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>the width of the window </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>the height of the window </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>window_flags</parametername>
</parameternamelist>
<parameterdescription>
<para>the flags used to create the window (see <ref refid="_s_d_l__video_8h_1a841edb930dc7cb2c1ec64f831d3abba6" kindref="member">SDL_CreateWindow()</ref>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>window</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer filled with the window, or NULL on error </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer filled with the renderer, or NULL on error </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or -1 on error; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a4acc54236013e4ef625dcc362cc8b7d5" kindref="member">SDL_CreateRenderer</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__video_8h_1a841edb930dc7cb2c1ec64f831d3abba6" kindref="member">SDL_CreateWindow</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="205" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="205" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1a4acc54236013e4ef625dcc362cc8b7d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC SDL_Renderer *SDLCALL SDL_CreateRenderer</definition>
        <argsstring>(SDL_Window *window, int index, Uint32 flags)</argsstring>
        <name>SDL_CreateRenderer</name>
        <param>
          <type><ref refid="_s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392" kindref="member">SDL_Window</ref> *</type>
          <declname>window</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a 2D rendering context for a window.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>window</parametername>
</parameternamelist>
<parameterdescription>
<para>the window where rendering is displayed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the rendering driver to initialize, or -1 to initialize the first one supporting the requested flags </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>0, or one or more SDL_RendererFlags OR&apos;d together </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a valid rendering context or NULL if there was an error; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1aeb5644ee43c35ed27e54e312a1cd954b" kindref="member">SDL_CreateSoftwareRenderer</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1ab1f096742fa9c882c3f1555ee62c4ac2" kindref="member">SDL_DestroyRenderer</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a4dd8a7e6e6f0948541a1ff6b2ecff192" kindref="member">SDL_GetNumRenderDrivers</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1afdc8a35ce033f5111843ac9518dc47a4" kindref="member">SDL_GetRendererInfo</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="227" column="39" declfile="D:/RayTracing/include/SDL_render.h" declline="227" declcolumn="39"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1aeb5644ee43c35ed27e54e312a1cd954b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC SDL_Renderer *SDLCALL SDL_CreateSoftwareRenderer</definition>
        <argsstring>(SDL_Surface *surface)</argsstring>
        <name>SDL_CreateSoftwareRenderer</name>
        <param>
          <type><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> *</type>
          <declname>surface</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a 2D software rendering context for a surface.</para>
<para>Two other API which can be used to create SDL_Renderer: <ref refid="_s_d_l__render_8h_1a4acc54236013e4ef625dcc362cc8b7d5" kindref="member">SDL_CreateRenderer()</ref> and <ref refid="_s_d_l__render_8h_1ac3aa070e5cda5bab246621f7efc9f143" kindref="member">SDL_CreateWindowAndRenderer()</ref>. These can <emphasis>also</emphasis> create a software renderer, but they are intended to be used with an SDL_Window as the final destination and not an <ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>surface</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> structure representing the surface where rendering is done </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a valid rendering context or NULL if there was an error; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a4acc54236013e4ef625dcc362cc8b7d5" kindref="member">SDL_CreateRenderer</ref> </para>
</simplesect>
<simplesect kind="see"><para>SDL_CreateWindowRenderer </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1ab1f096742fa9c882c3f1555ee62c4ac2" kindref="member">SDL_DestroyRenderer</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="249" column="39" declfile="D:/RayTracing/include/SDL_render.h" declline="249" declcolumn="39"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1a6c60ba0582abbdf342e1d305e3c52362" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC SDL_Renderer *SDLCALL SDL_GetRenderer</definition>
        <argsstring>(SDL_Window *window)</argsstring>
        <name>SDL_GetRenderer</name>
        <param>
          <type><ref refid="_s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392" kindref="member">SDL_Window</ref> *</type>
          <declname>window</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the renderer associated with a window.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>window</parametername>
</parameternamelist>
<parameterdescription>
<para>the window to query </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the rendering context on success or NULL on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a4acc54236013e4ef625dcc362cc8b7d5" kindref="member">SDL_CreateRenderer</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="262" column="39" declfile="D:/RayTracing/include/SDL_render.h" declline="262" declcolumn="39"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1afdc8a35ce033f5111843ac9518dc47a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_GetRendererInfo</definition>
        <argsstring>(SDL_Renderer *renderer, SDL_RendererInfo *info)</argsstring>
        <name>SDL_GetRendererInfo</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <param>
          <type><ref refid="struct_s_d_l___renderer_info" kindref="compound">SDL_RendererInfo</ref> *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get information about a rendering context.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para>the rendering context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>an <ref refid="struct_s_d_l___renderer_info" kindref="compound">SDL_RendererInfo</ref> structure filled with information about the current renderer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a4acc54236013e4ef625dcc362cc8b7d5" kindref="member">SDL_CreateRenderer</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="277" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="277" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1abfc0c9a50d9d1870ab7d271b7a73d8ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_GetRendererOutputSize</definition>
        <argsstring>(SDL_Renderer *renderer, int *w, int *h)</argsstring>
        <name>SDL_GetRendererOutputSize</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the output size in pixels of a rendering context.</para>
<para>Due to high-dpi displays, you might end up with a rendering context that has more pixels than the window that contains it, so use this instead of <ref refid="_s_d_l__video_8h_1a5cbfffcfec91c22a7ca95fd1d5163db5" kindref="member">SDL_GetWindowSize()</ref> to decide how much drawing area you have.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para>the rendering context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>an int filled with the width </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>an int filled with the height </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a6c60ba0582abbdf342e1d305e3c52362" kindref="member">SDL_GetRenderer</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="297" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="297" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1a7995b80913eedffe824a5bf1e81e80ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref> *<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC SDL_Texture *SDLCALL SDL_CreateTexture</definition>
        <argsstring>(SDL_Renderer *renderer, Uint32 format, int access, int w, int h)</argsstring>
        <name>SDL_CreateTexture</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref></type>
          <declname>format</declname>
        </param>
        <param>
          <type>int</type>
          <declname>access</declname>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a texture for a rendering context.</para>
<para>You can set the texture scaling method by setting <computeroutput>SDL_HINT_RENDER_SCALE_QUALITY</computeroutput> before creating the texture.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para>the rendering context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>one of the enumerated values in SDL_PixelFormatEnum </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>access</parametername>
</parameternamelist>
<parameterdescription>
<para>one of the enumerated values in SDL_TextureAccess </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>the width of the texture in pixels </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>the height of the texture in pixels </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to the created texture or NULL if no rendering context was active, the format was unsupported, or the width or height were out of range; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a5c0f3b4f6fdb462e4292cd45e72719fb" kindref="member">SDL_CreateTextureFromSurface</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a078c0a925e24542d356a02183a306be6" kindref="member">SDL_DestroyTexture</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1aade777757bfc3b98bf3ef742b1d8a052" kindref="member">SDL_QueryTexture</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a7aab41a7058997590095e5568d065c11" kindref="member">SDL_UpdateTexture</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="322" column="38" declfile="D:/RayTracing/include/SDL_render.h" declline="322" declcolumn="38"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1a5c0f3b4f6fdb462e4292cd45e72719fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref> *<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC SDL_Texture *SDLCALL SDL_CreateTextureFromSurface</definition>
        <argsstring>(SDL_Renderer *renderer, SDL_Surface *surface)</argsstring>
        <name>SDL_CreateTextureFromSurface</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <param>
          <type><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> *</type>
          <declname>surface</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a texture from an existing surface.</para>
<para>The surface is not modified or freed by this function.</para>
<para>The SDL_TextureAccess hint for the created texture is <computeroutput>SDL_TEXTUREACCESS_STATIC</computeroutput>.</para>
<para>The pixel format of the created texture may be different from the pixel format of the surface. Use <ref refid="_s_d_l__render_8h_1aade777757bfc3b98bf3ef742b1d8a052" kindref="member">SDL_QueryTexture()</ref> to query the pixel format of the texture.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para>the rendering context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>surface</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> structure containing pixel data used to fill the texture </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the created texture or NULL on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a7995b80913eedffe824a5bf1e81e80ed" kindref="member">SDL_CreateTexture</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a078c0a925e24542d356a02183a306be6" kindref="member">SDL_DestroyTexture</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1aade777757bfc3b98bf3ef742b1d8a052" kindref="member">SDL_QueryTexture</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="351" column="38" declfile="D:/RayTracing/include/SDL_render.h" declline="351" declcolumn="38"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1aade777757bfc3b98bf3ef742b1d8a052" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_QueryTexture</definition>
        <argsstring>(SDL_Texture *texture, Uint32 *format, int *access, int *w, int *h)</argsstring>
        <name>SDL_QueryTexture</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref> *</type>
          <declname>texture</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref> *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>access</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Query the attributes of a texture.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>texture</parametername>
</parameternamelist>
<parameterdescription>
<para>the texture to query </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer filled in with the raw format of the texture; the actual format may differ, but pixel transfers will use this format (one of the SDL_PixelFormatEnum values) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>access</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer filled in with the actual access to the texture (one of the SDL_TextureAccess values) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer filled in with the width of the texture in pixels </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer filled in with the height of the texture in pixels </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a7995b80913eedffe824a5bf1e81e80ed" kindref="member">SDL_CreateTexture</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="371" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="371" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1a348399db33c03a7882cef0c6e6c1756f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_SetTextureColorMod</definition>
        <argsstring>(SDL_Texture *texture, Uint8 r, Uint8 g, Uint8 b)</argsstring>
        <name>SDL_SetTextureColorMod</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref> *</type>
          <declname>texture</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref></type>
          <declname>g</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set an additional color value multiplied into render copy operations.</para>
<para>When this texture is rendered, during the copy operation each source color channel is modulated by the appropriate color value according to the following formula:</para>
<para><computeroutput>srcC = srcC * (color / 255)</computeroutput></para>
<para>Color modulation is not always supported by the renderer; it will return -1 if color modulation is not supported.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>texture</parametername>
</parameternamelist>
<parameterdescription>
<para>the texture to update </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>the red color value multiplied into copy operations </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the green color value multiplied into copy operations </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>the blue color value multiplied into copy operations </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1aa70e4ce3a875399d4291dca23e687b11" kindref="member">SDL_GetTextureColorMod</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a1cc3302a4c7fb3b37e8fd5263a80758b" kindref="member">SDL_SetTextureAlphaMod</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="399" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="399" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1aa70e4ce3a875399d4291dca23e687b11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_GetTextureColorMod</definition>
        <argsstring>(SDL_Texture *texture, Uint8 *r, Uint8 *g, Uint8 *b)</argsstring>
        <name>SDL_GetTextureColorMod</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref> *</type>
          <declname>texture</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the additional color value multiplied into render copy operations.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>texture</parametername>
</parameternamelist>
<parameterdescription>
<para>the texture to query </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer filled in with the current red color value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer filled in with the current green color value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer filled in with the current blue color value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a4d9a9e945ec95f30e5c48ce305de33ad" kindref="member">SDL_GetTextureAlphaMod</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a348399db33c03a7882cef0c6e6c1756f" kindref="member">SDL_SetTextureColorMod</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="418" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="418" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1a1cc3302a4c7fb3b37e8fd5263a80758b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_SetTextureAlphaMod</definition>
        <argsstring>(SDL_Texture *texture, Uint8 alpha)</argsstring>
        <name>SDL_SetTextureAlphaMod</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref> *</type>
          <declname>texture</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref></type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set an additional alpha value multiplied into render copy operations.</para>
<para>When this texture is rendered, during the copy operation the source alpha value is modulated by this alpha value according to the following formula:</para>
<para><computeroutput>srcA = srcA * (alpha / 255)</computeroutput></para>
<para>Alpha modulation is not always supported by the renderer; it will return -1 if alpha modulation is not supported.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>texture</parametername>
</parameternamelist>
<parameterdescription>
<para>the texture to update </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>the source alpha value multiplied into copy operations </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a4d9a9e945ec95f30e5c48ce305de33ad" kindref="member">SDL_GetTextureAlphaMod</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a348399db33c03a7882cef0c6e6c1756f" kindref="member">SDL_SetTextureColorMod</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="443" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="443" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1a4d9a9e945ec95f30e5c48ce305de33ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_GetTextureAlphaMod</definition>
        <argsstring>(SDL_Texture *texture, Uint8 *alpha)</argsstring>
        <name>SDL_GetTextureAlphaMod</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref> *</type>
          <declname>texture</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref> *</type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the additional alpha value multiplied into render copy operations.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>texture</parametername>
</parameternamelist>
<parameterdescription>
<para>the texture to query </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer filled in with the current alpha value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1aa70e4ce3a875399d4291dca23e687b11" kindref="member">SDL_GetTextureColorMod</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a1cc3302a4c7fb3b37e8fd5263a80758b" kindref="member">SDL_SetTextureAlphaMod</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="459" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="459" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1af8b9cb77ca18f76c18f39d29ed960de8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_SetTextureBlendMode</definition>
        <argsstring>(SDL_Texture *texture, SDL_BlendMode blendMode)</argsstring>
        <name>SDL_SetTextureBlendMode</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref> *</type>
          <declname>texture</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__blendmode_8h_1a850d3c67a878fd6698a1c8dbb1eabf1e" kindref="member">SDL_BlendMode</ref></type>
          <declname>blendMode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the blend mode for a texture, used by <ref refid="_s_d_l__render_8h_1a4b6c2353384c7b7128fd5960b24f2ae6" kindref="member">SDL_RenderCopy()</ref>.</para>
<para>If the blend mode is not supported, the closest supported mode is chosen and this function returns -1.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>texture</parametername>
</parameternamelist>
<parameterdescription>
<para>the texture to update </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blendMode</parametername>
</parameternamelist>
<parameterdescription>
<para>the SDL_BlendMode to use for texture blending </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a2595ee57e6f3a4882f3ae4062ca420c4" kindref="member">SDL_GetTextureBlendMode</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a4b6c2353384c7b7128fd5960b24f2ae6" kindref="member">SDL_RenderCopy</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="478" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="478" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1a2595ee57e6f3a4882f3ae4062ca420c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_GetTextureBlendMode</definition>
        <argsstring>(SDL_Texture *texture, SDL_BlendMode *blendMode)</argsstring>
        <name>SDL_GetTextureBlendMode</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref> *</type>
          <declname>texture</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__blendmode_8h_1a850d3c67a878fd6698a1c8dbb1eabf1e" kindref="member">SDL_BlendMode</ref> *</type>
          <declname>blendMode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the blend mode used for texture copy operations.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>texture</parametername>
</parameternamelist>
<parameterdescription>
<para>the texture to query </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blendMode</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer filled in with the current SDL_BlendMode </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1af8b9cb77ca18f76c18f39d29ed960de8" kindref="member">SDL_SetTextureBlendMode</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="493" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="493" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1aac58837d42510e6e0472538dbcbc2ffe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_SetTextureScaleMode</definition>
        <argsstring>(SDL_Texture *texture, SDL_ScaleMode scaleMode)</argsstring>
        <name>SDL_SetTextureScaleMode</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref> *</type>
          <declname>texture</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__render_8h_1a7cee9cc7b0b54027860fde346ea26c71" kindref="member">SDL_ScaleMode</ref></type>
          <declname>scaleMode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the scale mode used for texture scale operations.</para>
<para>If the scale mode is not supported, the closest supported mode is chosen.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>texture</parametername>
</parameternamelist>
<parameterdescription>
<para>The texture to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scaleMode</parametername>
</parameternamelist>
<parameterdescription>
<para>the SDL_ScaleMode to use for texture scaling. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or -1 if the texture is not valid.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.12.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a51603afa1350164679baad97b77fb3b5" kindref="member">SDL_GetTextureScaleMode</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="509" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="509" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1a51603afa1350164679baad97b77fb3b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_GetTextureScaleMode</definition>
        <argsstring>(SDL_Texture *texture, SDL_ScaleMode *scaleMode)</argsstring>
        <name>SDL_GetTextureScaleMode</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref> *</type>
          <declname>texture</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__render_8h_1a7cee9cc7b0b54027860fde346ea26c71" kindref="member">SDL_ScaleMode</ref> *</type>
          <declname>scaleMode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the scale mode used for texture scale operations.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>texture</parametername>
</parameternamelist>
<parameterdescription>
<para>the texture to query. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scaleMode</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer filled in with the current scale mode. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or -1 if the texture is not valid.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.12.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1aac58837d42510e6e0472538dbcbc2ffe" kindref="member">SDL_SetTextureScaleMode</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="523" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="523" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1a969ee973fd8f686777f151aa2d9275bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_SetTextureUserData</definition>
        <argsstring>(SDL_Texture *texture, void *userdata)</argsstring>
        <name>SDL_SetTextureUserData</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref> *</type>
          <declname>texture</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref> *</type>
          <declname>userdata</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Associate a user-specified pointer with a texture.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>texture</parametername>
</parameternamelist>
<parameterdescription>
<para>the texture to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>userdata</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer to associate with the texture. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or -1 if the texture is not valid.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.18.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a6601680fa2e4a7c2c46d503392fc1afc" kindref="member">SDL_GetTextureUserData</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="537" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="537" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1a6601680fa2e4a7c2c46d503392fc1afc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref> *<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC void *SDLCALL SDL_GetTextureUserData</definition>
        <argsstring>(SDL_Texture *texture)</argsstring>
        <name>SDL_GetTextureUserData</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref> *</type>
          <declname>texture</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the user-specified pointer associated with a texture</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>texture</parametername>
</parameternamelist>
<parameterdescription>
<para>the texture to query. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the pointer associated with the texture, or NULL if the texture is not valid.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.18.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a969ee973fd8f686777f151aa2d9275bc" kindref="member">SDL_SetTextureUserData</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="551" column="31" declfile="D:/RayTracing/include/SDL_render.h" declline="551" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1a7aab41a7058997590095e5568d065c11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_UpdateTexture</definition>
        <argsstring>(SDL_Texture *texture, const SDL_Rect *rect, const void *pixels, int pitch)</argsstring>
        <name>SDL_UpdateTexture</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref> *</type>
          <declname>texture</declname>
        </param>
        <param>
          <type>const <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> *</type>
          <declname>rect</declname>
        </param>
        <param>
          <type>const <ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref> *</type>
          <declname>pixels</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pitch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Update the given texture rectangle with new pixel data.</para>
<para>The pixel data must be in the pixel format of the texture. Use <ref refid="_s_d_l__render_8h_1aade777757bfc3b98bf3ef742b1d8a052" kindref="member">SDL_QueryTexture()</ref> to query the pixel format of the texture.</para>
<para>This is a fairly slow function, intended for use with static textures that do not change often.</para>
<para>If the texture is intended to be updated often, it is preferred to create the texture as streaming and use the locking functions referenced below. While this function will work with streaming textures, for optimization reasons you may not get the pixels back if you lock the texture afterward.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>texture</parametername>
</parameternamelist>
<parameterdescription>
<para>the texture to update </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>an <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> structure representing the area to update, or NULL to update the entire texture </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pixels</parametername>
</parameternamelist>
<parameterdescription>
<para>the raw pixel data in the format of the texture </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pitch</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of bytes in a row of pixel data, including padding between lines </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a7995b80913eedffe824a5bf1e81e80ed" kindref="member">SDL_CreateTexture</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1af64adcd12e4e9d41d48031fd3da7b913" kindref="member">SDL_LockTexture</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a7fc9db6cde77fc9c95a4f65bc7d30073" kindref="member">SDL_UnlockTexture</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="582" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="582" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1aad2bf04e82a6fb8df44c0b6791321cb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_UpdateYUVTexture</definition>
        <argsstring>(SDL_Texture *texture, const SDL_Rect *rect, const Uint8 *Yplane, int Ypitch, const Uint8 *Uplane, int Upitch, const Uint8 *Vplane, int Vpitch)</argsstring>
        <name>SDL_UpdateYUVTexture</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref> *</type>
          <declname>texture</declname>
        </param>
        <param>
          <type>const <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> *</type>
          <declname>rect</declname>
        </param>
        <param>
          <type>const <ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref> *</type>
          <declname>Yplane</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Ypitch</declname>
        </param>
        <param>
          <type>const <ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref> *</type>
          <declname>Uplane</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Upitch</declname>
        </param>
        <param>
          <type>const <ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref> *</type>
          <declname>Vplane</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Vpitch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Update a rectangle within a planar YV12 or IYUV texture with new pixel data.</para>
<para>You can use <ref refid="_s_d_l__render_8h_1a7aab41a7058997590095e5568d065c11" kindref="member">SDL_UpdateTexture()</ref> as long as your pixel data is a contiguous block of Y and U/V planes in the proper order, but this function is available if your pixel data is not contiguous.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>texture</parametername>
</parameternamelist>
<parameterdescription>
<para>the texture to update </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to the rectangle of pixels to update, or NULL to update the entire texture </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Yplane</parametername>
</parameternamelist>
<parameterdescription>
<para>the raw pixel data for the Y plane </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Ypitch</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of bytes between rows of pixel data for the Y plane </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Uplane</parametername>
</parameternamelist>
<parameterdescription>
<para>the raw pixel data for the U plane </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Upitch</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of bytes between rows of pixel data for the U plane </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Vplane</parametername>
</parameternamelist>
<parameterdescription>
<para>the raw pixel data for the V plane </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Vpitch</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of bytes between rows of pixel data for the V plane </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or -1 if the texture is not valid; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.1.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a7aab41a7058997590095e5568d065c11" kindref="member">SDL_UpdateTexture</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="613" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="613" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1ab911a179c321d62e7659b8111f457723" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_UpdateNVTexture</definition>
        <argsstring>(SDL_Texture *texture, const SDL_Rect *rect, const Uint8 *Yplane, int Ypitch, const Uint8 *UVplane, int UVpitch)</argsstring>
        <name>SDL_UpdateNVTexture</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref> *</type>
          <declname>texture</declname>
        </param>
        <param>
          <type>const <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> *</type>
          <declname>rect</declname>
        </param>
        <param>
          <type>const <ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref> *</type>
          <declname>Yplane</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Ypitch</declname>
        </param>
        <param>
          <type>const <ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref> *</type>
          <declname>UVplane</declname>
        </param>
        <param>
          <type>int</type>
          <declname>UVpitch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Update a rectangle within a planar NV12 or NV21 texture with new pixels.</para>
<para>You can use <ref refid="_s_d_l__render_8h_1a7aab41a7058997590095e5568d065c11" kindref="member">SDL_UpdateTexture()</ref> as long as your pixel data is a contiguous block of NV12/21 planes in the proper order, but this function is available if your pixel data is not contiguous.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>texture</parametername>
</parameternamelist>
<parameterdescription>
<para>the texture to update </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to the rectangle of pixels to update, or NULL to update the entire texture. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Yplane</parametername>
</parameternamelist>
<parameterdescription>
<para>the raw pixel data for the Y plane. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Ypitch</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of bytes between rows of pixel data for the Y plane. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>UVplane</parametername>
</parameternamelist>
<parameterdescription>
<para>the raw pixel data for the UV plane. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>UVpitch</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of bytes between rows of pixel data for the UV plane. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or -1 if the texture is not valid.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.16. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="639" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="639" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1af64adcd12e4e9d41d48031fd3da7b913" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_LockTexture</definition>
        <argsstring>(SDL_Texture *texture, const SDL_Rect *rect, void **pixels, int *pitch)</argsstring>
        <name>SDL_LockTexture</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref> *</type>
          <declname>texture</declname>
        </param>
        <param>
          <type>const <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> *</type>
          <declname>rect</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref> **</type>
          <declname>pixels</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>pitch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Lock a portion of the texture for <bold>write-only</bold> pixel access.</para>
<para>As an optimization, the pixels made available for editing don&apos;t necessarily contain the old texture data. This is a write-only operation, and if you need to keep a copy of the texture data you should do that at the application level.</para>
<para>You must use <ref refid="_s_d_l__render_8h_1a7fc9db6cde77fc9c95a4f65bc7d30073" kindref="member">SDL_UnlockTexture()</ref> to unlock the pixels and apply any changes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>texture</parametername>
</parameternamelist>
<parameterdescription>
<para>the texture to lock for access, which was created with <computeroutput>SDL_TEXTUREACCESS_STREAMING</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>an <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> structure representing the area to lock for access; NULL to lock the entire texture </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pixels</parametername>
</parameternamelist>
<parameterdescription>
<para>this is filled in with a pointer to the locked pixels, appropriately offset by the locked area </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pitch</parametername>
</parameternamelist>
<parameterdescription>
<para>this is filled in with the pitch of the locked pixels; the pitch is the length of one row in bytes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code if the texture is not valid or was not created with <computeroutput>SDL_TEXTUREACCESS_STREAMING</computeroutput>; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a7fc9db6cde77fc9c95a4f65bc7d30073" kindref="member">SDL_UnlockTexture</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="671" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="671" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1af1f12f5baf50ec8c86235dd4528a4e0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_LockTextureToSurface</definition>
        <argsstring>(SDL_Texture *texture, const SDL_Rect *rect, SDL_Surface **surface)</argsstring>
        <name>SDL_LockTextureToSurface</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref> *</type>
          <declname>texture</declname>
        </param>
        <param>
          <type>const <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> *</type>
          <declname>rect</declname>
        </param>
        <param>
          <type><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> **</type>
          <declname>surface</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Lock a portion of the texture for <bold>write-only</bold> pixel access, and expose it as a SDL surface.</para>
<para>Besides providing an <ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> instead of raw pixel data, this function operates like SDL_LockTexture.</para>
<para>As an optimization, the pixels made available for editing don&apos;t necessarily contain the old texture data. This is a write-only operation, and if you need to keep a copy of the texture data you should do that at the application level.</para>
<para>You must use <ref refid="_s_d_l__render_8h_1a7fc9db6cde77fc9c95a4f65bc7d30073" kindref="member">SDL_UnlockTexture()</ref> to unlock the pixels and apply any changes.</para>
<para>The returned surface is freed internally after calling <ref refid="_s_d_l__render_8h_1a7fc9db6cde77fc9c95a4f65bc7d30073" kindref="member">SDL_UnlockTexture()</ref> or <ref refid="_s_d_l__render_8h_1a078c0a925e24542d356a02183a306be6" kindref="member">SDL_DestroyTexture()</ref>. The caller should not free it.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>texture</parametername>
</parameternamelist>
<parameterdescription>
<para>the texture to lock for access, which was created with <computeroutput>SDL_TEXTUREACCESS_STREAMING</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to the rectangle to lock for access. If the rect is NULL, the entire texture will be locked </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>surface</parametername>
</parameternamelist>
<parameterdescription>
<para>this is filled in with an SDL surface representing the locked area </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or -1 if the texture is not valid or was not created with <computeroutput>SDL_TEXTUREACCESS_STREAMING</computeroutput></para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.12.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1af64adcd12e4e9d41d48031fd3da7b913" kindref="member">SDL_LockTexture</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a7fc9db6cde77fc9c95a4f65bc7d30073" kindref="member">SDL_UnlockTexture</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="707" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="707" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1a7fc9db6cde77fc9c95a4f65bc7d30073" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC void SDLCALL SDL_UnlockTexture</definition>
        <argsstring>(SDL_Texture *texture)</argsstring>
        <name>SDL_UnlockTexture</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref> *</type>
          <declname>texture</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unlock a texture, uploading the changes to video memory, if needed.</para>
<para><bold>Warning</bold>: Please note that <ref refid="_s_d_l__render_8h_1af64adcd12e4e9d41d48031fd3da7b913" kindref="member">SDL_LockTexture()</ref> is intended to be write-only; it will not guarantee the previous contents of the texture will be provided. You must fully initialize any area of a texture that you lock before unlocking it, as the pixels might otherwise be uninitialized memory.</para>
<para>Which is to say: locking and immediately unlocking a texture can result in corrupted textures, depending on the renderer in use.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>texture</parametername>
</parameternamelist>
<parameterdescription>
<para>a texture locked by <ref refid="_s_d_l__render_8h_1af64adcd12e4e9d41d48031fd3da7b913" kindref="member">SDL_LockTexture()</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1af64adcd12e4e9d41d48031fd3da7b913" kindref="member">SDL_LockTexture</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="728" column="30" declfile="D:/RayTracing/include/SDL_render.h" declline="728" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1a126c5e0fb7abb3aa1bbfe60ac0102857" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC SDL_bool SDLCALL SDL_RenderTargetSupported</definition>
        <argsstring>(SDL_Renderer *renderer)</argsstring>
        <name>SDL_RenderTargetSupported</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine whether a renderer supports the use of render targets.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para>the renderer that will be checked </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SDL_TRUE if supported or SDL_FALSE if not.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a2479163b0f2909cc50cef7af3c279000" kindref="member">SDL_SetRenderTarget</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="740" column="34" declfile="D:/RayTracing/include/SDL_render.h" declline="740" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1a2479163b0f2909cc50cef7af3c279000" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_SetRenderTarget</definition>
        <argsstring>(SDL_Renderer *renderer, SDL_Texture *texture)</argsstring>
        <name>SDL_SetRenderTarget</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref> *</type>
          <declname>texture</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set a texture as the current rendering target.</para>
<para>Before using this function, you should check the <computeroutput>SDL_RENDERER_TARGETTEXTURE</computeroutput> bit in the flags of <ref refid="struct_s_d_l___renderer_info" kindref="compound">SDL_RendererInfo</ref> to see if render targets are supported.</para>
<para>The default render target is the window for which the renderer was created. To stop rendering to a texture and render to the window again, call this function with a NULL <computeroutput>texture</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para>the rendering context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>texture</parametername>
</parameternamelist>
<parameterdescription>
<para>the targeted texture, which must be created with the <computeroutput>SDL_TEXTUREACCESS_TARGET</computeroutput> flag, or NULL to render to the window instead of a texture. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a130a89bac84d075c44c3e9814238a658" kindref="member">SDL_GetRenderTarget</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="764" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="764" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1a130a89bac84d075c44c3e9814238a658" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref> *<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC SDL_Texture *SDLCALL SDL_GetRenderTarget</definition>
        <argsstring>(SDL_Renderer *renderer)</argsstring>
        <name>SDL_GetRenderTarget</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the current render target.</para>
<para>The default render target is the window for which the renderer was created, and is reported a NULL here.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para>the rendering context </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the current render target or NULL for the default render target.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a2479163b0f2909cc50cef7af3c279000" kindref="member">SDL_SetRenderTarget</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="780" column="38" declfile="D:/RayTracing/include/SDL_render.h" declline="780" declcolumn="38"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1ad0596fd507c9bf9f8f9594cd9064860c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_RenderSetLogicalSize</definition>
        <argsstring>(SDL_Renderer *renderer, int w, int h)</argsstring>
        <name>SDL_RenderSetLogicalSize</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set a device independent resolution for rendering.</para>
<para>This function uses the viewport and scaling functionality to allow a fixed logical resolution for rendering, regardless of the actual output resolution. If the actual output resolution doesn&apos;t have the same aspect ratio the output rendering will be centered within the output display.</para>
<para>If the output display is a window, mouse and touch events in the window will be filtered and scaled so they seem to arrive within the logical resolution. The SDL_HINT_MOUSE_RELATIVE_SCALING hint controls whether relative motion events are also scaled.</para>
<para>If this function results in scaling or subpixel drawing by the rendering backend, it will be handled using the appropriate quality hints.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para>the renderer for which resolution should be set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>the width of the logical resolution </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>the height of the logical resolution </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1aa566ba52ac01bd13f6fdfcdfc3af217f" kindref="member">SDL_RenderGetLogicalSize</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="808" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="808" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1aa566ba52ac01bd13f6fdfcdfc3af217f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC void SDLCALL SDL_RenderGetLogicalSize</definition>
        <argsstring>(SDL_Renderer *renderer, int *w, int *h)</argsstring>
        <name>SDL_RenderGetLogicalSize</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get device independent resolution for rendering.</para>
<para>This may return 0 for <computeroutput>w</computeroutput> and <computeroutput>h</computeroutput> if the SDL_Renderer has never had its logical size set by <ref refid="_s_d_l__render_8h_1ad0596fd507c9bf9f8f9594cd9064860c" kindref="member">SDL_RenderSetLogicalSize()</ref> and never had a render target set.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para>a rendering context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>an int to be filled with the width </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>an int to be filled with the height</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1ad0596fd507c9bf9f8f9594cd9064860c" kindref="member">SDL_RenderSetLogicalSize</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="825" column="30" declfile="D:/RayTracing/include/SDL_render.h" declline="825" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1a62c3f8273280e5795075d2921d4ea30f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_RenderSetIntegerScale</definition>
        <argsstring>(SDL_Renderer *renderer, SDL_bool enable)</argsstring>
        <name>SDL_RenderSetIntegerScale</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref></type>
          <declname>enable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set whether to force integer scales for resolution-independent rendering.</para>
<para>This function restricts the logical viewport to integer values - that is, when a resolution is between two multiples of a logical size, the viewport size is rounded down to the lower multiple.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para>the renderer for which integer scaling should be set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>enable or disable the integer scaling for rendering </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.5.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a435c61d9f048550388198478e8fdeaa0" kindref="member">SDL_RenderGetIntegerScale</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1ad0596fd507c9bf9f8f9594cd9064860c" kindref="member">SDL_RenderSetLogicalSize</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="844" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="844" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1a435c61d9f048550388198478e8fdeaa0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC SDL_bool SDLCALL SDL_RenderGetIntegerScale</definition>
        <argsstring>(SDL_Renderer *renderer)</argsstring>
        <name>SDL_RenderGetIntegerScale</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get whether integer scales are forced for resolution-independent rendering.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para>the renderer from which integer scaling should be queried </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SDL_TRUE if integer scales are forced or SDL_FALSE if not and on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.5.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a62c3f8273280e5795075d2921d4ea30f" kindref="member">SDL_RenderSetIntegerScale</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="858" column="34" declfile="D:/RayTracing/include/SDL_render.h" declline="858" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1a27bad6dceb9d5e08d41506260dfc1c71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_RenderSetViewport</definition>
        <argsstring>(SDL_Renderer *renderer, const SDL_Rect *rect)</argsstring>
        <name>SDL_RenderSetViewport</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <param>
          <type>const <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> *</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the drawing area for rendering on the current target.</para>
<para>When the window is resized, the viewport is reset to fill the entire new window size.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para>the rendering context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> structure representing the drawing area, or NULL to set the viewport to the entire target </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a60a7a6cb31b64f9f13c923fe44ba4d6f" kindref="member">SDL_RenderGetViewport</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="876" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="876" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1a60a7a6cb31b64f9f13c923fe44ba4d6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC void SDLCALL SDL_RenderGetViewport</definition>
        <argsstring>(SDL_Renderer *renderer, SDL_Rect *rect)</argsstring>
        <name>SDL_RenderGetViewport</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <param>
          <type><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> *</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the drawing area for the current target.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para>the rendering context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>an <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> structure filled in with the current drawing area</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a27bad6dceb9d5e08d41506260dfc1c71" kindref="member">SDL_RenderSetViewport</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="889" column="30" declfile="D:/RayTracing/include/SDL_render.h" declline="889" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1a2788c24590fd26bcf0d5be2ffcb85c04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_RenderSetClipRect</definition>
        <argsstring>(SDL_Renderer *renderer, const SDL_Rect *rect)</argsstring>
        <name>SDL_RenderSetClipRect</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <param>
          <type>const <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> *</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the clip rectangle for rendering on the specified target.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para>the rendering context for which clip rectangle should be set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>an <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> structure representing the clip area, relative to the viewport, or NULL to disable clipping </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1af91e64e2b473a5eb7e93caf253fb760c" kindref="member">SDL_RenderGetClipRect</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1ab8125c772a65956fbb259389b6563523" kindref="member">SDL_RenderIsClipEnabled</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="907" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="907" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1af91e64e2b473a5eb7e93caf253fb760c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC void SDLCALL SDL_RenderGetClipRect</definition>
        <argsstring>(SDL_Renderer *renderer, SDL_Rect *rect)</argsstring>
        <name>SDL_RenderGetClipRect</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <param>
          <type><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> *</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the clip rectangle for the current target.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para>the rendering context from which clip rectangle should be queried </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>an <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> structure filled in with the current clipping area or an empty rectangle if clipping is disabled</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1ab8125c772a65956fbb259389b6563523" kindref="member">SDL_RenderIsClipEnabled</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a2788c24590fd26bcf0d5be2ffcb85c04" kindref="member">SDL_RenderSetClipRect</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="923" column="30" declfile="D:/RayTracing/include/SDL_render.h" declline="923" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1ab8125c772a65956fbb259389b6563523" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC SDL_bool SDLCALL SDL_RenderIsClipEnabled</definition>
        <argsstring>(SDL_Renderer *renderer)</argsstring>
        <name>SDL_RenderIsClipEnabled</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get whether clipping is enabled on the given renderer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para>the renderer from which clip state should be queried </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SDL_TRUE if clipping is enabled or SDL_FALSE if not; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.4.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1af91e64e2b473a5eb7e93caf253fb760c" kindref="member">SDL_RenderGetClipRect</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a2788c24590fd26bcf0d5be2ffcb85c04" kindref="member">SDL_RenderSetClipRect</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="938" column="34" declfile="D:/RayTracing/include/SDL_render.h" declline="938" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1aa52b062e271226c5ec8cdb8aa6dc69eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_RenderSetScale</definition>
        <argsstring>(SDL_Renderer *renderer, float scaleX, float scaleY)</argsstring>
        <name>SDL_RenderSetScale</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <param>
          <type>float</type>
          <declname>scaleX</declname>
        </param>
        <param>
          <type>float</type>
          <declname>scaleY</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the drawing scale for rendering on the current target.</para>
<para>The drawing coordinates are scaled by the x/y scaling factors before they are used by the renderer. This allows resolution independent drawing with a single coordinate system.</para>
<para>If this results in scaling or subpixel drawing by the rendering backend, it will be handled using the appropriate quality hints. For best results use integer scaling factors.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para>a rendering context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scaleX</parametername>
</parameternamelist>
<parameterdescription>
<para>the horizontal scaling factor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scaleY</parametername>
</parameternamelist>
<parameterdescription>
<para>the vertical scaling factor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a0271c4a8d32cacaff54de9aa7b5a797d" kindref="member">SDL_RenderGetScale</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1ad0596fd507c9bf9f8f9594cd9064860c" kindref="member">SDL_RenderSetLogicalSize</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="963" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="963" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1a0271c4a8d32cacaff54de9aa7b5a797d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC void SDLCALL SDL_RenderGetScale</definition>
        <argsstring>(SDL_Renderer *renderer, float *scaleX, float *scaleY)</argsstring>
        <name>SDL_RenderGetScale</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>scaleX</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>scaleY</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the drawing scale for the current target.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para>the renderer from which drawing scale should be queried </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scaleX</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer filled in with the horizontal scaling factor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scaleY</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer filled in with the vertical scaling factor</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1aa52b062e271226c5ec8cdb8aa6dc69eb" kindref="member">SDL_RenderSetScale</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="977" column="30" declfile="D:/RayTracing/include/SDL_render.h" declline="977" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1aa4497fd1ab833b5b6badd2a086603b19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC void SDLCALL SDL_RenderWindowToLogical</definition>
        <argsstring>(SDL_Renderer *renderer, int windowX, int windowY, float *logicalX, float *logicalY)</argsstring>
        <name>SDL_RenderWindowToLogical</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>windowX</declname>
        </param>
        <param>
          <type>int</type>
          <declname>windowY</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>logicalX</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>logicalY</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get logical coordinates of point in renderer when given real coordinates of point in window.</para>
<para>Logical coordinates will differ from real coordinates when render is scaled and logical renderer size set</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para>the renderer from which the logical coordinates should be calcualted </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>windowX</parametername>
</parameternamelist>
<parameterdescription>
<para>the real X coordinate in the window </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>windowY</parametername>
</parameternamelist>
<parameterdescription>
<para>the real Y coordinate in the window </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>logicalX</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer filled with the logical x coordinate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>logicalY</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer filled with the logical y coordinate</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>This function is available since SDL 2.0.18.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a0271c4a8d32cacaff54de9aa7b5a797d" kindref="member">SDL_RenderGetScale</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1aa52b062e271226c5ec8cdb8aa6dc69eb" kindref="member">SDL_RenderSetScale</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1aa566ba52ac01bd13f6fdfcdfc3af217f" kindref="member">SDL_RenderGetLogicalSize</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1ad0596fd507c9bf9f8f9594cd9064860c" kindref="member">SDL_RenderSetLogicalSize</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="1001" column="30" declfile="D:/RayTracing/include/SDL_render.h" declline="1001" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1ae0a927b5b2d8c797dfa06e4226a5c840" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC void SDLCALL SDL_RenderLogicalToWindow</definition>
        <argsstring>(SDL_Renderer *renderer, float logicalX, float logicalY, int *windowX, int *windowY)</argsstring>
        <name>SDL_RenderLogicalToWindow</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <param>
          <type>float</type>
          <declname>logicalX</declname>
        </param>
        <param>
          <type>float</type>
          <declname>logicalY</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>windowX</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>windowY</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get real coordinates of point in window when given logical coordinates of point in renderer. Logical coordinates will differ from real coordinates when render is scaled and logical renderer size set</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para>the renderer from which the window coordinates should be calculated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>logicalX</parametername>
</parameternamelist>
<parameterdescription>
<para>the logical x coordinate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>logicalY</parametername>
</parameternamelist>
<parameterdescription>
<para>the logical y coordinate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>windowX</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer filled with the real X coordinate in the window </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>windowY</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer filled with the real Y coordinate in the window</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>This function is available since SDL 2.0.18.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a0271c4a8d32cacaff54de9aa7b5a797d" kindref="member">SDL_RenderGetScale</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1aa52b062e271226c5ec8cdb8aa6dc69eb" kindref="member">SDL_RenderSetScale</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1aa566ba52ac01bd13f6fdfcdfc3af217f" kindref="member">SDL_RenderGetLogicalSize</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1ad0596fd507c9bf9f8f9594cd9064860c" kindref="member">SDL_RenderSetLogicalSize</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="1023" column="30" declfile="D:/RayTracing/include/SDL_render.h" declline="1023" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1aa26234da40f87f4b16d715564242a341" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_SetRenderDrawColor</definition>
        <argsstring>(SDL_Renderer *renderer, Uint8 r, Uint8 g, Uint8 b, Uint8 a)</argsstring>
        <name>SDL_SetRenderDrawColor</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref></type>
          <declname>g</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref></type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the color used for drawing operations (Rect, Line and Clear).</para>
<para>Set the color for drawing or filling rectangles, lines, and points, and for <ref refid="_s_d_l__render_8h_1a473b4abbb29c60e98876eb68ad850f79" kindref="member">SDL_RenderClear()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para>the rendering context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>the red value used to draw on the rendering target </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the green value used to draw on the rendering target </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>the blue value used to draw on the rendering target </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>the alpha value used to draw on the rendering target; usually <computeroutput>SDL_ALPHA_OPAQUE</computeroutput> (255). Use SDL_SetRenderDrawBlendMode to specify how the alpha channel is used </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a1b8e6544c3fc23ddd9b0f0bfb14cef39" kindref="member">SDL_GetRenderDrawColor</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a473b4abbb29c60e98876eb68ad850f79" kindref="member">SDL_RenderClear</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a6d50e252f15e0c6c14639bdd343285fd" kindref="member">SDL_RenderDrawLine</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a556f150677bb965448b7b361bceb7a76" kindref="member">SDL_RenderDrawLines</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1ab576a09c91675dbd8dba9d05dd2fc0bc" kindref="member">SDL_RenderDrawPoint</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a8ff1a991e7a2599cfc9ea43dfa920d0b" kindref="member">SDL_RenderDrawPoints</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1ab2a89b5a0c25adb6abdb9aeff28f177c" kindref="member">SDL_RenderDrawRect</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1ae56460fe1b478a55916650e695145cbf" kindref="member">SDL_RenderDrawRects</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a3b5098c1944441034d2c5cff419f93cc" kindref="member">SDL_RenderFillRect</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a987fe30e64168702f1dfa6407fbe8bec" kindref="member">SDL_RenderFillRects</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="1056" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="1056" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1a1b8e6544c3fc23ddd9b0f0bfb14cef39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_GetRenderDrawColor</definition>
        <argsstring>(SDL_Renderer *renderer, Uint8 *r, Uint8 *g, Uint8 *b, Uint8 *a)</argsstring>
        <name>SDL_GetRenderDrawColor</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the color used for drawing operations (Rect, Line and Clear).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para>the rendering context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer filled in with the red value used to draw on the rendering target </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer filled in with the green value used to draw on the rendering target </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer filled in with the blue value used to draw on the rendering target </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer filled in with the alpha value used to draw on the rendering target; usually <computeroutput>SDL_ALPHA_OPAQUE</computeroutput> (255) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1aa26234da40f87f4b16d715564242a341" kindref="member">SDL_SetRenderDrawColor</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="1079" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="1079" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1a37e6e440b995756c9cc8a20fe3ca2385" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_SetRenderDrawBlendMode</definition>
        <argsstring>(SDL_Renderer *renderer, SDL_BlendMode blendMode)</argsstring>
        <name>SDL_SetRenderDrawBlendMode</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__blendmode_8h_1a850d3c67a878fd6698a1c8dbb1eabf1e" kindref="member">SDL_BlendMode</ref></type>
          <declname>blendMode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the blend mode used for drawing operations (Fill and Line).</para>
<para>If the blend mode is not supported, the closest supported mode is chosen.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para>the rendering context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blendMode</parametername>
</parameternamelist>
<parameterdescription>
<para>the SDL_BlendMode to use for blending </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a384109767532e9703652233571a0d3cf" kindref="member">SDL_GetRenderDrawBlendMode</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a6d50e252f15e0c6c14639bdd343285fd" kindref="member">SDL_RenderDrawLine</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a556f150677bb965448b7b361bceb7a76" kindref="member">SDL_RenderDrawLines</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1ab576a09c91675dbd8dba9d05dd2fc0bc" kindref="member">SDL_RenderDrawPoint</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a8ff1a991e7a2599cfc9ea43dfa920d0b" kindref="member">SDL_RenderDrawPoints</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1ab2a89b5a0c25adb6abdb9aeff28f177c" kindref="member">SDL_RenderDrawRect</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1ae56460fe1b478a55916650e695145cbf" kindref="member">SDL_RenderDrawRects</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a3b5098c1944441034d2c5cff419f93cc" kindref="member">SDL_RenderFillRect</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a987fe30e64168702f1dfa6407fbe8bec" kindref="member">SDL_RenderFillRects</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="1105" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="1105" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1a384109767532e9703652233571a0d3cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_GetRenderDrawBlendMode</definition>
        <argsstring>(SDL_Renderer *renderer, SDL_BlendMode *blendMode)</argsstring>
        <name>SDL_GetRenderDrawBlendMode</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__blendmode_8h_1a850d3c67a878fd6698a1c8dbb1eabf1e" kindref="member">SDL_BlendMode</ref> *</type>
          <declname>blendMode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the blend mode used for drawing operations.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para>the rendering context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blendMode</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer filled in with the current SDL_BlendMode </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a37e6e440b995756c9cc8a20fe3ca2385" kindref="member">SDL_SetRenderDrawBlendMode</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="1120" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="1120" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1a473b4abbb29c60e98876eb68ad850f79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_RenderClear</definition>
        <argsstring>(SDL_Renderer *renderer)</argsstring>
        <name>SDL_RenderClear</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clear the current rendering target with the drawing color.</para>
<para>This function clears the entire rendering target, ignoring the viewport and the clip rectangle.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para>the rendering context </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1aa26234da40f87f4b16d715564242a341" kindref="member">SDL_SetRenderDrawColor</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="1137" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="1137" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1ab576a09c91675dbd8dba9d05dd2fc0bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_RenderDrawPoint</definition>
        <argsstring>(SDL_Renderer *renderer, int x, int y)</argsstring>
        <name>SDL_RenderDrawPoint</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Draw a point on the current rendering target.</para>
<para><ref refid="_s_d_l__render_8h_1ab576a09c91675dbd8dba9d05dd2fc0bc" kindref="member">SDL_RenderDrawPoint()</ref> draws a single point. If you want to draw multiple, use <ref refid="_s_d_l__render_8h_1a8ff1a991e7a2599cfc9ea43dfa920d0b" kindref="member">SDL_RenderDrawPoints()</ref> instead.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para>the rendering context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x coordinate of the point </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y coordinate of the point </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a6d50e252f15e0c6c14639bdd343285fd" kindref="member">SDL_RenderDrawLine</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a556f150677bb965448b7b361bceb7a76" kindref="member">SDL_RenderDrawLines</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a8ff1a991e7a2599cfc9ea43dfa920d0b" kindref="member">SDL_RenderDrawPoints</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1ab2a89b5a0c25adb6abdb9aeff28f177c" kindref="member">SDL_RenderDrawRect</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1ae56460fe1b478a55916650e695145cbf" kindref="member">SDL_RenderDrawRects</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a3b5098c1944441034d2c5cff419f93cc" kindref="member">SDL_RenderFillRect</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a987fe30e64168702f1dfa6407fbe8bec" kindref="member">SDL_RenderFillRects</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a48fa9d24395f3610746988ecca2aae86" kindref="member">SDL_RenderPresent</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a37e6e440b995756c9cc8a20fe3ca2385" kindref="member">SDL_SetRenderDrawBlendMode</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1aa26234da40f87f4b16d715564242a341" kindref="member">SDL_SetRenderDrawColor</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="1164" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="1164" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1a8ff1a991e7a2599cfc9ea43dfa920d0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_RenderDrawPoints</definition>
        <argsstring>(SDL_Renderer *renderer, const SDL_Point *points, int count)</argsstring>
        <name>SDL_RenderDrawPoints</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <param>
          <type>const <ref refid="struct_s_d_l___point" kindref="compound">SDL_Point</ref> *</type>
          <declname>points</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Draw multiple points on the current rendering target.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para>the rendering context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>an array of <ref refid="struct_s_d_l___point" kindref="compound">SDL_Point</ref> structures that represent the points to draw </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of points to draw </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a6d50e252f15e0c6c14639bdd343285fd" kindref="member">SDL_RenderDrawLine</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a556f150677bb965448b7b361bceb7a76" kindref="member">SDL_RenderDrawLines</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1ab576a09c91675dbd8dba9d05dd2fc0bc" kindref="member">SDL_RenderDrawPoint</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1ab2a89b5a0c25adb6abdb9aeff28f177c" kindref="member">SDL_RenderDrawRect</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1ae56460fe1b478a55916650e695145cbf" kindref="member">SDL_RenderDrawRects</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a3b5098c1944441034d2c5cff419f93cc" kindref="member">SDL_RenderFillRect</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a987fe30e64168702f1dfa6407fbe8bec" kindref="member">SDL_RenderFillRects</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a48fa9d24395f3610746988ecca2aae86" kindref="member">SDL_RenderPresent</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a37e6e440b995756c9cc8a20fe3ca2385" kindref="member">SDL_SetRenderDrawBlendMode</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1aa26234da40f87f4b16d715564242a341" kindref="member">SDL_SetRenderDrawColor</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="1190" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="1190" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1a6d50e252f15e0c6c14639bdd343285fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_RenderDrawLine</definition>
        <argsstring>(SDL_Renderer *renderer, int x1, int y1, int x2, int y2)</argsstring>
        <name>SDL_RenderDrawLine</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Draw a line on the current rendering target.</para>
<para><ref refid="_s_d_l__render_8h_1a6d50e252f15e0c6c14639bdd343285fd" kindref="member">SDL_RenderDrawLine()</ref> draws the line to include both end points. If you want to draw multiple, connecting lines use <ref refid="_s_d_l__render_8h_1a556f150677bb965448b7b361bceb7a76" kindref="member">SDL_RenderDrawLines()</ref> instead.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para>the rendering context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x1</parametername>
</parameternamelist>
<parameterdescription>
<para>the x coordinate of the start point </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y1</parametername>
</parameternamelist>
<parameterdescription>
<para>the y coordinate of the start point </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x2</parametername>
</parameternamelist>
<parameterdescription>
<para>the x coordinate of the end point </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y2</parametername>
</parameternamelist>
<parameterdescription>
<para>the y coordinate of the end point </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a556f150677bb965448b7b361bceb7a76" kindref="member">SDL_RenderDrawLines</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1ab576a09c91675dbd8dba9d05dd2fc0bc" kindref="member">SDL_RenderDrawPoint</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a8ff1a991e7a2599cfc9ea43dfa920d0b" kindref="member">SDL_RenderDrawPoints</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1ab2a89b5a0c25adb6abdb9aeff28f177c" kindref="member">SDL_RenderDrawRect</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1ae56460fe1b478a55916650e695145cbf" kindref="member">SDL_RenderDrawRects</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a3b5098c1944441034d2c5cff419f93cc" kindref="member">SDL_RenderFillRect</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a987fe30e64168702f1dfa6407fbe8bec" kindref="member">SDL_RenderFillRects</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a48fa9d24395f3610746988ecca2aae86" kindref="member">SDL_RenderPresent</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a37e6e440b995756c9cc8a20fe3ca2385" kindref="member">SDL_SetRenderDrawBlendMode</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1aa26234da40f87f4b16d715564242a341" kindref="member">SDL_SetRenderDrawColor</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="1221" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="1221" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1a556f150677bb965448b7b361bceb7a76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_RenderDrawLines</definition>
        <argsstring>(SDL_Renderer *renderer, const SDL_Point *points, int count)</argsstring>
        <name>SDL_RenderDrawLines</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <param>
          <type>const <ref refid="struct_s_d_l___point" kindref="compound">SDL_Point</ref> *</type>
          <declname>points</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Draw a series of connected lines on the current rendering target.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para>the rendering context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>an array of <ref refid="struct_s_d_l___point" kindref="compound">SDL_Point</ref> structures representing points along the lines </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of points, drawing count-1 lines </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a6d50e252f15e0c6c14639bdd343285fd" kindref="member">SDL_RenderDrawLine</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1ab576a09c91675dbd8dba9d05dd2fc0bc" kindref="member">SDL_RenderDrawPoint</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a8ff1a991e7a2599cfc9ea43dfa920d0b" kindref="member">SDL_RenderDrawPoints</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1ab2a89b5a0c25adb6abdb9aeff28f177c" kindref="member">SDL_RenderDrawRect</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1ae56460fe1b478a55916650e695145cbf" kindref="member">SDL_RenderDrawRects</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a3b5098c1944441034d2c5cff419f93cc" kindref="member">SDL_RenderFillRect</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a987fe30e64168702f1dfa6407fbe8bec" kindref="member">SDL_RenderFillRects</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a48fa9d24395f3610746988ecca2aae86" kindref="member">SDL_RenderPresent</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a37e6e440b995756c9cc8a20fe3ca2385" kindref="member">SDL_SetRenderDrawBlendMode</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1aa26234da40f87f4b16d715564242a341" kindref="member">SDL_SetRenderDrawColor</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="1247" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="1247" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1ab2a89b5a0c25adb6abdb9aeff28f177c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_RenderDrawRect</definition>
        <argsstring>(SDL_Renderer *renderer, const SDL_Rect *rect)</argsstring>
        <name>SDL_RenderDrawRect</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <param>
          <type>const <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> *</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Draw a rectangle on the current rendering target.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para>the rendering context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>an <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> structure representing the rectangle to draw, or NULL to outline the entire rendering target </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a6d50e252f15e0c6c14639bdd343285fd" kindref="member">SDL_RenderDrawLine</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a556f150677bb965448b7b361bceb7a76" kindref="member">SDL_RenderDrawLines</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1ab576a09c91675dbd8dba9d05dd2fc0bc" kindref="member">SDL_RenderDrawPoint</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a8ff1a991e7a2599cfc9ea43dfa920d0b" kindref="member">SDL_RenderDrawPoints</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1ae56460fe1b478a55916650e695145cbf" kindref="member">SDL_RenderDrawRects</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a3b5098c1944441034d2c5cff419f93cc" kindref="member">SDL_RenderFillRect</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a987fe30e64168702f1dfa6407fbe8bec" kindref="member">SDL_RenderFillRects</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a48fa9d24395f3610746988ecca2aae86" kindref="member">SDL_RenderPresent</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a37e6e440b995756c9cc8a20fe3ca2385" kindref="member">SDL_SetRenderDrawBlendMode</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1aa26234da40f87f4b16d715564242a341" kindref="member">SDL_SetRenderDrawColor</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="1273" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="1273" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1ae56460fe1b478a55916650e695145cbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_RenderDrawRects</definition>
        <argsstring>(SDL_Renderer *renderer, const SDL_Rect *rects, int count)</argsstring>
        <name>SDL_RenderDrawRects</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <param>
          <type>const <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> *</type>
          <declname>rects</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Draw some number of rectangles on the current rendering target.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para>the rendering context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rects</parametername>
</parameternamelist>
<parameterdescription>
<para>an array of <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> structures representing the rectangles to be drawn </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of rectangles </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a6d50e252f15e0c6c14639bdd343285fd" kindref="member">SDL_RenderDrawLine</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a556f150677bb965448b7b361bceb7a76" kindref="member">SDL_RenderDrawLines</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1ab576a09c91675dbd8dba9d05dd2fc0bc" kindref="member">SDL_RenderDrawPoint</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a8ff1a991e7a2599cfc9ea43dfa920d0b" kindref="member">SDL_RenderDrawPoints</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1ab2a89b5a0c25adb6abdb9aeff28f177c" kindref="member">SDL_RenderDrawRect</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a3b5098c1944441034d2c5cff419f93cc" kindref="member">SDL_RenderFillRect</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a987fe30e64168702f1dfa6407fbe8bec" kindref="member">SDL_RenderFillRects</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a48fa9d24395f3610746988ecca2aae86" kindref="member">SDL_RenderPresent</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a37e6e440b995756c9cc8a20fe3ca2385" kindref="member">SDL_SetRenderDrawBlendMode</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1aa26234da40f87f4b16d715564242a341" kindref="member">SDL_SetRenderDrawColor</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="1299" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="1299" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1a3b5098c1944441034d2c5cff419f93cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_RenderFillRect</definition>
        <argsstring>(SDL_Renderer *renderer, const SDL_Rect *rect)</argsstring>
        <name>SDL_RenderFillRect</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <param>
          <type>const <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> *</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fill a rectangle on the current rendering target with the drawing color.</para>
<para>The current drawing color is set by <ref refid="_s_d_l__render_8h_1aa26234da40f87f4b16d715564242a341" kindref="member">SDL_SetRenderDrawColor()</ref>, and the color&apos;s alpha value is ignored unless blending is enabled with the appropriate call to <ref refid="_s_d_l__render_8h_1a37e6e440b995756c9cc8a20fe3ca2385" kindref="member">SDL_SetRenderDrawBlendMode()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para>the rendering context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> structure representing the rectangle to fill, or NULL for the entire rendering target </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a6d50e252f15e0c6c14639bdd343285fd" kindref="member">SDL_RenderDrawLine</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a556f150677bb965448b7b361bceb7a76" kindref="member">SDL_RenderDrawLines</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1ab576a09c91675dbd8dba9d05dd2fc0bc" kindref="member">SDL_RenderDrawPoint</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a8ff1a991e7a2599cfc9ea43dfa920d0b" kindref="member">SDL_RenderDrawPoints</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1ab2a89b5a0c25adb6abdb9aeff28f177c" kindref="member">SDL_RenderDrawRect</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1ae56460fe1b478a55916650e695145cbf" kindref="member">SDL_RenderDrawRects</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a987fe30e64168702f1dfa6407fbe8bec" kindref="member">SDL_RenderFillRects</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a48fa9d24395f3610746988ecca2aae86" kindref="member">SDL_RenderPresent</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a37e6e440b995756c9cc8a20fe3ca2385" kindref="member">SDL_SetRenderDrawBlendMode</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1aa26234da40f87f4b16d715564242a341" kindref="member">SDL_SetRenderDrawColor</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="1329" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="1329" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1a987fe30e64168702f1dfa6407fbe8bec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_RenderFillRects</definition>
        <argsstring>(SDL_Renderer *renderer, const SDL_Rect *rects, int count)</argsstring>
        <name>SDL_RenderFillRects</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <param>
          <type>const <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> *</type>
          <declname>rects</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fill some number of rectangles on the current rendering target with the drawing color.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para>the rendering context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rects</parametername>
</parameternamelist>
<parameterdescription>
<para>an array of <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> structures representing the rectangles to be filled </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of rectangles </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a6d50e252f15e0c6c14639bdd343285fd" kindref="member">SDL_RenderDrawLine</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a556f150677bb965448b7b361bceb7a76" kindref="member">SDL_RenderDrawLines</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1ab576a09c91675dbd8dba9d05dd2fc0bc" kindref="member">SDL_RenderDrawPoint</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a8ff1a991e7a2599cfc9ea43dfa920d0b" kindref="member">SDL_RenderDrawPoints</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1ab2a89b5a0c25adb6abdb9aeff28f177c" kindref="member">SDL_RenderDrawRect</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1ae56460fe1b478a55916650e695145cbf" kindref="member">SDL_RenderDrawRects</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a3b5098c1944441034d2c5cff419f93cc" kindref="member">SDL_RenderFillRect</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a48fa9d24395f3610746988ecca2aae86" kindref="member">SDL_RenderPresent</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="1354" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="1354" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1a4b6c2353384c7b7128fd5960b24f2ae6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_RenderCopy</definition>
        <argsstring>(SDL_Renderer *renderer, SDL_Texture *texture, const SDL_Rect *srcrect, const SDL_Rect *dstrect)</argsstring>
        <name>SDL_RenderCopy</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref> *</type>
          <declname>texture</declname>
        </param>
        <param>
          <type>const <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> *</type>
          <declname>srcrect</declname>
        </param>
        <param>
          <type>const <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> *</type>
          <declname>dstrect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy a portion of the texture to the current rendering target.</para>
<para>The texture is blended with the destination based on its blend mode set with <ref refid="_s_d_l__render_8h_1af8b9cb77ca18f76c18f39d29ed960de8" kindref="member">SDL_SetTextureBlendMode()</ref>.</para>
<para>The texture color is affected based on its color modulation set by <ref refid="_s_d_l__render_8h_1a348399db33c03a7882cef0c6e6c1756f" kindref="member">SDL_SetTextureColorMod()</ref>.</para>
<para>The texture alpha is affected based on its alpha modulation set by <ref refid="_s_d_l__render_8h_1a1cc3302a4c7fb3b37e8fd5263a80758b" kindref="member">SDL_SetTextureAlphaMod()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para>the rendering context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>texture</parametername>
</parameternamelist>
<parameterdescription>
<para>the source texture </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srcrect</parametername>
</parameternamelist>
<parameterdescription>
<para>the source <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> structure or NULL for the entire texture </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dstrect</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> structure or NULL for the entire rendering target; the texture will be stretched to fill the given rectangle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1ac2c665c1ce910413272a004cdb52e28e" kindref="member">SDL_RenderCopyEx</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a1cc3302a4c7fb3b37e8fd5263a80758b" kindref="member">SDL_SetTextureAlphaMod</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1af8b9cb77ca18f76c18f39d29ed960de8" kindref="member">SDL_SetTextureBlendMode</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a348399db33c03a7882cef0c6e6c1756f" kindref="member">SDL_SetTextureColorMod</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="1386" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="1386" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1ac2c665c1ce910413272a004cdb52e28e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_RenderCopyEx</definition>
        <argsstring>(SDL_Renderer *renderer, SDL_Texture *texture, const SDL_Rect *srcrect, const SDL_Rect *dstrect, const double angle, const SDL_Point *center, const SDL_RendererFlip flip)</argsstring>
        <name>SDL_RenderCopyEx</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref> *</type>
          <declname>texture</declname>
        </param>
        <param>
          <type>const <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> *</type>
          <declname>srcrect</declname>
        </param>
        <param>
          <type>const <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> *</type>
          <declname>dstrect</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>const <ref refid="struct_s_d_l___point" kindref="compound">SDL_Point</ref> *</type>
          <declname>center</declname>
        </param>
        <param>
          <type>const <ref refid="_s_d_l__render_8h_1a6280e56838e0e684caa0869c7c973c12" kindref="member">SDL_RendererFlip</ref></type>
          <declname>flip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy a portion of the texture to the current rendering, with optional rotation and flipping.</para>
<para>Copy a portion of the texture to the current rendering target, optionally rotating it by angle around the given center and also flipping it top-bottom and/or left-right.</para>
<para>The texture is blended with the destination based on its blend mode set with <ref refid="_s_d_l__render_8h_1af8b9cb77ca18f76c18f39d29ed960de8" kindref="member">SDL_SetTextureBlendMode()</ref>.</para>
<para>The texture color is affected based on its color modulation set by <ref refid="_s_d_l__render_8h_1a348399db33c03a7882cef0c6e6c1756f" kindref="member">SDL_SetTextureColorMod()</ref>.</para>
<para>The texture alpha is affected based on its alpha modulation set by <ref refid="_s_d_l__render_8h_1a1cc3302a4c7fb3b37e8fd5263a80758b" kindref="member">SDL_SetTextureAlphaMod()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para>the rendering context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>texture</parametername>
</parameternamelist>
<parameterdescription>
<para>the source texture </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srcrect</parametername>
</parameternamelist>
<parameterdescription>
<para>the source <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> structure or NULL for the entire texture </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dstrect</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> structure or NULL for the entire rendering target </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>an angle in degrees that indicates the rotation that will be applied to dstrect, rotating it in a clockwise direction </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>center</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to a point indicating the point around which dstrect will be rotated (if NULL, rotation will be done around <computeroutput>dstrect.w / 2</computeroutput>, <computeroutput>dstrect.h / 2</computeroutput>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flip</parametername>
</parameternamelist>
<parameterdescription>
<para>a SDL_RendererFlip value stating which flipping actions should be performed on the texture </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a4b6c2353384c7b7128fd5960b24f2ae6" kindref="member">SDL_RenderCopy</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a1cc3302a4c7fb3b37e8fd5263a80758b" kindref="member">SDL_SetTextureAlphaMod</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1af8b9cb77ca18f76c18f39d29ed960de8" kindref="member">SDL_SetTextureBlendMode</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a348399db33c03a7882cef0c6e6c1756f" kindref="member">SDL_SetTextureColorMod</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="1430" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="1430" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1aa62bd2597d5a7650e7ad666c2a15e688" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_RenderDrawPointF</definition>
        <argsstring>(SDL_Renderer *renderer, float x, float y)</argsstring>
        <name>SDL_RenderDrawPointF</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Draw a point on the current rendering target at subpixel precision.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para>The renderer which should draw a point. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The x coordinate of the point. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The y coordinate of the point. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or -1 on error</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.10. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="1449" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="1449" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1a94cef2f19a261a175e3a748dd95bec69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_RenderDrawPointsF</definition>
        <argsstring>(SDL_Renderer *renderer, const SDL_FPoint *points, int count)</argsstring>
        <name>SDL_RenderDrawPointsF</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <param>
          <type>const <ref refid="struct_s_d_l___f_point" kindref="compound">SDL_FPoint</ref> *</type>
          <declname>points</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Draw multiple points on the current rendering target at subpixel precision.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para>The renderer which should draw multiple points. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>The points to draw </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of points to draw </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or -1 on error</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.10. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="1462" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="1462" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1a05ad434757513f4b98de29aaee8f70e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_RenderDrawLineF</definition>
        <argsstring>(SDL_Renderer *renderer, float x1, float y1, float x2, float y2)</argsstring>
        <name>SDL_RenderDrawLineF</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <param>
          <type>float</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>float</type>
          <declname>x2</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Draw a line on the current rendering target at subpixel precision.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para>The renderer which should draw a line. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x1</parametername>
</parameternamelist>
<parameterdescription>
<para>The x coordinate of the start point. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y1</parametername>
</parameternamelist>
<parameterdescription>
<para>The y coordinate of the start point. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x2</parametername>
</parameternamelist>
<parameterdescription>
<para>The x coordinate of the end point. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y2</parametername>
</parameternamelist>
<parameterdescription>
<para>The y coordinate of the end point. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or -1 on error</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.10. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="1478" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="1478" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1a60727a3df49c84428e486cc067107406" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_RenderDrawLinesF</definition>
        <argsstring>(SDL_Renderer *renderer, const SDL_FPoint *points, int count)</argsstring>
        <name>SDL_RenderDrawLinesF</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <param>
          <type>const <ref refid="struct_s_d_l___f_point" kindref="compound">SDL_FPoint</ref> *</type>
          <declname>points</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Draw a series of connected lines on the current rendering target at subpixel precision.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para>The renderer which should draw multiple lines. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>The points along the lines </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of points, drawing count-1 lines </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or -1 on error</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.10. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="1492" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="1492" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1ae6ca4e63fe1189d44a42eb831c4f9dc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_RenderDrawRectF</definition>
        <argsstring>(SDL_Renderer *renderer, const SDL_FRect *rect)</argsstring>
        <name>SDL_RenderDrawRectF</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <param>
          <type>const <ref refid="struct_s_d_l___f_rect" kindref="compound">SDL_FRect</ref> *</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Draw a rectangle on the current rendering target at subpixel precision.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para>The renderer which should draw a rectangle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the destination rectangle, or NULL to outline the entire rendering target. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or -1 on error</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.10. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="1506" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="1506" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1ac0be470fecfd02a348d017ef4dcac2e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_RenderDrawRectsF</definition>
        <argsstring>(SDL_Renderer *renderer, const SDL_FRect *rects, int count)</argsstring>
        <name>SDL_RenderDrawRectsF</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <param>
          <type>const <ref refid="struct_s_d_l___f_rect" kindref="compound">SDL_FRect</ref> *</type>
          <declname>rects</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Draw some number of rectangles on the current rendering target at subpixel precision.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para>The renderer which should draw multiple rectangles. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rects</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an array of destination rectangles. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of rectangles. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or -1 on error</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.10. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="1520" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="1520" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1afc08075c669fffd2ab7808ffedad3edc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_RenderFillRectF</definition>
        <argsstring>(SDL_Renderer *renderer, const SDL_FRect *rect)</argsstring>
        <name>SDL_RenderFillRectF</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <param>
          <type>const <ref refid="struct_s_d_l___f_rect" kindref="compound">SDL_FRect</ref> *</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fill a rectangle on the current rendering target with the drawing color at subpixel precision.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para>The renderer which should fill a rectangle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the destination rectangle, or NULL for the entire rendering target. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or -1 on error</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.10. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="1535" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="1535" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1a599b48b93c5f6e55f7c12c766205f8a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_RenderFillRectsF</definition>
        <argsstring>(SDL_Renderer *renderer, const SDL_FRect *rects, int count)</argsstring>
        <name>SDL_RenderFillRectsF</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <param>
          <type>const <ref refid="struct_s_d_l___f_rect" kindref="compound">SDL_FRect</ref> *</type>
          <declname>rects</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fill some number of rectangles on the current rendering target with the drawing color at subpixel precision.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para>The renderer which should fill multiple rectangles. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rects</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an array of destination rectangles. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of rectangles. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or -1 on error</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.10. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="1549" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="1549" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1a4514e3254853776f9c5202d8808e5354" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_RenderCopyF</definition>
        <argsstring>(SDL_Renderer *renderer, SDL_Texture *texture, const SDL_Rect *srcrect, const SDL_FRect *dstrect)</argsstring>
        <name>SDL_RenderCopyF</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref> *</type>
          <declname>texture</declname>
        </param>
        <param>
          <type>const <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> *</type>
          <declname>srcrect</declname>
        </param>
        <param>
          <type>const <ref refid="struct_s_d_l___f_rect" kindref="compound">SDL_FRect</ref> *</type>
          <declname>dstrect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy a portion of the texture to the current rendering target at subpixel precision.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para>The renderer which should copy parts of a texture. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>texture</parametername>
</parameternamelist>
<parameterdescription>
<para>The source texture. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srcrect</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the source rectangle, or NULL for the entire texture. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dstrect</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the destination rectangle, or NULL for the entire rendering target. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or -1 on error</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.10. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="1567" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="1567" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1ac7f9810c9b14afb97cd9b0bbc68ac73d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_RenderCopyExF</definition>
        <argsstring>(SDL_Renderer *renderer, SDL_Texture *texture, const SDL_Rect *srcrect, const SDL_FRect *dstrect, const double angle, const SDL_FPoint *center, const SDL_RendererFlip flip)</argsstring>
        <name>SDL_RenderCopyExF</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref> *</type>
          <declname>texture</declname>
        </param>
        <param>
          <type>const <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> *</type>
          <declname>srcrect</declname>
        </param>
        <param>
          <type>const <ref refid="struct_s_d_l___f_rect" kindref="compound">SDL_FRect</ref> *</type>
          <declname>dstrect</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>const <ref refid="struct_s_d_l___f_point" kindref="compound">SDL_FPoint</ref> *</type>
          <declname>center</declname>
        </param>
        <param>
          <type>const <ref refid="_s_d_l__render_8h_1a6280e56838e0e684caa0869c7c973c12" kindref="member">SDL_RendererFlip</ref></type>
          <declname>flip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy a portion of the source texture to the current rendering target, with rotation and flipping, at subpixel precision.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para>The renderer which should copy parts of a texture. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>texture</parametername>
</parameternamelist>
<parameterdescription>
<para>The source texture. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srcrect</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the source rectangle, or NULL for the entire texture. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dstrect</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the destination rectangle, or NULL for the entire rendering target. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>An angle in degrees that indicates the rotation that will be applied to dstrect, rotating it in a clockwise direction </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>center</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a point indicating the point around which dstrect will be rotated (if NULL, rotation will be done around dstrect.w/2, dstrect.h/2). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flip</parametername>
</parameternamelist>
<parameterdescription>
<para>An SDL_RendererFlip value stating which flipping actions should be performed on the texture </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or -1 on error</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.10. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="1593" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="1593" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1a7b2ac666852256d171a50e3af815a910" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_RenderGeometry</definition>
        <argsstring>(SDL_Renderer *renderer, SDL_Texture *texture, const SDL_Vertex *vertices, int num_vertices, const int *indices, int num_indices)</argsstring>
        <name>SDL_RenderGeometry</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref> *</type>
          <declname>texture</declname>
        </param>
        <param>
          <type>const <ref refid="struct_s_d_l___vertex" kindref="compound">SDL_Vertex</ref> *</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_vertices</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_indices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Render a list of triangles, optionally using a texture and indices into the vertex array Color and alpha modulation is done per vertex (SDL_SetTextureColorMod and SDL_SetTextureAlphaMod are ignored).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>texture</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) The SDL texture to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertices</parametername>
</parameternamelist>
<parameterdescription>
<para>Vertices. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_vertices</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of vertices. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>indices</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) An array of integer indices into the &apos;vertices&apos; array, if NULL all vertices will be rendered in sequential order. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_indices</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of indices. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or -1 if the operation is not supported</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.18.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a7b20020e712422db59f9e76be9abc04f" kindref="member">SDL_RenderGeometryRaw</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="struct_s_d_l___vertex" kindref="compound">SDL_Vertex</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="1620" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="1620" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1a7b20020e712422db59f9e76be9abc04f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_RenderGeometryRaw</definition>
        <argsstring>(SDL_Renderer *renderer, SDL_Texture *texture, const float *xy, int xy_stride, const SDL_Color *color, int color_stride, const float *uv, int uv_stride, int num_vertices, const void *indices, int num_indices, int size_indices)</argsstring>
        <name>SDL_RenderGeometryRaw</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref> *</type>
          <declname>texture</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>xy</declname>
        </param>
        <param>
          <type>int</type>
          <declname>xy_stride</declname>
        </param>
        <param>
          <type>const <ref refid="struct_s_d_l___color" kindref="compound">SDL_Color</ref> *</type>
          <declname>color</declname>
        </param>
        <param>
          <type>int</type>
          <declname>color_stride</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>uv</declname>
        </param>
        <param>
          <type>int</type>
          <declname>uv_stride</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_vertices</declname>
        </param>
        <param>
          <type>const <ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref> *</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_indices</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size_indices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Render a list of triangles, optionally using a texture and indices into the vertex arrays Color and alpha modulation is done per vertex (SDL_SetTextureColorMod and SDL_SetTextureAlphaMod are ignored).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>texture</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) The SDL texture to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xy</parametername>
</parameternamelist>
<parameterdescription>
<para>Vertex positions </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xy_stride</parametername>
</parameternamelist>
<parameterdescription>
<para>Byte size to move from one element to the next element </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>Vertex colors (as <ref refid="struct_s_d_l___color" kindref="compound">SDL_Color</ref>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>color_stride</parametername>
</parameternamelist>
<parameterdescription>
<para>Byte size to move from one element to the next element </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uv</parametername>
</parameternamelist>
<parameterdescription>
<para>Vertex normalized texture coordinates </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uv_stride</parametername>
</parameternamelist>
<parameterdescription>
<para>Byte size to move from one element to the next element </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_vertices</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of vertices. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>indices</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) An array of indices into the &apos;vertices&apos; arrays, if NULL all vertices will be rendered in sequential order. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_indices</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of indices. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size_indices</parametername>
</parameternamelist>
<parameterdescription>
<para>Index size: 1 (byte), 2 (short), 4 (int) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or -1 if the operation is not supported</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.18.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a7b2ac666852256d171a50e3af815a910" kindref="member">SDL_RenderGeometry</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="struct_s_d_l___vertex" kindref="compound">SDL_Vertex</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="1649" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="1649" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1a6aa7797b165275f1bdd76c3188a784f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_RenderReadPixels</definition>
        <argsstring>(SDL_Renderer *renderer, const SDL_Rect *rect, Uint32 format, void *pixels, int pitch)</argsstring>
        <name>SDL_RenderReadPixels</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <param>
          <type>const <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> *</type>
          <declname>rect</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref></type>
          <declname>format</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref> *</type>
          <declname>pixels</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pitch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read pixels from the current rendering target to an array of pixels.</para>
<para><bold>WARNING</bold>: This is a very slow operation, and should not be used frequently.</para>
<para><computeroutput>pitch</computeroutput> specifies the number of bytes between rows in the destination <computeroutput>pixels</computeroutput> data. This allows you to write to a subrectangle or have padded rows in the destination. Generally, <computeroutput>pitch</computeroutput> should equal the number of pixels per row in the <computeroutput>pixels</computeroutput> data times the number of bytes per pixel, but it might contain additional padding (for example, 24bit RGB Windows Bitmap data pads all rows to multiples of 4 bytes).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para>the rendering context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>an <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> structure representing the area to read, or NULL for the entire render target </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>an SDL_PixelFormatEnum value of the desired format of the pixel data, or 0 to use the format of the rendering target </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pixels</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to the pixel data to copy into </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pitch</parametername>
</parameternamelist>
<parameterdescription>
<para>the pitch of the <computeroutput>pixels</computeroutput> parameter </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="1682" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="1682" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1a48fa9d24395f3610746988ecca2aae86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC void SDLCALL SDL_RenderPresent</definition>
        <argsstring>(SDL_Renderer *renderer)</argsstring>
        <name>SDL_RenderPresent</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Update the screen with any rendering performed since the previous call.</para>
<para>SDL&apos;s rendering functions operate on a backbuffer; that is, calling a rendering function such as <ref refid="_s_d_l__render_8h_1a6d50e252f15e0c6c14639bdd343285fd" kindref="member">SDL_RenderDrawLine()</ref> does not directly put a line on the screen, but rather updates the backbuffer. As such, you compose your entire scene and <emphasis>present</emphasis> the composed backbuffer to the screen as a complete picture.</para>
<para>Therefore, when using SDL&apos;s rendering API, one does all drawing intended for the frame, and then calls this function once per frame to present the final drawing to the user.</para>
<para>The backbuffer should be considered invalidated after each present; do not assume that previous contents will exist between frames. You are strongly encouraged to call <ref refid="_s_d_l__render_8h_1a473b4abbb29c60e98876eb68ad850f79" kindref="member">SDL_RenderClear()</ref> to initialize the backbuffer before starting each new frame&apos;s drawing, even if you plan to overwrite every pixel.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para>the rendering context</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a473b4abbb29c60e98876eb68ad850f79" kindref="member">SDL_RenderClear</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a6d50e252f15e0c6c14639bdd343285fd" kindref="member">SDL_RenderDrawLine</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a556f150677bb965448b7b361bceb7a76" kindref="member">SDL_RenderDrawLines</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1ab576a09c91675dbd8dba9d05dd2fc0bc" kindref="member">SDL_RenderDrawPoint</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a8ff1a991e7a2599cfc9ea43dfa920d0b" kindref="member">SDL_RenderDrawPoints</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1ab2a89b5a0c25adb6abdb9aeff28f177c" kindref="member">SDL_RenderDrawRect</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1ae56460fe1b478a55916650e695145cbf" kindref="member">SDL_RenderDrawRects</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a3b5098c1944441034d2c5cff419f93cc" kindref="member">SDL_RenderFillRect</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a987fe30e64168702f1dfa6407fbe8bec" kindref="member">SDL_RenderFillRects</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a37e6e440b995756c9cc8a20fe3ca2385" kindref="member">SDL_SetRenderDrawBlendMode</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1aa26234da40f87f4b16d715564242a341" kindref="member">SDL_SetRenderDrawColor</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="1722" column="30" declfile="D:/RayTracing/include/SDL_render.h" declline="1722" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1a078c0a925e24542d356a02183a306be6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC void SDLCALL SDL_DestroyTexture</definition>
        <argsstring>(SDL_Texture *texture)</argsstring>
        <name>SDL_DestroyTexture</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref> *</type>
          <declname>texture</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy the specified texture.</para>
<para>Passing NULL or an otherwise invalid texture will set the SDL error message to &quot;Invalid texture&quot;.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>texture</parametername>
</parameternamelist>
<parameterdescription>
<para>the texture to destroy</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a7995b80913eedffe824a5bf1e81e80ed" kindref="member">SDL_CreateTexture</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a5c0f3b4f6fdb462e4292cd45e72719fb" kindref="member">SDL_CreateTextureFromSurface</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="1737" column="30" declfile="D:/RayTracing/include/SDL_render.h" declline="1737" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1ab1f096742fa9c882c3f1555ee62c4ac2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC void SDLCALL SDL_DestroyRenderer</definition>
        <argsstring>(SDL_Renderer *renderer)</argsstring>
        <name>SDL_DestroyRenderer</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy the rendering context for a window and free associated textures.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para>the rendering context</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a4acc54236013e4ef625dcc362cc8b7d5" kindref="member">SDL_CreateRenderer</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="1748" column="30" declfile="D:/RayTracing/include/SDL_render.h" declline="1748" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1a1b874552e4d5dcfa069256e49c6c2ae4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_RenderFlush</definition>
        <argsstring>(SDL_Renderer *renderer)</argsstring>
        <name>SDL_RenderFlush</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Force the rendering context to flush any pending commands to the underlying rendering API.</para>
<para>You do not need to (and in fact, shouldn&apos;t) call this function unless you are planning to call into OpenGL/Direct3D/Metal/whatever directly in addition to using an SDL_Renderer.</para>
<para>This is for a very-specific case: if you are using SDL&apos;s render API, you asked for a specific renderer backend (OpenGL, Direct3D, etc), you set SDL_HINT_RENDER_BATCHING to &quot;1&quot;, and you plan to make OpenGL/D3D/whatever calls in addition to SDL render API calls. If all of this applies, you should call <ref refid="_s_d_l__render_8h_1a1b874552e4d5dcfa069256e49c6c2ae4" kindref="member">SDL_RenderFlush()</ref> between calls to SDL&apos;s render API and the low-level API you&apos;re using in cooperation.</para>
<para>In all other cases, you can ignore this function. This is only here to get maximum performance out of a specific situation. In all other cases, SDL will do the right thing, perhaps at a performance loss.</para>
<para>This function is first available in SDL 2.0.10, and is not needed in 2.0.9 and earlier, as earlier versions did not queue rendering commands at all, instead flushing them to the OS immediately.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para>the rendering context </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.10. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="1779" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="1779" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1a00a25a5b53d11a363aa8dac1120cd274" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_GL_BindTexture</definition>
        <argsstring>(SDL_Texture *texture, float *texw, float *texh)</argsstring>
        <name>SDL_GL_BindTexture</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref> *</type>
          <declname>texture</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>texw</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>texh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bind an OpenGL/ES/ES2 texture to the current context.</para>
<para>This is for use with OpenGL instructions when rendering OpenGL primitives directly.</para>
<para>If not NULL, <computeroutput>texw</computeroutput> and <computeroutput>texh</computeroutput> will be filled with the width and height values suitable for the provided texture. In most cases, both will be 1.0, however, on systems that support the GL_ARB_texture_rectangle extension, these values will actually be the pixel width and height used to create the texture, so this factor needs to be taken into account when providing texture coordinates to OpenGL.</para>
<para>You need a renderer to create an SDL_Texture, therefore you can only use this function with an implicit OpenGL context from <ref refid="_s_d_l__render_8h_1a4acc54236013e4ef625dcc362cc8b7d5" kindref="member">SDL_CreateRenderer()</ref>, not with your own OpenGL context. If you need control over your OpenGL context, you need to write your own texture-loading methods.</para>
<para>Also note that SDL may upload RGB textures as BGR (or vice-versa), and re-order the color channels in the shaders phase, so the uploaded texture may have swapped color channels.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>texture</parametername>
</parameternamelist>
<parameterdescription>
<para>the texture to bind to the current OpenGL/ES/ES2 context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>texw</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to a float value which will be filled with the texture width or NULL if you don&apos;t need that value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>texh</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to a float value which will be filled with the texture height or NULL if you don&apos;t need that value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or -1 if the operation is not supported; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__video_8h_1a5a2ad98e8920f8069bf89eb3f9bbc377" kindref="member">SDL_GL_MakeCurrent</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1aaf7df600fe205822dea3a9e56f6c78ad" kindref="member">SDL_GL_UnbindTexture</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="1817" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="1817" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1aaf7df600fe205822dea3a9e56f6c78ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_GL_UnbindTexture</definition>
        <argsstring>(SDL_Texture *texture)</argsstring>
        <name>SDL_GL_UnbindTexture</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref> *</type>
          <declname>texture</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unbind an OpenGL/ES/ES2 texture from the current context.</para>
<para>See <ref refid="_s_d_l__render_8h_1a00a25a5b53d11a363aa8dac1120cd274" kindref="member">SDL_GL_BindTexture()</ref> for examples on how to use these functions</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>texture</parametername>
</parameternamelist>
<parameterdescription>
<para>the texture to unbind from the current OpenGL/ES/ES2 context </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or -1 if the operation is not supported</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a00a25a5b53d11a363aa8dac1120cd274" kindref="member">SDL_GL_BindTexture</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__video_8h_1a5a2ad98e8920f8069bf89eb3f9bbc377" kindref="member">SDL_GL_MakeCurrent</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="1832" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="1832" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1a40ee6191edf8a60c9cb1adc00a10aefb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref> *<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC void *SDLCALL SDL_RenderGetMetalLayer</definition>
        <argsstring>(SDL_Renderer *renderer)</argsstring>
        <name>SDL_RenderGetMetalLayer</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the CAMetalLayer associated with the given Metal renderer.</para>
<para>This function returns <computeroutput>void *</computeroutput>, so SDL doesn&apos;t have to include Metal&apos;s headers, but it can be safely cast to a <computeroutput>CAMetalLayer *</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para>The renderer to query </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <computeroutput>CAMetalLayer *</computeroutput> on success, or NULL if the renderer isn&apos;t a Metal renderer</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.8.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a17c520ab4254564e2dddff455ecf9eb8" kindref="member">SDL_RenderGetMetalCommandEncoder</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="1848" column="30" declfile="D:/RayTracing/include/SDL_render.h" declline="1848" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1a17c520ab4254564e2dddff455ecf9eb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref> *<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC void *SDLCALL SDL_RenderGetMetalCommandEncoder</definition>
        <argsstring>(SDL_Renderer *renderer)</argsstring>
        <name>SDL_RenderGetMetalCommandEncoder</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the Metal command encoder for the current frame</para>
<para>This function returns <computeroutput>void *</computeroutput>, so SDL doesn&apos;t have to include Metal&apos;s headers, but it can be safely cast to an <computeroutput>id&lt;MTLRenderCommandEncoder&gt;</computeroutput>.</para>
<para>Note that as of SDL 2.0.18, this will return NULL if Metal refuses to give SDL a drawable to render to, which might happen if the window is hidden/minimized/offscreen. This doesn&apos;t apply to command encoders for render targets, just the window&apos;s backbacker. Check your return values!</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para>The renderer to query </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an <computeroutput>id&lt;MTLRenderCommandEncoder&gt;</computeroutput> on success, or NULL if the renderer isn&apos;t a Metal renderer or there was an error.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.8.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__render_8h_1a40ee6191edf8a60c9cb1adc00a10aefb" kindref="member">SDL_RenderGetMetalLayer</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="1869" column="30" declfile="D:/RayTracing/include/SDL_render.h" declline="1869" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__render_8h_1afe68207df287bda5b85a4bb84e720522" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_RenderSetVSync</definition>
        <argsstring>(SDL_Renderer *renderer, int vsync)</argsstring>
        <name>SDL_RenderSetVSync</name>
        <param>
          <type><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>vsync</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Toggle VSync of the given renderer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para>The renderer to toggle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vsync</parametername>
</parameternamelist>
<parameterdescription>
<para>1 for on, 0 for off. All other values are reserved </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a 0 int on success, or non-zero on failure</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.18. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_render.h" line="1880" column="29" declfile="D:/RayTracing/include/SDL_render.h" declline="1880" declcolumn="29"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Header file for SDL 2D rendering functions.</para>
<para>This API supports the following features:<itemizedlist>
<listitem><para>single pixel points</para>
</listitem><listitem><para>single pixel lines</para>
</listitem><listitem><para>filled rectangles</para>
</listitem><listitem><para>texture images</para>
</listitem></itemizedlist>
</para>
<para>The primitives may be drawn in opaque, blended, or additive modes.</para>
<para>The texture images may be drawn in opaque, blended, or additive modes. They can have an additional color tint or alpha modulation applied to them, and may also be stretched with linear interpolation.</para>
<para>This API is designed to accelerate simple 2D operations. You may want more functionality such as polygons and particle effects and in that case you should use SDL&apos;s OpenGL/Direct3D support or one of the many good 3D engines.</para>
<para>These functions must be called from the main thread. See this bug for details: <ulink url="http://bugzilla.libsdl.org/show_bug.cgi?id=1995">http://bugzilla.libsdl.org/show_bug.cgi?id=1995</ulink> </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/>Simple<sp/>DirectMedia<sp/>Layer</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/>Copyright<sp/>(C)<sp/>1997-2022<sp/>Sam<sp/>Lantinga<sp/>&lt;slouken@libsdl.org&gt;</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/>This<sp/>software<sp/>is<sp/>provided<sp/>&apos;as-is&apos;,<sp/>without<sp/>any<sp/>express<sp/>or<sp/>implied</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/>warranty.<sp/><sp/>In<sp/>no<sp/>event<sp/>will<sp/>the<sp/>authors<sp/>be<sp/>held<sp/>liable<sp/>for<sp/>any<sp/>damages</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/>arising<sp/>from<sp/>the<sp/>use<sp/>of<sp/>this<sp/>software.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/>Permission<sp/>is<sp/>granted<sp/>to<sp/>anyone<sp/>to<sp/>use<sp/>this<sp/>software<sp/>for<sp/>any<sp/>purpose,</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/>including<sp/>commercial<sp/>applications,<sp/>and<sp/>to<sp/>alter<sp/>it<sp/>and<sp/>redistribute<sp/>it</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/>freely,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>restrictions:</highlight></codeline>
<codeline lineno="12"><highlight class="comment"></highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/>1.<sp/>The<sp/>origin<sp/>of<sp/>this<sp/>software<sp/>must<sp/>not<sp/>be<sp/>misrepresented;<sp/>you<sp/>must<sp/>not</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>claim<sp/>that<sp/>you<sp/>wrote<sp/>the<sp/>original<sp/>software.<sp/>If<sp/>you<sp/>use<sp/>this<sp/>software</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>in<sp/>a<sp/>product,<sp/>an<sp/>acknowledgment<sp/>in<sp/>the<sp/>product<sp/>documentation<sp/>would<sp/>be</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>appreciated<sp/>but<sp/>is<sp/>not<sp/>required.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/>2.<sp/>Altered<sp/>source<sp/>versions<sp/>must<sp/>be<sp/>plainly<sp/>marked<sp/>as<sp/>such,<sp/>and<sp/>must<sp/>not<sp/>be</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>misrepresented<sp/>as<sp/>being<sp/>the<sp/>original<sp/>software.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/>3.<sp/>This<sp/>notice<sp/>may<sp/>not<sp/>be<sp/>removed<sp/>or<sp/>altered<sp/>from<sp/>any<sp/>source<sp/>distribution.</highlight></codeline>
<codeline lineno="20"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SDL_render_h_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SDL_render_h_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_s_d_l__stdinc_8h" kindref="compound">SDL_stdinc.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_s_d_l__rect_8h" kindref="compound">SDL_rect.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_s_d_l__video_8h" kindref="compound">SDL_video.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="begin__code_8h" kindref="compound">begin_code.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Set<sp/>up<sp/>for<sp/>C<sp/>function<sp/>definitions,<sp/>even<sp/>when<sp/>using<sp/>C++<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="_s_d_l__render_8h_1a3a6e51bbee5fd3f8ee0c9f7504ae4130" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal">{</highlight></codeline>
<codeline lineno="66" refid="_s_d_l__render_8h_1a3a6e51bbee5fd3f8ee0c9f7504ae4130a02efc6cb7656c03d7a7d0164aced7e84" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_d_l__render_8h_1a3a6e51bbee5fd3f8ee0c9f7504ae4130a02efc6cb7656c03d7a7d0164aced7e84" kindref="member">SDL_RENDERER_SOFTWARE</ref><sp/>=<sp/>0x00000001,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_d_l__render_8h_1a3a6e51bbee5fd3f8ee0c9f7504ae4130a1268ba2faaf6d9c7c7b71fc550f4248a" kindref="member">SDL_RENDERER_ACCELERATED</ref><sp/>=<sp/>0x00000002,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_d_l__render_8h_1a3a6e51bbee5fd3f8ee0c9f7504ae4130a12abcfe685ff444f0fc727db981a0c83" kindref="member">SDL_RENDERER_PRESENTVSYNC</ref><sp/>=<sp/>0x00000004,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_d_l__render_8h_1a3a6e51bbee5fd3f8ee0c9f7504ae4130a77aa48df9c4f56f0b1c66c406da3ab81" kindref="member">SDL_RENDERER_TARGETTEXTURE</ref><sp/>=<sp/>0x00000008<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="73" refid="_s_d_l__render_8h_1a3a6e51bbee5fd3f8ee0c9f7504ae4130a77aa48df9c4f56f0b1c66c406da3ab81" refkind="member"><highlight class="normal">}<sp/><ref refid="_s_d_l__render_8h_1a3a6e51bbee5fd3f8ee0c9f7504ae4130" kindref="member">SDL_RendererFlags</ref>;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="struct_s_d_l___renderer_info" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_s_d_l___renderer_info" kindref="compound">SDL_RendererInfo</ref></highlight></codeline>
<codeline lineno="79"><highlight class="normal">{</highlight></codeline>
<codeline lineno="80" refid="struct_s_d_l___renderer_info_1a433ecb2865c81ba9f28038e56a4ae6f3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="struct_s_d_l___renderer_info_1a433ecb2865c81ba9f28038e56a4ae6f3" kindref="member">name</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="81" refid="struct_s_d_l___renderer_info_1a95cf0ffd1704fd0a4dd8ceac6c9f0542" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref><sp/><ref refid="struct_s_d_l___renderer_info_1a95cf0ffd1704fd0a4dd8ceac6c9f0542" kindref="member">flags</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="82" refid="struct_s_d_l___renderer_info_1acdec165b2053b914313f5996983ec6b8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref><sp/><ref refid="struct_s_d_l___renderer_info_1acdec165b2053b914313f5996983ec6b8" kindref="member">num_texture_formats</ref>;<sp/></highlight></codeline>
<codeline lineno="83" refid="struct_s_d_l___renderer_info_1a88450f9d48e593ec4571e3ba7cc3427d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref><sp/><ref refid="struct_s_d_l___renderer_info_1a88450f9d48e593ec4571e3ba7cc3427d" kindref="member">texture_formats</ref>[16];<sp/></highlight></codeline>
<codeline lineno="84" refid="struct_s_d_l___renderer_info_1a6e6757e3d5c1f0922adaba39380edfa6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___renderer_info_1a6e6757e3d5c1f0922adaba39380edfa6" kindref="member">max_texture_width</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="85" refid="struct_s_d_l___renderer_info_1a87c6a13e8d535c2148f8913c05e13102" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___renderer_info_1a87c6a13e8d535c2148f8913c05e13102" kindref="member">max_texture_height</ref>;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="86" refid="_s_d_l__render_8h_1a0e001c8e25de272084c29c6431a80811" refkind="member"><highlight class="normal">}<sp/><ref refid="_s_d_l__render_8h_1a0e001c8e25de272084c29c6431a80811" kindref="member">SDL_RendererInfo</ref>;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="struct_s_d_l___vertex" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_s_d_l___vertex" kindref="compound">SDL_Vertex</ref></highlight></codeline>
<codeline lineno="92"><highlight class="normal">{</highlight></codeline>
<codeline lineno="93" refid="struct_s_d_l___vertex_1ace816a77e2a2abe41a8c712686250577" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_s_d_l___f_point" kindref="compound">SDL_FPoint</ref><sp/><ref refid="struct_s_d_l___vertex_1ace816a77e2a2abe41a8c712686250577" kindref="member">position</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="94" refid="struct_s_d_l___vertex_1ace543def50f0b3f3f87a86c47caab53f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_s_d_l___color" kindref="compound">SDL_Color</ref><sp/><sp/><ref refid="struct_s_d_l___vertex_1ace543def50f0b3f3f87a86c47caab53f" kindref="member">color</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="95" refid="struct_s_d_l___vertex_1a613ca86679cbd0f84041298ffcde5bc4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_s_d_l___f_point" kindref="compound">SDL_FPoint</ref><sp/><ref refid="struct_s_d_l___vertex_1a613ca86679cbd0f84041298ffcde5bc4" kindref="member">tex_coord</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="96" refid="_s_d_l__render_8h_1a2bd7b3f09dc5b728d6f2e34762bac869" refkind="member"><highlight class="normal">}<sp/><ref refid="_s_d_l__render_8h_1a2bd7b3f09dc5b728d6f2e34762bac869" kindref="member">SDL_Vertex</ref>;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="_s_d_l__render_8h_1a7cee9cc7b0b54027860fde346ea26c71" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal">{</highlight></codeline>
<codeline lineno="103" refid="_s_d_l__render_8h_1a7cee9cc7b0b54027860fde346ea26c71af7de2943791eb2a873139506d40a305d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_d_l__render_8h_1a7cee9cc7b0b54027860fde346ea26c71af7de2943791eb2a873139506d40a305d" kindref="member">SDL_ScaleModeNearest</ref>,<sp/></highlight></codeline>
<codeline lineno="104" refid="_s_d_l__render_8h_1a7cee9cc7b0b54027860fde346ea26c71a9558b9559ab5d26ac398bb18cc731365" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_d_l__render_8h_1a7cee9cc7b0b54027860fde346ea26c71a9558b9559ab5d26ac398bb18cc731365" kindref="member">SDL_ScaleModeLinear</ref>,<sp/><sp/></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_d_l__render_8h_1a7cee9cc7b0b54027860fde346ea26c71adaae98d92cef330646363f08cdef6f9e" kindref="member">SDL_ScaleModeBest</ref><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="106" refid="_s_d_l__render_8h_1a7cee9cc7b0b54027860fde346ea26c71adaae98d92cef330646363f08cdef6f9e" refkind="member"><highlight class="normal">}<sp/><ref refid="_s_d_l__render_8h_1a7cee9cc7b0b54027860fde346ea26c71" kindref="member">SDL_ScaleMode</ref>;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="_s_d_l__render_8h_1a6b8417d7af279e8a0d4a51233da99bc9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal">{</highlight></codeline>
<codeline lineno="113" refid="_s_d_l__render_8h_1a6b8417d7af279e8a0d4a51233da99bc9a07c9015fe5cf4e0737d2836acdf00a34" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_d_l__render_8h_1a6b8417d7af279e8a0d4a51233da99bc9a07c9015fe5cf4e0737d2836acdf00a34" kindref="member">SDL_TEXTUREACCESS_STATIC</ref>,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="114" refid="_s_d_l__render_8h_1a6b8417d7af279e8a0d4a51233da99bc9a19a4751f16e6b411aeb9c835d6c061b4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_d_l__render_8h_1a6b8417d7af279e8a0d4a51233da99bc9a19a4751f16e6b411aeb9c835d6c061b4" kindref="member">SDL_TEXTUREACCESS_STREAMING</ref>,<sp/></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_d_l__render_8h_1a6b8417d7af279e8a0d4a51233da99bc9a52249f41ca2ec4971ec96ee395868a9a" kindref="member">SDL_TEXTUREACCESS_TARGET</ref><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="116" refid="_s_d_l__render_8h_1a6b8417d7af279e8a0d4a51233da99bc9a52249f41ca2ec4971ec96ee395868a9a" refkind="member"><highlight class="normal">}<sp/><ref refid="_s_d_l__render_8h_1a6b8417d7af279e8a0d4a51233da99bc9" kindref="member">SDL_TextureAccess</ref>;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="121" refid="_s_d_l__render_8h_1a8d8aacd15cb2cb24e61ae1905e7a5ab5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal">{</highlight></codeline>
<codeline lineno="123" refid="_s_d_l__render_8h_1a8d8aacd15cb2cb24e61ae1905e7a5ab5a3c1a49753bd4e0a8cfa7c64ed5a4b0df" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_d_l__render_8h_1a8d8aacd15cb2cb24e61ae1905e7a5ab5a3c1a49753bd4e0a8cfa7c64ed5a4b0df" kindref="member">SDL_TEXTUREMODULATE_NONE</ref><sp/>=<sp/>0x00000000,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="124" refid="_s_d_l__render_8h_1a8d8aacd15cb2cb24e61ae1905e7a5ab5a5a9d122094526405306483d856caa21e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_d_l__render_8h_1a8d8aacd15cb2cb24e61ae1905e7a5ab5a5a9d122094526405306483d856caa21e" kindref="member">SDL_TEXTUREMODULATE_COLOR</ref><sp/>=<sp/>0x00000001,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_d_l__render_8h_1a8d8aacd15cb2cb24e61ae1905e7a5ab5a431abaf1e024cd43df94a967ba1e836f" kindref="member">SDL_TEXTUREMODULATE_ALPHA</ref><sp/>=<sp/>0x00000002<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="126" refid="_s_d_l__render_8h_1a8d8aacd15cb2cb24e61ae1905e7a5ab5a431abaf1e024cd43df94a967ba1e836f" refkind="member"><highlight class="normal">}<sp/><ref refid="_s_d_l__render_8h_1a8d8aacd15cb2cb24e61ae1905e7a5ab5" kindref="member">SDL_TextureModulate</ref>;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="131" refid="_s_d_l__render_8h_1a6280e56838e0e684caa0869c7c973c12" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal">{</highlight></codeline>
<codeline lineno="133" refid="_s_d_l__render_8h_1a6280e56838e0e684caa0869c7c973c12a580b026a6ad4e3493677ad47f3bd939a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_d_l__render_8h_1a6280e56838e0e684caa0869c7c973c12a580b026a6ad4e3493677ad47f3bd939a" kindref="member">SDL_FLIP_NONE</ref><sp/>=<sp/>0x00000000,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="134" refid="_s_d_l__render_8h_1a6280e56838e0e684caa0869c7c973c12acfc2af6936e75fa246c98d316425c0ce" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_d_l__render_8h_1a6280e56838e0e684caa0869c7c973c12acfc2af6936e75fa246c98d316425c0ce" kindref="member">SDL_FLIP_HORIZONTAL</ref><sp/>=<sp/>0x00000001,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_d_l__render_8h_1a6280e56838e0e684caa0869c7c973c12a27ec807eec1d9adffced6a70cd85ef01" kindref="member">SDL_FLIP_VERTICAL</ref><sp/>=<sp/>0x00000002<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="136" refid="_s_d_l__render_8h_1a6280e56838e0e684caa0869c7c973c12a27ec807eec1d9adffced6a70cd85ef01" refkind="member"><highlight class="normal">}<sp/><ref refid="_s_d_l__render_8h_1a6280e56838e0e684caa0869c7c973c12" kindref="member">SDL_RendererFlip</ref>;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref>;</highlight></codeline>
<codeline lineno="142" refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref>;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref>;</highlight></codeline>
<codeline lineno="148" refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref><sp/><ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref>;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Function<sp/>prototypes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="169" refid="_s_d_l__render_8h_1a4dd8a7e6e6f0948541a1ff6b2ecff192" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1a4dd8a7e6e6f0948541a1ff6b2ecff192" kindref="member">SDL_GetNumRenderDrivers</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="185" refid="_s_d_l__render_8h_1aa9a7e1ca629863212c2c1b17112f65bd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1aa9a7e1ca629863212c2c1b17112f65bd" kindref="member">SDL_GetRenderDriverInfo</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl__glext_8h_1a57f14e05b1900f16a2da82ade47d0c6d" kindref="member">index</ref>,</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_s_d_l___renderer_info" kindref="compound">SDL_RendererInfo</ref><sp/>*<sp/>info);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="205" refid="_s_d_l__render_8h_1ac3aa070e5cda5bab246621f7efc9f143" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1ac3aa070e5cda5bab246621f7efc9f143" kindref="member">SDL_CreateWindowAndRenderer</ref>(</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl_8h_1a9a82cf3caff84cabc4598e2619faac17" kindref="member">width</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl_8h_1aa352f2804b9902ac30769c00dde75d5f" kindref="member">height</ref>,<sp/><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref><sp/>window_flags,</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392" kindref="member">SDL_Window</ref><sp/>**window,<sp/><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>**renderer);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="227" refid="_s_d_l__render_8h_1a4acc54236013e4ef625dcc362cc8b7d5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*<sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1a4acc54236013e4ef625dcc362cc8b7d5" kindref="member">SDL_CreateRenderer</ref>(<ref refid="_s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392" kindref="member">SDL_Window</ref><sp/>*<sp/>window,</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl__glext_8h_1a57f14e05b1900f16a2da82ade47d0c6d" kindref="member">index</ref>,<sp/><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref><sp/><ref refid="_s_d_l__opengl__glext_8h_1ac7ba7d3cce3d19ca020e056b37231289" kindref="member">flags</ref>);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="249" refid="_s_d_l__render_8h_1aeb5644ee43c35ed27e54e312a1cd954b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*<sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1aeb5644ee43c35ed27e54e312a1cd954b" kindref="member">SDL_CreateSoftwareRenderer</ref>(<ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref><sp/>*<sp/>surface);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="262" refid="_s_d_l__render_8h_1a6c60ba0582abbdf342e1d305e3c52362" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*<sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1a6c60ba0582abbdf342e1d305e3c52362" kindref="member">SDL_GetRenderer</ref>(<ref refid="_s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392" kindref="member">SDL_Window</ref><sp/>*<sp/>window);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="277" refid="_s_d_l__render_8h_1afdc8a35ce033f5111843ac9518dc47a4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1afdc8a35ce033f5111843ac9518dc47a4" kindref="member">SDL_GetRendererInfo</ref>(<ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*<sp/>renderer,</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_s_d_l___renderer_info" kindref="compound">SDL_RendererInfo</ref><sp/>*<sp/>info);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="297" refid="_s_d_l__render_8h_1abfc0c9a50d9d1870ab7d271b7a73d8ab" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1abfc0c9a50d9d1870ab7d271b7a73d8ab" kindref="member">SDL_GetRendererOutputSize</ref>(<ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*<sp/>renderer,</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<ref refid="_s_d_l__opengl__glext_8h_1a6ee8f168a7ab6785a9bb57c6715dad99" kindref="member">w</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<ref refid="_s_d_l__opengl__glext_8h_1afa0fb1b5e976920c0abeff2dca3ed774" kindref="member">h</ref>);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="322" refid="_s_d_l__render_8h_1a7995b80913eedffe824a5bf1e81e80ed" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref><sp/>*<sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1a7995b80913eedffe824a5bf1e81e80ed" kindref="member">SDL_CreateTexture</ref>(<ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*<sp/>renderer,</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref><sp/><ref refid="_s_d_l__audio_8h_1a71a65ffd977afe9c3fef116a5bc9ee27" kindref="member">format</ref>,</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl__glext_8h_1a9fb81ef401f3cb865f7b2f1bb059f7d7" kindref="member">access</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl__glext_8h_1a6ee8f168a7ab6785a9bb57c6715dad99" kindref="member">w</ref>,</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl__glext_8h_1afa0fb1b5e976920c0abeff2dca3ed774" kindref="member">h</ref>);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="351" refid="_s_d_l__render_8h_1a5c0f3b4f6fdb462e4292cd45e72719fb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref><sp/>*<sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1a5c0f3b4f6fdb462e4292cd45e72719fb" kindref="member">SDL_CreateTextureFromSurface</ref>(<ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*<sp/>renderer,<sp/><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref><sp/>*<sp/>surface);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="371" refid="_s_d_l__render_8h_1aade777757bfc3b98bf3ef742b1d8a052" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1aade777757bfc3b98bf3ef742b1d8a052" kindref="member">SDL_QueryTexture</ref>(<ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a8f486379aef534669f4f06f515e7ce6c" kindref="member">texture</ref>,</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref><sp/>*<sp/><ref refid="_s_d_l__audio_8h_1a71a65ffd977afe9c3fef116a5bc9ee27" kindref="member">format</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<ref refid="_s_d_l__opengl__glext_8h_1a9fb81ef401f3cb865f7b2f1bb059f7d7" kindref="member">access</ref>,</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<ref refid="_s_d_l__opengl__glext_8h_1a6ee8f168a7ab6785a9bb57c6715dad99" kindref="member">w</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<ref refid="_s_d_l__opengl__glext_8h_1afa0fb1b5e976920c0abeff2dca3ed774" kindref="member">h</ref>);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="399" refid="_s_d_l__render_8h_1a348399db33c03a7882cef0c6e6c1756f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1a348399db33c03a7882cef0c6e6c1756f" kindref="member">SDL_SetTextureColorMod</ref>(<ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a8f486379aef534669f4f06f515e7ce6c" kindref="member">texture</ref>,</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref><sp/><ref refid="_s_d_l__opengl_8h_1a42ce7cdc612e53abee15043f80220d97" kindref="member">r</ref>,<sp/><ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref><sp/><ref refid="_s_d_l__opengl__glext_8h_1acaceb3a655ff28b75259860bcb868f9f" kindref="member">g</ref>,<sp/><ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref><sp/><ref refid="_s_d_l__opengl__glext_8h_1a0f71581a41fd2264c8944126dabbd010" kindref="member">b</ref>);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="418" refid="_s_d_l__render_8h_1aa70e4ce3a875399d4291dca23e687b11" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1aa70e4ce3a875399d4291dca23e687b11" kindref="member">SDL_GetTextureColorMod</ref>(<ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a8f486379aef534669f4f06f515e7ce6c" kindref="member">texture</ref>,</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref><sp/>*<sp/><ref refid="_s_d_l__opengl_8h_1a42ce7cdc612e53abee15043f80220d97" kindref="member">r</ref>,<sp/><ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1acaceb3a655ff28b75259860bcb868f9f" kindref="member">g</ref>,</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a0f71581a41fd2264c8944126dabbd010" kindref="member">b</ref>);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="443" refid="_s_d_l__render_8h_1a1cc3302a4c7fb3b37e8fd5263a80758b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1a1cc3302a4c7fb3b37e8fd5263a80758b" kindref="member">SDL_SetTextureAlphaMod</ref>(<ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a8f486379aef534669f4f06f515e7ce6c" kindref="member">texture</ref>,</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref><sp/><ref refid="_s_d_l__opengl__glext_8h_1ac03904b1f7e359bb2acf10a755e97c5a" kindref="member">alpha</ref>);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="459" refid="_s_d_l__render_8h_1a4d9a9e945ec95f30e5c48ce305de33ad" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1a4d9a9e945ec95f30e5c48ce305de33ad" kindref="member">SDL_GetTextureAlphaMod</ref>(<ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a8f486379aef534669f4f06f515e7ce6c" kindref="member">texture</ref>,</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1ac03904b1f7e359bb2acf10a755e97c5a" kindref="member">alpha</ref>);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="478" refid="_s_d_l__render_8h_1af8b9cb77ca18f76c18f39d29ed960de8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1af8b9cb77ca18f76c18f39d29ed960de8" kindref="member">SDL_SetTextureBlendMode</ref>(<ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a8f486379aef534669f4f06f515e7ce6c" kindref="member">texture</ref>,</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_d_l__blendmode_8h_1a850d3c67a878fd6698a1c8dbb1eabf1e" kindref="member">SDL_BlendMode</ref><sp/>blendMode);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="493" refid="_s_d_l__render_8h_1a2595ee57e6f3a4882f3ae4062ca420c4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1a2595ee57e6f3a4882f3ae4062ca420c4" kindref="member">SDL_GetTextureBlendMode</ref>(<ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a8f486379aef534669f4f06f515e7ce6c" kindref="member">texture</ref>,</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_d_l__blendmode_8h_1a850d3c67a878fd6698a1c8dbb1eabf1e" kindref="member">SDL_BlendMode</ref><sp/>*blendMode);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="509" refid="_s_d_l__render_8h_1aac58837d42510e6e0472538dbcbc2ffe" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1aac58837d42510e6e0472538dbcbc2ffe" kindref="member">SDL_SetTextureScaleMode</ref>(<ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a8f486379aef534669f4f06f515e7ce6c" kindref="member">texture</ref>,</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_d_l__render_8h_1a7cee9cc7b0b54027860fde346ea26c71" kindref="member">SDL_ScaleMode</ref><sp/>scaleMode);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="523" refid="_s_d_l__render_8h_1a51603afa1350164679baad97b77fb3b5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1a51603afa1350164679baad97b77fb3b5" kindref="member">SDL_GetTextureScaleMode</ref>(<ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a8f486379aef534669f4f06f515e7ce6c" kindref="member">texture</ref>,</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_d_l__render_8h_1a7cee9cc7b0b54027860fde346ea26c71" kindref="member">SDL_ScaleMode</ref><sp/>*scaleMode);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="537" refid="_s_d_l__render_8h_1a969ee973fd8f686777f151aa2d9275bc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1a969ee973fd8f686777f151aa2d9275bc" kindref="member">SDL_SetTextureUserData</ref>(<ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a8f486379aef534669f4f06f515e7ce6c" kindref="member">texture</ref>,</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*userdata);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="551" refid="_s_d_l__render_8h_1a6601680fa2e4a7c2c46d503392fc1afc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1a6601680fa2e4a7c2c46d503392fc1afc" kindref="member">SDL_GetTextureUserData</ref>(<ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a8f486379aef534669f4f06f515e7ce6c" kindref="member">texture</ref>);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="582" refid="_s_d_l__render_8h_1a7aab41a7058997590095e5568d065c11" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1a7aab41a7058997590095e5568d065c11" kindref="member">SDL_UpdateTexture</ref>(<ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a8f486379aef534669f4f06f515e7ce6c" kindref="member">texture</ref>,</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref><sp/>*<sp/>rect,</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="_s_d_l__opengl_8h_1ada7ad693ea2e311b8103f4693fc35f80" kindref="member">pixels</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pitch);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="613" refid="_s_d_l__render_8h_1aad2bf04e82a6fb8df44c0b6791321cb5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1aad2bf04e82a6fb8df44c0b6791321cb5" kindref="member">SDL_UpdateYUVTexture</ref>(<ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a8f486379aef534669f4f06f515e7ce6c" kindref="member">texture</ref>,</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref><sp/>*<sp/>rect,</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref><sp/>*Yplane,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Ypitch,</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref><sp/>*Uplane,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Upitch,</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref><sp/>*Vplane,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Vpitch);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="639" refid="_s_d_l__render_8h_1ab911a179c321d62e7659b8111f457723" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1ab911a179c321d62e7659b8111f457723" kindref="member">SDL_UpdateNVTexture</ref>(<ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a8f486379aef534669f4f06f515e7ce6c" kindref="member">texture</ref>,</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref><sp/>*<sp/>rect,</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref><sp/>*Yplane,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Ypitch,</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref><sp/>*UVplane,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>UVpitch);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="671" refid="_s_d_l__render_8h_1af64adcd12e4e9d41d48031fd3da7b913" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1af64adcd12e4e9d41d48031fd3da7b913" kindref="member">SDL_LockTexture</ref>(<ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a8f486379aef534669f4f06f515e7ce6c" kindref="member">texture</ref>,</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref><sp/>*<sp/>rect,</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**<ref refid="_s_d_l__opengl_8h_1ada7ad693ea2e311b8103f4693fc35f80" kindref="member">pixels</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*pitch);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="707" refid="_s_d_l__render_8h_1af1f12f5baf50ec8c86235dd4528a4e0c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1af1f12f5baf50ec8c86235dd4528a4e0c" kindref="member">SDL_LockTextureToSurface</ref>(<ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref><sp/>*<ref refid="_s_d_l__opengl__glext_8h_1a8f486379aef534669f4f06f515e7ce6c" kindref="member">texture</ref>,</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref><sp/>*rect,</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref><sp/>**surface);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="728" refid="_s_d_l__render_8h_1a7fc9db6cde77fc9c95a4f65bc7d30073" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1a7fc9db6cde77fc9c95a4f65bc7d30073" kindref="member">SDL_UnlockTexture</ref>(<ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a8f486379aef534669f4f06f515e7ce6c" kindref="member">texture</ref>);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight></codeline>
<codeline lineno="740" refid="_s_d_l__render_8h_1a126c5e0fb7abb3aa1bbfe60ac0102857" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1a126c5e0fb7abb3aa1bbfe60ac0102857" kindref="member">SDL_RenderTargetSupported</ref>(<ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*renderer);</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="764" refid="_s_d_l__render_8h_1a2479163b0f2909cc50cef7af3c279000" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1a2479163b0f2909cc50cef7af3c279000" kindref="member">SDL_SetRenderTarget</ref>(<ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*renderer,</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref><sp/>*<ref refid="_s_d_l__opengl__glext_8h_1a8f486379aef534669f4f06f515e7ce6c" kindref="member">texture</ref>);</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="780" refid="_s_d_l__render_8h_1a130a89bac84d075c44c3e9814238a658" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref><sp/>*<sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1a130a89bac84d075c44c3e9814238a658" kindref="member">SDL_GetRenderTarget</ref>(<ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*renderer);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="808" refid="_s_d_l__render_8h_1ad0596fd507c9bf9f8f9594cd9064860c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1ad0596fd507c9bf9f8f9594cd9064860c" kindref="member">SDL_RenderSetLogicalSize</ref>(<ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*<sp/>renderer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl__glext_8h_1a6ee8f168a7ab6785a9bb57c6715dad99" kindref="member">w</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl__glext_8h_1afa0fb1b5e976920c0abeff2dca3ed774" kindref="member">h</ref>);</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="825" refid="_s_d_l__render_8h_1aa566ba52ac01bd13f6fdfcdfc3af217f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1aa566ba52ac01bd13f6fdfcdfc3af217f" kindref="member">SDL_RenderGetLogicalSize</ref>(<ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*<sp/>renderer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<ref refid="_s_d_l__opengl__glext_8h_1a6ee8f168a7ab6785a9bb57c6715dad99" kindref="member">w</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<ref refid="_s_d_l__opengl__glext_8h_1afa0fb1b5e976920c0abeff2dca3ed774" kindref="member">h</ref>);</highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight></codeline>
<codeline lineno="844" refid="_s_d_l__render_8h_1a62c3f8273280e5795075d2921d4ea30f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1a62c3f8273280e5795075d2921d4ea30f" kindref="member">SDL_RenderSetIntegerScale</ref>(<ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*<sp/>renderer,</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref><sp/><ref refid="_s_d_l__opengl__glext_8h_1ab0b5c7de20095d30091485d2c60a3dd5" kindref="member">enable</ref>);</highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight></codeline>
<codeline lineno="858" refid="_s_d_l__render_8h_1a435c61d9f048550388198478e8fdeaa0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1a435c61d9f048550388198478e8fdeaa0" kindref="member">SDL_RenderGetIntegerScale</ref>(<ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*<sp/>renderer);</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="876" refid="_s_d_l__render_8h_1a27bad6dceb9d5e08d41506260dfc1c71" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1a27bad6dceb9d5e08d41506260dfc1c71" kindref="member">SDL_RenderSetViewport</ref>(<ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*<sp/>renderer,</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref><sp/>*<sp/>rect);</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="889" refid="_s_d_l__render_8h_1a60a7a6cb31b64f9f13c923fe44ba4d6f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1a60a7a6cb31b64f9f13c923fe44ba4d6f" kindref="member">SDL_RenderGetViewport</ref>(<ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*<sp/>renderer,</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref><sp/>*<sp/>rect);</highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight></codeline>
<codeline lineno="907" refid="_s_d_l__render_8h_1a2788c24590fd26bcf0d5be2ffcb85c04" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1a2788c24590fd26bcf0d5be2ffcb85c04" kindref="member">SDL_RenderSetClipRect</ref>(<ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*<sp/>renderer,</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref><sp/>*<sp/>rect);</highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight></codeline>
<codeline lineno="923" refid="_s_d_l__render_8h_1af91e64e2b473a5eb7e93caf253fb760c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1af91e64e2b473a5eb7e93caf253fb760c" kindref="member">SDL_RenderGetClipRect</ref>(<ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*<sp/>renderer,</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref><sp/>*<sp/>rect);</highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight></codeline>
<codeline lineno="938" refid="_s_d_l__render_8h_1ab8125c772a65956fbb259389b6563523" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1ab8125c772a65956fbb259389b6563523" kindref="member">SDL_RenderIsClipEnabled</ref>(<ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*<sp/>renderer);</highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="963" refid="_s_d_l__render_8h_1aa52b062e271226c5ec8cdb8aa6dc69eb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1aa52b062e271226c5ec8cdb8aa6dc69eb" kindref="member">SDL_RenderSetScale</ref>(<ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*<sp/>renderer,</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scaleX,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scaleY);</highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="977" refid="_s_d_l__render_8h_1a0271c4a8d32cacaff54de9aa7b5a797d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1a0271c4a8d32cacaff54de9aa7b5a797d" kindref="member">SDL_RenderGetScale</ref>(<ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*<sp/>renderer,</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*scaleX,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*scaleY);</highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight></codeline>
<codeline lineno="1001" refid="_s_d_l__render_8h_1aa4497fd1ab833b5b6badd2a086603b19" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1aa4497fd1ab833b5b6badd2a086603b19" kindref="member">SDL_RenderWindowToLogical</ref>(<ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*<sp/>renderer,<sp/></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>windowX,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>windowY,<sp/></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*logicalX,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*logicalY);</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1023" refid="_s_d_l__render_8h_1ae0a927b5b2d8c797dfa06e4226a5c840" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1ae0a927b5b2d8c797dfa06e4226a5c840" kindref="member">SDL_RenderLogicalToWindow</ref>(<ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*<sp/>renderer,<sp/></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>logicalX,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>logicalY,</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*windowX,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*windowY);</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight></codeline>
<codeline lineno="1056" refid="_s_d_l__render_8h_1aa26234da40f87f4b16d715564242a341" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1aa26234da40f87f4b16d715564242a341" kindref="member">SDL_SetRenderDrawColor</ref>(<ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*<sp/>renderer,</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref><sp/><ref refid="_s_d_l__opengl_8h_1a42ce7cdc612e53abee15043f80220d97" kindref="member">r</ref>,<sp/><ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref><sp/><ref refid="_s_d_l__opengl__glext_8h_1acaceb3a655ff28b75259860bcb868f9f" kindref="member">g</ref>,<sp/><ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref><sp/><ref refid="_s_d_l__opengl__glext_8h_1a0f71581a41fd2264c8944126dabbd010" kindref="member">b</ref>,</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref><sp/><ref refid="_s_d_l__opengl__glext_8h_1a3309789fc188587d666cda5ece79cf82" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight></codeline>
<codeline lineno="1079" refid="_s_d_l__render_8h_1a1b8e6544c3fc23ddd9b0f0bfb14cef39" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1a1b8e6544c3fc23ddd9b0f0bfb14cef39" kindref="member">SDL_GetRenderDrawColor</ref>(<ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*<sp/>renderer,</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref><sp/>*<sp/><ref refid="_s_d_l__opengl_8h_1a42ce7cdc612e53abee15043f80220d97" kindref="member">r</ref>,<sp/><ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1acaceb3a655ff28b75259860bcb868f9f" kindref="member">g</ref>,<sp/><ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a0f71581a41fd2264c8944126dabbd010" kindref="member">b</ref>,</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a3309789fc188587d666cda5ece79cf82" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight></codeline>
<codeline lineno="1105" refid="_s_d_l__render_8h_1a37e6e440b995756c9cc8a20fe3ca2385" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1a37e6e440b995756c9cc8a20fe3ca2385" kindref="member">SDL_SetRenderDrawBlendMode</ref>(<ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*<sp/>renderer,</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_d_l__blendmode_8h_1a850d3c67a878fd6698a1c8dbb1eabf1e" kindref="member">SDL_BlendMode</ref><sp/>blendMode);</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight></codeline>
<codeline lineno="1120" refid="_s_d_l__render_8h_1a384109767532e9703652233571a0d3cf" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1a384109767532e9703652233571a0d3cf" kindref="member">SDL_GetRenderDrawBlendMode</ref>(<ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*<sp/>renderer,</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_d_l__blendmode_8h_1a850d3c67a878fd6698a1c8dbb1eabf1e" kindref="member">SDL_BlendMode</ref><sp/>*blendMode);</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight></codeline>
<codeline lineno="1137" refid="_s_d_l__render_8h_1a473b4abbb29c60e98876eb68ad850f79" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1a473b4abbb29c60e98876eb68ad850f79" kindref="member">SDL_RenderClear</ref>(<ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*<sp/>renderer);</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight></codeline>
<codeline lineno="1164" refid="_s_d_l__render_8h_1ab576a09c91675dbd8dba9d05dd2fc0bc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1ab576a09c91675dbd8dba9d05dd2fc0bc" kindref="member">SDL_RenderDrawPoint</ref>(<ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*<sp/>renderer,</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl_8h_1ad0e63d0edcdbd3d79554076bf309fd47" kindref="member">x</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl_8h_1a1675d9d7bb68e1657ff028643b4037e3" kindref="member">y</ref>);</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight></codeline>
<codeline lineno="1190" refid="_s_d_l__render_8h_1a8ff1a991e7a2599cfc9ea43dfa920d0b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1a8ff1a991e7a2599cfc9ea43dfa920d0b" kindref="member">SDL_RenderDrawPoints</ref>(<ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*<sp/>renderer,</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___point" kindref="compound">SDL_Point</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a0c0cc65d03e264ad2c5262927b620d3f" kindref="member">points</ref>,</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl_8h_1a619bc20e8198de3bd3f3d7fc34de66b2" kindref="member">count</ref>);</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight></codeline>
<codeline lineno="1221" refid="_s_d_l__render_8h_1a6d50e252f15e0c6c14639bdd343285fd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1a6d50e252f15e0c6c14639bdd343285fd" kindref="member">SDL_RenderDrawLine</ref>(<ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*<sp/>renderer,</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl__glext_8h_1a49825216c96caaeb09237b36651181c5" kindref="member">x1</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl__glext_8h_1a3af6c78fcdfccea028a5878bc747ef39" kindref="member">y1</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl__glext_8h_1a7b907a03236685c534d89d604cff23c8" kindref="member">x2</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl__glext_8h_1a2be1135ed68e8d80fa9e130c7814f8c2" kindref="member">y2</ref>);</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"></highlight></codeline>
<codeline lineno="1247" refid="_s_d_l__render_8h_1a556f150677bb965448b7b361bceb7a76" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1a556f150677bb965448b7b361bceb7a76" kindref="member">SDL_RenderDrawLines</ref>(<ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*<sp/>renderer,</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___point" kindref="compound">SDL_Point</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a0c0cc65d03e264ad2c5262927b620d3f" kindref="member">points</ref>,</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl_8h_1a619bc20e8198de3bd3f3d7fc34de66b2" kindref="member">count</ref>);</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"></highlight></codeline>
<codeline lineno="1273" refid="_s_d_l__render_8h_1ab2a89b5a0c25adb6abdb9aeff28f177c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1ab2a89b5a0c25adb6abdb9aeff28f177c" kindref="member">SDL_RenderDrawRect</ref>(<ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*<sp/>renderer,</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref><sp/>*<sp/>rect);</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight></codeline>
<codeline lineno="1299" refid="_s_d_l__render_8h_1ae56460fe1b478a55916650e695145cbf" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1ae56460fe1b478a55916650e695145cbf" kindref="member">SDL_RenderDrawRects</ref>(<ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*<sp/>renderer,</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref><sp/>*<sp/>rects,</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl_8h_1a619bc20e8198de3bd3f3d7fc34de66b2" kindref="member">count</ref>);</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"></highlight></codeline>
<codeline lineno="1329" refid="_s_d_l__render_8h_1a3b5098c1944441034d2c5cff419f93cc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1a3b5098c1944441034d2c5cff419f93cc" kindref="member">SDL_RenderFillRect</ref>(<ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*<sp/>renderer,</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref><sp/>*<sp/>rect);</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight></codeline>
<codeline lineno="1354" refid="_s_d_l__render_8h_1a987fe30e64168702f1dfa6407fbe8bec" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1a987fe30e64168702f1dfa6407fbe8bec" kindref="member">SDL_RenderFillRects</ref>(<ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*<sp/>renderer,</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref><sp/>*<sp/>rects,</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl_8h_1a619bc20e8198de3bd3f3d7fc34de66b2" kindref="member">count</ref>);</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"></highlight></codeline>
<codeline lineno="1386" refid="_s_d_l__render_8h_1a4b6c2353384c7b7128fd5960b24f2ae6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1a4b6c2353384c7b7128fd5960b24f2ae6" kindref="member">SDL_RenderCopy</ref>(<ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*<sp/>renderer,</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a8f486379aef534669f4f06f515e7ce6c" kindref="member">texture</ref>,</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref><sp/>*<sp/>srcrect,</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref><sp/>*<sp/>dstrect);</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"></highlight></codeline>
<codeline lineno="1430" refid="_s_d_l__render_8h_1ac2c665c1ce910413272a004cdb52e28e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1ac2c665c1ce910413272a004cdb52e28e" kindref="member">SDL_RenderCopyEx</ref>(<ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*<sp/>renderer,</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a8f486379aef534669f4f06f515e7ce6c" kindref="member">texture</ref>,</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref><sp/>*<sp/>srcrect,</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref><sp/>*<sp/>dstrect,</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl__glext_8h_1a9e06c1f76a20fed54ca742cd25cb02c4" kindref="member">angle</ref>,</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___point" kindref="compound">SDL_Point</ref><sp/>*center,</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__render_8h_1a6280e56838e0e684caa0869c7c973c12" kindref="member">SDL_RendererFlip</ref><sp/>flip);</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"></highlight></codeline>
<codeline lineno="1449" refid="_s_d_l__render_8h_1aa62bd2597d5a7650e7ad666c2a15e688" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1aa62bd2597d5a7650e7ad666c2a15e688" kindref="member">SDL_RenderDrawPointF</ref>(<ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*<sp/>renderer,</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl_8h_1ad0e63d0edcdbd3d79554076bf309fd47" kindref="member">x</ref>,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl_8h_1a1675d9d7bb68e1657ff028643b4037e3" kindref="member">y</ref>);</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"></highlight></codeline>
<codeline lineno="1462" refid="_s_d_l__render_8h_1a94cef2f19a261a175e3a748dd95bec69" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1a94cef2f19a261a175e3a748dd95bec69" kindref="member">SDL_RenderDrawPointsF</ref>(<ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*<sp/>renderer,</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___f_point" kindref="compound">SDL_FPoint</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a0c0cc65d03e264ad2c5262927b620d3f" kindref="member">points</ref>,</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl_8h_1a619bc20e8198de3bd3f3d7fc34de66b2" kindref="member">count</ref>);</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"></highlight></codeline>
<codeline lineno="1478" refid="_s_d_l__render_8h_1a05ad434757513f4b98de29aaee8f70e3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1a05ad434757513f4b98de29aaee8f70e3" kindref="member">SDL_RenderDrawLineF</ref>(<ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*<sp/>renderer,</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl__glext_8h_1a49825216c96caaeb09237b36651181c5" kindref="member">x1</ref>,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl__glext_8h_1a3af6c78fcdfccea028a5878bc747ef39" kindref="member">y1</ref>,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl__glext_8h_1a7b907a03236685c534d89d604cff23c8" kindref="member">x2</ref>,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl__glext_8h_1a2be1135ed68e8d80fa9e130c7814f8c2" kindref="member">y2</ref>);</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"></highlight></codeline>
<codeline lineno="1492" refid="_s_d_l__render_8h_1a60727a3df49c84428e486cc067107406" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1a60727a3df49c84428e486cc067107406" kindref="member">SDL_RenderDrawLinesF</ref>(<ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*<sp/>renderer,</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___f_point" kindref="compound">SDL_FPoint</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a0c0cc65d03e264ad2c5262927b620d3f" kindref="member">points</ref>,</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl_8h_1a619bc20e8198de3bd3f3d7fc34de66b2" kindref="member">count</ref>);</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"></highlight></codeline>
<codeline lineno="1506" refid="_s_d_l__render_8h_1ae6ca4e63fe1189d44a42eb831c4f9dc2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1ae6ca4e63fe1189d44a42eb831c4f9dc2" kindref="member">SDL_RenderDrawRectF</ref>(<ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*<sp/>renderer,</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___f_rect" kindref="compound">SDL_FRect</ref><sp/>*<sp/>rect);</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"></highlight></codeline>
<codeline lineno="1520" refid="_s_d_l__render_8h_1ac0be470fecfd02a348d017ef4dcac2e5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1ac0be470fecfd02a348d017ef4dcac2e5" kindref="member">SDL_RenderDrawRectsF</ref>(<ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*<sp/>renderer,</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___f_rect" kindref="compound">SDL_FRect</ref><sp/>*<sp/>rects,</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl_8h_1a619bc20e8198de3bd3f3d7fc34de66b2" kindref="member">count</ref>);</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"></highlight></codeline>
<codeline lineno="1535" refid="_s_d_l__render_8h_1afc08075c669fffd2ab7808ffedad3edc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1afc08075c669fffd2ab7808ffedad3edc" kindref="member">SDL_RenderFillRectF</ref>(<ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*<sp/>renderer,</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___f_rect" kindref="compound">SDL_FRect</ref><sp/>*<sp/>rect);</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"></highlight></codeline>
<codeline lineno="1549" refid="_s_d_l__render_8h_1a599b48b93c5f6e55f7c12c766205f8a1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1a599b48b93c5f6e55f7c12c766205f8a1" kindref="member">SDL_RenderFillRectsF</ref>(<ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*<sp/>renderer,</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___f_rect" kindref="compound">SDL_FRect</ref><sp/>*<sp/>rects,</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl_8h_1a619bc20e8198de3bd3f3d7fc34de66b2" kindref="member">count</ref>);</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"></highlight></codeline>
<codeline lineno="1567" refid="_s_d_l__render_8h_1a4514e3254853776f9c5202d8808e5354" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1a4514e3254853776f9c5202d8808e5354" kindref="member">SDL_RenderCopyF</ref>(<ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*<sp/>renderer,</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a8f486379aef534669f4f06f515e7ce6c" kindref="member">texture</ref>,</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref><sp/>*<sp/>srcrect,</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___f_rect" kindref="compound">SDL_FRect</ref><sp/>*<sp/>dstrect);</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"></highlight></codeline>
<codeline lineno="1593" refid="_s_d_l__render_8h_1ac7f9810c9b14afb97cd9b0bbc68ac73d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1ac7f9810c9b14afb97cd9b0bbc68ac73d" kindref="member">SDL_RenderCopyExF</ref>(<ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*<sp/>renderer,</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a8f486379aef534669f4f06f515e7ce6c" kindref="member">texture</ref>,</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref><sp/>*<sp/>srcrect,</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___f_rect" kindref="compound">SDL_FRect</ref><sp/>*<sp/>dstrect,</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl__glext_8h_1a9e06c1f76a20fed54ca742cd25cb02c4" kindref="member">angle</ref>,</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___f_point" kindref="compound">SDL_FPoint</ref><sp/>*center,</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__render_8h_1a6280e56838e0e684caa0869c7c973c12" kindref="member">SDL_RendererFlip</ref><sp/>flip);</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"></highlight></codeline>
<codeline lineno="1620" refid="_s_d_l__render_8h_1a7b2ac666852256d171a50e3af815a910" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1a7b2ac666852256d171a50e3af815a910" kindref="member">SDL_RenderGeometry</ref>(<ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*renderer,</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref><sp/>*<ref refid="_s_d_l__opengl__glext_8h_1a8f486379aef534669f4f06f515e7ce6c" kindref="member">texture</ref>,</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___vertex" kindref="compound">SDL_Vertex</ref><sp/>*vertices,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_vertices,</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<ref refid="_s_d_l__opengl_8h_1adbd1b09d60fa0a569e6873aa161d44c7" kindref="member">indices</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_indices);</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"></highlight></codeline>
<codeline lineno="1649" refid="_s_d_l__render_8h_1a7b20020e712422db59f9e76be9abc04f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1a7b20020e712422db59f9e76be9abc04f" kindref="member">SDL_RenderGeometryRaw</ref>(<ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*renderer,</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref><sp/>*<ref refid="_s_d_l__opengl__glext_8h_1a8f486379aef534669f4f06f515e7ce6c" kindref="member">texture</ref>,</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*xy,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xy_stride,</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___color" kindref="compound">SDL_Color</ref><sp/>*<ref refid="_s_d_l__opengl__glext_8h_1a3ea846f998d64f079b86052b6c4193a8" kindref="member">color</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>color_stride,</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*uv,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>uv_stride,</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_vertices,</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="_s_d_l__opengl_8h_1adbd1b09d60fa0a569e6873aa161d44c7" kindref="member">indices</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_indices,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size_indices);</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"></highlight></codeline>
<codeline lineno="1682" refid="_s_d_l__render_8h_1a6aa7797b165275f1bdd76c3188a784f9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1a6aa7797b165275f1bdd76c3188a784f9" kindref="member">SDL_RenderReadPixels</ref>(<ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*<sp/>renderer,</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref><sp/>*<sp/>rect,</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref><sp/><ref refid="_s_d_l__audio_8h_1a71a65ffd977afe9c3fef116a5bc9ee27" kindref="member">format</ref>,</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="_s_d_l__opengl_8h_1ada7ad693ea2e311b8103f4693fc35f80" kindref="member">pixels</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pitch);</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"></highlight></codeline>
<codeline lineno="1722" refid="_s_d_l__render_8h_1a48fa9d24395f3610746988ecca2aae86" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1a48fa9d24395f3610746988ecca2aae86" kindref="member">SDL_RenderPresent</ref>(<ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*<sp/>renderer);</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"></highlight></codeline>
<codeline lineno="1737" refid="_s_d_l__render_8h_1a078c0a925e24542d356a02183a306be6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1a078c0a925e24542d356a02183a306be6" kindref="member">SDL_DestroyTexture</ref>(<ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a8f486379aef534669f4f06f515e7ce6c" kindref="member">texture</ref>);</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"></highlight></codeline>
<codeline lineno="1748" refid="_s_d_l__render_8h_1ab1f096742fa9c882c3f1555ee62c4ac2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1ab1f096742fa9c882c3f1555ee62c4ac2" kindref="member">SDL_DestroyRenderer</ref>(<ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*<sp/>renderer);</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"></highlight></codeline>
<codeline lineno="1779" refid="_s_d_l__render_8h_1a1b874552e4d5dcfa069256e49c6c2ae4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1a1b874552e4d5dcfa069256e49c6c2ae4" kindref="member">SDL_RenderFlush</ref>(<ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*<sp/>renderer);</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"></highlight></codeline>
<codeline lineno="1781"><highlight class="normal"></highlight></codeline>
<codeline lineno="1817" refid="_s_d_l__render_8h_1a00a25a5b53d11a363aa8dac1120cd274" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1a00a25a5b53d11a363aa8dac1120cd274" kindref="member">SDL_GL_BindTexture</ref>(<ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref><sp/>*<ref refid="_s_d_l__opengl__glext_8h_1a8f486379aef534669f4f06f515e7ce6c" kindref="member">texture</ref>,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*texw,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*texh);</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"></highlight></codeline>
<codeline lineno="1832" refid="_s_d_l__render_8h_1aaf7df600fe205822dea3a9e56f6c78ad" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1aaf7df600fe205822dea3a9e56f6c78ad" kindref="member">SDL_GL_UnbindTexture</ref>(<ref refid="_s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5" kindref="member">SDL_Texture</ref><sp/>*<ref refid="_s_d_l__opengl__glext_8h_1a8f486379aef534669f4f06f515e7ce6c" kindref="member">texture</ref>);</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"></highlight></codeline>
<codeline lineno="1848" refid="_s_d_l__render_8h_1a40ee6191edf8a60c9cb1adc00a10aefb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1a40ee6191edf8a60c9cb1adc00a10aefb" kindref="member">SDL_RenderGetMetalLayer</ref>(<ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*<sp/>renderer);</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"></highlight></codeline>
<codeline lineno="1869" refid="_s_d_l__render_8h_1a17c520ab4254564e2dddff455ecf9eb8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1a17c520ab4254564e2dddff455ecf9eb8" kindref="member">SDL_RenderGetMetalCommandEncoder</ref>(<ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref><sp/>*<sp/>renderer);</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"></highlight></codeline>
<codeline lineno="1880" refid="_s_d_l__render_8h_1afe68207df287bda5b85a4bb84e720522" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__render_8h_1afe68207df287bda5b85a4bb84e720522" kindref="member">SDL_RenderSetVSync</ref>(<ref refid="_s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4" kindref="member">SDL_Renderer</ref>*<sp/>renderer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vsync);</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"></highlight></codeline>
<codeline lineno="1882"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Ends<sp/>C<sp/>function<sp/>definitions<sp/>when<sp/>using<sp/>C++<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1883"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1884"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1886"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="close__code_8h" kindref="compound">close_code.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1887"><highlight class="normal"></highlight></codeline>
<codeline lineno="1888"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>SDL_render_h_<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1889"><highlight class="normal"></highlight></codeline>
<codeline lineno="1890"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>vi:<sp/>set<sp/>ts=4<sp/>sw=4<sp/>expandtab:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="D:/RayTracing/include/SDL_render.h"/>
  </compounddef>
</doxygen>
