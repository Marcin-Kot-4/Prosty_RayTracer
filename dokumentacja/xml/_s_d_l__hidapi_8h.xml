<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="_s_d_l__hidapi_8h" kind="file" language="C++">
    <compoundname>SDL_hidapi.h</compoundname>
    <includes refid="_s_d_l__stdinc_8h" local="yes">SDL_stdinc.h</includes>
    <includes refid="begin__code_8h" local="yes">begin_code.h</includes>
    <includes refid="close__code_8h" local="yes">close_code.h</includes>
    <includedby refid="_s_d_l_8h" local="yes">D:/RayTracing/include/SDL.h</includedby>
    <incdepgraph>
      <node id="3">
        <label>SDL_config.h</label>
        <link refid="_s_d_l__config_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>D:/RayTracing/include/SDL_hidapi.h</label>
        <link refid="_s_d_l__hidapi_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>SDL_platform.h</label>
        <link refid="_s_d_l__platform_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>SDL_stdinc.h</label>
        <link refid="_s_d_l__stdinc_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>begin_code.h</label>
        <link refid="begin__code_8h"/>
      </node>
      <node id="6">
        <label>close_code.h</label>
        <link refid="close__code_8h"/>
      </node>
      <node id="8">
        <label>stdarg.h</label>
      </node>
      <node id="7">
        <label>stddef.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4">
        <label>D:/RayTracing/CApp.cpp</label>
        <link refid="_c_app_8cpp"/>
      </node>
      <node id="3">
        <label>D:/RayTracing/CApp.h</label>
        <link refid="_c_app_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>D:/RayTracing/RayTrace/Image.cpp</label>
        <link refid="_image_8cpp"/>
      </node>
      <node id="6">
        <label>D:/RayTracing/RayTrace/Image.h</label>
        <link refid="_image_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>D:/RayTracing/RayTrace/Scene.cpp</label>
        <link refid="_scene_8cpp"/>
      </node>
      <node id="8">
        <label>D:/RayTracing/RayTrace/Scene.h</label>
        <link refid="_scene_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>D:/RayTracing/RayTrace/Textures/textureimage.cpp</label>
        <link refid="textureimage_8cpp"/>
      </node>
      <node id="10">
        <label>D:/RayTracing/RayTrace/Textures/textureimage.h</label>
        <link refid="textureimage_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>D:/RayTracing/include/SDL.h</label>
        <link refid="_s_d_l_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>D:/RayTracing/include/SDL_hidapi.h</label>
        <link refid="_s_d_l__hidapi_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>D:/RayTracing/include/SDL_test.h</label>
        <link refid="_s_d_l__test_8h"/>
      </node>
      <node id="13">
        <label>D:/RayTracing/include/SDL_test_common.h</label>
        <link refid="_s_d_l__test__common_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>D:/RayTracing/include/SDL_test_compare.h</label>
        <link refid="_s_d_l__test__compare_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>D:/RayTracing/include/SDL_test_images.h</label>
        <link refid="_s_d_l__test__images_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>D:/RayTracing/main.cpp</label>
        <link refid="main_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_s_d_l__hid__device__info" prot="public">SDL_hid_device_info</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_s_d_l__hidapi_8h_1a01e37a76f52ebe32810eae8de7ffad85" prot="public" static="no">
        <type>struct SDL_hid_device_</type>
        <definition>typedef struct SDL_hid_device_ SDL_hid_device</definition>
        <argsstring></argsstring>
        <name>SDL_hid_device</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>opaque hidapi structure </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_hidapi.h" line="77" column="30" bodyfile="D:/RayTracing/include/SDL_hidapi.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_s_d_l__hidapi_8h_1afb328d87ec06aec76ebbca2eab491a70" prot="public" static="no">
        <type>struct <ref refid="struct_s_d_l__hid__device__info" kindref="compound">SDL_hid_device_info</ref></type>
        <definition>typedef struct SDL_hid_device_info SDL_hid_device_info</definition>
        <argsstring></argsstring>
        <name>SDL_hid_device_info</name>
        <briefdescription>
<para>Information about a connected HID device. </para>
        </briefdescription>
        <detaileddescription>
<para>hidapi info structure </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_hidapi.h" line="122" column="21"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_s_d_l__hidapi_8h_1afab0dc5913a3e90ed4434bd2778fe1bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_hid_init</definition>
        <argsstring>(void)</argsstring>
        <name>SDL_hid_init</name>
        <param>
          <type><ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize the HIDAPI library.</para>
<para>This function initializes the HIDAPI library. Calling it is not strictly necessary, as it will be called automatically by <ref refid="_s_d_l__hidapi_8h_1a5a0a8a98f734167ad2272c0152f51c92" kindref="member">SDL_hid_enumerate()</ref> and any of the SDL_hid_open_*() functions if it is needed. This function should be called at the beginning of execution however, if there is a chance of HIDAPI handles being opened by different threads simultaneously.</para>
<para>Each call to this function should have a matching call to <ref refid="_s_d_l__hidapi_8h_1a795ed5c8ed4410b5962742d1c92774c9" kindref="member">SDL_hid_exit()</ref></para>
<para><simplesect kind="return"><para>0 on success and -1 on error.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.18.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__hidapi_8h_1a795ed5c8ed4410b5962742d1c92774c9" kindref="member">SDL_hid_exit</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_hidapi.h" line="142" column="29" declfile="D:/RayTracing/include/SDL_hidapi.h" declline="142" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__hidapi_8h_1a795ed5c8ed4410b5962742d1c92774c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_hid_exit</definition>
        <argsstring>(void)</argsstring>
        <name>SDL_hid_exit</name>
        <param>
          <type><ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Finalize the HIDAPI library.</para>
<para>This function frees all of the static data associated with HIDAPI. It should be called at the end of execution to avoid memory leaks.</para>
<para><simplesect kind="return"><para>0 on success and -1 on error.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.18.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__hidapi_8h_1afab0dc5913a3e90ed4434bd2778fe1bf" kindref="member">SDL_hid_init</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_hidapi.h" line="156" column="29" declfile="D:/RayTracing/include/SDL_hidapi.h" declline="156" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__hidapi_8h_1a1d7587010cbd25a9fcf77e26682de356" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC Uint32 SDLCALL SDL_hid_device_change_count</definition>
        <argsstring>(void)</argsstring>
        <name>SDL_hid_device_change_count</name>
        <param>
          <type><ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check to see if devices may have been added or removed.</para>
<para>Enumerating the HID devices is an expensive operation, so you can call this to see if there have been any system device changes since the last call to this function. A change in the counter returned doesn&apos;t necessarily mean that anything has changed, but you can call <ref refid="_s_d_l__hidapi_8h_1a5a0a8a98f734167ad2272c0152f51c92" kindref="member">SDL_hid_enumerate()</ref> to get an updated device list.</para>
<para>Calling this function for the first time may cause a thread or other system resource to be allocated to track device change notifications.</para>
<para><simplesect kind="return"><para>a change counter that is incremented with each potential device change, or 0 if device change detection isn&apos;t available.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.18.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__hidapi_8h_1a5a0a8a98f734167ad2272c0152f51c92" kindref="member">SDL_hid_enumerate</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_hidapi.h" line="177" column="32" declfile="D:/RayTracing/include/SDL_hidapi.h" declline="177" declcolumn="32"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__hidapi_8h_1a5a0a8a98f734167ad2272c0152f51c92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="struct_s_d_l__hid__device__info" kindref="compound">SDL_hid_device_info</ref> *<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC SDL_hid_device_info *SDLCALL SDL_hid_enumerate</definition>
        <argsstring>(unsigned short vendor_id, unsigned short product_id)</argsstring>
        <name>SDL_hid_enumerate</name>
        <param>
          <type>unsigned short</type>
          <declname>vendor_id</declname>
        </param>
        <param>
          <type>unsigned short</type>
          <declname>product_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enumerate the HID Devices.</para>
<para>This function returns a linked list of all the HID devices attached to the system which match vendor_id and product_id. If <computeroutput>vendor_id</computeroutput> is set to 0 then any vendor matches. If <computeroutput>product_id</computeroutput> is set to 0 then any product matches. If <computeroutput>vendor_id</computeroutput> and <computeroutput>product_id</computeroutput> are both set to 0, then all HID devices will be returned.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vendor_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The Vendor ID (VID) of the types of device to open. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>product_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The Product ID (PID) of the types of device to open. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to a linked list of type <ref refid="struct_s_d_l__hid__device__info" kindref="compound">SDL_hid_device_info</ref>, containing information about the HID devices attached to the system, or NULL in the case of failure. Free this linked list by calling <ref refid="_s_d_l__hidapi_8h_1af2f46b6c5b92e35724b2bd3116e2eb1e" kindref="member">SDL_hid_free_enumeration()</ref>.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.18.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__hidapi_8h_1a1d7587010cbd25a9fcf77e26682de356" kindref="member">SDL_hid_device_change_count</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_hidapi.h" line="199" column="46" declfile="D:/RayTracing/include/SDL_hidapi.h" declline="199" declcolumn="46"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__hidapi_8h_1af2f46b6c5b92e35724b2bd3116e2eb1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC void SDLCALL SDL_hid_free_enumeration</definition>
        <argsstring>(SDL_hid_device_info *devs)</argsstring>
        <name>SDL_hid_free_enumeration</name>
        <param>
          <type><ref refid="struct_s_d_l__hid__device__info" kindref="compound">SDL_hid_device_info</ref> *</type>
          <declname>devs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Free an enumeration Linked List</para>
<para>This function frees a linked list created by <ref refid="_s_d_l__hidapi_8h_1a5a0a8a98f734167ad2272c0152f51c92" kindref="member">SDL_hid_enumerate()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>devs</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a list of struct_device returned from <ref refid="_s_d_l__hidapi_8h_1a5a0a8a98f734167ad2272c0152f51c92" kindref="member">SDL_hid_enumerate()</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>This function is available since SDL 2.0.18. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_hidapi.h" line="211" column="30" declfile="D:/RayTracing/include/SDL_hidapi.h" declline="211" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__hidapi_8h_1ae44777e4b49c6f9887a3d892102bd491" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__hidapi_8h_1a01e37a76f52ebe32810eae8de7ffad85" kindref="member">SDL_hid_device</ref> *<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC SDL_hid_device *SDLCALL SDL_hid_open</definition>
        <argsstring>(unsigned short vendor_id, unsigned short product_id, const wchar_t *serial_number)</argsstring>
        <name>SDL_hid_open</name>
        <param>
          <type>unsigned short</type>
          <declname>vendor_id</declname>
        </param>
        <param>
          <type>unsigned short</type>
          <declname>product_id</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>serial_number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Open a HID device using a Vendor ID (VID), Product ID (PID) and optionally a serial number.</para>
<para>If <computeroutput>serial_number</computeroutput> is NULL, the first device with the specified VID and PID is opened.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vendor_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The Vendor ID (VID) of the device to open. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>product_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The Product ID (PID) of the device to open. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>serial_number</parametername>
</parameternamelist>
<parameterdescription>
<para>The Serial Number of the device to open (Optionally NULL). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to a SDL_hid_device object on success or NULL on failure.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.18. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_hidapi.h" line="229" column="41" declfile="D:/RayTracing/include/SDL_hidapi.h" declline="229" declcolumn="41"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__hidapi_8h_1a8c16ac973dc4dee19687484f97e5bc79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__hidapi_8h_1a01e37a76f52ebe32810eae8de7ffad85" kindref="member">SDL_hid_device</ref> *<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC SDL_hid_device *SDLCALL SDL_hid_open_path</definition>
        <argsstring>(const char *path, int bExclusive)</argsstring>
        <name>SDL_hid_open_path</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bExclusive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Open a HID device by its path name.</para>
<para>The path name be determined by calling <ref refid="_s_d_l__hidapi_8h_1a5a0a8a98f734167ad2272c0152f51c92" kindref="member">SDL_hid_enumerate()</ref>, or a platform-specific path name can be used (eg: /dev/hidraw0 on Linux).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>The path name of the device to open </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to a SDL_hid_device object on success or NULL on failure.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.18. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_hidapi.h" line="243" column="41" declfile="D:/RayTracing/include/SDL_hidapi.h" declline="243" declcolumn="41"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__hidapi_8h_1a6f20cc83879d21bad4306f540475dd8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_hid_write</definition>
        <argsstring>(SDL_hid_device *dev, const unsigned char *data, size_t length)</argsstring>
        <name>SDL_hid_write</name>
        <param>
          <type><ref refid="_s_d_l__hidapi_8h_1a01e37a76f52ebe32810eae8de7ffad85" kindref="member">SDL_hid_device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__config_8h_1a7c94ea6f8948649f8d181ae55911eeaf" kindref="member">size_t</ref></type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write an Output report to a HID device.</para>
<para>The first byte of <computeroutput>data</computeroutput> must contain the Report ID. For devices which only support a single report, this must be set to 0x0. The remaining bytes contain the report data. Since the Report ID is mandatory, calls to <ref refid="_s_d_l__hidapi_8h_1a6f20cc83879d21bad4306f540475dd8f" kindref="member">SDL_hid_write()</ref> will always contain one more byte than the report contains. For example, if a hid report is 16 bytes long, 17 bytes must be passed to <ref refid="_s_d_l__hidapi_8h_1a6f20cc83879d21bad4306f540475dd8f" kindref="member">SDL_hid_write()</ref>, the Report ID (or 0x0, for devices with a single report), followed by the report data (16 bytes). In this example, the length passed in would be 17.</para>
<para><ref refid="_s_d_l__hidapi_8h_1a6f20cc83879d21bad4306f540475dd8f" kindref="member">SDL_hid_write()</ref> will send the data on the first OUT endpoint, if one exists. If it does not, it will send the data through the Control Endpoint (Endpoint 0).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>A device handle returned from <ref refid="_s_d_l__hidapi_8h_1ae44777e4b49c6f9887a3d892102bd491" kindref="member">SDL_hid_open()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to send, including the report number as the first byte. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length in bytes of the data to send. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the actual number of bytes written and -1 on error.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.18. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_hidapi.h" line="269" column="29" declfile="D:/RayTracing/include/SDL_hidapi.h" declline="269" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__hidapi_8h_1a2aa5d9a34cd1200e566d4ec47fc5dc5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_hid_read_timeout</definition>
        <argsstring>(SDL_hid_device *dev, unsigned char *data, size_t length, int milliseconds)</argsstring>
        <name>SDL_hid_read_timeout</name>
        <param>
          <type><ref refid="_s_d_l__hidapi_8h_1a01e37a76f52ebe32810eae8de7ffad85" kindref="member">SDL_hid_device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__config_8h_1a7c94ea6f8948649f8d181ae55911eeaf" kindref="member">size_t</ref></type>
          <declname>length</declname>
        </param>
        <param>
          <type>int</type>
          <declname>milliseconds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read an Input report from a HID device with timeout.</para>
<para>Input reports are returned to the host through the INTERRUPT IN endpoint. The first byte will contain the Report number if the device uses numbered reports.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>A device handle returned from <ref refid="_s_d_l__hidapi_8h_1ae44777e4b49c6f9887a3d892102bd491" kindref="member">SDL_hid_open()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>A buffer to put the read data into. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to read. For devices with multiple reports, make sure to read an extra byte for the report number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>milliseconds</parametername>
</parameternamelist>
<parameterdescription>
<para>timeout in milliseconds or -1 for blocking wait. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the actual number of bytes read and -1 on error. If no packet was available to be read within the timeout period, this function returns 0.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.18. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_hidapi.h" line="290" column="29" declfile="D:/RayTracing/include/SDL_hidapi.h" declline="290" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__hidapi_8h_1a6f41a95bea290df5a73b97e4bf5212a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_hid_read</definition>
        <argsstring>(SDL_hid_device *dev, unsigned char *data, size_t length)</argsstring>
        <name>SDL_hid_read</name>
        <param>
          <type><ref refid="_s_d_l__hidapi_8h_1a01e37a76f52ebe32810eae8de7ffad85" kindref="member">SDL_hid_device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__config_8h_1a7c94ea6f8948649f8d181ae55911eeaf" kindref="member">size_t</ref></type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read an Input report from a HID device.</para>
<para>Input reports are returned to the host through the INTERRUPT IN endpoint. The first byte will contain the Report number if the device uses numbered reports.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>A device handle returned from <ref refid="_s_d_l__hidapi_8h_1ae44777e4b49c6f9887a3d892102bd491" kindref="member">SDL_hid_open()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>A buffer to put the read data into. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to read. For devices with multiple reports, make sure to read an extra byte for the report number. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the actual number of bytes read and -1 on error. If no packet was available to be read and the handle is in non-blocking mode, this function returns 0.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.18. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_hidapi.h" line="310" column="29" declfile="D:/RayTracing/include/SDL_hidapi.h" declline="310" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__hidapi_8h_1a1f66ac734a1786884cb4f2b6309a60e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_hid_set_nonblocking</definition>
        <argsstring>(SDL_hid_device *dev, int nonblock)</argsstring>
        <name>SDL_hid_set_nonblocking</name>
        <param>
          <type><ref refid="_s_d_l__hidapi_8h_1a01e37a76f52ebe32810eae8de7ffad85" kindref="member">SDL_hid_device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nonblock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the device handle to be non-blocking.</para>
<para>In non-blocking mode calls to <ref refid="_s_d_l__hidapi_8h_1a6f41a95bea290df5a73b97e4bf5212a0" kindref="member">SDL_hid_read()</ref> will return immediately with a value of 0 if there is no data to be read. In blocking mode, <ref refid="_s_d_l__hidapi_8h_1a6f41a95bea290df5a73b97e4bf5212a0" kindref="member">SDL_hid_read()</ref> will wait (block) until there is data to read before returning.</para>
<para>Nonblocking can be turned on and off at any time.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>A device handle returned from <ref refid="_s_d_l__hidapi_8h_1ae44777e4b49c6f9887a3d892102bd491" kindref="member">SDL_hid_open()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nonblock</parametername>
</parameternamelist>
<parameterdescription>
<para>enable or not the nonblocking reads - 1 to enable nonblocking - 0 to disable nonblocking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success and -1 on error.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.18. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_hidapi.h" line="328" column="29" declfile="D:/RayTracing/include/SDL_hidapi.h" declline="328" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__hidapi_8h_1a5349c62d24338025552c6f244956699f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_hid_send_feature_report</definition>
        <argsstring>(SDL_hid_device *dev, const unsigned char *data, size_t length)</argsstring>
        <name>SDL_hid_send_feature_report</name>
        <param>
          <type><ref refid="_s_d_l__hidapi_8h_1a01e37a76f52ebe32810eae8de7ffad85" kindref="member">SDL_hid_device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__config_8h_1a7c94ea6f8948649f8d181ae55911eeaf" kindref="member">size_t</ref></type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Send a Feature report to the device.</para>
<para>Feature reports are sent over the Control endpoint as a Set_Report transfer. The first byte of <computeroutput>data</computeroutput> must contain the Report ID. For devices which only support a single report, this must be set to 0x0. The remaining bytes contain the report data. Since the Report ID is mandatory, calls to <ref refid="_s_d_l__hidapi_8h_1a5349c62d24338025552c6f244956699f" kindref="member">SDL_hid_send_feature_report()</ref> will always contain one more byte than the report contains. For example, if a hid report is 16 bytes long, 17 bytes must be passed to <ref refid="_s_d_l__hidapi_8h_1a5349c62d24338025552c6f244956699f" kindref="member">SDL_hid_send_feature_report()</ref>: the Report ID (or 0x0, for devices which do not use numbered reports), followed by the report data (16 bytes). In this example, the length passed in would be 17.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>A device handle returned from <ref refid="_s_d_l__hidapi_8h_1ae44777e4b49c6f9887a3d892102bd491" kindref="member">SDL_hid_open()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to send, including the report number as the first byte. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length in bytes of the data to send, including the report number. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the actual number of bytes written and -1 on error.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.18. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_hidapi.h" line="352" column="29" declfile="D:/RayTracing/include/SDL_hidapi.h" declline="352" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__hidapi_8h_1ab955370e07dc09c62367ab70d1784793" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_hid_get_feature_report</definition>
        <argsstring>(SDL_hid_device *dev, unsigned char *data, size_t length)</argsstring>
        <name>SDL_hid_get_feature_report</name>
        <param>
          <type><ref refid="_s_d_l__hidapi_8h_1a01e37a76f52ebe32810eae8de7ffad85" kindref="member">SDL_hid_device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__config_8h_1a7c94ea6f8948649f8d181ae55911eeaf" kindref="member">size_t</ref></type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a feature report from a HID device.</para>
<para>Set the first byte of <computeroutput>data</computeroutput> to the Report ID of the report to be read. Make sure to allow space for this extra byte in <computeroutput>data</computeroutput>. Upon return, the first byte will still contain the Report ID, and the report data will start in data[1].</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>A device handle returned from <ref refid="_s_d_l__hidapi_8h_1ae44777e4b49c6f9887a3d892102bd491" kindref="member">SDL_hid_open()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>A buffer to put the read data into, including the Report ID. Set the first byte of <computeroutput>data</computeroutput> to the Report ID of the report to be read, or set it to zero if your device does not use numbered reports. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to read, including an extra byte for the report ID. The buffer can be longer than the actual report. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of bytes read plus one for the report ID (which is still in the first byte), or -1 on error.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.18. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_hidapi.h" line="374" column="29" declfile="D:/RayTracing/include/SDL_hidapi.h" declline="374" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__hidapi_8h_1a0e402a95d523c439b3a55be0c05dd6ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC void SDLCALL SDL_hid_close</definition>
        <argsstring>(SDL_hid_device *dev)</argsstring>
        <name>SDL_hid_close</name>
        <param>
          <type><ref refid="_s_d_l__hidapi_8h_1a01e37a76f52ebe32810eae8de7ffad85" kindref="member">SDL_hid_device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Close a HID device.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>A device handle returned from <ref refid="_s_d_l__hidapi_8h_1ae44777e4b49c6f9887a3d892102bd491" kindref="member">SDL_hid_open()</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>This function is available since SDL 2.0.18. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_hidapi.h" line="383" column="30" declfile="D:/RayTracing/include/SDL_hidapi.h" declline="383" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__hidapi_8h_1abc79c19d7d67a361bb39b5ae4704c950" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_hid_get_manufacturer_string</definition>
        <argsstring>(SDL_hid_device *dev, wchar_t *string, size_t maxlen)</argsstring>
        <name>SDL_hid_get_manufacturer_string</name>
        <param>
          <type><ref refid="_s_d_l__hidapi_8h_1a01e37a76f52ebe32810eae8de7ffad85" kindref="member">SDL_hid_device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>wchar_t *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__config_8h_1a7c94ea6f8948649f8d181ae55911eeaf" kindref="member">size_t</ref></type>
          <declname>maxlen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get The Manufacturer String from a HID device.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>A device handle returned from <ref refid="_s_d_l__hidapi_8h_1ae44777e4b49c6f9887a3d892102bd491" kindref="member">SDL_hid_open()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>A wide string buffer to put the data into. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxlen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the buffer in multiples of wchar_t. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success and -1 on error.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.18. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_hidapi.h" line="395" column="29" declfile="D:/RayTracing/include/SDL_hidapi.h" declline="395" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__hidapi_8h_1abfc7382b9200805fea25b4483a3cb224" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_hid_get_product_string</definition>
        <argsstring>(SDL_hid_device *dev, wchar_t *string, size_t maxlen)</argsstring>
        <name>SDL_hid_get_product_string</name>
        <param>
          <type><ref refid="_s_d_l__hidapi_8h_1a01e37a76f52ebe32810eae8de7ffad85" kindref="member">SDL_hid_device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>wchar_t *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__config_8h_1a7c94ea6f8948649f8d181ae55911eeaf" kindref="member">size_t</ref></type>
          <declname>maxlen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get The Product String from a HID device.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>A device handle returned from <ref refid="_s_d_l__hidapi_8h_1ae44777e4b49c6f9887a3d892102bd491" kindref="member">SDL_hid_open()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>A wide string buffer to put the data into. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxlen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the buffer in multiples of wchar_t. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success and -1 on error.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.18. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_hidapi.h" line="407" column="29" declfile="D:/RayTracing/include/SDL_hidapi.h" declline="407" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__hidapi_8h_1a06110655bc7e7c8a3a8e1d43a5af998b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_hid_get_serial_number_string</definition>
        <argsstring>(SDL_hid_device *dev, wchar_t *string, size_t maxlen)</argsstring>
        <name>SDL_hid_get_serial_number_string</name>
        <param>
          <type><ref refid="_s_d_l__hidapi_8h_1a01e37a76f52ebe32810eae8de7ffad85" kindref="member">SDL_hid_device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>wchar_t *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__config_8h_1a7c94ea6f8948649f8d181ae55911eeaf" kindref="member">size_t</ref></type>
          <declname>maxlen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get The Serial Number String from a HID device.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>A device handle returned from <ref refid="_s_d_l__hidapi_8h_1ae44777e4b49c6f9887a3d892102bd491" kindref="member">SDL_hid_open()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>A wide string buffer to put the data into. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxlen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the buffer in multiples of wchar_t. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success and -1 on error.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.18. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_hidapi.h" line="419" column="29" declfile="D:/RayTracing/include/SDL_hidapi.h" declline="419" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__hidapi_8h_1a8c58e5c7c4ce4920507e316da2ca07ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_hid_get_indexed_string</definition>
        <argsstring>(SDL_hid_device *dev, int string_index, wchar_t *string, size_t maxlen)</argsstring>
        <name>SDL_hid_get_indexed_string</name>
        <param>
          <type><ref refid="_s_d_l__hidapi_8h_1a01e37a76f52ebe32810eae8de7ffad85" kindref="member">SDL_hid_device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>string_index</declname>
        </param>
        <param>
          <type>wchar_t *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__config_8h_1a7c94ea6f8948649f8d181ae55911eeaf" kindref="member">size_t</ref></type>
          <declname>maxlen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a string from a HID device, based on its string index.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>A device handle returned from <ref refid="_s_d_l__hidapi_8h_1ae44777e4b49c6f9887a3d892102bd491" kindref="member">SDL_hid_open()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>string_index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the string to get. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>A wide string buffer to put the data into. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxlen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the buffer in multiples of wchar_t. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success and -1 on error.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.18. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_hidapi.h" line="432" column="29" declfile="D:/RayTracing/include/SDL_hidapi.h" declline="432" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__hidapi_8h_1a472eb84a7526e0c9fb6b696b2fa7a039" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC void SDLCALL SDL_hid_ble_scan</definition>
        <argsstring>(SDL_bool active)</argsstring>
        <name>SDL_hid_ble_scan</name>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref></type>
          <declname>active</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Start or stop a BLE scan on iOS and tvOS to pair Steam Controllers</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>active</parametername>
</parameternamelist>
<parameterdescription>
<para>SDL_TRUE to start the scan, SDL_FALSE to stop the scan</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>This function is available since SDL 2.0.18. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_hidapi.h" line="441" column="30" declfile="D:/RayTracing/include/SDL_hidapi.h" declline="441" declcolumn="30"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Header file for SDL HIDAPI functions.</para>
<para>This is an adaptation of the original HIDAPI interface by Alan Ott, and includes source code licensed under the following BSD license:</para>
<para>Copyright (c) 2010, Alan Ott, Signal 11 Software All rights reserved.</para>
<para>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</para>
<para>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. Neither the name of Signal 11 Software nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.</para>
<para>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</para>
<para>If you would like a version of SDL without this code, you can build SDL with SDL_HIDAPI_DISABLED defined to 1. You might want to do this for example on iOS or tvOS to avoid a dependency on the CoreBluetooth framework. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/>Simple<sp/>DirectMedia<sp/>Layer</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/>Copyright<sp/>(C)<sp/>1997-2022<sp/>Sam<sp/>Lantinga<sp/>&lt;slouken@libsdl.org&gt;</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/>This<sp/>software<sp/>is<sp/>provided<sp/>&apos;as-is&apos;,<sp/>without<sp/>any<sp/>express<sp/>or<sp/>implied</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/>warranty.<sp/><sp/>In<sp/>no<sp/>event<sp/>will<sp/>the<sp/>authors<sp/>be<sp/>held<sp/>liable<sp/>for<sp/>any<sp/>damages</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/>arising<sp/>from<sp/>the<sp/>use<sp/>of<sp/>this<sp/>software.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/>Permission<sp/>is<sp/>granted<sp/>to<sp/>anyone<sp/>to<sp/>use<sp/>this<sp/>software<sp/>for<sp/>any<sp/>purpose,</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/>including<sp/>commercial<sp/>applications,<sp/>and<sp/>to<sp/>alter<sp/>it<sp/>and<sp/>redistribute<sp/>it</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/>freely,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>restrictions:</highlight></codeline>
<codeline lineno="12"><highlight class="comment"></highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/>1.<sp/>The<sp/>origin<sp/>of<sp/>this<sp/>software<sp/>must<sp/>not<sp/>be<sp/>misrepresented;<sp/>you<sp/>must<sp/>not</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>claim<sp/>that<sp/>you<sp/>wrote<sp/>the<sp/>original<sp/>software.<sp/>If<sp/>you<sp/>use<sp/>this<sp/>software</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>in<sp/>a<sp/>product,<sp/>an<sp/>acknowledgment<sp/>in<sp/>the<sp/>product<sp/>documentation<sp/>would<sp/>be</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>appreciated<sp/>but<sp/>is<sp/>not<sp/>required.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/>2.<sp/>Altered<sp/>source<sp/>versions<sp/>must<sp/>be<sp/>plainly<sp/>marked<sp/>as<sp/>such,<sp/>and<sp/>must<sp/>not<sp/>be</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>misrepresented<sp/>as<sp/>being<sp/>the<sp/>original<sp/>software.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/>3.<sp/>This<sp/>notice<sp/>may<sp/>not<sp/>be<sp/>removed<sp/>or<sp/>altered<sp/>from<sp/>any<sp/>source<sp/>distribution.</highlight></codeline>
<codeline lineno="20"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SDL_hidapi_h_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SDL_hidapi_h_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_s_d_l__stdinc_8h" kindref="compound">SDL_stdinc.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="begin__code_8h" kindref="compound">begin_code.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Set<sp/>up<sp/>for<sp/>C<sp/>function<sp/>definitions,<sp/>even<sp/>when<sp/>using<sp/>C++<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">SDL_hid_device_;</highlight></codeline>
<codeline lineno="77" refid="_s_d_l__hidapi_8h_1a01e37a76f52ebe32810eae8de7ffad85" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">SDL_hid_device_<sp/><ref refid="_s_d_l__hidapi_8h_1a01e37a76f52ebe32810eae8de7ffad85" kindref="member">SDL_hid_device</ref>;<sp/></highlight></codeline>
<codeline lineno="83" refid="struct_s_d_l__hid__device__info" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_s_d_l__hid__device__info" kindref="compound">SDL_hid_device_info</ref></highlight></codeline>
<codeline lineno="84"><highlight class="normal">{</highlight></codeline>
<codeline lineno="86" refid="struct_s_d_l__hid__device__info_1aa66ffa58c4a37986285dee7d0adad766" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="struct_s_d_l__hid__device__info_1aa66ffa58c4a37986285dee7d0adad766" kindref="member">path</ref>;</highlight></codeline>
<codeline lineno="88" refid="struct_s_d_l__hid__device__info_1a7bb9b5c173278a6699b3191953fcfe77" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l__hid__device__info_1a7bb9b5c173278a6699b3191953fcfe77" kindref="member">vendor_id</ref>;</highlight></codeline>
<codeline lineno="90" refid="struct_s_d_l__hid__device__info_1a78b8d7cefcc61d786256280da7159dbc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l__hid__device__info_1a78b8d7cefcc61d786256280da7159dbc" kindref="member">product_id</ref>;</highlight></codeline>
<codeline lineno="92" refid="struct_s_d_l__hid__device__info_1af60f9bc8de63c26113cca7e60158b91d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*<ref refid="struct_s_d_l__hid__device__info_1af60f9bc8de63c26113cca7e60158b91d" kindref="member">serial_number</ref>;</highlight></codeline>
<codeline lineno="95" refid="struct_s_d_l__hid__device__info_1ad6eb1e9cafd756ef89cd427cccc89da8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l__hid__device__info_1ad6eb1e9cafd756ef89cd427cccc89da8" kindref="member">release_number</ref>;</highlight></codeline>
<codeline lineno="97" refid="struct_s_d_l__hid__device__info_1ac874d63dbfe581736033f266f08fd51a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*<ref refid="struct_s_d_l__hid__device__info_1ac874d63dbfe581736033f266f08fd51a" kindref="member">manufacturer_string</ref>;</highlight></codeline>
<codeline lineno="99" refid="struct_s_d_l__hid__device__info_1a80f37d1aaae118285bec4442a8c9b1d0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*<ref refid="struct_s_d_l__hid__device__info_1a80f37d1aaae118285bec4442a8c9b1d0" kindref="member">product_string</ref>;</highlight></codeline>
<codeline lineno="102" refid="struct_s_d_l__hid__device__info_1ace00a62000be5a947106f04d0dd5efc4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l__hid__device__info_1ace00a62000be5a947106f04d0dd5efc4" kindref="member">usage_page</ref>;</highlight></codeline>
<codeline lineno="105" refid="struct_s_d_l__hid__device__info_1ab5851e5c55c1903b63ecf8bb736c4249" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l__hid__device__info_1ab5851e5c55c1903b63ecf8bb736c4249" kindref="member">usage</ref>;</highlight></codeline>
<codeline lineno="112" refid="struct_s_d_l__hid__device__info_1ae1450dccd0f426357f6b95422645a0e3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l__hid__device__info_1ae1450dccd0f426357f6b95422645a0e3" kindref="member">interface_number</ref>;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="116" refid="struct_s_d_l__hid__device__info_1a3816985c4cc4210c750da3a9720a28f6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l__hid__device__info_1a3816985c4cc4210c750da3a9720a28f6" kindref="member">interface_class</ref>;</highlight></codeline>
<codeline lineno="117" refid="struct_s_d_l__hid__device__info_1a7dff2f9edbe860f476fdaf5e91614038" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l__hid__device__info_1a7dff2f9edbe860f476fdaf5e91614038" kindref="member">interface_subclass</ref>;</highlight></codeline>
<codeline lineno="118" refid="struct_s_d_l__hid__device__info_1a7ad2c1748503188c35a8a306a8abd55b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l__hid__device__info_1a7ad2c1748503188c35a8a306a8abd55b" kindref="member">interface_protocol</ref>;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="121" refid="struct_s_d_l__hid__device__info_1aa8da06646522138690bec6e5fba7540f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_s_d_l__hid__device__info" kindref="compound">SDL_hid_device_info</ref><sp/>*<ref refid="struct_s_d_l__hid__device__info_1aa8da06646522138690bec6e5fba7540f" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="122" refid="_s_d_l__hidapi_8h_1afb328d87ec06aec76ebbca2eab491a70" refkind="member"><highlight class="normal">}<sp/><ref refid="_s_d_l__hidapi_8h_1afb328d87ec06aec76ebbca2eab491a70" kindref="member">SDL_hid_device_info</ref>;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="_s_d_l__hidapi_8h_1afab0dc5913a3e90ed4434bd2778fe1bf" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__hidapi_8h_1afab0dc5913a3e90ed4434bd2778fe1bf" kindref="member">SDL_hid_init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="156" refid="_s_d_l__hidapi_8h_1a795ed5c8ed4410b5962742d1c92774c9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__hidapi_8h_1a795ed5c8ed4410b5962742d1c92774c9" kindref="member">SDL_hid_exit</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="177" refid="_s_d_l__hidapi_8h_1a1d7587010cbd25a9fcf77e26682de356" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__hidapi_8h_1a1d7587010cbd25a9fcf77e26682de356" kindref="member">SDL_hid_device_change_count</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="199" refid="_s_d_l__hidapi_8h_1a5a0a8a98f734167ad2272c0152f51c92" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="struct_s_d_l__hid__device__info" kindref="compound">SDL_hid_device_info</ref><sp/>*<sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__hidapi_8h_1a5a0a8a98f734167ad2272c0152f51c92" kindref="member">SDL_hid_enumerate</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l__hid__device__info_1a7bb9b5c173278a6699b3191953fcfe77" kindref="member">vendor_id</ref>,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l__hid__device__info_1a78b8d7cefcc61d786256280da7159dbc" kindref="member">product_id</ref>);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="211" refid="_s_d_l__hidapi_8h_1af2f46b6c5b92e35724b2bd3116e2eb1e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__hidapi_8h_1af2f46b6c5b92e35724b2bd3116e2eb1e" kindref="member">SDL_hid_free_enumeration</ref>(<ref refid="struct_s_d_l__hid__device__info" kindref="compound">SDL_hid_device_info</ref><sp/>*devs);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="229" refid="_s_d_l__hidapi_8h_1ae44777e4b49c6f9887a3d892102bd491" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="_s_d_l__hidapi_8h_1a01e37a76f52ebe32810eae8de7ffad85" kindref="member">SDL_hid_device</ref><sp/>*<sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__hidapi_8h_1ae44777e4b49c6f9887a3d892102bd491" kindref="member">SDL_hid_open</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l__hid__device__info_1a7bb9b5c173278a6699b3191953fcfe77" kindref="member">vendor_id</ref>,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l__hid__device__info_1a78b8d7cefcc61d786256280da7159dbc" kindref="member">product_id</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*<ref refid="struct_s_d_l__hid__device__info_1af60f9bc8de63c26113cca7e60158b91d" kindref="member">serial_number</ref>);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="243" refid="_s_d_l__hidapi_8h_1a8c16ac973dc4dee19687484f97e5bc79" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="_s_d_l__hidapi_8h_1a01e37a76f52ebe32810eae8de7ffad85" kindref="member">SDL_hid_device</ref><sp/>*<sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__hidapi_8h_1a8c16ac973dc4dee19687484f97e5bc79" kindref="member">SDL_hid_open_path</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="_s_d_l__opengl__glext_8h_1ab25d8cd967ccbd19b630d7100ff8f67e" kindref="member">path</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bExclusive<sp/></highlight><highlight class="comment">/*<sp/>=<sp/>false<sp/>*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="269" refid="_s_d_l__hidapi_8h_1a6f20cc83879d21bad4306f540475dd8f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__hidapi_8h_1a6f20cc83879d21bad4306f540475dd8f" kindref="member">SDL_hid_write</ref>(<ref refid="_s_d_l__hidapi_8h_1a01e37a76f52ebe32810eae8de7ffad85" kindref="member">SDL_hid_device</ref><sp/>*dev,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="_s_d_l__opengl_8h_1a2e335d56e2846b0fea47eed068b2d34a" kindref="member">data</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl__glext_8h_1ab9c919755bde3b34349e23a32b4e0fa7" kindref="member">length</ref>);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="290" refid="_s_d_l__hidapi_8h_1a2aa5d9a34cd1200e566d4ec47fc5dc5f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__hidapi_8h_1a2aa5d9a34cd1200e566d4ec47fc5dc5f" kindref="member">SDL_hid_read_timeout</ref>(<ref refid="_s_d_l__hidapi_8h_1a01e37a76f52ebe32810eae8de7ffad85" kindref="member">SDL_hid_device</ref><sp/>*dev,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="_s_d_l__opengl_8h_1a2e335d56e2846b0fea47eed068b2d34a" kindref="member">data</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl__glext_8h_1ab9c919755bde3b34349e23a32b4e0fa7" kindref="member">length</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>milliseconds);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="310" refid="_s_d_l__hidapi_8h_1a6f41a95bea290df5a73b97e4bf5212a0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__hidapi_8h_1a6f41a95bea290df5a73b97e4bf5212a0" kindref="member">SDL_hid_read</ref>(<ref refid="_s_d_l__hidapi_8h_1a01e37a76f52ebe32810eae8de7ffad85" kindref="member">SDL_hid_device</ref><sp/>*dev,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="_s_d_l__opengl_8h_1a2e335d56e2846b0fea47eed068b2d34a" kindref="member">data</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl__glext_8h_1ab9c919755bde3b34349e23a32b4e0fa7" kindref="member">length</ref>);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="328" refid="_s_d_l__hidapi_8h_1a1f66ac734a1786884cb4f2b6309a60e7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__hidapi_8h_1a1f66ac734a1786884cb4f2b6309a60e7" kindref="member">SDL_hid_set_nonblocking</ref>(<ref refid="_s_d_l__hidapi_8h_1a01e37a76f52ebe32810eae8de7ffad85" kindref="member">SDL_hid_device</ref><sp/>*dev,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nonblock);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="352" refid="_s_d_l__hidapi_8h_1a5349c62d24338025552c6f244956699f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__hidapi_8h_1a5349c62d24338025552c6f244956699f" kindref="member">SDL_hid_send_feature_report</ref>(<ref refid="_s_d_l__hidapi_8h_1a01e37a76f52ebe32810eae8de7ffad85" kindref="member">SDL_hid_device</ref><sp/>*dev,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="_s_d_l__opengl_8h_1a2e335d56e2846b0fea47eed068b2d34a" kindref="member">data</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl__glext_8h_1ab9c919755bde3b34349e23a32b4e0fa7" kindref="member">length</ref>);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="374" refid="_s_d_l__hidapi_8h_1ab955370e07dc09c62367ab70d1784793" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__hidapi_8h_1ab955370e07dc09c62367ab70d1784793" kindref="member">SDL_hid_get_feature_report</ref>(<ref refid="_s_d_l__hidapi_8h_1a01e37a76f52ebe32810eae8de7ffad85" kindref="member">SDL_hid_device</ref><sp/>*dev,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="_s_d_l__opengl_8h_1a2e335d56e2846b0fea47eed068b2d34a" kindref="member">data</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl__glext_8h_1ab9c919755bde3b34349e23a32b4e0fa7" kindref="member">length</ref>);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="383" refid="_s_d_l__hidapi_8h_1a0e402a95d523c439b3a55be0c05dd6ba" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__hidapi_8h_1a0e402a95d523c439b3a55be0c05dd6ba" kindref="member">SDL_hid_close</ref>(<ref refid="_s_d_l__hidapi_8h_1a01e37a76f52ebe32810eae8de7ffad85" kindref="member">SDL_hid_device</ref><sp/>*dev);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="395" refid="_s_d_l__hidapi_8h_1abc79c19d7d67a361bb39b5ae4704c950" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__hidapi_8h_1abc79c19d7d67a361bb39b5ae4704c950" kindref="member">SDL_hid_get_manufacturer_string</ref>(<ref refid="_s_d_l__hidapi_8h_1a01e37a76f52ebe32810eae8de7ffad85" kindref="member">SDL_hid_device</ref><sp/>*dev,<sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>maxlen);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="407" refid="_s_d_l__hidapi_8h_1abfc7382b9200805fea25b4483a3cb224" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__hidapi_8h_1abfc7382b9200805fea25b4483a3cb224" kindref="member">SDL_hid_get_product_string</ref>(<ref refid="_s_d_l__hidapi_8h_1a01e37a76f52ebe32810eae8de7ffad85" kindref="member">SDL_hid_device</ref><sp/>*dev,<sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>maxlen);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="419" refid="_s_d_l__hidapi_8h_1a06110655bc7e7c8a3a8e1d43a5af998b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__hidapi_8h_1a06110655bc7e7c8a3a8e1d43a5af998b" kindref="member">SDL_hid_get_serial_number_string</ref>(<ref refid="_s_d_l__hidapi_8h_1a01e37a76f52ebe32810eae8de7ffad85" kindref="member">SDL_hid_device</ref><sp/>*dev,<sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>maxlen);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="432" refid="_s_d_l__hidapi_8h_1a8c58e5c7c4ce4920507e316da2ca07ea" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__hidapi_8h_1a8c58e5c7c4ce4920507e316da2ca07ea" kindref="member">SDL_hid_get_indexed_string</ref>(<ref refid="_s_d_l__hidapi_8h_1a01e37a76f52ebe32810eae8de7ffad85" kindref="member">SDL_hid_device</ref><sp/>*dev,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>string_index,<sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>maxlen);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="441" refid="_s_d_l__hidapi_8h_1a472eb84a7526e0c9fb6b696b2fa7a039" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__hidapi_8h_1a472eb84a7526e0c9fb6b696b2fa7a039" kindref="member">SDL_hid_ble_scan</ref>(<ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref><sp/>active);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Ends<sp/>C<sp/>function<sp/>definitions<sp/>when<sp/>using<sp/>C++<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal">}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="close__code_8h" kindref="compound">close_code.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>SDL_hidapi_h_<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>vi:<sp/>set<sp/>sts=4<sp/>ts=4<sp/>sw=4<sp/>expandtab:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="D:/RayTracing/include/SDL_hidapi.h"/>
  </compounddef>
</doxygen>
