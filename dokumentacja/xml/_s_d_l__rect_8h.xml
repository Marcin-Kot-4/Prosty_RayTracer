<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="_s_d_l__rect_8h" kind="file" language="C++">
    <compoundname>SDL_rect.h</compoundname>
    <includes refid="_s_d_l__stdinc_8h" local="yes">SDL_stdinc.h</includes>
    <includes refid="_s_d_l__error_8h" local="yes">SDL_error.h</includes>
    <includes refid="_s_d_l__pixels_8h" local="yes">SDL_pixels.h</includes>
    <includes refid="_s_d_l__rwops_8h" local="yes">SDL_rwops.h</includes>
    <includes refid="begin__code_8h" local="yes">begin_code.h</includes>
    <includes refid="close__code_8h" local="yes">close_code.h</includes>
    <includedby refid="_s_d_l__render_8h" local="yes">D:/RayTracing/include/SDL_render.h</includedby>
    <includedby refid="_s_d_l__shape_8h" local="yes">D:/RayTracing/include/SDL_shape.h</includedby>
    <includedby refid="_s_d_l__surface_8h" local="yes">D:/RayTracing/include/SDL_surface.h</includedby>
    <includedby refid="_s_d_l__video_8h" local="yes">D:/RayTracing/include/SDL_video.h</includedby>
    <incdepgraph>
      <node id="3">
        <label>SDL_config.h</label>
        <link refid="_s_d_l__config_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>SDL_endian.h</label>
        <link refid="_s_d_l__endian_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>SDL_error.h</label>
        <link refid="_s_d_l__error_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>SDL_pixels.h</label>
        <link refid="_s_d_l__pixels_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>SDL_platform.h</label>
        <link refid="_s_d_l__platform_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>D:/RayTracing/include/SDL_rect.h</label>
        <link refid="_s_d_l__rect_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>SDL_rwops.h</label>
        <link refid="_s_d_l__rwops_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>SDL_stdinc.h</label>
        <link refid="_s_d_l__stdinc_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>begin_code.h</label>
        <link refid="begin__code_8h"/>
      </node>
      <node id="6">
        <label>close_code.h</label>
        <link refid="close__code_8h"/>
      </node>
      <node id="8">
        <label>stdarg.h</label>
      </node>
      <node id="7">
        <label>stddef.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="5">
        <label>D:/RayTracing/CApp.cpp</label>
        <link refid="_c_app_8cpp"/>
      </node>
      <node id="4">
        <label>D:/RayTracing/CApp.h</label>
        <link refid="_c_app_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>D:/RayTracing/RayTrace/Image.cpp</label>
        <link refid="_image_8cpp"/>
      </node>
      <node id="7">
        <label>D:/RayTracing/RayTrace/Image.h</label>
        <link refid="_image_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>D:/RayTracing/RayTrace/Scene.cpp</label>
        <link refid="_scene_8cpp"/>
      </node>
      <node id="9">
        <label>D:/RayTracing/RayTrace/Scene.h</label>
        <link refid="_scene_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>D:/RayTracing/RayTrace/Textures/textureimage.cpp</label>
        <link refid="textureimage_8cpp"/>
      </node>
      <node id="11">
        <label>D:/RayTracing/RayTrace/Textures/textureimage.h</label>
        <link refid="textureimage_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>D:/RayTracing/include/SDL.h</label>
        <link refid="_s_d_l_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>D:/RayTracing/include/SDL_events.h</label>
        <link refid="_s_d_l__events_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>D:/RayTracing/include/SDL_gesture.h</label>
        <link refid="_s_d_l__gesture_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>D:/RayTracing/include/SDL_keyboard.h</label>
        <link refid="_s_d_l__keyboard_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>D:/RayTracing/include/SDL_messagebox.h</label>
        <link refid="_s_d_l__messagebox_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>D:/RayTracing/include/SDL_metal.h</label>
        <link refid="_s_d_l__metal_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>D:/RayTracing/include/SDL_mouse.h</label>
        <link refid="_s_d_l__mouse_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>D:/RayTracing/include/SDL_rect.h</label>
        <link refid="_s_d_l__rect_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>D:/RayTracing/include/SDL_render.h</label>
        <link refid="_s_d_l__render_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>D:/RayTracing/include/SDL_shape.h</label>
        <link refid="_s_d_l__shape_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>D:/RayTracing/include/SDL_surface.h</label>
        <link refid="_s_d_l__surface_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>D:/RayTracing/include/SDL_system.h</label>
        <link refid="_s_d_l__system_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>D:/RayTracing/include/SDL_syswm.h</label>
        <link refid="_s_d_l__syswm_8h"/>
      </node>
      <node id="13">
        <label>D:/RayTracing/include/SDL_test.h</label>
        <link refid="_s_d_l__test_8h"/>
      </node>
      <node id="14">
        <label>D:/RayTracing/include/SDL_test_common.h</label>
        <link refid="_s_d_l__test__common_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>D:/RayTracing/include/SDL_test_compare.h</label>
        <link refid="_s_d_l__test__compare_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>D:/RayTracing/include/SDL_test_images.h</label>
        <link refid="_s_d_l__test__images_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>D:/RayTracing/include/SDL_touch.h</label>
        <link refid="_s_d_l__touch_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>D:/RayTracing/include/SDL_video.h</label>
        <link refid="_s_d_l__video_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>D:/RayTracing/include/SDL_vulkan.h</label>
        <link refid="_s_d_l__vulkan_8h"/>
      </node>
      <node id="6">
        <label>D:/RayTracing/main.cpp</label>
        <link refid="main_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_s_d_l___point" prot="public">SDL_Point</innerclass>
    <innerclass refid="struct_s_d_l___f_point" prot="public">SDL_FPoint</innerclass>
    <innerclass refid="struct_s_d_l___rect" prot="public">SDL_Rect</innerclass>
    <innerclass refid="struct_s_d_l___f_rect" prot="public">SDL_FRect</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_s_d_l__rect_8h_1aa8e5504e162ce2079402a96ab24464b0" prot="public" static="no">
        <type>struct <ref refid="struct_s_d_l___point" kindref="compound">SDL_Point</ref></type>
        <definition>typedef struct SDL_Point SDL_Point</definition>
        <argsstring></argsstring>
        <name>SDL_Point</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The structure that defines a point (integer)</para>
<para><simplesect kind="see"><para><ref refid="_s_d_l__rect_8h_1afcbb58dbba760b9e6fdb4b5d1ece015c" kindref="member">SDL_EnclosePoints</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__rect_8h_1a2f9708f2739ef234c34e6feda50b4d2c" kindref="member">SDL_PointInRect</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_rect.h" line="52" column="11"/>
      </memberdef>
      <memberdef kind="typedef" id="_s_d_l__rect_8h_1ad2d04905f83d62ade9d6e215e3ac9874" prot="public" static="no">
        <type>struct <ref refid="struct_s_d_l___f_point" kindref="compound">SDL_FPoint</ref></type>
        <definition>typedef struct SDL_FPoint SDL_FPoint</definition>
        <argsstring></argsstring>
        <name>SDL_FPoint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The structure that defines a point (floating point)</para>
<para><simplesect kind="see"><para><ref refid="_s_d_l__rect_8h_1afcbb58dbba760b9e6fdb4b5d1ece015c" kindref="member">SDL_EnclosePoints</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__rect_8h_1a2f9708f2739ef234c34e6feda50b4d2c" kindref="member">SDL_PointInRect</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_rect.h" line="64" column="12"/>
      </memberdef>
      <memberdef kind="typedef" id="_s_d_l__rect_8h_1a9e17b356ca55e6b653f4fe33c5357ed5" prot="public" static="no">
        <type>struct <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref></type>
        <definition>typedef struct SDL_Rect SDL_Rect</definition>
        <argsstring></argsstring>
        <name>SDL_Rect</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A rectangle, with the origin at the upper left (integer).</para>
<para><simplesect kind="see"><para><ref refid="_s_d_l__rect_8h_1aac0e9b5d3f34baec6a2cde95bb01f49c" kindref="member">SDL_RectEmpty</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__rect_8h_1a156979fd3561cf90b87741d11057262a" kindref="member">SDL_RectEquals</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__rect_8h_1a191ec0b069421d4a36304b475697e847" kindref="member">SDL_HasIntersection</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__rect_8h_1aff8e3dd3b1a25443cd7c8cf02a087290" kindref="member">SDL_IntersectRect</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__rect_8h_1a659f2c25335202888408c95195823f9c" kindref="member">SDL_UnionRect</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__rect_8h_1afcbb58dbba760b9e6fdb4b5d1ece015c" kindref="member">SDL_EnclosePoints</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_rect.h" line="81" column="10"/>
      </memberdef>
      <memberdef kind="typedef" id="_s_d_l__rect_8h_1a9237dbcbeeba2308b0180aa51ec5ada5" prot="public" static="no">
        <type>struct <ref refid="struct_s_d_l___f_rect" kindref="compound">SDL_FRect</ref></type>
        <definition>typedef struct SDL_FRect SDL_FRect</definition>
        <argsstring></argsstring>
        <name>SDL_FRect</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A rectangle, with the origin at the upper left (floating point). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_rect.h" line="93" column="11"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_s_d_l__rect_8h_1a2f9708f2739ef234c34e6feda50b4d2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1addf1f12c70f89102cc187297860c5961" kindref="member">SDL_FORCE_INLINE</ref> <ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref></type>
        <definition>SDL_FORCE_INLINE SDL_bool SDL_PointInRect</definition>
        <argsstring>(const SDL_Point *p, const SDL_Rect *r)</argsstring>
        <name>SDL_PointInRect</name>
        <param>
          <type>const <ref refid="struct_s_d_l___point" kindref="compound">SDL_Point</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if point resides inside a rectangle. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_rect.h" line="99" column="27" bodyfile="D:/RayTracing/include/SDL_rect.h" bodystart="99" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__rect_8h_1aac0e9b5d3f34baec6a2cde95bb01f49c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1addf1f12c70f89102cc187297860c5961" kindref="member">SDL_FORCE_INLINE</ref> <ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref></type>
        <definition>SDL_FORCE_INLINE SDL_bool SDL_RectEmpty</definition>
        <argsstring>(const SDL_Rect *r)</argsstring>
        <name>SDL_RectEmpty</name>
        <param>
          <type>const <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if the rectangle has no area. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_rect.h" line="108" column="27" bodyfile="D:/RayTracing/include/SDL_rect.h" bodystart="108" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__rect_8h_1a156979fd3561cf90b87741d11057262a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1addf1f12c70f89102cc187297860c5961" kindref="member">SDL_FORCE_INLINE</ref> <ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref></type>
        <definition>SDL_FORCE_INLINE SDL_bool SDL_RectEquals</definition>
        <argsstring>(const SDL_Rect *a, const SDL_Rect *b)</argsstring>
        <name>SDL_RectEquals</name>
        <param>
          <type>const <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if the two rectangles are equal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_rect.h" line="116" column="27" bodyfile="D:/RayTracing/include/SDL_rect.h" bodystart="116" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__rect_8h_1a191ec0b069421d4a36304b475697e847" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC SDL_bool SDLCALL SDL_HasIntersection</definition>
        <argsstring>(const SDL_Rect *A, const SDL_Rect *B)</argsstring>
        <name>SDL_HasIntersection</name>
        <param>
          <type>const <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> *</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine whether two rectangles intersect.</para>
<para>If either pointer is NULL the function will return SDL_FALSE.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>an <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> structure representing the first rectangle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>an <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> structure representing the second rectangle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SDL_TRUE if there is an intersection, SDL_FALSE otherwise.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__rect_8h_1aff8e3dd3b1a25443cd7c8cf02a087290" kindref="member">SDL_IntersectRect</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_rect.h" line="135" column="34" declfile="D:/RayTracing/include/SDL_rect.h" declline="135" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__rect_8h_1aff8e3dd3b1a25443cd7c8cf02a087290" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC SDL_bool SDLCALL SDL_IntersectRect</definition>
        <argsstring>(const SDL_Rect *A, const SDL_Rect *B, SDL_Rect *result)</argsstring>
        <name>SDL_IntersectRect</name>
        <param>
          <type>const <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> *</type>
          <declname>B</declname>
        </param>
        <param>
          <type><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the intersection of two rectangles.</para>
<para>If <computeroutput>result</computeroutput> is NULL then this function will return SDL_FALSE.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>an <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> structure representing the first rectangle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>an <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> structure representing the second rectangle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>an <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> structure filled in with the intersection of rectangles <computeroutput>A</computeroutput> and <computeroutput>B</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SDL_TRUE if there is an intersection, SDL_FALSE otherwise.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__rect_8h_1a191ec0b069421d4a36304b475697e847" kindref="member">SDL_HasIntersection</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_rect.h" line="153" column="34" declfile="D:/RayTracing/include/SDL_rect.h" declline="153" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__rect_8h_1a659f2c25335202888408c95195823f9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC void SDLCALL SDL_UnionRect</definition>
        <argsstring>(const SDL_Rect *A, const SDL_Rect *B, SDL_Rect *result)</argsstring>
        <name>SDL_UnionRect</name>
        <param>
          <type>const <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> *</type>
          <declname>B</declname>
        </param>
        <param>
          <type><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the union of two rectangles.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>an <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> structure representing the first rectangle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>an <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> structure representing the second rectangle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>an <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> structure filled in with the union of rectangles <computeroutput>A</computeroutput> and <computeroutput>B</computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>This function is available since SDL 2.0.0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_rect.h" line="167" column="30" declfile="D:/RayTracing/include/SDL_rect.h" declline="167" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__rect_8h_1afcbb58dbba760b9e6fdb4b5d1ece015c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC SDL_bool SDLCALL SDL_EnclosePoints</definition>
        <argsstring>(const SDL_Point *points, int count, const SDL_Rect *clip, SDL_Rect *result)</argsstring>
        <name>SDL_EnclosePoints</name>
        <param>
          <type>const <ref refid="struct_s_d_l___point" kindref="compound">SDL_Point</ref> *</type>
          <declname>points</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <param>
          <type>const <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> *</type>
          <declname>clip</declname>
        </param>
        <param>
          <type><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate a minimal rectangle enclosing a set of points.</para>
<para>If <computeroutput>clip</computeroutput> is not NULL then only points inside of the clipping rectangle are considered.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>an array of <ref refid="struct_s_d_l___point" kindref="compound">SDL_Point</ref> structures representing points to be enclosed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of structures in the <computeroutput>points</computeroutput> array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clip</parametername>
</parameternamelist>
<parameterdescription>
<para>an <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> used for clipping or NULL to enclose all points </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>an <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> structure filled in with the minimal enclosing rectangle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SDL_TRUE if any points were enclosed or SDL_FALSE if all the points were outside of the clipping rectangle.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_rect.h" line="188" column="34" declfile="D:/RayTracing/include/SDL_rect.h" declline="188" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__rect_8h_1acdabdcbeb7b7083f94a092daa26ce069" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC SDL_bool SDLCALL SDL_IntersectRectAndLine</definition>
        <argsstring>(const SDL_Rect *rect, int *X1, int *Y1, int *X2, int *Y2)</argsstring>
        <name>SDL_IntersectRectAndLine</name>
        <param>
          <type>const <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> *</type>
          <declname>rect</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>X1</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>Y1</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>X2</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>Y2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the intersection of a rectangle and line segment.</para>
<para>This function is used to clip a line segment to a rectangle. A line segment contained entirely within the rectangle or that does not intersect will remain unchanged. A line segment that crosses the rectangle at either or both ends will be clipped to the boundary of the rectangle and the new coordinates saved in <computeroutput>X1</computeroutput>, <computeroutput>Y1</computeroutput>, <computeroutput>X2</computeroutput>, and/or <computeroutput>Y2</computeroutput> as necessary.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>an <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> structure representing the rectangle to intersect </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>X1</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to the starting X-coordinate of the line </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Y1</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to the starting Y-coordinate of the line </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>X2</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to the ending X-coordinate of the line </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Y2</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to the ending Y-coordinate of the line </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SDL_TRUE if there is an intersection, SDL_FALSE otherwise.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_rect.h" line="211" column="34" declfile="D:/RayTracing/include/SDL_rect.h" declline="211" declcolumn="34"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Header file for SDL_rect definition and management functions. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/>Simple<sp/>DirectMedia<sp/>Layer</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/>Copyright<sp/>(C)<sp/>1997-2022<sp/>Sam<sp/>Lantinga<sp/>&lt;slouken@libsdl.org&gt;</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/>This<sp/>software<sp/>is<sp/>provided<sp/>&apos;as-is&apos;,<sp/>without<sp/>any<sp/>express<sp/>or<sp/>implied</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/>warranty.<sp/><sp/>In<sp/>no<sp/>event<sp/>will<sp/>the<sp/>authors<sp/>be<sp/>held<sp/>liable<sp/>for<sp/>any<sp/>damages</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/>arising<sp/>from<sp/>the<sp/>use<sp/>of<sp/>this<sp/>software.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/>Permission<sp/>is<sp/>granted<sp/>to<sp/>anyone<sp/>to<sp/>use<sp/>this<sp/>software<sp/>for<sp/>any<sp/>purpose,</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/>including<sp/>commercial<sp/>applications,<sp/>and<sp/>to<sp/>alter<sp/>it<sp/>and<sp/>redistribute<sp/>it</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/>freely,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>restrictions:</highlight></codeline>
<codeline lineno="12"><highlight class="comment"></highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/>1.<sp/>The<sp/>origin<sp/>of<sp/>this<sp/>software<sp/>must<sp/>not<sp/>be<sp/>misrepresented;<sp/>you<sp/>must<sp/>not</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>claim<sp/>that<sp/>you<sp/>wrote<sp/>the<sp/>original<sp/>software.<sp/>If<sp/>you<sp/>use<sp/>this<sp/>software</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>in<sp/>a<sp/>product,<sp/>an<sp/>acknowledgment<sp/>in<sp/>the<sp/>product<sp/>documentation<sp/>would<sp/>be</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>appreciated<sp/>but<sp/>is<sp/>not<sp/>required.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/>2.<sp/>Altered<sp/>source<sp/>versions<sp/>must<sp/>be<sp/>plainly<sp/>marked<sp/>as<sp/>such,<sp/>and<sp/>must<sp/>not<sp/>be</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>misrepresented<sp/>as<sp/>being<sp/>the<sp/>original<sp/>software.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/>3.<sp/>This<sp/>notice<sp/>may<sp/>not<sp/>be<sp/>removed<sp/>or<sp/>altered<sp/>from<sp/>any<sp/>source<sp/>distribution.</highlight></codeline>
<codeline lineno="20"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SDL_rect_h_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SDL_rect_h_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_s_d_l__stdinc_8h" kindref="compound">SDL_stdinc.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_s_d_l__error_8h" kindref="compound">SDL_error.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_s_d_l__pixels_8h" kindref="compound">SDL_pixels.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_s_d_l__rwops_8h" kindref="compound">SDL_rwops.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="begin__code_8h" kindref="compound">begin_code.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Set<sp/>up<sp/>for<sp/>C<sp/>function<sp/>definitions,<sp/>even<sp/>when<sp/>using<sp/>C++<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="struct_s_d_l___point" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_s_d_l___point" kindref="compound">SDL_Point</ref></highlight></codeline>
<codeline lineno="49"><highlight class="normal">{</highlight></codeline>
<codeline lineno="50" refid="struct_s_d_l___point_1a2ee987d59888024771c8d83aec43056c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___point_1a2ee987d59888024771c8d83aec43056c" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="51" refid="struct_s_d_l___point_1aaa68aefa869f6bdf46367a70bd9414b0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___point_1aaa68aefa869f6bdf46367a70bd9414b0" kindref="member">y</ref>;</highlight></codeline>
<codeline lineno="52" refid="_s_d_l__rect_8h_1aa8e5504e162ce2079402a96ab24464b0" refkind="member"><highlight class="normal">}<sp/><ref refid="_s_d_l__rect_8h_1aa8e5504e162ce2079402a96ab24464b0" kindref="member">SDL_Point</ref>;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="struct_s_d_l___f_point" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_s_d_l___f_point" kindref="compound">SDL_FPoint</ref></highlight></codeline>
<codeline lineno="61"><highlight class="normal">{</highlight></codeline>
<codeline lineno="62" refid="struct_s_d_l___f_point_1a5211b32bdc9f5ac3b9972ab48418d6f3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___f_point_1a5211b32bdc9f5ac3b9972ab48418d6f3" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="63" refid="struct_s_d_l___f_point_1ac03695801666f08ee04b9d2e83f079ee" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___f_point_1ac03695801666f08ee04b9d2e83f079ee" kindref="member">y</ref>;</highlight></codeline>
<codeline lineno="64" refid="_s_d_l__rect_8h_1ad2d04905f83d62ade9d6e215e3ac9874" refkind="member"><highlight class="normal">}<sp/><ref refid="_s_d_l__rect_8h_1ad2d04905f83d62ade9d6e215e3ac9874" kindref="member">SDL_FPoint</ref>;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="struct_s_d_l___rect" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref></highlight></codeline>
<codeline lineno="78"><highlight class="normal">{</highlight></codeline>
<codeline lineno="79" refid="struct_s_d_l___rect_1a85418d94621dd6855805c4b5c7bf6482" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___rect_1a85418d94621dd6855805c4b5c7bf6482" kindref="member">x</ref>,<sp/><ref refid="struct_s_d_l___rect_1a822694af8ddca5fd0d5d94e47106ab85" kindref="member">y</ref>;</highlight></codeline>
<codeline lineno="80" refid="struct_s_d_l___rect_1a0a17d46b320af8063b746153348edd72" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___rect_1a56b7be5738fb6fab86881534a814c45e" kindref="member">w</ref>,<sp/><ref refid="struct_s_d_l___rect_1a0a17d46b320af8063b746153348edd72" kindref="member">h</ref>;</highlight></codeline>
<codeline lineno="81" refid="_s_d_l__rect_8h_1a9e17b356ca55e6b653f4fe33c5357ed5" refkind="member"><highlight class="normal">}<sp/><ref refid="_s_d_l__rect_8h_1a9e17b356ca55e6b653f4fe33c5357ed5" kindref="member">SDL_Rect</ref>;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="struct_s_d_l___f_rect" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_s_d_l___f_rect" kindref="compound">SDL_FRect</ref></highlight></codeline>
<codeline lineno="88"><highlight class="normal">{</highlight></codeline>
<codeline lineno="89" refid="struct_s_d_l___f_rect_1a7dff6b929b472aa0c3989bec52bd01e0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___f_rect_1a7dff6b929b472aa0c3989bec52bd01e0" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="90" refid="struct_s_d_l___f_rect_1a9c7105750c0b4b1d27ee86ecd29835b3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___f_rect_1a9c7105750c0b4b1d27ee86ecd29835b3" kindref="member">y</ref>;</highlight></codeline>
<codeline lineno="91" refid="struct_s_d_l___f_rect_1a8be19bcef20d0dc94302bfc092583bd7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___f_rect_1a8be19bcef20d0dc94302bfc092583bd7" kindref="member">w</ref>;</highlight></codeline>
<codeline lineno="92" refid="struct_s_d_l___f_rect_1a23dacbd4579fa5a425435124b197a183" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___f_rect_1a23dacbd4579fa5a425435124b197a183" kindref="member">h</ref>;</highlight></codeline>
<codeline lineno="93" refid="_s_d_l__rect_8h_1a9237dbcbeeba2308b0180aa51ec5ada5" refkind="member"><highlight class="normal">}<sp/><ref refid="_s_d_l__rect_8h_1a9237dbcbeeba2308b0180aa51ec5ada5" kindref="member">SDL_FRect</ref>;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="_s_d_l__rect_8h_1a2f9708f2739ef234c34e6feda50b4d2c" refkind="member"><highlight class="normal"><ref refid="begin__code_8h_1addf1f12c70f89102cc187297860c5961" kindref="member">SDL_FORCE_INLINE</ref><sp/><ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref><sp/><ref refid="_s_d_l__rect_8h_1a2f9708f2739ef234c34e6feda50b4d2c" kindref="member">SDL_PointInRect</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___point" kindref="compound">SDL_Point</ref><sp/>*<ref refid="_s_d_l__opengl__glext_8h_1aa5367c14d90f462230c2611b81b41d23" kindref="member">p</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref><sp/>*<ref refid="_s_d_l__opengl_8h_1a42ce7cdc612e53abee15043f80220d97" kindref="member">r</ref>)</highlight></codeline>
<codeline lineno="100"><highlight class="normal">{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>(<ref refid="_s_d_l__opengl__glext_8h_1aa5367c14d90f462230c2611b81b41d23" kindref="member">p</ref>-&gt;x<sp/>&gt;=<sp/><ref refid="_s_d_l__opengl_8h_1a42ce7cdc612e53abee15043f80220d97" kindref="member">r</ref>-&gt;x)<sp/>&amp;&amp;<sp/>(<ref refid="_s_d_l__opengl__glext_8h_1aa5367c14d90f462230c2611b81b41d23" kindref="member">p</ref>-&gt;x<sp/>&lt;<sp/>(<ref refid="_s_d_l__opengl_8h_1a42ce7cdc612e53abee15043f80220d97" kindref="member">r</ref>-&gt;x<sp/>+<sp/><ref refid="_s_d_l__opengl_8h_1a42ce7cdc612e53abee15043f80220d97" kindref="member">r</ref>-&gt;w))<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="_s_d_l__opengl__glext_8h_1aa5367c14d90f462230c2611b81b41d23" kindref="member">p</ref>-&gt;y<sp/>&gt;=<sp/><ref refid="_s_d_l__opengl_8h_1a42ce7cdc612e53abee15043f80220d97" kindref="member">r</ref>-&gt;y)<sp/>&amp;&amp;<sp/>(<ref refid="_s_d_l__opengl__glext_8h_1aa5367c14d90f462230c2611b81b41d23" kindref="member">p</ref>-&gt;y<sp/>&lt;<sp/>(<ref refid="_s_d_l__opengl_8h_1a42ce7cdc612e53abee15043f80220d97" kindref="member">r</ref>-&gt;y<sp/>+<sp/><ref refid="_s_d_l__opengl_8h_1a42ce7cdc612e53abee15043f80220d97" kindref="member">r</ref>-&gt;h))<sp/>)<sp/>?<sp/><ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733ba32efa84cfb0a91b0eee1edf6e941cf74" kindref="member">SDL_TRUE</ref><sp/>:<sp/><ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733ba76e680af86c5508ea4ccd9f969eb1ea2" kindref="member">SDL_FALSE</ref>;</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="_s_d_l__rect_8h_1aac0e9b5d3f34baec6a2cde95bb01f49c" refkind="member"><highlight class="normal"><ref refid="begin__code_8h_1addf1f12c70f89102cc187297860c5961" kindref="member">SDL_FORCE_INLINE</ref><sp/><ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref><sp/><ref refid="_s_d_l__rect_8h_1aac0e9b5d3f34baec6a2cde95bb01f49c" kindref="member">SDL_RectEmpty</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref><sp/>*<ref refid="_s_d_l__opengl_8h_1a42ce7cdc612e53abee15043f80220d97" kindref="member">r</ref>)</highlight></codeline>
<codeline lineno="109"><highlight class="normal">{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((!<ref refid="_s_d_l__opengl_8h_1a42ce7cdc612e53abee15043f80220d97" kindref="member">r</ref>)<sp/>||<sp/>(<ref refid="_s_d_l__opengl_8h_1a42ce7cdc612e53abee15043f80220d97" kindref="member">r</ref>-&gt;w<sp/>&lt;=<sp/>0)<sp/>||<sp/>(<ref refid="_s_d_l__opengl_8h_1a42ce7cdc612e53abee15043f80220d97" kindref="member">r</ref>-&gt;h<sp/>&lt;=<sp/>0))<sp/>?<sp/><ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733ba32efa84cfb0a91b0eee1edf6e941cf74" kindref="member">SDL_TRUE</ref><sp/>:<sp/><ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733ba76e680af86c5508ea4ccd9f969eb1ea2" kindref="member">SDL_FALSE</ref>;</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="116" refid="_s_d_l__rect_8h_1a156979fd3561cf90b87741d11057262a" refkind="member"><highlight class="normal"><ref refid="begin__code_8h_1addf1f12c70f89102cc187297860c5961" kindref="member">SDL_FORCE_INLINE</ref><sp/><ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref><sp/><ref refid="_s_d_l__rect_8h_1a156979fd3561cf90b87741d11057262a" kindref="member">SDL_RectEquals</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref><sp/>*<ref refid="_s_d_l__opengl__glext_8h_1a3309789fc188587d666cda5ece79cf82" kindref="member">a</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref><sp/>*<ref refid="_s_d_l__opengl__glext_8h_1a0f71581a41fd2264c8944126dabbd010" kindref="member">b</ref>)</highlight></codeline>
<codeline lineno="117"><highlight class="normal">{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="_s_d_l__opengl__glext_8h_1a3309789fc188587d666cda5ece79cf82" kindref="member">a</ref><sp/>&amp;&amp;<sp/><ref refid="_s_d_l__opengl__glext_8h_1a0f71581a41fd2264c8944126dabbd010" kindref="member">b</ref><sp/>&amp;&amp;<sp/>(<ref refid="_s_d_l__opengl__glext_8h_1a3309789fc188587d666cda5ece79cf82" kindref="member">a</ref>-&gt;x<sp/>==<sp/><ref refid="_s_d_l__opengl__glext_8h_1a0f71581a41fd2264c8944126dabbd010" kindref="member">b</ref>-&gt;x)<sp/>&amp;&amp;<sp/>(<ref refid="_s_d_l__opengl__glext_8h_1a3309789fc188587d666cda5ece79cf82" kindref="member">a</ref>-&gt;y<sp/>==<sp/><ref refid="_s_d_l__opengl__glext_8h_1a0f71581a41fd2264c8944126dabbd010" kindref="member">b</ref>-&gt;y)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="_s_d_l__opengl__glext_8h_1a3309789fc188587d666cda5ece79cf82" kindref="member">a</ref>-&gt;w<sp/>==<sp/><ref refid="_s_d_l__opengl__glext_8h_1a0f71581a41fd2264c8944126dabbd010" kindref="member">b</ref>-&gt;w)<sp/>&amp;&amp;<sp/>(<ref refid="_s_d_l__opengl__glext_8h_1a3309789fc188587d666cda5ece79cf82" kindref="member">a</ref>-&gt;h<sp/>==<sp/><ref refid="_s_d_l__opengl__glext_8h_1a0f71581a41fd2264c8944126dabbd010" kindref="member">b</ref>-&gt;h))<sp/>?<sp/><ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733ba32efa84cfb0a91b0eee1edf6e941cf74" kindref="member">SDL_TRUE</ref><sp/>:<sp/><ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733ba76e680af86c5508ea4ccd9f969eb1ea2" kindref="member">SDL_FALSE</ref>;</highlight></codeline>
<codeline lineno="120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="135" refid="_s_d_l__rect_8h_1a191ec0b069421d4a36304b475697e847" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__rect_8h_1a191ec0b069421d4a36304b475697e847" kindref="member">SDL_HasIntersection</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref><sp/>*<sp/>A,</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref><sp/>*<sp/>B);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="153" refid="_s_d_l__rect_8h_1aff8e3dd3b1a25443cd7c8cf02a087290" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__rect_8h_1aff8e3dd3b1a25443cd7c8cf02a087290" kindref="member">SDL_IntersectRect</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref><sp/>*<sp/>A,</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref><sp/>*<sp/>B,</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a321ff419cd5252e54cf95e64dc6687ee" kindref="member">result</ref>);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="167" refid="_s_d_l__rect_8h_1a659f2c25335202888408c95195823f9c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__rect_8h_1a659f2c25335202888408c95195823f9c" kindref="member">SDL_UnionRect</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref><sp/>*<sp/>A,</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref><sp/>*<sp/>B,</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a321ff419cd5252e54cf95e64dc6687ee" kindref="member">result</ref>);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="188" refid="_s_d_l__rect_8h_1afcbb58dbba760b9e6fdb4b5d1ece015c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__rect_8h_1afcbb58dbba760b9e6fdb4b5d1ece015c" kindref="member">SDL_EnclosePoints</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___point" kindref="compound">SDL_Point</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a0c0cc65d03e264ad2c5262927b620d3f" kindref="member">points</ref>,</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl_8h_1a619bc20e8198de3bd3f3d7fc34de66b2" kindref="member">count</ref>,</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref><sp/>*<sp/>clip,</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a321ff419cd5252e54cf95e64dc6687ee" kindref="member">result</ref>);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="211" refid="_s_d_l__rect_8h_1acdabdcbeb7b7083f94a092daa26ce069" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__rect_8h_1acdabdcbeb7b7083f94a092daa26ce069" kindref="member">SDL_IntersectRectAndLine</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref><sp/>*</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rect,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*X1,</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*Y1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*X2,</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*Y2);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Ends<sp/>C<sp/>function<sp/>definitions<sp/>when<sp/>using<sp/>C++<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal">}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="close__code_8h" kindref="compound">close_code.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>SDL_rect_h_<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>vi:<sp/>set<sp/>ts=4<sp/>sw=4<sp/>expandtab:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="D:/RayTracing/include/SDL_rect.h"/>
  </compounddef>
</doxygen>
