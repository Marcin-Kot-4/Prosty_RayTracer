<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="_s_d_l__surface_8h" kind="file" language="C++">
    <compoundname>SDL_surface.h</compoundname>
    <includes refid="_s_d_l__stdinc_8h" local="yes">SDL_stdinc.h</includes>
    <includes refid="_s_d_l__pixels_8h" local="yes">SDL_pixels.h</includes>
    <includes refid="_s_d_l__rect_8h" local="yes">SDL_rect.h</includes>
    <includes refid="_s_d_l__blendmode_8h" local="yes">SDL_blendmode.h</includes>
    <includes refid="_s_d_l__rwops_8h" local="yes">SDL_rwops.h</includes>
    <includes refid="begin__code_8h" local="yes">begin_code.h</includes>
    <includes refid="close__code_8h" local="yes">close_code.h</includes>
    <includedby refid="_s_d_l__shape_8h" local="yes">D:/RayTracing/include/SDL_shape.h</includedby>
    <includedby refid="_s_d_l__video_8h" local="yes">D:/RayTracing/include/SDL_video.h</includedby>
    <incdepgraph>
      <node id="14">
        <label>SDL_blendmode.h</label>
        <link refid="_s_d_l__blendmode_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>SDL_config.h</label>
        <link refid="_s_d_l__config_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>SDL_endian.h</label>
        <link refid="_s_d_l__endian_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>SDL_error.h</label>
        <link refid="_s_d_l__error_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>SDL_pixels.h</label>
        <link refid="_s_d_l__pixels_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>SDL_platform.h</label>
        <link refid="_s_d_l__platform_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>SDL_rect.h</label>
        <link refid="_s_d_l__rect_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>SDL_rwops.h</label>
        <link refid="_s_d_l__rwops_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>SDL_stdinc.h</label>
        <link refid="_s_d_l__stdinc_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>D:/RayTracing/include/SDL_surface.h</label>
        <link refid="_s_d_l__surface_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>begin_code.h</label>
        <link refid="begin__code_8h"/>
      </node>
      <node id="6">
        <label>close_code.h</label>
        <link refid="close__code_8h"/>
      </node>
      <node id="8">
        <label>stdarg.h</label>
      </node>
      <node id="7">
        <label>stddef.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="5">
        <label>D:/RayTracing/CApp.cpp</label>
        <link refid="_c_app_8cpp"/>
      </node>
      <node id="4">
        <label>D:/RayTracing/CApp.h</label>
        <link refid="_c_app_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>D:/RayTracing/RayTrace/Image.cpp</label>
        <link refid="_image_8cpp"/>
      </node>
      <node id="7">
        <label>D:/RayTracing/RayTrace/Image.h</label>
        <link refid="_image_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>D:/RayTracing/RayTrace/Scene.cpp</label>
        <link refid="_scene_8cpp"/>
      </node>
      <node id="9">
        <label>D:/RayTracing/RayTrace/Scene.h</label>
        <link refid="_scene_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>D:/RayTracing/RayTrace/Textures/textureimage.cpp</label>
        <link refid="textureimage_8cpp"/>
      </node>
      <node id="11">
        <label>D:/RayTracing/RayTrace/Textures/textureimage.h</label>
        <link refid="textureimage_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>D:/RayTracing/include/SDL.h</label>
        <link refid="_s_d_l_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>D:/RayTracing/include/SDL_events.h</label>
        <link refid="_s_d_l__events_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>D:/RayTracing/include/SDL_gesture.h</label>
        <link refid="_s_d_l__gesture_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>D:/RayTracing/include/SDL_keyboard.h</label>
        <link refid="_s_d_l__keyboard_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>D:/RayTracing/include/SDL_messagebox.h</label>
        <link refid="_s_d_l__messagebox_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>D:/RayTracing/include/SDL_metal.h</label>
        <link refid="_s_d_l__metal_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>D:/RayTracing/include/SDL_mouse.h</label>
        <link refid="_s_d_l__mouse_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>D:/RayTracing/include/SDL_render.h</label>
        <link refid="_s_d_l__render_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>D:/RayTracing/include/SDL_shape.h</label>
        <link refid="_s_d_l__shape_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>D:/RayTracing/include/SDL_surface.h</label>
        <link refid="_s_d_l__surface_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>D:/RayTracing/include/SDL_system.h</label>
        <link refid="_s_d_l__system_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>D:/RayTracing/include/SDL_syswm.h</label>
        <link refid="_s_d_l__syswm_8h"/>
      </node>
      <node id="13">
        <label>D:/RayTracing/include/SDL_test.h</label>
        <link refid="_s_d_l__test_8h"/>
      </node>
      <node id="14">
        <label>D:/RayTracing/include/SDL_test_common.h</label>
        <link refid="_s_d_l__test__common_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>D:/RayTracing/include/SDL_test_compare.h</label>
        <link refid="_s_d_l__test__compare_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>D:/RayTracing/include/SDL_test_images.h</label>
        <link refid="_s_d_l__test__images_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>D:/RayTracing/include/SDL_touch.h</label>
        <link refid="_s_d_l__touch_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>D:/RayTracing/include/SDL_video.h</label>
        <link refid="_s_d_l__video_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>D:/RayTracing/include/SDL_vulkan.h</label>
        <link refid="_s_d_l__vulkan_8h"/>
      </node>
      <node id="6">
        <label>D:/RayTracing/main.cpp</label>
        <link refid="main_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_s_d_l___surface" prot="public">SDL_Surface</innerclass>
      <sectiondef kind="user-defined">
      <header>Surface flags</header>
      <description><para>These are the currently supported flags for the <ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref>. </para>
</description>
      <memberdef kind="define" id="_s_d_l__surface_8h_1a59c7111f96872f973d0f058362761776" prot="public" static="no">
        <name>SDL_SWSURFACE</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Just here for compatibility </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_surface.h" line="52" column="9" bodyfile="D:/RayTracing/include/SDL_surface.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_d_l__surface_8h_1a4a5f795a69ac626fba73c4bd0bfd9626" prot="public" static="no">
        <name>SDL_PREALLOC</name>
        <initializer>0x00000001</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Surface uses preallocated memory </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_surface.h" line="53" column="9" bodyfile="D:/RayTracing/include/SDL_surface.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_d_l__surface_8h_1a3b3d53ad7ba0b7294ca25251d88d40fb" prot="public" static="no">
        <name>SDL_RLEACCEL</name>
        <initializer>0x00000002</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Surface is RLE encoded </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_surface.h" line="54" column="9" bodyfile="D:/RayTracing/include/SDL_surface.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_d_l__surface_8h_1a2d3381f5c76aec3fea3f8b990c2e9f6d" prot="public" static="no">
        <name>SDL_DONTFREE</name>
        <initializer>0x00000004</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Surface is referenced internally </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_surface.h" line="55" column="9" bodyfile="D:/RayTracing/include/SDL_surface.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_d_l__surface_8h_1a48a8fb403cb1513b0f689b532dc75861" prot="public" static="no">
        <name>SDL_SIMD_ALIGNED</name>
        <initializer>0x00000008</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Surface uses aligned memory </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_surface.h" line="56" column="9" bodyfile="D:/RayTracing/include/SDL_surface.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_d_l__surface_8h_1aba3239116c763175b6ea41ef78b72091" prot="public" static="no">
        <name>SDL_MUSTLOCK</name>
        <param><defname>S</defname></param>
        <initializer>(((S)-&gt;<ref refid="_s_d_l__opengl__glext_8h_1ac7ba7d3cce3d19ca020e056b37231289" kindref="member">flags</ref> &amp; <ref refid="_s_d_l__surface_8h_1a3b3d53ad7ba0b7294ca25251d88d40fb" kindref="member">SDL_RLEACCEL</ref>) != 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Evaluates to true if the surface needs to be locked before access. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_surface.h" line="62" column="9" bodyfile="D:/RayTracing/include/SDL_surface.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_d_l__surface_8h_1ae63aa646481001be542220a8733c3ce0" prot="public" static="no">
        <name>SDL_LoadBMP</name>
        <param><defname>file</defname></param>
        <initializer><ref refid="_s_d_l__surface_8h_1a30572a53ecbd5a2c260d9aafc464503c" kindref="member">SDL_LoadBMP_RW</ref>(<ref refid="_s_d_l__rwops_8h_1a898d9ad749f054f6b6780bff411fd33a" kindref="member">SDL_RWFromFile</ref>(file, &quot;rb&quot;), 1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Load a surface from a file.</para>
<para>Convenience macro. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_surface.h" line="353" column="9" bodyfile="D:/RayTracing/include/SDL_surface.h" bodystart="353" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_d_l__surface_8h_1a425e7a69acbdf2bd9ba46d332d917320" prot="public" static="no">
        <name>SDL_SaveBMP</name>
        <param><defname>surface</defname></param>
        <param><defname>file</defname></param>
        <initializer>        <ref refid="_s_d_l__surface_8h_1aadc126a4edeafb5033d5e942cf32db6a" kindref="member">SDL_SaveBMP_RW</ref>(surface, <ref refid="_s_d_l__rwops_8h_1a898d9ad749f054f6b6780bff411fd33a" kindref="member">SDL_RWFromFile</ref>(file, &quot;wb&quot;), 1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Save a surface to a file.</para>
<para>Convenience macro. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_surface.h" line="383" column="9" bodyfile="D:/RayTracing/include/SDL_surface.h" bodystart="383" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_d_l__surface_8h_1aad8d7ebe5e953593cb7d91373e73ba9a" prot="public" static="no">
        <name>SDL_BlitSurface</name>
        <initializer><ref refid="_s_d_l__surface_8h_1ac418c4404813eeb32f4e1b24f9deae96" kindref="member">SDL_UpperBlit</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Performs a fast blit from the source surface to the destination surface.</para>
<para>This assumes that the source and destination rectangles are the same size. If either <computeroutput>srcrect</computeroutput> or <computeroutput>dstrect</computeroutput> are NULL, the entire surface (<computeroutput>src</computeroutput> or <computeroutput>dst</computeroutput>) is copied. The final blit rectangles are saved in <computeroutput>srcrect</computeroutput> and <computeroutput>dstrect</computeroutput> after all clipping is performed.</para>
<para><simplesect kind="return"><para>0 if the blit is successful, otherwise it returns -1.</para>
</simplesect>
The blit function should not be called on a locked surface.</para>
<para>The blit semantics for surfaces with and without blending and colorkey are defined as follows: <verbatim>RGBA-&gt;RGB:
  Source surface blend mode set to SDL_BLENDMODE_BLEND:
    alpha-blend (using the source alpha-channel and per-surface alpha)
    SDL_SRCCOLORKEY ignored.
  Source surface blend mode set to SDL_BLENDMODE_NONE:
    copy RGB.
    if SDL_SRCCOLORKEY set, only copy the pixels matching the
    RGB values of the source color key, ignoring alpha in the
    comparison.

RGB-&gt;RGBA:
  Source surface blend mode set to SDL_BLENDMODE_BLEND:
    alpha-blend (using the source per-surface alpha)
  Source surface blend mode set to SDL_BLENDMODE_NONE:
    copy RGB, set destination alpha to source per-surface alpha value.
  both:
    if SDL_SRCCOLORKEY set, only copy the pixels matching the
    source color key.

RGBA-&gt;RGBA:
  Source surface blend mode set to SDL_BLENDMODE_BLEND:
    alpha-blend (using the source alpha-channel and per-surface alpha)
    SDL_SRCCOLORKEY ignored.
  Source surface blend mode set to SDL_BLENDMODE_NONE:
    copy all of RGBA to the destination.
    if SDL_SRCCOLORKEY set, only copy the pixels matching the
    RGB values of the source color key, ignoring alpha in the
    comparison.

RGB-&gt;RGB:
  Source surface blend mode set to SDL_BLENDMODE_BLEND:
    alpha-blend (using the source per-surface alpha)
  Source surface blend mode set to SDL_BLENDMODE_NONE:
    copy RGB.
  both:
    if SDL_SRCCOLORKEY set, only copy the pixels matching the
    source color key.
</verbatim></para>
<para>You should call <ref refid="_s_d_l__surface_8h_1aad8d7ebe5e953593cb7d91373e73ba9a" kindref="member">SDL_BlitSurface()</ref> unless you know exactly how SDL blitting works internally and how to use the other blit functions. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_surface.h" line="859" column="9" bodyfile="D:/RayTracing/include/SDL_surface.h" bodystart="859" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_d_l__surface_8h_1a0be5f27c24e29a61096c2f59610ff1bf" prot="public" static="no">
        <name>SDL_BlitScaled</name>
        <initializer><ref refid="_s_d_l__surface_8h_1a90ac01634e9ee33764fcf5ec7bc43c46" kindref="member">SDL_UpperBlitScaled</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_surface.h" line="926" column="9" bodyfile="D:/RayTracing/include/SDL_surface.h" bodystart="926" bodyend="-1"/>
      </memberdef>
      <memberdef kind="enum" id="_s_d_l__surface_8h_1a00a564600207cec7a2cb50a6e20d2446" prot="public" static="no" strong="no">
        <type></type>
        <name>SDL_YUV_CONVERSION_MODE</name>
        <enumvalue id="_s_d_l__surface_8h_1a00a564600207cec7a2cb50a6e20d2446a779237ffb78ee935518b83e8ab8a35dc" prot="public">
          <name>SDL_YUV_CONVERSION_JPEG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Full range JPEG </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_s_d_l__surface_8h_1a00a564600207cec7a2cb50a6e20d2446a58058f0ed3146de73b031e256aa2aaaa" prot="public">
          <name>SDL_YUV_CONVERSION_BT601</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>BT.601 (the default) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_s_d_l__surface_8h_1a00a564600207cec7a2cb50a6e20d2446a806aeb86ff618a298206cbf921c0202a" prot="public">
          <name>SDL_YUV_CONVERSION_BT709</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>BT.709 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_s_d_l__surface_8h_1a00a564600207cec7a2cb50a6e20d2446acbf0cb1b718195c6c0960d4471a5ed0a" prot="public">
          <name>SDL_YUV_CONVERSION_AUTOMATIC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>BT.601 for SD content, BT.709 for HD content </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>The formula used for converting between YUV and RGB. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_surface.h" line="106" column="1" bodyfile="D:/RayTracing/include/SDL_surface.h" bodystart="107" bodyend="112"/>
      </memberdef>
      <memberdef kind="typedef" id="_s_d_l__surface_8h_1ad894d177fae95d7a1c0d23597b69e569" prot="public" static="no">
        <type>struct <ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref></type>
        <definition>typedef struct SDL_Surface SDL_Surface</definition>
        <argsstring></argsstring>
        <name>SDL_Surface</name>
        <briefdescription>
<para>A collection of pixels used in software blitting. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This structure should be treated as read-only, except for <computeroutput>pixels</computeroutput>, which, if not NULL, contains the raw pixel data for the surface. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_surface.h" line="95" column="13"/>
      </memberdef>
      <memberdef kind="typedef" id="_s_d_l__surface_8h_1ab2d7366d99a08693d476b98760690947" prot="public" static="no">
        <type>int(<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref> *</type>
        <definition>typedef int(SDLCALL * SDL_blit) (struct SDL_Surface *src, SDL_Rect *srcrect, struct SDL_Surface *dst, SDL_Rect *dstrect)</definition>
        <argsstring>)(struct SDL_Surface *src, SDL_Rect *srcrect, struct SDL_Surface *dst, SDL_Rect *dstrect)</argsstring>
        <name>SDL_blit</name>
        <briefdescription>
<para>The type of function used for surface blitting functions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_surface.h" line="100" column="9" bodyfile="D:/RayTracing/include/SDL_surface.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__surface_8h_1a46e9fd3961922c6888a19b0462a75b24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> *<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC SDL_Surface *SDLCALL SDL_CreateRGBSurface</definition>
        <argsstring>(Uint32 flags, int width, int height, int depth, Uint32 Rmask, Uint32 Gmask, Uint32 Bmask, Uint32 Amask)</argsstring>
        <name>SDL_CreateRGBSurface</name>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref></type>
          <declname>flags</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <param>
          <type>int</type>
          <declname>depth</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref></type>
          <declname>Rmask</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref></type>
          <declname>Gmask</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref></type>
          <declname>Bmask</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref></type>
          <declname>Amask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate a new RGB surface.</para>
<para>If <computeroutput>depth</computeroutput> is 4 or 8 bits, an empty palette is allocated for the surface. If <computeroutput>depth</computeroutput> is greater than 8 bits, the pixel format is set using the [RGBA]mask parameters.</para>
<para>The [RGBA]mask parameters are the bitmasks used to extract that color from a pixel. For instance, <computeroutput>Rmask</computeroutput> being 0xFF000000 means the red data is stored in the most significant byte. Using zeros for the RGB masks sets a default value, based on the depth. For example:</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">SDL_CreateRGBSurface(0,w,h,32,0,0,0,0);</highlight></codeline>
</programlisting></para>
<para>However, using zero for the Amask results in an Amask of 0.</para>
<para>By default surfaces with an alpha mask are set up for blending as with:</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">SDL_SetSurfaceBlendMode(surface,<sp/>SDL_BLENDMODE_BLEND)</highlight></codeline>
</programlisting></para>
<para>You can change this by calling <ref refid="_s_d_l__surface_8h_1a35f5b3b64c503c4a8da01566f62976a9" kindref="member">SDL_SetSurfaceBlendMode()</ref> and selecting a different <computeroutput>blendMode</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>the flags are unused and should be set to 0 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>the width of the surface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>the height of the surface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>depth</parametername>
</parameternamelist>
<parameterdescription>
<para>the depth of the surface in bits </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Rmask</parametername>
</parameternamelist>
<parameterdescription>
<para>the red mask for the pixels </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Gmask</parametername>
</parameternamelist>
<parameterdescription>
<para>the green mask for the pixels </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Bmask</parametername>
</parameternamelist>
<parameterdescription>
<para>the blue mask for the pixels </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Amask</parametername>
</parameternamelist>
<parameterdescription>
<para>the alpha mask for the pixels </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the new <ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> structure that is created or NULL if it fails; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1a6487ace22fb07cc55785bc3be9489835" kindref="member">SDL_CreateRGBSurfaceFrom</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1a9a981370beff567b9c7fbf888e272d8f" kindref="member">SDL_CreateRGBSurfaceWithFormat</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1a7b8d4f9cc058822501896a2eed81220e" kindref="member">SDL_FreeSurface</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_surface.h" line="158" column="37" declfile="D:/RayTracing/include/SDL_surface.h" declline="158" declcolumn="37"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__surface_8h_1a9a981370beff567b9c7fbf888e272d8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> *<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC SDL_Surface *SDLCALL SDL_CreateRGBSurfaceWithFormat</definition>
        <argsstring>(Uint32 flags, int width, int height, int depth, Uint32 format)</argsstring>
        <name>SDL_CreateRGBSurfaceWithFormat</name>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref></type>
          <declname>flags</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <param>
          <type>int</type>
          <declname>depth</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate a new RGB surface with a specific pixel format.</para>
<para>This function operates mostly like <ref refid="_s_d_l__surface_8h_1a46e9fd3961922c6888a19b0462a75b24" kindref="member">SDL_CreateRGBSurface()</ref>, except instead of providing pixel color masks, you provide it with a predefined format from SDL_PixelFormatEnum.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>the flags are unused and should be set to 0 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>the width of the surface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>the height of the surface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>depth</parametername>
</parameternamelist>
<parameterdescription>
<para>the depth of the surface in bits </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>the SDL_PixelFormatEnum for the new surface&apos;s pixel format. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the new <ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> structure that is created or NULL if it fails; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.5.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1a46e9fd3961922c6888a19b0462a75b24" kindref="member">SDL_CreateRGBSurface</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1a6487ace22fb07cc55785bc3be9489835" kindref="member">SDL_CreateRGBSurfaceFrom</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1a7b8d4f9cc058822501896a2eed81220e" kindref="member">SDL_FreeSurface</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_surface.h" line="186" column="37" declfile="D:/RayTracing/include/SDL_surface.h" declline="186" declcolumn="37"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__surface_8h_1a6487ace22fb07cc55785bc3be9489835" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> *<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC SDL_Surface *SDLCALL SDL_CreateRGBSurfaceFrom</definition>
        <argsstring>(void *pixels, int width, int height, int depth, int pitch, Uint32 Rmask, Uint32 Gmask, Uint32 Bmask, Uint32 Amask)</argsstring>
        <name>SDL_CreateRGBSurfaceFrom</name>
        <param>
          <type><ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref> *</type>
          <declname>pixels</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <param>
          <type>int</type>
          <declname>depth</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pitch</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref></type>
          <declname>Rmask</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref></type>
          <declname>Gmask</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref></type>
          <declname>Bmask</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref></type>
          <declname>Amask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate a new RGB surface with existing pixel data.</para>
<para>This function operates mostly like <ref refid="_s_d_l__surface_8h_1a46e9fd3961922c6888a19b0462a75b24" kindref="member">SDL_CreateRGBSurface()</ref>, except it does not allocate memory for the pixel data, instead the caller provides an existing buffer of data for the surface to use.</para>
<para>No copy is made of the pixel data. Pixel data is not managed automatically; you must free the surface before you free the pixel data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pixels</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to existing pixel data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>the width of the surface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>the height of the surface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>depth</parametername>
</parameternamelist>
<parameterdescription>
<para>the depth of the surface in bits </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pitch</parametername>
</parameternamelist>
<parameterdescription>
<para>the pitch of the surface in bytes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Rmask</parametername>
</parameternamelist>
<parameterdescription>
<para>the red mask for the pixels </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Gmask</parametername>
</parameternamelist>
<parameterdescription>
<para>the green mask for the pixels </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Bmask</parametername>
</parameternamelist>
<parameterdescription>
<para>the blue mask for the pixels </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Amask</parametername>
</parameternamelist>
<parameterdescription>
<para>the alpha mask for the pixels </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the new <ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> structure that is created or NULL if it fails; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1a46e9fd3961922c6888a19b0462a75b24" kindref="member">SDL_CreateRGBSurface</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1a9a981370beff567b9c7fbf888e272d8f" kindref="member">SDL_CreateRGBSurfaceWithFormat</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1a7b8d4f9cc058822501896a2eed81220e" kindref="member">SDL_FreeSurface</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_surface.h" line="217" column="37" declfile="D:/RayTracing/include/SDL_surface.h" declline="217" declcolumn="37"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__surface_8h_1af29df8bb7f57912211f5b6af199dcdc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> *<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC SDL_Surface *SDLCALL SDL_CreateRGBSurfaceWithFormatFrom</definition>
        <argsstring>(void *pixels, int width, int height, int depth, int pitch, Uint32 format)</argsstring>
        <name>SDL_CreateRGBSurfaceWithFormatFrom</name>
        <param>
          <type><ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref> *</type>
          <declname>pixels</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <param>
          <type>int</type>
          <declname>depth</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pitch</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate a new RGB surface with with a specific pixel format and existing pixel data.</para>
<para>This function operates mostly like <ref refid="_s_d_l__surface_8h_1a6487ace22fb07cc55785bc3be9489835" kindref="member">SDL_CreateRGBSurfaceFrom()</ref>, except instead of providing pixel color masks, you provide it with a predefined format from SDL_PixelFormatEnum.</para>
<para>No copy is made of the pixel data. Pixel data is not managed automatically; you must free the surface before you free the pixel data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pixels</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to existing pixel data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>the width of the surface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>the height of the surface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>depth</parametername>
</parameternamelist>
<parameterdescription>
<para>the depth of the surface in bits </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pitch</parametername>
</parameternamelist>
<parameterdescription>
<para>the pitch of the surface in bytes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>the SDL_PixelFormatEnum for the new surface&apos;s pixel format. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the new <ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> structure that is created or NULL if it fails; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.5.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1a6487ace22fb07cc55785bc3be9489835" kindref="member">SDL_CreateRGBSurfaceFrom</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1a9a981370beff567b9c7fbf888e272d8f" kindref="member">SDL_CreateRGBSurfaceWithFormat</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1a7b8d4f9cc058822501896a2eed81220e" kindref="member">SDL_FreeSurface</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_surface.h" line="255" column="37" declfile="D:/RayTracing/include/SDL_surface.h" declline="255" declcolumn="37"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__surface_8h_1a7b8d4f9cc058822501896a2eed81220e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC void SDLCALL SDL_FreeSurface</definition>
        <argsstring>(SDL_Surface *surface)</argsstring>
        <name>SDL_FreeSurface</name>
        <param>
          <type><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> *</type>
          <declname>surface</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Free an RGB surface.</para>
<para>It is safe to pass NULL to this function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>surface</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> to free.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1a46e9fd3961922c6888a19b0462a75b24" kindref="member">SDL_CreateRGBSurface</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1a6487ace22fb07cc55785bc3be9489835" kindref="member">SDL_CreateRGBSurfaceFrom</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1ae63aa646481001be542220a8733c3ce0" kindref="member">SDL_LoadBMP</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1a30572a53ecbd5a2c260d9aafc464503c" kindref="member">SDL_LoadBMP_RW</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_surface.h" line="272" column="30" declfile="D:/RayTracing/include/SDL_surface.h" declline="272" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__surface_8h_1a72c780465293acb1f586995943422a17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_SetSurfacePalette</definition>
        <argsstring>(SDL_Surface *surface, SDL_Palette *palette)</argsstring>
        <name>SDL_SetSurfacePalette</name>
        <param>
          <type><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> *</type>
          <declname>surface</declname>
        </param>
        <param>
          <type><ref refid="struct_s_d_l___palette" kindref="compound">SDL_Palette</ref> *</type>
          <declname>palette</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the palette used by a surface.</para>
<para>A single palette can be shared with many surfaces.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>surface</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> structure to update </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>palette</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="struct_s_d_l___palette" kindref="compound">SDL_Palette</ref> structure to use </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_surface.h" line="286" column="29" declfile="D:/RayTracing/include/SDL_surface.h" declline="286" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__surface_8h_1a3d1da1c7ecdaa461fac51a10785f5077" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_LockSurface</definition>
        <argsstring>(SDL_Surface *surface)</argsstring>
        <name>SDL_LockSurface</name>
        <param>
          <type><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> *</type>
          <declname>surface</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set up a surface for directly accessing the pixels.</para>
<para>Between calls to <ref refid="_s_d_l__surface_8h_1a3d1da1c7ecdaa461fac51a10785f5077" kindref="member">SDL_LockSurface()</ref> / <ref refid="_s_d_l__surface_8h_1a56b93f51358b55d7fc213a3ba9b02c24" kindref="member">SDL_UnlockSurface()</ref>, you can write to and read from <computeroutput>surface-&gt;pixels</computeroutput>, using the pixel format stored in <computeroutput>surface-&gt;format</computeroutput>. Once you are done accessing the surface, you should use <ref refid="_s_d_l__surface_8h_1a56b93f51358b55d7fc213a3ba9b02c24" kindref="member">SDL_UnlockSurface()</ref> to release it.</para>
<para>Not all surfaces require locking. If <computeroutput><ref refid="_s_d_l__surface_8h_1aba3239116c763175b6ea41ef78b72091" kindref="member">SDL_MUSTLOCK(surface)</ref></computeroutput> evaluates to 0, then you can read and write to the surface at any time, and the pixel format of the surface will not change.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>surface</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> structure to be locked </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1aba3239116c763175b6ea41ef78b72091" kindref="member">SDL_MUSTLOCK</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1a56b93f51358b55d7fc213a3ba9b02c24" kindref="member">SDL_UnlockSurface</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_surface.h" line="310" column="29" declfile="D:/RayTracing/include/SDL_surface.h" declline="310" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__surface_8h_1a56b93f51358b55d7fc213a3ba9b02c24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC void SDLCALL SDL_UnlockSurface</definition>
        <argsstring>(SDL_Surface *surface)</argsstring>
        <name>SDL_UnlockSurface</name>
        <param>
          <type><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> *</type>
          <declname>surface</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Release a surface after directly accessing the pixels.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>surface</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> structure to be unlocked</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1a3d1da1c7ecdaa461fac51a10785f5077" kindref="member">SDL_LockSurface</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_surface.h" line="321" column="30" declfile="D:/RayTracing/include/SDL_surface.h" declline="321" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__surface_8h_1a30572a53ecbd5a2c260d9aafc464503c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> *<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC SDL_Surface *SDLCALL SDL_LoadBMP_RW</definition>
        <argsstring>(SDL_RWops *src, int freesrc)</argsstring>
        <name>SDL_LoadBMP_RW</name>
        <param>
          <type><ref refid="struct_s_d_l___r_wops" kindref="compound">SDL_RWops</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>freesrc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Load a BMP image from a seekable SDL data stream.</para>
<para>The new surface should be freed with <ref refid="_s_d_l__surface_8h_1a7b8d4f9cc058822501896a2eed81220e" kindref="member">SDL_FreeSurface()</ref>. Not doing so will result in a memory leak.</para>
<para>src is an open <ref refid="struct_s_d_l___r_wops" kindref="compound">SDL_RWops</ref> buffer, typically loaded with SDL_RWFromFile. Alternitavely, you might also use the macro SDL_LoadBMP to load a bitmap from a file, convert it to an <ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> and then close the file.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>the data stream for the surface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>freesrc</parametername>
</parameternamelist>
<parameterdescription>
<para>non-zero to close the stream after being read </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to a new <ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> structure or NULL if there was an error; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1a7b8d4f9cc058822501896a2eed81220e" kindref="member">SDL_FreeSurface</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__rwops_8h_1a898d9ad749f054f6b6780bff411fd33a" kindref="member">SDL_RWFromFile</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1ae63aa646481001be542220a8733c3ce0" kindref="member">SDL_LoadBMP</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1aadc126a4edeafb5033d5e942cf32db6a" kindref="member">SDL_SaveBMP_RW</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_surface.h" line="345" column="37" declfile="D:/RayTracing/include/SDL_surface.h" declline="345" declcolumn="37"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__surface_8h_1aadc126a4edeafb5033d5e942cf32db6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_SaveBMP_RW</definition>
        <argsstring>(SDL_Surface *surface, SDL_RWops *dst, int freedst)</argsstring>
        <name>SDL_SaveBMP_RW</name>
        <param>
          <type><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> *</type>
          <declname>surface</declname>
        </param>
        <param>
          <type><ref refid="struct_s_d_l___r_wops" kindref="compound">SDL_RWops</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>int</type>
          <declname>freedst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Save a surface to a seekable SDL data stream in BMP format.</para>
<para>Surfaces with a 24-bit, 32-bit and paletted 8-bit format get saved in the BMP directly. Other RGB formats with 8-bit or higher get converted to a 24-bit surface or, if they have an alpha mask or a colorkey, to a 32-bit surface before they are saved. YUV and paletted 1-bit and 4-bit formats are not supported.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>surface</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> structure containing the image to be saved </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>a data stream to save to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>freedst</parametername>
</parameternamelist>
<parameterdescription>
<para>non-zero to close the stream after being written </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1a30572a53ecbd5a2c260d9aafc464503c" kindref="member">SDL_LoadBMP_RW</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1a425e7a69acbdf2bd9ba46d332d917320" kindref="member">SDL_SaveBMP</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_surface.h" line="375" column="29" declfile="D:/RayTracing/include/SDL_surface.h" declline="375" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__surface_8h_1ae2f6d70b8071e83e0c84241dbdcd3a3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_SetSurfaceRLE</definition>
        <argsstring>(SDL_Surface *surface, int flag)</argsstring>
        <name>SDL_SetSurfaceRLE</name>
        <param>
          <type><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> *</type>
          <declname>surface</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the RLE acceleration hint for a surface.</para>
<para>If RLE is enabled, color key and alpha blending blits are much faster, but the surface must be locked before directly accessing the pixels.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>surface</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> structure to optimize </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flag</parametername>
</parameternamelist>
<parameterdescription>
<para>0 to disable, non-zero to enable RLE acceleration </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1aad8d7ebe5e953593cb7d91373e73ba9a" kindref="member">SDL_BlitSurface</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1a3d1da1c7ecdaa461fac51a10785f5077" kindref="member">SDL_LockSurface</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1a56b93f51358b55d7fc213a3ba9b02c24" kindref="member">SDL_UnlockSurface</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_surface.h" line="403" column="29" declfile="D:/RayTracing/include/SDL_surface.h" declline="403" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__surface_8h_1abdc58e9ce47e2693230a3a1389b1bfb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC SDL_bool SDLCALL SDL_HasSurfaceRLE</definition>
        <argsstring>(SDL_Surface *surface)</argsstring>
        <name>SDL_HasSurfaceRLE</name>
        <param>
          <type><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> *</type>
          <declname>surface</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the surface is RLE enabled</para>
<para>It is safe to pass a NULL <computeroutput>surface</computeroutput> here; it will return SDL_FALSE.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>surface</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> structure to query </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SDL_TRUE if the surface is RLE enabled, SDL_FALSE otherwise.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.14.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1ae2f6d70b8071e83e0c84241dbdcd3a3b" kindref="member">SDL_SetSurfaceRLE</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_surface.h" line="418" column="34" declfile="D:/RayTracing/include/SDL_surface.h" declline="418" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__surface_8h_1a4cbe831b210dc900cb93101352357b73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_SetColorKey</definition>
        <argsstring>(SDL_Surface *surface, int flag, Uint32 key)</argsstring>
        <name>SDL_SetColorKey</name>
        <param>
          <type><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> *</type>
          <declname>surface</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref></type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the color key (transparent pixel) in a surface.</para>
<para>The color key defines a pixel value that will be treated as transparent in a blit. For example, one can use this to specify that cyan pixels should be considered transparent, and therefore not rendered.</para>
<para>It is a pixel of the format used by the surface, as generated by <ref refid="_s_d_l__pixels_8h_1a157cf64c250c578722b939ea11a85b39" kindref="member">SDL_MapRGB()</ref>.</para>
<para>RLE acceleration can substantially speed up blitting of images with large horizontal runs of transparent pixels. See <ref refid="_s_d_l__surface_8h_1ae2f6d70b8071e83e0c84241dbdcd3a3b" kindref="member">SDL_SetSurfaceRLE()</ref> for details.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>surface</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> structure to update </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flag</parametername>
</parameternamelist>
<parameterdescription>
<para>SDL_TRUE to enable color key, SDL_FALSE to disable color key </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>the transparent pixel </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1aad8d7ebe5e953593cb7d91373e73ba9a" kindref="member">SDL_BlitSurface</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1a2ff80a244bad20f1c4fa85adf1e1deb9" kindref="member">SDL_GetColorKey</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_surface.h" line="444" column="29" declfile="D:/RayTracing/include/SDL_surface.h" declline="444" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__surface_8h_1a31ca900bd39b6805fc8586472be18c90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC SDL_bool SDLCALL SDL_HasColorKey</definition>
        <argsstring>(SDL_Surface *surface)</argsstring>
        <name>SDL_HasColorKey</name>
        <param>
          <type><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> *</type>
          <declname>surface</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the surface has a color key</para>
<para>It is safe to pass a NULL <computeroutput>surface</computeroutput> here; it will return SDL_FALSE.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>surface</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> structure to query </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SDL_TRUE if the surface has a color key, SDL_FALSE otherwise.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.9.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1a4cbe831b210dc900cb93101352357b73" kindref="member">SDL_SetColorKey</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1a2ff80a244bad20f1c4fa85adf1e1deb9" kindref="member">SDL_GetColorKey</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_surface.h" line="460" column="34" declfile="D:/RayTracing/include/SDL_surface.h" declline="460" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__surface_8h_1a2ff80a244bad20f1c4fa85adf1e1deb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_GetColorKey</definition>
        <argsstring>(SDL_Surface *surface, Uint32 *key)</argsstring>
        <name>SDL_GetColorKey</name>
        <param>
          <type><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> *</type>
          <declname>surface</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref> *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the color key (transparent pixel) for a surface.</para>
<para>The color key is a pixel of the format used by the surface, as generated by <ref refid="_s_d_l__pixels_8h_1a157cf64c250c578722b939ea11a85b39" kindref="member">SDL_MapRGB()</ref>.</para>
<para>If the surface doesn&apos;t have color key enabled this function returns -1.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>surface</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> structure to query </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer filled in with the transparent pixel </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1aad8d7ebe5e953593cb7d91373e73ba9a" kindref="member">SDL_BlitSurface</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1a4cbe831b210dc900cb93101352357b73" kindref="member">SDL_SetColorKey</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_surface.h" line="480" column="29" declfile="D:/RayTracing/include/SDL_surface.h" declline="480" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__surface_8h_1a4edf978396e3f562d43c672630e0ca71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_SetSurfaceColorMod</definition>
        <argsstring>(SDL_Surface *surface, Uint8 r, Uint8 g, Uint8 b)</argsstring>
        <name>SDL_SetSurfaceColorMod</name>
        <param>
          <type><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> *</type>
          <declname>surface</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref></type>
          <declname>g</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set an additional color value multiplied into blit operations.</para>
<para>When this surface is blitted, during the blit operation each source color channel is modulated by the appropriate color value according to the following formula:</para>
<para><computeroutput>srcC = srcC * (color / 255)</computeroutput></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>surface</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> structure to update </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>the red color value multiplied into blit operations </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the green color value multiplied into blit operations </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>the blue color value multiplied into blit operations </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1a5db1ae32b7884b598d86424e205c3a86" kindref="member">SDL_GetSurfaceColorMod</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1a0035f0239f0588d16c57aff7672be174" kindref="member">SDL_SetSurfaceAlphaMod</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_surface.h" line="504" column="29" declfile="D:/RayTracing/include/SDL_surface.h" declline="504" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__surface_8h_1a5db1ae32b7884b598d86424e205c3a86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_GetSurfaceColorMod</definition>
        <argsstring>(SDL_Surface *surface, Uint8 *r, Uint8 *g, Uint8 *b)</argsstring>
        <name>SDL_GetSurfaceColorMod</name>
        <param>
          <type><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> *</type>
          <declname>surface</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the additional color value multiplied into blit operations.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>surface</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> structure to query </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer filled in with the current red color value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer filled in with the current green color value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer filled in with the current blue color value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1a09a99bb24420857e85071e39607678f6" kindref="member">SDL_GetSurfaceAlphaMod</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1a4edf978396e3f562d43c672630e0ca71" kindref="member">SDL_SetSurfaceColorMod</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_surface.h" line="523" column="29" declfile="D:/RayTracing/include/SDL_surface.h" declline="523" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__surface_8h_1a0035f0239f0588d16c57aff7672be174" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_SetSurfaceAlphaMod</definition>
        <argsstring>(SDL_Surface *surface, Uint8 alpha)</argsstring>
        <name>SDL_SetSurfaceAlphaMod</name>
        <param>
          <type><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> *</type>
          <declname>surface</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref></type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set an additional alpha value used in blit operations.</para>
<para>When this surface is blitted, during the blit operation the source alpha value is modulated by this alpha value according to the following formula:</para>
<para><computeroutput>srcA = srcA * (alpha / 255)</computeroutput></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>surface</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> structure to update </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>the alpha value multiplied into blit operations </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1a09a99bb24420857e85071e39607678f6" kindref="member">SDL_GetSurfaceAlphaMod</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1a4edf978396e3f562d43c672630e0ca71" kindref="member">SDL_SetSurfaceColorMod</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_surface.h" line="545" column="29" declfile="D:/RayTracing/include/SDL_surface.h" declline="545" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__surface_8h_1a09a99bb24420857e85071e39607678f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_GetSurfaceAlphaMod</definition>
        <argsstring>(SDL_Surface *surface, Uint8 *alpha)</argsstring>
        <name>SDL_GetSurfaceAlphaMod</name>
        <param>
          <type><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> *</type>
          <declname>surface</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref> *</type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the additional alpha value used in blit operations.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>surface</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> structure to query </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer filled in with the current alpha value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1a5db1ae32b7884b598d86424e205c3a86" kindref="member">SDL_GetSurfaceColorMod</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1a0035f0239f0588d16c57aff7672be174" kindref="member">SDL_SetSurfaceAlphaMod</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_surface.h" line="561" column="29" declfile="D:/RayTracing/include/SDL_surface.h" declline="561" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__surface_8h_1a35f5b3b64c503c4a8da01566f62976a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_SetSurfaceBlendMode</definition>
        <argsstring>(SDL_Surface *surface, SDL_BlendMode blendMode)</argsstring>
        <name>SDL_SetSurfaceBlendMode</name>
        <param>
          <type><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> *</type>
          <declname>surface</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__blendmode_8h_1a850d3c67a878fd6698a1c8dbb1eabf1e" kindref="member">SDL_BlendMode</ref></type>
          <declname>blendMode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the blend mode used for blit operations.</para>
<para>To copy a surface to another surface (or texture) without blending with the existing data, the blendmode of the SOURCE surface should be set to <computeroutput>SDL_BLENDMODE_NONE</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>surface</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> structure to update </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blendMode</parametername>
</parameternamelist>
<parameterdescription>
<para>the SDL_BlendMode to use for blit blending </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1a95570c617879f45bf7e2e4d330534f6b" kindref="member">SDL_GetSurfaceBlendMode</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_surface.h" line="580" column="29" declfile="D:/RayTracing/include/SDL_surface.h" declline="580" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__surface_8h_1a95570c617879f45bf7e2e4d330534f6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_GetSurfaceBlendMode</definition>
        <argsstring>(SDL_Surface *surface, SDL_BlendMode *blendMode)</argsstring>
        <name>SDL_GetSurfaceBlendMode</name>
        <param>
          <type><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> *</type>
          <declname>surface</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__blendmode_8h_1a850d3c67a878fd6698a1c8dbb1eabf1e" kindref="member">SDL_BlendMode</ref> *</type>
          <declname>blendMode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the blend mode used for blit operations.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>surface</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> structure to query </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blendMode</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer filled in with the current SDL_BlendMode </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1a35f5b3b64c503c4a8da01566f62976a9" kindref="member">SDL_SetSurfaceBlendMode</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_surface.h" line="595" column="29" declfile="D:/RayTracing/include/SDL_surface.h" declline="595" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__surface_8h_1a6cf2c30be55f51fe9e4faf97e3f8d08b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC SDL_bool SDLCALL SDL_SetClipRect</definition>
        <argsstring>(SDL_Surface *surface, const SDL_Rect *rect)</argsstring>
        <name>SDL_SetClipRect</name>
        <param>
          <type><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> *</type>
          <declname>surface</declname>
        </param>
        <param>
          <type>const <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> *</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the clipping rectangle for a surface.</para>
<para>When <computeroutput>surface</computeroutput> is the destination of a blit, only the area within the clip rectangle is drawn into.</para>
<para>Note that blits are automatically clipped to the edges of the source and destination surfaces.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>surface</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> structure to be clipped </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> structure representing the clipping rectangle, or NULL to disable clipping </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SDL_TRUE if the rectangle intersects the surface, otherwise SDL_FALSE and blits will be completely clipped.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1aad8d7ebe5e953593cb7d91373e73ba9a" kindref="member">SDL_BlitSurface</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1a7d7f71b94748a1b0db3b5b769834ed27" kindref="member">SDL_GetClipRect</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_surface.h" line="618" column="34" declfile="D:/RayTracing/include/SDL_surface.h" declline="618" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__surface_8h_1a7d7f71b94748a1b0db3b5b769834ed27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC void SDLCALL SDL_GetClipRect</definition>
        <argsstring>(SDL_Surface *surface, SDL_Rect *rect)</argsstring>
        <name>SDL_GetClipRect</name>
        <param>
          <type><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> *</type>
          <declname>surface</declname>
        </param>
        <param>
          <type><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> *</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the clipping rectangle for a surface.</para>
<para>When <computeroutput>surface</computeroutput> is the destination of a blit, only the area within the clip rectangle is drawn into.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>surface</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> structure representing the surface to be clipped </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>an <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> structure filled in with the clipping rectangle for the surface</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1aad8d7ebe5e953593cb7d91373e73ba9a" kindref="member">SDL_BlitSurface</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1a6cf2c30be55f51fe9e4faf97e3f8d08b" kindref="member">SDL_SetClipRect</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_surface.h" line="637" column="30" declfile="D:/RayTracing/include/SDL_surface.h" declline="637" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__surface_8h_1a1702789e69f61f2ecc5ce848464533c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> *<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC SDL_Surface *SDLCALL SDL_DuplicateSurface</definition>
        <argsstring>(SDL_Surface *surface)</argsstring>
        <name>SDL_DuplicateSurface</name>
        <param>
          <type><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> *</type>
          <declname>surface</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_surface.h" line="649" column="37" declfile="D:/RayTracing/include/SDL_surface.h" declline="649" declcolumn="37"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__surface_8h_1a5bcce95525131d59a3039994a5ebdc7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> *<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC SDL_Surface *SDLCALL SDL_ConvertSurface</definition>
        <argsstring>(SDL_Surface *src, const SDL_PixelFormat *fmt, Uint32 flags)</argsstring>
        <name>SDL_ConvertSurface</name>
        <param>
          <type><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="struct_s_d_l___pixel_format" kindref="compound">SDL_PixelFormat</ref> *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy an existing surface to a new surface of the specified format.</para>
<para>This function is used to optimize images for faster <emphasis>repeat</emphasis> blitting. This is accomplished by converting the original and storing the result as a new surface. The new, optimized surface can then be used as the source for future blits, making them faster.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>the existing <ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> structure to convert </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="struct_s_d_l___pixel_format" kindref="compound">SDL_PixelFormat</ref> structure that the new surface is optimized for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>the flags are unused and should be set to 0; this is a leftover from SDL 1.2&apos;s API </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the new <ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> structure that is created or NULL if it fails; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__pixels_8h_1af047e43ec12651a6a7a2d74d3ec8a3e5" kindref="member">SDL_AllocFormat</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1a32edde1eab798bd958c09dd08135ca8a" kindref="member">SDL_ConvertSurfaceFormat</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1a46e9fd3961922c6888a19b0462a75b24" kindref="member">SDL_CreateRGBSurface</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_surface.h" line="673" column="37" declfile="D:/RayTracing/include/SDL_surface.h" declline="673" declcolumn="37"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__surface_8h_1a32edde1eab798bd958c09dd08135ca8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> *<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC SDL_Surface *SDLCALL SDL_ConvertSurfaceFormat</definition>
        <argsstring>(SDL_Surface *src, Uint32 pixel_format, Uint32 flags)</argsstring>
        <name>SDL_ConvertSurfaceFormat</name>
        <param>
          <type><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref></type>
          <declname>pixel_format</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy an existing surface to a new surface of the specified format enum.</para>
<para>This function operates just like <ref refid="_s_d_l__surface_8h_1a5bcce95525131d59a3039994a5ebdc7e" kindref="member">SDL_ConvertSurface()</ref>, but accepts an SDL_PixelFormatEnum value instead of an <ref refid="struct_s_d_l___pixel_format" kindref="compound">SDL_PixelFormat</ref> structure. As such, it might be easier to call but it doesn&apos;t have access to palette information for the destination surface, in case that would be important.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>the existing <ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> structure to convert </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pixel_format</parametername>
</parameternamelist>
<parameterdescription>
<para>the SDL_PixelFormatEnum that the new surface is optimized for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>the flags are unused and should be set to 0; this is a leftover from SDL 1.2&apos;s API </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the new <ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> structure that is created or NULL if it fails; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__pixels_8h_1af047e43ec12651a6a7a2d74d3ec8a3e5" kindref="member">SDL_AllocFormat</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1a5bcce95525131d59a3039994a5ebdc7e" kindref="member">SDL_ConvertSurface</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1a46e9fd3961922c6888a19b0462a75b24" kindref="member">SDL_CreateRGBSurface</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_surface.h" line="698" column="37" declfile="D:/RayTracing/include/SDL_surface.h" declline="698" declcolumn="37"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__surface_8h_1a339c5728a1181e2d6334ad07e1e84440" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_ConvertPixels</definition>
        <argsstring>(int width, int height, Uint32 src_format, const void *src, int src_pitch, Uint32 dst_format, void *dst, int dst_pitch)</argsstring>
        <name>SDL_ConvertPixels</name>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref></type>
          <declname>src_format</declname>
        </param>
        <param>
          <type>const <ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>src_pitch</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref></type>
          <declname>dst_format</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dst_pitch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy a block of pixels of one format to another format.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>the width of the block to copy, in pixels </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>the height of the block to copy, in pixels </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_format</parametername>
</parameternamelist>
<parameterdescription>
<para>an SDL_PixelFormatEnum value of the <computeroutput>src</computeroutput> pixels format </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to the source pixels </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_pitch</parametername>
</parameternamelist>
<parameterdescription>
<para>the pitch of the source pixels, in bytes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_format</parametername>
</parameternamelist>
<parameterdescription>
<para>an SDL_PixelFormatEnum value of the <computeroutput>dst</computeroutput> pixels format </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to be filled in with new pixel data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_pitch</parametername>
</parameternamelist>
<parameterdescription>
<para>the pitch of the destination pixels, in bytes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_surface.h" line="717" column="29" declfile="D:/RayTracing/include/SDL_surface.h" declline="717" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__surface_8h_1ab6af6b224b687e7c6413106b785743d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_PremultiplyAlpha</definition>
        <argsstring>(int width, int height, Uint32 src_format, const void *src, int src_pitch, Uint32 dst_format, void *dst, int dst_pitch)</argsstring>
        <name>SDL_PremultiplyAlpha</name>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref></type>
          <declname>src_format</declname>
        </param>
        <param>
          <type>const <ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>src_pitch</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref></type>
          <declname>dst_format</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dst_pitch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Premultiply the alpha on a block of pixels.</para>
<para>This is safe to use with src == dst, but not for other overlapping areas.</para>
<para>This function is currently only implemented for SDL_PIXELFORMAT_ARGB8888.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>the width of the block to convert, in pixels </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>the height of the block to convert, in pixels </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_format</parametername>
</parameternamelist>
<parameterdescription>
<para>an SDL_PixelFormatEnum value of the <computeroutput>src</computeroutput> pixels format </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to the source pixels </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_pitch</parametername>
</parameternamelist>
<parameterdescription>
<para>the pitch of the source pixels, in bytes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_format</parametername>
</parameternamelist>
<parameterdescription>
<para>an SDL_PixelFormatEnum value of the <computeroutput>dst</computeroutput> pixels format </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to be filled in with premultiplied pixel data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_pitch</parametername>
</parameternamelist>
<parameterdescription>
<para>the pitch of the destination pixels, in bytes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.18. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_surface.h" line="743" column="29" declfile="D:/RayTracing/include/SDL_surface.h" declline="743" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__surface_8h_1a98b3595458c6271303d6470cb2b2c721" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_FillRect</definition>
        <argsstring>(SDL_Surface *dst, const SDL_Rect *rect, Uint32 color)</argsstring>
        <name>SDL_FillRect</name>
        <param>
          <type><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> *</type>
          <declname>rect</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref></type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform a fast fill of a rectangle with a specific color.</para>
<para><computeroutput>color</computeroutput> should be a pixel of the format used by the surface, and can be generated by <ref refid="_s_d_l__pixels_8h_1a157cf64c250c578722b939ea11a85b39" kindref="member">SDL_MapRGB()</ref> or <ref refid="_s_d_l__pixels_8h_1a8cc5000a066e052d4d36070ea91ac942" kindref="member">SDL_MapRGBA()</ref>. If the color value contains an alpha component then the destination is simply filled with that alpha information, no blending takes place.</para>
<para>If there is a clip rectangle set on the destination (set via <ref refid="_s_d_l__surface_8h_1a6cf2c30be55f51fe9e4faf97e3f8d08b" kindref="member">SDL_SetClipRect()</ref>), then this function will fill based on the intersection of the clip rectangle and <computeroutput>rect</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> structure that is the drawing target </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> structure representing the rectangle to fill, or NULL to fill the entire surface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>the color to fill with </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1a7b893162f400b8193ff6ca628ec784b6" kindref="member">SDL_FillRects</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_surface.h" line="772" column="29" declfile="D:/RayTracing/include/SDL_surface.h" declline="772" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__surface_8h_1a7b893162f400b8193ff6ca628ec784b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_FillRects</definition>
        <argsstring>(SDL_Surface *dst, const SDL_Rect *rects, int count, Uint32 color)</argsstring>
        <name>SDL_FillRects</name>
        <param>
          <type><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> *</type>
          <declname>rects</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref></type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform a fast fill of a set of rectangles with a specific color.</para>
<para><computeroutput>color</computeroutput> should be a pixel of the format used by the surface, and can be generated by <ref refid="_s_d_l__pixels_8h_1a157cf64c250c578722b939ea11a85b39" kindref="member">SDL_MapRGB()</ref> or <ref refid="_s_d_l__pixels_8h_1a8cc5000a066e052d4d36070ea91ac942" kindref="member">SDL_MapRGBA()</ref>. If the color value contains an alpha component then the destination is simply filled with that alpha information, no blending takes place.</para>
<para>If there is a clip rectangle set on the destination (set via <ref refid="_s_d_l__surface_8h_1a6cf2c30be55f51fe9e4faf97e3f8d08b" kindref="member">SDL_SetClipRect()</ref>), then this function will fill based on the intersection of the clip rectangle and <computeroutput>rect</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> structure that is the drawing target </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rects</parametername>
</parameternamelist>
<parameterdescription>
<para>an array of SDL_Rects representing the rectangles to fill. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of rectangles in the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>the color to fill with </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1a98b3595458c6271303d6470cb2b2c721" kindref="member">SDL_FillRect</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_surface.h" line="798" column="29" declfile="D:/RayTracing/include/SDL_surface.h" declline="798" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__surface_8h_1ac418c4404813eeb32f4e1b24f9deae96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_UpperBlit</definition>
        <argsstring>(SDL_Surface *src, const SDL_Rect *srcrect, SDL_Surface *dst, SDL_Rect *dstrect)</argsstring>
        <name>SDL_UpperBlit</name>
        <param>
          <type><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> *</type>
          <declname>srcrect</declname>
        </param>
        <param>
          <type><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> *</type>
          <declname>dstrect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform a fast blit from the source surface to the destination surface.</para>
<para><ref refid="_s_d_l__surface_8h_1ac418c4404813eeb32f4e1b24f9deae96" kindref="member">SDL_UpperBlit()</ref> has been replaced by <ref refid="_s_d_l__surface_8h_1aad8d7ebe5e953593cb7d91373e73ba9a" kindref="member">SDL_BlitSurface()</ref>, which is merely a macro for this function with a less confusing name.</para>
<para><simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1aad8d7ebe5e953593cb7d91373e73ba9a" kindref="member">SDL_BlitSurface</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_surface.h" line="871" column="29" declfile="D:/RayTracing/include/SDL_surface.h" declline="871" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__surface_8h_1a82bd1c0e0886d77e287207fe6351bf87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_LowerBlit</definition>
        <argsstring>(SDL_Surface *src, SDL_Rect *srcrect, SDL_Surface *dst, SDL_Rect *dstrect)</argsstring>
        <name>SDL_LowerBlit</name>
        <param>
          <type><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> *</type>
          <declname>srcrect</declname>
        </param>
        <param>
          <type><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> *</type>
          <declname>dstrect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform low-level surface blitting only.</para>
<para>This is a semi-private blit function and it performs low-level surface blitting, assuming the input rectangles have already been clipped.</para>
<para>Unless you know what you&apos;re doing, you should be using <ref refid="_s_d_l__surface_8h_1aad8d7ebe5e953593cb7d91373e73ba9a" kindref="member">SDL_BlitSurface()</ref> instead.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> structure to be copied from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srcrect</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> structure representing the rectangle to be copied, or NULL to copy the entire surface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> structure that is the blit target </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dstrect</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> structure representing the rectangle that is copied into </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1aad8d7ebe5e953593cb7d91373e73ba9a" kindref="member">SDL_BlitSurface</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_surface.h" line="897" column="29" declfile="D:/RayTracing/include/SDL_surface.h" declline="897" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__surface_8h_1aee44fe7d5dba376a971793d70ffcf55c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_SoftStretch</definition>
        <argsstring>(SDL_Surface *src, const SDL_Rect *srcrect, SDL_Surface *dst, const SDL_Rect *dstrect)</argsstring>
        <name>SDL_SoftStretch</name>
        <param>
          <type><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> *</type>
          <declname>srcrect</declname>
        </param>
        <param>
          <type><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> *</type>
          <declname>dstrect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform a fast, low quality, stretch blit between two surfaces of the same format.</para>
<para>Please use <ref refid="_s_d_l__surface_8h_1a0be5f27c24e29a61096c2f59610ff1bf" kindref="member">SDL_BlitScaled()</ref> instead.</para>
<para><simplesect kind="since"><para>This function is available since SDL 2.0.0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_surface.h" line="910" column="29" declfile="D:/RayTracing/include/SDL_surface.h" declline="910" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__surface_8h_1ac2fe0fda20d38a16ec1802da9d6e49a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_SoftStretchLinear</definition>
        <argsstring>(SDL_Surface *src, const SDL_Rect *srcrect, SDL_Surface *dst, const SDL_Rect *dstrect)</argsstring>
        <name>SDL_SoftStretchLinear</name>
        <param>
          <type><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> *</type>
          <declname>srcrect</declname>
        </param>
        <param>
          <type><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> *</type>
          <declname>dstrect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform bilinear scaling between two surfaces of the same format, 32BPP.</para>
<para><simplesect kind="since"><para>This function is available since SDL 2.0.16. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_surface.h" line="920" column="29" declfile="D:/RayTracing/include/SDL_surface.h" declline="920" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__surface_8h_1a90ac01634e9ee33764fcf5ec7bc43c46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_UpperBlitScaled</definition>
        <argsstring>(SDL_Surface *src, const SDL_Rect *srcrect, SDL_Surface *dst, SDL_Rect *dstrect)</argsstring>
        <name>SDL_UpperBlitScaled</name>
        <param>
          <type><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> *</type>
          <declname>srcrect</declname>
        </param>
        <param>
          <type><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> *</type>
          <declname>dstrect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform a scaled surface copy to a destination surface.</para>
<para><ref refid="_s_d_l__surface_8h_1a90ac01634e9ee33764fcf5ec7bc43c46" kindref="member">SDL_UpperBlitScaled()</ref> has been replaced by <ref refid="_s_d_l__surface_8h_1a0be5f27c24e29a61096c2f59610ff1bf" kindref="member">SDL_BlitScaled()</ref>, which is merely a macro for this function with a less confusing name.</para>
<para><simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1a0be5f27c24e29a61096c2f59610ff1bf" kindref="member">SDL_BlitScaled</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_surface.h" line="938" column="29" declfile="D:/RayTracing/include/SDL_surface.h" declline="938" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__surface_8h_1a5c6b2f06726600d41ff75ff259d4383b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_LowerBlitScaled</definition>
        <argsstring>(SDL_Surface *src, SDL_Rect *srcrect, SDL_Surface *dst, SDL_Rect *dstrect)</argsstring>
        <name>SDL_LowerBlitScaled</name>
        <param>
          <type><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> *</type>
          <declname>srcrect</declname>
        </param>
        <param>
          <type><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> *</type>
          <declname>dstrect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform low-level surface scaled blitting only.</para>
<para>This is a semi-private function and it performs low-level surface blitting, assuming the input rectangles have already been clipped.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> structure to be copied from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srcrect</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> structure representing the rectangle to be copied </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> structure that is the blit target </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dstrect</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref> structure representing the rectangle that is copied into </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__surface_8h_1a0be5f27c24e29a61096c2f59610ff1bf" kindref="member">SDL_BlitScaled</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_surface.h" line="961" column="29" declfile="D:/RayTracing/include/SDL_surface.h" declline="961" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__surface_8h_1a35875bf88b2d78e0990f5f13ef1cd0e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC void SDLCALL SDL_SetYUVConversionMode</definition>
        <argsstring>(SDL_YUV_CONVERSION_MODE mode)</argsstring>
        <name>SDL_SetYUVConversionMode</name>
        <param>
          <type><ref refid="_s_d_l__surface_8h_1a00a564600207cec7a2cb50a6e20d2446" kindref="member">SDL_YUV_CONVERSION_MODE</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the YUV conversion mode</para>
<para><simplesect kind="since"><para>This function is available since SDL 2.0.8. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_surface.h" line="970" column="30" declfile="D:/RayTracing/include/SDL_surface.h" declline="970" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__surface_8h_1a61d2c4412423e5d1a0e3426ee678d262" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__surface_8h_1a00a564600207cec7a2cb50a6e20d2446" kindref="member">SDL_YUV_CONVERSION_MODE</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC SDL_YUV_CONVERSION_MODE SDLCALL SDL_GetYUVConversionMode</definition>
        <argsstring>(void)</argsstring>
        <name>SDL_GetYUVConversionMode</name>
        <param>
          <type><ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the YUV conversion mode</para>
<para><simplesect kind="since"><para>This function is available since SDL 2.0.8. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_surface.h" line="977" column="49" declfile="D:/RayTracing/include/SDL_surface.h" declline="977" declcolumn="49"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__surface_8h_1a1cfad98219e074988d0c5731e304cda4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__surface_8h_1a00a564600207cec7a2cb50a6e20d2446" kindref="member">SDL_YUV_CONVERSION_MODE</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC SDL_YUV_CONVERSION_MODE SDLCALL SDL_GetYUVConversionModeForResolution</definition>
        <argsstring>(int width, int height)</argsstring>
        <name>SDL_GetYUVConversionModeForResolution</name>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the YUV conversion mode, returning the correct mode for the resolution when the current conversion mode is SDL_YUV_CONVERSION_AUTOMATIC</para>
<para><simplesect kind="since"><para>This function is available since SDL 2.0.8. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_surface.h" line="985" column="49" declfile="D:/RayTracing/include/SDL_surface.h" declline="985" declcolumn="49"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Header file for <ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref> definition and management functions. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/>Simple<sp/>DirectMedia<sp/>Layer</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/>Copyright<sp/>(C)<sp/>1997-2022<sp/>Sam<sp/>Lantinga<sp/>&lt;slouken@libsdl.org&gt;</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/>This<sp/>software<sp/>is<sp/>provided<sp/>&apos;as-is&apos;,<sp/>without<sp/>any<sp/>express<sp/>or<sp/>implied</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/>warranty.<sp/><sp/>In<sp/>no<sp/>event<sp/>will<sp/>the<sp/>authors<sp/>be<sp/>held<sp/>liable<sp/>for<sp/>any<sp/>damages</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/>arising<sp/>from<sp/>the<sp/>use<sp/>of<sp/>this<sp/>software.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/>Permission<sp/>is<sp/>granted<sp/>to<sp/>anyone<sp/>to<sp/>use<sp/>this<sp/>software<sp/>for<sp/>any<sp/>purpose,</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/>including<sp/>commercial<sp/>applications,<sp/>and<sp/>to<sp/>alter<sp/>it<sp/>and<sp/>redistribute<sp/>it</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/>freely,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>restrictions:</highlight></codeline>
<codeline lineno="12"><highlight class="comment"></highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/>1.<sp/>The<sp/>origin<sp/>of<sp/>this<sp/>software<sp/>must<sp/>not<sp/>be<sp/>misrepresented;<sp/>you<sp/>must<sp/>not</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>claim<sp/>that<sp/>you<sp/>wrote<sp/>the<sp/>original<sp/>software.<sp/>If<sp/>you<sp/>use<sp/>this<sp/>software</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>in<sp/>a<sp/>product,<sp/>an<sp/>acknowledgment<sp/>in<sp/>the<sp/>product<sp/>documentation<sp/>would<sp/>be</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>appreciated<sp/>but<sp/>is<sp/>not<sp/>required.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/>2.<sp/>Altered<sp/>source<sp/>versions<sp/>must<sp/>be<sp/>plainly<sp/>marked<sp/>as<sp/>such,<sp/>and<sp/>must<sp/>not<sp/>be</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>misrepresented<sp/>as<sp/>being<sp/>the<sp/>original<sp/>software.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/>3.<sp/>This<sp/>notice<sp/>may<sp/>not<sp/>be<sp/>removed<sp/>or<sp/>altered<sp/>from<sp/>any<sp/>source<sp/>distribution.</highlight></codeline>
<codeline lineno="20"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SDL_surface_h_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SDL_surface_h_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_s_d_l__stdinc_8h" kindref="compound">SDL_stdinc.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_s_d_l__pixels_8h" kindref="compound">SDL_pixels.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_s_d_l__rect_8h" kindref="compound">SDL_rect.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_s_d_l__blendmode_8h" kindref="compound">SDL_blendmode.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_s_d_l__rwops_8h" kindref="compound">SDL_rwops.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="begin__code_8h" kindref="compound">begin_code.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Set<sp/>up<sp/>for<sp/>C<sp/>function<sp/>definitions,<sp/>even<sp/>when<sp/>using<sp/>C++<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>@{<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="_s_d_l__surface_8h_1a59c7111f96872f973d0f058362761776" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SDL_SWSURFACE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="_s_d_l__surface_8h_1a4a5f795a69ac626fba73c4bd0bfd9626" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SDL_PREALLOC<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x00000001<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="_s_d_l__surface_8h_1a3b3d53ad7ba0b7294ca25251d88d40fb" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SDL_RLEACCEL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x00000002<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="_s_d_l__surface_8h_1a2d3381f5c76aec3fea3f8b990c2e9f6d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SDL_DONTFREE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x00000004<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="_s_d_l__surface_8h_1a48a8fb403cb1513b0f689b532dc75861" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SDL_SIMD_ALIGNED<sp/><sp/><sp/><sp/>0x00000008<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>@}<sp/>*/</highlight><highlight class="comment">/*<sp/>Surface<sp/>flags<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="_s_d_l__surface_8h_1aba3239116c763175b6ea41ef78b72091" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SDL_MUSTLOCK(S)<sp/>(((S)-&gt;flags<sp/>&amp;<sp/>SDL_RLEACCEL)<sp/>!=<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="struct_s_d_l___surface" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref></highlight></codeline>
<codeline lineno="71"><highlight class="normal">{</highlight></codeline>
<codeline lineno="72" refid="struct_s_d_l___surface_1a86d78b665d5dfd7aa1dd9696b067641b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref><sp/><ref refid="struct_s_d_l___surface_1a86d78b665d5dfd7aa1dd9696b067641b" kindref="member">flags</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="73" refid="struct_s_d_l___surface_1a0a90721f947c10c3b79e02ccb419ca62" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_s_d_l___pixel_format" kindref="compound">SDL_PixelFormat</ref><sp/>*<ref refid="struct_s_d_l___surface_1a0a90721f947c10c3b79e02ccb419ca62" kindref="member">format</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="74" refid="struct_s_d_l___surface_1af33bcf87a1f5e10a99b3c7e8626b38c8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___surface_1a9b0ec7185dcdb2a3530a9160a6ea83d9" kindref="member">w</ref>,<sp/><ref refid="struct_s_d_l___surface_1af33bcf87a1f5e10a99b3c7e8626b38c8" kindref="member">h</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="75" refid="struct_s_d_l___surface_1a5fa37325d77d65b2ed64ffc7cd01bb6c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___surface_1a5fa37325d77d65b2ed64ffc7cd01bb6c" kindref="member">pitch</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="76" refid="struct_s_d_l___surface_1abd9597e0e084b8ef33fe0397bc26d911" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="struct_s_d_l___surface_1abd9597e0e084b8ef33fe0397bc26d911" kindref="member">pixels</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="79" refid="struct_s_d_l___surface_1ae66d973dcb9b57cb34815892e1ee1f31" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="struct_s_d_l___surface_1ae66d973dcb9b57cb34815892e1ee1f31" kindref="member">userdata</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="82" refid="struct_s_d_l___surface_1a5022edaeea1c0a055fa5d6dccba41de2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___surface_1a5022edaeea1c0a055fa5d6dccba41de2" kindref="member">locked</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="85" refid="struct_s_d_l___surface_1a17294cb1ec1ef7f77f75cdad26ac795f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="struct_s_d_l___surface_1a17294cb1ec1ef7f77f75cdad26ac795f" kindref="member">list_blitmap</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="88" refid="struct_s_d_l___surface_1aa9a0da3b38261dad6cf0cc4e3bb5b0c3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref><sp/><ref refid="struct_s_d_l___surface_1aa9a0da3b38261dad6cf0cc4e3bb5b0c3" kindref="member">clip_rect</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="91" refid="struct_s_d_l___surface_1a8c1ecad399b0d4f525b1a53b6ee9393f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">SDL_BlitMap<sp/>*<ref refid="struct_s_d_l___surface_1a8c1ecad399b0d4f525b1a53b6ee9393f" kindref="member">map</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="94" refid="struct_s_d_l___surface_1a03d10628a359c0674f5ceffd574f1641" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___surface_1a03d10628a359c0674f5ceffd574f1641" kindref="member">refcount</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="95" refid="_s_d_l__surface_8h_1ad894d177fae95d7a1c0d23597b69e569" refkind="member"><highlight class="normal">}<sp/><ref refid="_s_d_l__surface_8h_1ad894d177fae95d7a1c0d23597b69e569" kindref="member">SDL_Surface</ref>;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="100" refid="_s_d_l__surface_8h_1ab2d7366d99a08693d476b98760690947" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/>*<ref refid="_s_d_l__surface_8h_1ab2d7366d99a08693d476b98760690947" kindref="member">SDL_blit</ref>)<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a72e0fdf0f845ded60b1fada9e9195cd7" kindref="member">src</ref>,<sp/><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref><sp/>*<sp/>srcrect,</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a92034251bfd455d524a9b5610cddba00" kindref="member">dst</ref>,<sp/><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref><sp/>*<sp/>dstrect);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="_s_d_l__surface_8h_1a00a564600207cec7a2cb50a6e20d2446" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal">{</highlight></codeline>
<codeline lineno="108" refid="_s_d_l__surface_8h_1a00a564600207cec7a2cb50a6e20d2446a779237ffb78ee935518b83e8ab8a35dc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_d_l__surface_8h_1a00a564600207cec7a2cb50a6e20d2446a779237ffb78ee935518b83e8ab8a35dc" kindref="member">SDL_YUV_CONVERSION_JPEG</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="109" refid="_s_d_l__surface_8h_1a00a564600207cec7a2cb50a6e20d2446a58058f0ed3146de73b031e256aa2aaaa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_d_l__surface_8h_1a00a564600207cec7a2cb50a6e20d2446a58058f0ed3146de73b031e256aa2aaaa" kindref="member">SDL_YUV_CONVERSION_BT601</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="110" refid="_s_d_l__surface_8h_1a00a564600207cec7a2cb50a6e20d2446a806aeb86ff618a298206cbf921c0202a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_d_l__surface_8h_1a00a564600207cec7a2cb50a6e20d2446a806aeb86ff618a298206cbf921c0202a" kindref="member">SDL_YUV_CONVERSION_BT709</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_d_l__surface_8h_1a00a564600207cec7a2cb50a6e20d2446acbf0cb1b718195c6c0960d4471a5ed0a" kindref="member">SDL_YUV_CONVERSION_AUTOMATIC</ref><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="112" refid="_s_d_l__surface_8h_1a00a564600207cec7a2cb50a6e20d2446acbf0cb1b718195c6c0960d4471a5ed0a" refkind="member"><highlight class="normal">}<sp/><ref refid="_s_d_l__surface_8h_1a00a564600207cec7a2cb50a6e20d2446" kindref="member">SDL_YUV_CONVERSION_MODE</ref>;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="158" refid="_s_d_l__surface_8h_1a46e9fd3961922c6888a19b0462a75b24" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref><sp/>*<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__surface_8h_1a46e9fd3961922c6888a19b0462a75b24" kindref="member">SDL_CreateRGBSurface</ref></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref><sp/><ref refid="_s_d_l__opengl__glext_8h_1ac7ba7d3cce3d19ca020e056b37231289" kindref="member">flags</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl_8h_1a9a82cf3caff84cabc4598e2619faac17" kindref="member">width</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl_8h_1aa352f2804b9902ac30769c00dde75d5f" kindref="member">height</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl_8h_1aa8bd8cf1eef34712fdb6ad58b540a2ee" kindref="member">depth</ref>,</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref><sp/>Rmask,<sp/><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref><sp/>Gmask,<sp/><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref><sp/>Bmask,<sp/><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref><sp/>Amask);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>!!!<sp/>FIXME<sp/>for<sp/>2.1:<sp/>why<sp/>does<sp/>this<sp/>ask<sp/>for<sp/>depth?<sp/>Format<sp/>provides<sp/>that.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="186" refid="_s_d_l__surface_8h_1a9a981370beff567b9c7fbf888e272d8f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref><sp/>*<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__surface_8h_1a9a981370beff567b9c7fbf888e272d8f" kindref="member">SDL_CreateRGBSurfaceWithFormat</ref></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref><sp/><ref refid="_s_d_l__opengl__glext_8h_1ac7ba7d3cce3d19ca020e056b37231289" kindref="member">flags</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl_8h_1a9a82cf3caff84cabc4598e2619faac17" kindref="member">width</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl_8h_1aa352f2804b9902ac30769c00dde75d5f" kindref="member">height</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl_8h_1aa8bd8cf1eef34712fdb6ad58b540a2ee" kindref="member">depth</ref>,<sp/><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref><sp/><ref refid="_s_d_l__audio_8h_1a71a65ffd977afe9c3fef116a5bc9ee27" kindref="member">format</ref>);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="217" refid="_s_d_l__surface_8h_1a6487ace22fb07cc55785bc3be9489835" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref><sp/>*<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__surface_8h_1a6487ace22fb07cc55785bc3be9489835" kindref="member">SDL_CreateRGBSurfaceFrom</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="_s_d_l__opengl_8h_1ada7ad693ea2e311b8103f4693fc35f80" kindref="member">pixels</ref>,</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl_8h_1a9a82cf3caff84cabc4598e2619faac17" kindref="member">width</ref>,</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl_8h_1aa352f2804b9902ac30769c00dde75d5f" kindref="member">height</ref>,</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl_8h_1aa8bd8cf1eef34712fdb6ad58b540a2ee" kindref="member">depth</ref>,</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___surface_1a5fa37325d77d65b2ed64ffc7cd01bb6c" kindref="member">pitch</ref>,</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref><sp/>Rmask,</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref><sp/>Gmask,</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref><sp/>Bmask,</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref><sp/>Amask);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>!!!<sp/>FIXME<sp/>for<sp/>2.1:<sp/>why<sp/>does<sp/>this<sp/>ask<sp/>for<sp/>depth?<sp/>Format<sp/>provides<sp/>that.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="255" refid="_s_d_l__surface_8h_1af29df8bb7f57912211f5b6af199dcdc3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref><sp/>*<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__surface_8h_1af29df8bb7f57912211f5b6af199dcdc3" kindref="member">SDL_CreateRGBSurfaceWithFormatFrom</ref></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="_s_d_l__opengl_8h_1ada7ad693ea2e311b8103f4693fc35f80" kindref="member">pixels</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl_8h_1a9a82cf3caff84cabc4598e2619faac17" kindref="member">width</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl_8h_1aa352f2804b9902ac30769c00dde75d5f" kindref="member">height</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl_8h_1aa8bd8cf1eef34712fdb6ad58b540a2ee" kindref="member">depth</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___surface_1a5fa37325d77d65b2ed64ffc7cd01bb6c" kindref="member">pitch</ref>,<sp/><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref><sp/><ref refid="_s_d_l__audio_8h_1a71a65ffd977afe9c3fef116a5bc9ee27" kindref="member">format</ref>);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="272" refid="_s_d_l__surface_8h_1a7b8d4f9cc058822501896a2eed81220e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__surface_8h_1a7b8d4f9cc058822501896a2eed81220e" kindref="member">SDL_FreeSurface</ref>(<ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref><sp/>*<sp/>surface);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="286" refid="_s_d_l__surface_8h_1a72c780465293acb1f586995943422a17" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__surface_8h_1a72c780465293acb1f586995943422a17" kindref="member">SDL_SetSurfacePalette</ref>(<ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref><sp/>*<sp/>surface,</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_s_d_l___palette" kindref="compound">SDL_Palette</ref><sp/>*<sp/>palette);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="310" refid="_s_d_l__surface_8h_1a3d1da1c7ecdaa461fac51a10785f5077" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__surface_8h_1a3d1da1c7ecdaa461fac51a10785f5077" kindref="member">SDL_LockSurface</ref>(<ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref><sp/>*<sp/>surface);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="321" refid="_s_d_l__surface_8h_1a56b93f51358b55d7fc213a3ba9b02c24" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__surface_8h_1a56b93f51358b55d7fc213a3ba9b02c24" kindref="member">SDL_UnlockSurface</ref>(<ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref><sp/>*<sp/>surface);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="345" refid="_s_d_l__surface_8h_1a30572a53ecbd5a2c260d9aafc464503c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref><sp/>*<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__surface_8h_1a30572a53ecbd5a2c260d9aafc464503c" kindref="member">SDL_LoadBMP_RW</ref>(<ref refid="struct_s_d_l___r_wops" kindref="compound">SDL_RWops</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a72e0fdf0f845ded60b1fada9e9195cd7" kindref="member">src</ref>,</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>freesrc);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="353" refid="_s_d_l__surface_8h_1ae63aa646481001be542220a8733c3ce0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SDL_LoadBMP(file)<sp/><sp/><sp/>SDL_LoadBMP_RW(SDL_RWFromFile(file,<sp/>&quot;rb&quot;</highlight><highlight class="normal">),<sp/>1)</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="375" refid="_s_d_l__surface_8h_1aadc126a4edeafb5033d5e942cf32db6a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__surface_8h_1aadc126a4edeafb5033d5e942cf32db6a" kindref="member">SDL_SaveBMP_RW</ref></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref><sp/>*<sp/>surface,<sp/><ref refid="struct_s_d_l___r_wops" kindref="compound">SDL_RWops</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a92034251bfd455d524a9b5610cddba00" kindref="member">dst</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>freedst);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="383" refid="_s_d_l__surface_8h_1a425e7a69acbdf2bd9ba46d332d917320" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SDL_SaveBMP(surface,<sp/>file)<sp/>\</highlight></codeline>
<codeline lineno="384"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SDL_SaveBMP_RW(surface,<sp/>SDL_RWFromFile(file,<sp/>&quot;wb&quot;</highlight><highlight class="normal">),<sp/>1)</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="403" refid="_s_d_l__surface_8h_1ae2f6d70b8071e83e0c84241dbdcd3a3b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__surface_8h_1ae2f6d70b8071e83e0c84241dbdcd3a3b" kindref="member">SDL_SetSurfaceRLE</ref>(<ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref><sp/>*<sp/>surface,</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flag);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="418" refid="_s_d_l__surface_8h_1abdc58e9ce47e2693230a3a1389b1bfb6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__surface_8h_1abdc58e9ce47e2693230a3a1389b1bfb6" kindref="member">SDL_HasSurfaceRLE</ref>(<ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref><sp/>*<sp/>surface);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="444" refid="_s_d_l__surface_8h_1a4cbe831b210dc900cb93101352357b73" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__surface_8h_1a4cbe831b210dc900cb93101352357b73" kindref="member">SDL_SetColorKey</ref>(<ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref><sp/>*<sp/>surface,</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flag,<sp/><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref><sp/>key);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="460" refid="_s_d_l__surface_8h_1a31ca900bd39b6805fc8586472be18c90" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__surface_8h_1a31ca900bd39b6805fc8586472be18c90" kindref="member">SDL_HasColorKey</ref>(<ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref><sp/>*<sp/>surface);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="480" refid="_s_d_l__surface_8h_1a2ff80a244bad20f1c4fa85adf1e1deb9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__surface_8h_1a2ff80a244bad20f1c4fa85adf1e1deb9" kindref="member">SDL_GetColorKey</ref>(<ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref><sp/>*<sp/>surface,</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref><sp/>*<sp/>key);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="504" refid="_s_d_l__surface_8h_1a4edf978396e3f562d43c672630e0ca71" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__surface_8h_1a4edf978396e3f562d43c672630e0ca71" kindref="member">SDL_SetSurfaceColorMod</ref>(<ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref><sp/>*<sp/>surface,</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref><sp/><ref refid="_s_d_l__opengl_8h_1a42ce7cdc612e53abee15043f80220d97" kindref="member">r</ref>,<sp/><ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref><sp/><ref refid="_s_d_l__opengl__glext_8h_1acaceb3a655ff28b75259860bcb868f9f" kindref="member">g</ref>,<sp/><ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref><sp/><ref refid="_s_d_l__opengl__glext_8h_1a0f71581a41fd2264c8944126dabbd010" kindref="member">b</ref>);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="523" refid="_s_d_l__surface_8h_1a5db1ae32b7884b598d86424e205c3a86" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__surface_8h_1a5db1ae32b7884b598d86424e205c3a86" kindref="member">SDL_GetSurfaceColorMod</ref>(<ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref><sp/>*<sp/>surface,</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref><sp/>*<sp/><ref refid="_s_d_l__opengl_8h_1a42ce7cdc612e53abee15043f80220d97" kindref="member">r</ref>,<sp/><ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1acaceb3a655ff28b75259860bcb868f9f" kindref="member">g</ref>,</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a0f71581a41fd2264c8944126dabbd010" kindref="member">b</ref>);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="545" refid="_s_d_l__surface_8h_1a0035f0239f0588d16c57aff7672be174" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__surface_8h_1a0035f0239f0588d16c57aff7672be174" kindref="member">SDL_SetSurfaceAlphaMod</ref>(<ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref><sp/>*<sp/>surface,</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref><sp/><ref refid="_s_d_l__opengl__glext_8h_1ac03904b1f7e359bb2acf10a755e97c5a" kindref="member">alpha</ref>);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="561" refid="_s_d_l__surface_8h_1a09a99bb24420857e85071e39607678f6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__surface_8h_1a09a99bb24420857e85071e39607678f6" kindref="member">SDL_GetSurfaceAlphaMod</ref>(<ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref><sp/>*<sp/>surface,</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2" kindref="member">Uint8</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1ac03904b1f7e359bb2acf10a755e97c5a" kindref="member">alpha</ref>);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="580" refid="_s_d_l__surface_8h_1a35f5b3b64c503c4a8da01566f62976a9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__surface_8h_1a35f5b3b64c503c4a8da01566f62976a9" kindref="member">SDL_SetSurfaceBlendMode</ref>(<ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref><sp/>*<sp/>surface,</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_d_l__blendmode_8h_1a850d3c67a878fd6698a1c8dbb1eabf1e" kindref="member">SDL_BlendMode</ref><sp/>blendMode);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="595" refid="_s_d_l__surface_8h_1a95570c617879f45bf7e2e4d330534f6b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__surface_8h_1a95570c617879f45bf7e2e4d330534f6b" kindref="member">SDL_GetSurfaceBlendMode</ref>(<ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref><sp/>*<sp/>surface,</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_d_l__blendmode_8h_1a850d3c67a878fd6698a1c8dbb1eabf1e" kindref="member">SDL_BlendMode</ref><sp/>*blendMode);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="618" refid="_s_d_l__surface_8h_1a6cf2c30be55f51fe9e4faf97e3f8d08b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__surface_8h_1a6cf2c30be55f51fe9e4faf97e3f8d08b" kindref="member">SDL_SetClipRect</ref>(<ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref><sp/>*<sp/>surface,</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref><sp/>*<sp/>rect);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="637" refid="_s_d_l__surface_8h_1a7d7f71b94748a1b0db3b5b769834ed27" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__surface_8h_1a7d7f71b94748a1b0db3b5b769834ed27" kindref="member">SDL_GetClipRect</ref>(<ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref><sp/>*<sp/>surface,</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref><sp/>*<sp/>rect);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="641"><highlight class="comment"><sp/>*<sp/>Creates<sp/>a<sp/>new<sp/>surface<sp/>identical<sp/>to<sp/>the<sp/>existing<sp/>surface.</highlight></codeline>
<codeline lineno="642"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="643"><highlight class="comment"><sp/>*<sp/>The<sp/>returned<sp/>surface<sp/>should<sp/>be<sp/>freed<sp/>with<sp/>SDL_FreeSurface().</highlight></codeline>
<codeline lineno="644"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="645"><highlight class="comment"><sp/>*<sp/>\param<sp/>surface<sp/>the<sp/>surface<sp/>to<sp/>duplicate.</highlight></codeline>
<codeline lineno="646"><highlight class="comment"><sp/>*<sp/>\returns<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>surface,<sp/>or<sp/>NULL<sp/>on<sp/>failure;<sp/>call<sp/>SDL_GetError()<sp/>for</highlight></codeline>
<codeline lineno="647"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>more<sp/>information.</highlight></codeline>
<codeline lineno="648"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649" refid="_s_d_l__surface_8h_1a1702789e69f61f2ecc5ce848464533c5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref><sp/>*<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__surface_8h_1a1702789e69f61f2ecc5ce848464533c5" kindref="member">SDL_DuplicateSurface</ref>(<ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref><sp/>*<sp/>surface);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="673" refid="_s_d_l__surface_8h_1a5bcce95525131d59a3039994a5ebdc7e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref><sp/>*<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__surface_8h_1a5bcce95525131d59a3039994a5ebdc7e" kindref="member">SDL_ConvertSurface</ref></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a72e0fdf0f845ded60b1fada9e9195cd7" kindref="member">src</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___pixel_format" kindref="compound">SDL_PixelFormat</ref><sp/>*<sp/>fmt,<sp/><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref><sp/><ref refid="_s_d_l__opengl__glext_8h_1ac7ba7d3cce3d19ca020e056b37231289" kindref="member">flags</ref>);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="698" refid="_s_d_l__surface_8h_1a32edde1eab798bd958c09dd08135ca8a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref><sp/>*<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__surface_8h_1a32edde1eab798bd958c09dd08135ca8a" kindref="member">SDL_ConvertSurfaceFormat</ref></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a72e0fdf0f845ded60b1fada9e9195cd7" kindref="member">src</ref>,<sp/><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref><sp/>pixel_format,<sp/><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref><sp/><ref refid="_s_d_l__opengl__glext_8h_1ac7ba7d3cce3d19ca020e056b37231289" kindref="member">flags</ref>);</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="717" refid="_s_d_l__surface_8h_1a339c5728a1181e2d6334ad07e1e84440" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__surface_8h_1a339c5728a1181e2d6334ad07e1e84440" kindref="member">SDL_ConvertPixels</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl_8h_1a9a82cf3caff84cabc4598e2619faac17" kindref="member">width</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl_8h_1aa352f2804b9902ac30769c00dde75d5f" kindref="member">height</ref>,</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref><sp/>src_format,</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a72e0fdf0f845ded60b1fada9e9195cd7" kindref="member">src</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>src_pitch,</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref><sp/>dst_format,</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a92034251bfd455d524a9b5610cddba00" kindref="member">dst</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dst_pitch);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="743" refid="_s_d_l__surface_8h_1ab6af6b224b687e7c6413106b785743d3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__surface_8h_1ab6af6b224b687e7c6413106b785743d3" kindref="member">SDL_PremultiplyAlpha</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl_8h_1a9a82cf3caff84cabc4598e2619faac17" kindref="member">width</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl_8h_1aa352f2804b9902ac30769c00dde75d5f" kindref="member">height</ref>,</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref><sp/>src_format,</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a72e0fdf0f845ded60b1fada9e9195cd7" kindref="member">src</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>src_pitch,</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref><sp/>dst_format,</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a92034251bfd455d524a9b5610cddba00" kindref="member">dst</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dst_pitch);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="772" refid="_s_d_l__surface_8h_1a98b3595458c6271303d6470cb2b2c721" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__surface_8h_1a98b3595458c6271303d6470cb2b2c721" kindref="member">SDL_FillRect</ref></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a92034251bfd455d524a9b5610cddba00" kindref="member">dst</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref><sp/>*<sp/>rect,<sp/><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref><sp/><ref refid="_s_d_l__opengl__glext_8h_1a3ea846f998d64f079b86052b6c4193a8" kindref="member">color</ref>);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="798" refid="_s_d_l__surface_8h_1a7b893162f400b8193ff6ca628ec784b6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__surface_8h_1a7b893162f400b8193ff6ca628ec784b6" kindref="member">SDL_FillRects</ref></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a92034251bfd455d524a9b5610cddba00" kindref="member">dst</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref><sp/>*<sp/>rects,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl_8h_1a619bc20e8198de3bd3f3d7fc34de66b2" kindref="member">count</ref>,<sp/><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref><sp/><ref refid="_s_d_l__opengl__glext_8h_1a3ea846f998d64f079b86052b6c4193a8" kindref="member">color</ref>);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>!!!<sp/>FIXME:<sp/>merge<sp/>this<sp/>documentation<sp/>with<sp/>the<sp/>wiki<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="859" refid="_s_d_l__surface_8h_1aad8d7ebe5e953593cb7d91373e73ba9a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SDL_BlitSurface<sp/>SDL_UpperBlit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight></codeline>
<codeline lineno="871" refid="_s_d_l__surface_8h_1ac418c4404813eeb32f4e1b24f9deae96" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__surface_8h_1ac418c4404813eeb32f4e1b24f9deae96" kindref="member">SDL_UpperBlit</ref></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a72e0fdf0f845ded60b1fada9e9195cd7" kindref="member">src</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref><sp/>*<sp/>srcrect,</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a92034251bfd455d524a9b5610cddba00" kindref="member">dst</ref>,<sp/><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref><sp/>*<sp/>dstrect);</highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="897" refid="_s_d_l__surface_8h_1a82bd1c0e0886d77e287207fe6351bf87" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__surface_8h_1a82bd1c0e0886d77e287207fe6351bf87" kindref="member">SDL_LowerBlit</ref></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a72e0fdf0f845ded60b1fada9e9195cd7" kindref="member">src</ref>,<sp/><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref><sp/>*<sp/>srcrect,</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a92034251bfd455d524a9b5610cddba00" kindref="member">dst</ref>,<sp/><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref><sp/>*<sp/>dstrect);</highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight></codeline>
<codeline lineno="910" refid="_s_d_l__surface_8h_1aee44fe7d5dba376a971793d70ffcf55c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__surface_8h_1aee44fe7d5dba376a971793d70ffcf55c" kindref="member">SDL_SoftStretch</ref>(<ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a72e0fdf0f845ded60b1fada9e9195cd7" kindref="member">src</ref>,</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref><sp/>*<sp/>srcrect,</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a92034251bfd455d524a9b5610cddba00" kindref="member">dst</ref>,</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref><sp/>*<sp/>dstrect);</highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight></codeline>
<codeline lineno="920" refid="_s_d_l__surface_8h_1ac2fe0fda20d38a16ec1802da9d6e49a0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__surface_8h_1ac2fe0fda20d38a16ec1802da9d6e49a0" kindref="member">SDL_SoftStretchLinear</ref>(<ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a72e0fdf0f845ded60b1fada9e9195cd7" kindref="member">src</ref>,</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref><sp/>*<sp/>srcrect,</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a92034251bfd455d524a9b5610cddba00" kindref="member">dst</ref>,</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref><sp/>*<sp/>dstrect);</highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight></codeline>
<codeline lineno="926" refid="_s_d_l__surface_8h_1a0be5f27c24e29a61096c2f59610ff1bf" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SDL_BlitScaled<sp/>SDL_UpperBlitScaled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight></codeline>
<codeline lineno="938" refid="_s_d_l__surface_8h_1a90ac01634e9ee33764fcf5ec7bc43c46" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__surface_8h_1a90ac01634e9ee33764fcf5ec7bc43c46" kindref="member">SDL_UpperBlitScaled</ref></highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a72e0fdf0f845ded60b1fada9e9195cd7" kindref="member">src</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref><sp/>*<sp/>srcrect,</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a92034251bfd455d524a9b5610cddba00" kindref="member">dst</ref>,<sp/><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref><sp/>*<sp/>dstrect);</highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight></codeline>
<codeline lineno="961" refid="_s_d_l__surface_8h_1a5c6b2f06726600d41ff75ff259d4383b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__surface_8h_1a5c6b2f06726600d41ff75ff259d4383b" kindref="member">SDL_LowerBlitScaled</ref></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a72e0fdf0f845ded60b1fada9e9195cd7" kindref="member">src</ref>,<sp/><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref><sp/>*<sp/>srcrect,</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_s_d_l___surface" kindref="compound">SDL_Surface</ref><sp/>*<sp/><ref refid="_s_d_l__opengl__glext_8h_1a92034251bfd455d524a9b5610cddba00" kindref="member">dst</ref>,<sp/><ref refid="struct_s_d_l___rect" kindref="compound">SDL_Rect</ref><sp/>*<sp/>dstrect);</highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight></codeline>
<codeline lineno="970" refid="_s_d_l__surface_8h_1a35875bf88b2d78e0990f5f13ef1cd0e1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__surface_8h_1a35875bf88b2d78e0990f5f13ef1cd0e1" kindref="member">SDL_SetYUVConversionMode</ref>(<ref refid="_s_d_l__surface_8h_1a00a564600207cec7a2cb50a6e20d2446" kindref="member">SDL_YUV_CONVERSION_MODE</ref><sp/><ref refid="_s_d_l__opengl__glext_8h_1a1e71d9c196e4683cc06c4b54d53f7ef5" kindref="member">mode</ref>);</highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight></codeline>
<codeline lineno="977" refid="_s_d_l__surface_8h_1a61d2c4412423e5d1a0e3426ee678d262" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="_s_d_l__surface_8h_1a00a564600207cec7a2cb50a6e20d2446" kindref="member">SDL_YUV_CONVERSION_MODE</ref><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__surface_8h_1a61d2c4412423e5d1a0e3426ee678d262" kindref="member">SDL_GetYUVConversionMode</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="985" refid="_s_d_l__surface_8h_1a1cfad98219e074988d0c5731e304cda4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="_s_d_l__surface_8h_1a00a564600207cec7a2cb50a6e20d2446" kindref="member">SDL_YUV_CONVERSION_MODE</ref><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__surface_8h_1a1cfad98219e074988d0c5731e304cda4" kindref="member">SDL_GetYUVConversionModeForResolution</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl_8h_1a9a82cf3caff84cabc4598e2619faac17" kindref="member">width</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl_8h_1aa352f2804b9902ac30769c00dde75d5f" kindref="member">height</ref>);</highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Ends<sp/>C<sp/>function<sp/>definitions<sp/>when<sp/>using<sp/>C++<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal">}</highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="close__code_8h" kindref="compound">close_code.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>SDL_surface_h_<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>vi:<sp/>set<sp/>ts=4<sp/>sw=4<sp/>expandtab:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="D:/RayTracing/include/SDL_surface.h"/>
  </compounddef>
</doxygen>
