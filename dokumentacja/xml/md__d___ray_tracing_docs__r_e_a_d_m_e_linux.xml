<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="md__d___ray_tracing_docs__r_e_a_d_m_e_linux" kind="page">
    <compoundname>md_D__RayTracing_docs_README_linux</compoundname>
    <title>Linux</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>By default SDL will only link against glibc, the rest of the features will be enabled dynamically at runtime depending on the available features on the target system. So, for example if you built SDL with Xinerama support and the target system does not have the Xinerama libraries installed, it will be disabled at runtime, and you won&apos;t get a missing library error, at least with the default configuration parameters.</para>
<sect1 id="md__d___ray_tracing_docs__r_e_a_d_m_e_linux_1autotoc_md59">
<title>Build Dependencies</title>
<para>Ubuntu 20.04, all available features enabled: <verbatim>sudo apt-get install build-essential git make cmake autoconf automake \
libtool pkg-config libasound2-dev libpulse-dev libaudio-dev libjack-dev \
libx11-dev libxext-dev libxrandr-dev libxcursor-dev libxfixes-dev libxi-dev \
libxinerama-dev libxxf86vm-dev libxss-dev libgl1-mesa-dev libdbus-1-dev \
libudev-dev libgles2-mesa-dev libegl1-mesa-dev libibus-1.0-dev \
fcitx-libs-dev libsamplerate0-dev libsndio-dev libwayland-dev \
libxkbcommon-dev libdrm-dev libgbm-dev
</verbatim> Fedora 35, all available features enabled: <verbatim>sudo yum install gcc git-core make cmake autoconf automake libtool \
alsa-lib-devel pulseaudio-libs-devel nas-devel pipewire-devel \
libX11-devel libXext-devel libXrandr-devel libXcursor-devel libXfixes-devel \
libXi-devel libXinerama-devel libXxf86vm-devel libXScrnSaver-devel \
dbus-devel ibus-devel fcitx-devel systemd-devel mesa-libGL-devel \
libxkbcommon-devel mesa-libGLES-devel mesa-libEGL-devel vulkan-devel \
wayland-devel wayland-protocols-devel libdrm-devel mesa-libgbm-devel \
libusb-devel pipewire-jack-audio-connection-kit-devel libdecor-devel \
libsamplerate-devel
</verbatim> NOTES:<itemizedlist>
<listitem><para>This includes all the audio targets except arts and esd, because Ubuntu (and/or Debian) pulled their packages, but in theory SDL still supports them. The sndio audio target is also unavailable on Fedora.</para>
</listitem><listitem><para>libsamplerate0-dev lets SDL optionally link to libresamplerate at runtime for higher-quality audio resampling. SDL will work without it if the library is missing, so it&apos;s safe to build in support even if the end user doesn&apos;t have this library installed.</para>
</listitem><listitem><para>DirectFB isn&apos;t included because the configure script (currently) fails to find it at all. You can do &quot;sudo apt-get install libdirectfb-dev&quot; and fix the configure script to include DirectFB support. Send patches. :)</para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="md__d___ray_tracing_docs__r_e_a_d_m_e_linux_1autotoc_md60">
<title>Joystick does not work</title>
<para>If you compiled or are using a version of SDL with udev support (and you should!) there&apos;s a few issues that may cause SDL to fail to detect your joystick. To debug this, start by installing the evtest utility. On Ubuntu/Debian: <verbatim>sudo apt-get install evtest
</verbatim> Then run: <verbatim>sudo evtest
</verbatim> You&apos;ll hopefully see your joystick listed along with a name like &quot;/dev/input/eventXX&quot; Now run: <verbatim>cat /dev/input/event/XX
</verbatim> If you get a permission error, you need to set a udev rule to change the mode of your device (see below) <linebreak/>
</para>
<para>Also, try: <verbatim>sudo udevadm info --query=all --name=input/eventXX
</verbatim> If you see a line stating ID_INPUT_JOYSTICK=1, great, if you don&apos;t see it, you need to set up an udev rule to force this variable.</para>
<para>A combined rule for the Saitek Pro Flight Rudder Pedals to fix both issues looks like: <verbatim>SUBSYSTEM==&quot;input&quot;, ATTRS{idProduct}==&quot;0763&quot;, ATTRS{idVendor}==&quot;06a3&quot;, MODE=&quot;0666&quot;, ENV{ID_INPUT_JOYSTICK}=&quot;1&quot;
SUBSYSTEM==&quot;input&quot;, ATTRS{idProduct}==&quot;0764&quot;, ATTRS{idVendor}==&quot;06a3&quot;, MODE=&quot;0666&quot;, ENV{ID_INPUT_JOYSTICK}=&quot;1&quot;
</verbatim> You can set up similar rules for your device by changing the values listed in idProduct and idVendor. To obtain these values, try: <verbatim>sudo udevadm info -a --name=input/eventXX | grep idVendor
sudo udevadm info -a --name=input/eventXX | grep idProduct
</verbatim> If multiple values come up for each of these, the one you want is the first one of each. <linebreak/>
</para>
<para>On other systems which ship with an older udev (such as CentOS), you may need to set up a rule such as: <verbatim>SUBSYSTEM==&quot;input&quot;, ENV{ID_CLASS}==&quot;joystick&quot;, ENV{ID_INPUT_JOYSTICK}=&quot;1&quot;
</verbatim> </para>
</sect1>
    </detaileddescription>
    <location file="D:/RayTracing/docs/README-linux.md"/>
  </compounddef>
</doxygen>
