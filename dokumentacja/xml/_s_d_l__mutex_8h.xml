<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="_s_d_l__mutex_8h" kind="file" language="C++">
    <compoundname>SDL_mutex.h</compoundname>
    <includes refid="_s_d_l__stdinc_8h" local="yes">SDL_stdinc.h</includes>
    <includes refid="_s_d_l__error_8h" local="yes">SDL_error.h</includes>
    <includes refid="begin__code_8h" local="yes">begin_code.h</includes>
    <includes refid="close__code_8h" local="yes">close_code.h</includes>
    <includedby refid="_s_d_l_8h" local="yes">D:/RayTracing/include/SDL.h</includedby>
    <includedby refid="_s_d_l__audio_8h" local="yes">D:/RayTracing/include/SDL_audio.h</includedby>
    <includedby refid="_s_d_l__thread_8h" local="yes">D:/RayTracing/include/SDL_thread.h</includedby>
    <incdepgraph>
      <node id="3">
        <label>SDL_config.h</label>
        <link refid="_s_d_l__config_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>SDL_error.h</label>
        <link refid="_s_d_l__error_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>D:/RayTracing/include/SDL_mutex.h</label>
        <link refid="_s_d_l__mutex_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>SDL_platform.h</label>
        <link refid="_s_d_l__platform_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>SDL_stdinc.h</label>
        <link refid="_s_d_l__stdinc_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>begin_code.h</label>
        <link refid="begin__code_8h"/>
      </node>
      <node id="6">
        <label>close_code.h</label>
        <link refid="close__code_8h"/>
      </node>
      <node id="8">
        <label>stdarg.h</label>
      </node>
      <node id="7">
        <label>stddef.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4">
        <label>D:/RayTracing/CApp.cpp</label>
        <link refid="_c_app_8cpp"/>
      </node>
      <node id="3">
        <label>D:/RayTracing/CApp.h</label>
        <link refid="_c_app_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>D:/RayTracing/RayTrace/Image.cpp</label>
        <link refid="_image_8cpp"/>
      </node>
      <node id="6">
        <label>D:/RayTracing/RayTrace/Image.h</label>
        <link refid="_image_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>D:/RayTracing/RayTrace/Scene.cpp</label>
        <link refid="_scene_8cpp"/>
      </node>
      <node id="8">
        <label>D:/RayTracing/RayTrace/Scene.h</label>
        <link refid="_scene_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>D:/RayTracing/RayTrace/Textures/textureimage.cpp</label>
        <link refid="textureimage_8cpp"/>
      </node>
      <node id="10">
        <label>D:/RayTracing/RayTrace/Textures/textureimage.h</label>
        <link refid="textureimage_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>D:/RayTracing/include/SDL.h</label>
        <link refid="_s_d_l_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>D:/RayTracing/include/SDL_audio.h</label>
        <link refid="_s_d_l__audio_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>D:/RayTracing/include/SDL_mutex.h</label>
        <link refid="_s_d_l__mutex_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>D:/RayTracing/include/SDL_test.h</label>
        <link refid="_s_d_l__test_8h"/>
      </node>
      <node id="13">
        <label>D:/RayTracing/include/SDL_test_common.h</label>
        <link refid="_s_d_l__test__common_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>D:/RayTracing/include/SDL_test_compare.h</label>
        <link refid="_s_d_l__test__compare_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>D:/RayTracing/include/SDL_test_images.h</label>
        <link refid="_s_d_l__test__images_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>D:/RayTracing/include/SDL_thread.h</label>
        <link refid="_s_d_l__thread_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>D:/RayTracing/main.cpp</label>
        <link refid="main_8cpp"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="user-defined">
      <header>Mutex functions</header>
      <memberdef kind="define" id="_s_d_l__mutex_8h_1a3ce486805b5c21574466d3d93c908597" prot="public" static="no">
        <name>SDL_mutexP</name>
        <param><defname>m</defname></param>
        <initializer><ref refid="_s_d_l__mutex_8h_1a0908c6a7356331d197059fbdc6c66a0f" kindref="member">SDL_LockMutex</ref>(<ref refid="_s_d_l__opengl__glext_8h_1af593500c283bf1a787a6f947f503a5c2" kindref="member">m</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_mutex.h" line="100" column="9" bodyfile="D:/RayTracing/include/SDL_mutex.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_d_l__mutex_8h_1aa25335079da2e776536c63e84288d684" prot="public" static="no">
        <name>SDL_mutexV</name>
        <param><defname>m</defname></param>
        <initializer><ref refid="_s_d_l__mutex_8h_1afee1549c7723ebe13fbfca8ad94f8c9d" kindref="member">SDL_UnlockMutex</ref>(<ref refid="_s_d_l__opengl__glext_8h_1af593500c283bf1a787a6f947f503a5c2" kindref="member">m</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_mutex.h" line="142" column="9" bodyfile="D:/RayTracing/include/SDL_mutex.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_s_d_l__mutex_8h_1ac085162a7cfb9ebd63e2d05d33c03c17" prot="public" static="no">
        <type>struct <ref refid="_s_d_l__mutex_8h_1ac085162a7cfb9ebd63e2d05d33c03c17" kindref="member">SDL_mutex</ref></type>
        <definition>typedef struct SDL_mutex SDL_mutex</definition>
        <argsstring></argsstring>
        <name>SDL_mutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_mutex.h" line="59" column="24" bodyfile="D:/RayTracing/include/SDL_mutex.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__mutex_8h_1a9a47396fe7d67160eb74ef071e1ef668" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__mutex_8h_1ac085162a7cfb9ebd63e2d05d33c03c17" kindref="member">SDL_mutex</ref> *<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC SDL_mutex *SDLCALL SDL_CreateMutex</definition>
        <argsstring>(void)</argsstring>
        <name>SDL_CreateMutex</name>
        <param>
          <type><ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new mutex.</para>
<para>All newly-created mutexes begin in the <emphasis>unlocked</emphasis> state.</para>
<para>Calls to <ref refid="_s_d_l__mutex_8h_1a0908c6a7356331d197059fbdc6c66a0f" kindref="member">SDL_LockMutex()</ref> will not return while the mutex is locked by another thread. See <ref refid="_s_d_l__mutex_8h_1a5097fb4c7147d14a4c6df4515ec862e8" kindref="member">SDL_TryLockMutex()</ref> to attempt to lock without blocking.</para>
<para>SDL mutexes are reentrant.</para>
<para><simplesect kind="return"><para>the initialized and unlocked mutex or NULL on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1ad2bbcc4e32ac927af62f0cba671f63fe" kindref="member">SDL_DestroyMutex</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1a0908c6a7356331d197059fbdc6c66a0f" kindref="member">SDL_LockMutex</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1a5097fb4c7147d14a4c6df4515ec862e8" kindref="member">SDL_TryLockMutex</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1afee1549c7723ebe13fbfca8ad94f8c9d" kindref="member">SDL_UnlockMutex</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_mutex.h" line="81" column="35" declfile="D:/RayTracing/include/SDL_mutex.h" declline="81" declcolumn="35"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__mutex_8h_1a0908c6a7356331d197059fbdc6c66a0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_LockMutex</definition>
        <argsstring>(SDL_mutex *mutex)</argsstring>
        <name>SDL_LockMutex</name>
        <param>
          <type><ref refid="_s_d_l__mutex_8h_1ac085162a7cfb9ebd63e2d05d33c03c17" kindref="member">SDL_mutex</ref> *</type>
          <declname>mutex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Lock the mutex.</para>
<para>This will block until the mutex is available, which is to say it is in the unlocked state and the OS has chosen the caller as the next thread to lock it. Of all threads waiting to lock the mutex, only one may do so at a time.</para>
<para>It is legal for the owning thread to lock an already-locked mutex. It must unlock it the same number of times before it is actually made available for other threads in the system (this is known as a &quot;recursive mutex&quot;).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mutex</parametername>
</parameternamelist>
<parameterdescription>
<para>the mutex to lock </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0, or -1 on error.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_mutex.h" line="99" column="29" declfile="D:/RayTracing/include/SDL_mutex.h" declline="99" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__mutex_8h_1a5097fb4c7147d14a4c6df4515ec862e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_TryLockMutex</definition>
        <argsstring>(SDL_mutex *mutex)</argsstring>
        <name>SDL_TryLockMutex</name>
        <param>
          <type><ref refid="_s_d_l__mutex_8h_1ac085162a7cfb9ebd63e2d05d33c03c17" kindref="member">SDL_mutex</ref> *</type>
          <declname>mutex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Try to lock a mutex without blocking.</para>
<para>This works just like <ref refid="_s_d_l__mutex_8h_1a0908c6a7356331d197059fbdc6c66a0f" kindref="member">SDL_LockMutex()</ref>, but if the mutex is not available, this function returns <computeroutput>SDL_MUTEX_TIMEOUT</computeroutput> immediately.</para>
<para>This technique is useful if you need exclusive access to a resource but don&apos;t want to wait for it, and will return to it to try again later.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mutex</parametername>
</parameternamelist>
<parameterdescription>
<para>the mutex to try to lock </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0, <computeroutput>SDL_MUTEX_TIMEDOUT</computeroutput>, or -1 on error; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1a9a47396fe7d67160eb74ef071e1ef668" kindref="member">SDL_CreateMutex</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1ad2bbcc4e32ac927af62f0cba671f63fe" kindref="member">SDL_DestroyMutex</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1a0908c6a7356331d197059fbdc6c66a0f" kindref="member">SDL_LockMutex</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1afee1549c7723ebe13fbfca8ad94f8c9d" kindref="member">SDL_UnlockMutex</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_mutex.h" line="122" column="29" declfile="D:/RayTracing/include/SDL_mutex.h" declline="122" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__mutex_8h_1afee1549c7723ebe13fbfca8ad94f8c9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_UnlockMutex</definition>
        <argsstring>(SDL_mutex *mutex)</argsstring>
        <name>SDL_UnlockMutex</name>
        <param>
          <type><ref refid="_s_d_l__mutex_8h_1ac085162a7cfb9ebd63e2d05d33c03c17" kindref="member">SDL_mutex</ref> *</type>
          <declname>mutex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unlock the mutex.</para>
<para>It is legal for the owning thread to lock an already-locked mutex. It must unlock it the same number of times before it is actually made available for other threads in the system (this is known as a &quot;recursive mutex&quot;).</para>
<para>It is an error to unlock a mutex that has not been locked by the current thread, and doing so results in undefined behavior.</para>
<para>It is also an error to unlock a mutex that isn&apos;t locked at all.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mutex</parametername>
</parameternamelist>
<parameterdescription>
<para>the mutex to unlock. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0, or -1 on error.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_mutex.h" line="141" column="29" declfile="D:/RayTracing/include/SDL_mutex.h" declline="141" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__mutex_8h_1ad2bbcc4e32ac927af62f0cba671f63fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC void SDLCALL SDL_DestroyMutex</definition>
        <argsstring>(SDL_mutex *mutex)</argsstring>
        <name>SDL_DestroyMutex</name>
        <param>
          <type><ref refid="_s_d_l__mutex_8h_1ac085162a7cfb9ebd63e2d05d33c03c17" kindref="member">SDL_mutex</ref> *</type>
          <declname>mutex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy a mutex created with <ref refid="_s_d_l__mutex_8h_1a9a47396fe7d67160eb74ef071e1ef668" kindref="member">SDL_CreateMutex()</ref>.</para>
<para>This function must be called on any mutex that is no longer needed. Failure to destroy a mutex will result in a system memory or resource leak. While it is safe to destroy a mutex that is <emphasis>unlocked</emphasis>, it is not safe to attempt to destroy a locked mutex, and may result in undefined behavior depending on the platform.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mutex</parametername>
</parameternamelist>
<parameterdescription>
<para>the mutex to destroy</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1a9a47396fe7d67160eb74ef071e1ef668" kindref="member">SDL_CreateMutex</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1a0908c6a7356331d197059fbdc6c66a0f" kindref="member">SDL_LockMutex</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1a5097fb4c7147d14a4c6df4515ec862e8" kindref="member">SDL_TryLockMutex</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1afee1549c7723ebe13fbfca8ad94f8c9d" kindref="member">SDL_UnlockMutex</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_mutex.h" line="162" column="30" declfile="D:/RayTracing/include/SDL_mutex.h" declline="162" declcolumn="30"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Semaphore functions</header>
      <memberdef kind="typedef" id="_s_d_l__mutex_8h_1aa7d56df841e98eed229d1d4b17327d29" prot="public" static="no">
        <type>struct SDL_semaphore</type>
        <definition>typedef struct SDL_semaphore SDL_sem</definition>
        <argsstring></argsstring>
        <name>SDL_sem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_mutex.h" line="174" column="28" bodyfile="D:/RayTracing/include/SDL_mutex.h" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__mutex_8h_1adf777c6c386966b58a00185726572d17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__mutex_8h_1aa7d56df841e98eed229d1d4b17327d29" kindref="member">SDL_sem</ref> *<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC SDL_sem *SDLCALL SDL_CreateSemaphore</definition>
        <argsstring>(Uint32 initial_value)</argsstring>
        <name>SDL_CreateSemaphore</name>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref></type>
          <declname>initial_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a semaphore.</para>
<para>This function creates a new semaphore and initializes it with the value <computeroutput>initial_value</computeroutput>. Each wait operation on the semaphore will atomically decrement the semaphore value and potentially block if the semaphore value is 0. Each post operation will atomically increment the semaphore value and wake waiting threads and allow them to retry the wait operation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>initial_value</parametername>
</parameternamelist>
<parameterdescription>
<para>the starting value of the semaphore </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a new semaphore or NULL on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1a23deb3b7e29a5137d804e4be3453a768" kindref="member">SDL_DestroySemaphore</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1a0c50f774babf7a44c381238a1f780595" kindref="member">SDL_SemPost</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1a517288aaa856ce2264e8420636e85c4a" kindref="member">SDL_SemTryWait</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1ae66390dca585fdab8de871fe32935768" kindref="member">SDL_SemValue</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1af51d75d18cb90f28b35c31e853b04792" kindref="member">SDL_SemWait</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1a4ea1acfaf722895626174e1e37c497da" kindref="member">SDL_SemWaitTimeout</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_mutex.h" line="198" column="33" declfile="D:/RayTracing/include/SDL_mutex.h" declline="198" declcolumn="33"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__mutex_8h_1a23deb3b7e29a5137d804e4be3453a768" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC void SDLCALL SDL_DestroySemaphore</definition>
        <argsstring>(SDL_sem *sem)</argsstring>
        <name>SDL_DestroySemaphore</name>
        <param>
          <type><ref refid="_s_d_l__mutex_8h_1aa7d56df841e98eed229d1d4b17327d29" kindref="member">SDL_sem</ref> *</type>
          <declname>sem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy a semaphore.</para>
<para>It is not safe to destroy a semaphore if there are threads currently waiting on it.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sem</parametername>
</parameternamelist>
<parameterdescription>
<para>the semaphore to destroy</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1adf777c6c386966b58a00185726572d17" kindref="member">SDL_CreateSemaphore</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1a0c50f774babf7a44c381238a1f780595" kindref="member">SDL_SemPost</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1a517288aaa856ce2264e8420636e85c4a" kindref="member">SDL_SemTryWait</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1ae66390dca585fdab8de871fe32935768" kindref="member">SDL_SemValue</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1af51d75d18cb90f28b35c31e853b04792" kindref="member">SDL_SemWait</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1a4ea1acfaf722895626174e1e37c497da" kindref="member">SDL_SemWaitTimeout</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_mutex.h" line="217" column="30" declfile="D:/RayTracing/include/SDL_mutex.h" declline="217" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__mutex_8h_1af51d75d18cb90f28b35c31e853b04792" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_SemWait</definition>
        <argsstring>(SDL_sem *sem)</argsstring>
        <name>SDL_SemWait</name>
        <param>
          <type><ref refid="_s_d_l__mutex_8h_1aa7d56df841e98eed229d1d4b17327d29" kindref="member">SDL_sem</ref> *</type>
          <declname>sem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Wait until a semaphore has a positive value and then decrements it.</para>
<para>This function suspends the calling thread until either the semaphore pointed to by <computeroutput>sem</computeroutput> has a positive value or the call is interrupted by a signal or error. If the call is successful it will atomically decrement the semaphore value.</para>
<para>This function is the equivalent of calling <ref refid="_s_d_l__mutex_8h_1a4ea1acfaf722895626174e1e37c497da" kindref="member">SDL_SemWaitTimeout()</ref> with a time length of <computeroutput>SDL_MUTEX_MAXWAIT</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sem</parametername>
</parameternamelist>
<parameterdescription>
<para>the semaphore wait on </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1adf777c6c386966b58a00185726572d17" kindref="member">SDL_CreateSemaphore</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1a23deb3b7e29a5137d804e4be3453a768" kindref="member">SDL_DestroySemaphore</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1a0c50f774babf7a44c381238a1f780595" kindref="member">SDL_SemPost</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1a517288aaa856ce2264e8420636e85c4a" kindref="member">SDL_SemTryWait</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1ae66390dca585fdab8de871fe32935768" kindref="member">SDL_SemValue</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1af51d75d18cb90f28b35c31e853b04792" kindref="member">SDL_SemWait</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1a4ea1acfaf722895626174e1e37c497da" kindref="member">SDL_SemWaitTimeout</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_mutex.h" line="244" column="29" declfile="D:/RayTracing/include/SDL_mutex.h" declline="244" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__mutex_8h_1a517288aaa856ce2264e8420636e85c4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_SemTryWait</definition>
        <argsstring>(SDL_sem *sem)</argsstring>
        <name>SDL_SemTryWait</name>
        <param>
          <type><ref refid="_s_d_l__mutex_8h_1aa7d56df841e98eed229d1d4b17327d29" kindref="member">SDL_sem</ref> *</type>
          <declname>sem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>See if a semaphore has a positive value and decrement it if it does.</para>
<para>This function checks to see if the semaphore pointed to by <computeroutput>sem</computeroutput> has a positive value and atomically decrements the semaphore value if it does. If the semaphore doesn&apos;t have a positive value, the function immediately returns SDL_MUTEX_TIMEDOUT.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sem</parametername>
</parameternamelist>
<parameterdescription>
<para>the semaphore to wait on </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the wait succeeds, <computeroutput>SDL_MUTEX_TIMEDOUT</computeroutput> if the wait would block, or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1adf777c6c386966b58a00185726572d17" kindref="member">SDL_CreateSemaphore</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1a23deb3b7e29a5137d804e4be3453a768" kindref="member">SDL_DestroySemaphore</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1a0c50f774babf7a44c381238a1f780595" kindref="member">SDL_SemPost</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1ae66390dca585fdab8de871fe32935768" kindref="member">SDL_SemValue</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1af51d75d18cb90f28b35c31e853b04792" kindref="member">SDL_SemWait</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1a4ea1acfaf722895626174e1e37c497da" kindref="member">SDL_SemWaitTimeout</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_mutex.h" line="268" column="29" declfile="D:/RayTracing/include/SDL_mutex.h" declline="268" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__mutex_8h_1a4ea1acfaf722895626174e1e37c497da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_SemWaitTimeout</definition>
        <argsstring>(SDL_sem *sem, Uint32 ms)</argsstring>
        <name>SDL_SemWaitTimeout</name>
        <param>
          <type><ref refid="_s_d_l__mutex_8h_1aa7d56df841e98eed229d1d4b17327d29" kindref="member">SDL_sem</ref> *</type>
          <declname>sem</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref></type>
          <declname>ms</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Wait until a semaphore has a positive value and then decrements it.</para>
<para>This function suspends the calling thread until either the semaphore pointed to by <computeroutput>sem</computeroutput> has a positive value, the call is interrupted by a signal or error, or the specified time has elapsed. If the call is successful it will atomically decrement the semaphore value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sem</parametername>
</parameternamelist>
<parameterdescription>
<para>the semaphore to wait on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ms</parametername>
</parameternamelist>
<parameterdescription>
<para>the length of the timeout, in milliseconds </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the wait succeeds, <computeroutput>SDL_MUTEX_TIMEDOUT</computeroutput> if the wait does not succeed in the allotted time, or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1adf777c6c386966b58a00185726572d17" kindref="member">SDL_CreateSemaphore</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1a23deb3b7e29a5137d804e4be3453a768" kindref="member">SDL_DestroySemaphore</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1a0c50f774babf7a44c381238a1f780595" kindref="member">SDL_SemPost</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1a517288aaa856ce2264e8420636e85c4a" kindref="member">SDL_SemTryWait</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1ae66390dca585fdab8de871fe32935768" kindref="member">SDL_SemValue</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1af51d75d18cb90f28b35c31e853b04792" kindref="member">SDL_SemWait</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_mutex.h" line="293" column="29" declfile="D:/RayTracing/include/SDL_mutex.h" declline="293" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__mutex_8h_1a0c50f774babf7a44c381238a1f780595" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_SemPost</definition>
        <argsstring>(SDL_sem *sem)</argsstring>
        <name>SDL_SemPost</name>
        <param>
          <type><ref refid="_s_d_l__mutex_8h_1aa7d56df841e98eed229d1d4b17327d29" kindref="member">SDL_sem</ref> *</type>
          <declname>sem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Atomically increment a semaphore&apos;s value and wake waiting threads.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sem</parametername>
</parameternamelist>
<parameterdescription>
<para>the semaphore to increment </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1adf777c6c386966b58a00185726572d17" kindref="member">SDL_CreateSemaphore</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1a23deb3b7e29a5137d804e4be3453a768" kindref="member">SDL_DestroySemaphore</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1a517288aaa856ce2264e8420636e85c4a" kindref="member">SDL_SemTryWait</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1ae66390dca585fdab8de871fe32935768" kindref="member">SDL_SemValue</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1af51d75d18cb90f28b35c31e853b04792" kindref="member">SDL_SemWait</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1a4ea1acfaf722895626174e1e37c497da" kindref="member">SDL_SemWaitTimeout</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_mutex.h" line="311" column="29" declfile="D:/RayTracing/include/SDL_mutex.h" declline="311" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__mutex_8h_1ae66390dca585fdab8de871fe32935768" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC Uint32 SDLCALL SDL_SemValue</definition>
        <argsstring>(SDL_sem *sem)</argsstring>
        <name>SDL_SemValue</name>
        <param>
          <type><ref refid="_s_d_l__mutex_8h_1aa7d56df841e98eed229d1d4b17327d29" kindref="member">SDL_sem</ref> *</type>
          <declname>sem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the current value of a semaphore.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sem</parametername>
</parameternamelist>
<parameterdescription>
<para>the semaphore to query </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the current value of the semaphore.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1adf777c6c386966b58a00185726572d17" kindref="member">SDL_CreateSemaphore</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_mutex.h" line="323" column="32" declfile="D:/RayTracing/include/SDL_mutex.h" declline="323" declcolumn="32"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Condition variable functions</header>
      <memberdef kind="typedef" id="_s_d_l__mutex_8h_1ac50401d1b84d806a0c927c8cf454f96a" prot="public" static="no">
        <type>struct <ref refid="_s_d_l__mutex_8h_1ac50401d1b84d806a0c927c8cf454f96a" kindref="member">SDL_cond</ref></type>
        <definition>typedef struct SDL_cond SDL_cond</definition>
        <argsstring></argsstring>
        <name>SDL_cond</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_mutex.h" line="335" column="23" bodyfile="D:/RayTracing/include/SDL_mutex.h" bodystart="335" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__mutex_8h_1a05cd070a02f5ce6eb0abbec4379468a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__mutex_8h_1ac50401d1b84d806a0c927c8cf454f96a" kindref="member">SDL_cond</ref> *<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC SDL_cond *SDLCALL SDL_CreateCond</definition>
        <argsstring>(void)</argsstring>
        <name>SDL_CreateCond</name>
        <param>
          <type><ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a condition variable.</para>
<para><simplesect kind="return"><para>a new condition variable or NULL on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1a2ffd0b45ebdc44057007a59857ba46b3" kindref="member">SDL_CondBroadcast</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1a1037a8274b0b13118fc78eeb417a1397" kindref="member">SDL_CondSignal</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1af759b2fe1c5507f47854c1edf1ecbabd" kindref="member">SDL_CondWait</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1aa57013f95a9c608cf24a5100b841e863" kindref="member">SDL_CondWaitTimeout</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1a8843feeb270845e07fc23f692707540f" kindref="member">SDL_DestroyCond</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_mutex.h" line="351" column="34" declfile="D:/RayTracing/include/SDL_mutex.h" declline="351" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__mutex_8h_1a8843feeb270845e07fc23f692707540f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC void SDLCALL SDL_DestroyCond</definition>
        <argsstring>(SDL_cond *cond)</argsstring>
        <name>SDL_DestroyCond</name>
        <param>
          <type><ref refid="_s_d_l__mutex_8h_1ac50401d1b84d806a0c927c8cf454f96a" kindref="member">SDL_cond</ref> *</type>
          <declname>cond</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy a condition variable.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cond</parametername>
</parameternamelist>
<parameterdescription>
<para>the condition variable to destroy</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1a2ffd0b45ebdc44057007a59857ba46b3" kindref="member">SDL_CondBroadcast</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1a1037a8274b0b13118fc78eeb417a1397" kindref="member">SDL_CondSignal</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1af759b2fe1c5507f47854c1edf1ecbabd" kindref="member">SDL_CondWait</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1aa57013f95a9c608cf24a5100b841e863" kindref="member">SDL_CondWaitTimeout</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1a05cd070a02f5ce6eb0abbec4379468a8" kindref="member">SDL_CreateCond</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_mutex.h" line="366" column="30" declfile="D:/RayTracing/include/SDL_mutex.h" declline="366" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__mutex_8h_1a1037a8274b0b13118fc78eeb417a1397" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_CondSignal</definition>
        <argsstring>(SDL_cond *cond)</argsstring>
        <name>SDL_CondSignal</name>
        <param>
          <type><ref refid="_s_d_l__mutex_8h_1ac50401d1b84d806a0c927c8cf454f96a" kindref="member">SDL_cond</ref> *</type>
          <declname>cond</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Restart one of the threads that are waiting on the condition variable.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cond</parametername>
</parameternamelist>
<parameterdescription>
<para>the condition variable to signal </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1a2ffd0b45ebdc44057007a59857ba46b3" kindref="member">SDL_CondBroadcast</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1af759b2fe1c5507f47854c1edf1ecbabd" kindref="member">SDL_CondWait</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1aa57013f95a9c608cf24a5100b841e863" kindref="member">SDL_CondWaitTimeout</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1a05cd070a02f5ce6eb0abbec4379468a8" kindref="member">SDL_CreateCond</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1a8843feeb270845e07fc23f692707540f" kindref="member">SDL_DestroyCond</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_mutex.h" line="383" column="29" declfile="D:/RayTracing/include/SDL_mutex.h" declline="383" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__mutex_8h_1a2ffd0b45ebdc44057007a59857ba46b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_CondBroadcast</definition>
        <argsstring>(SDL_cond *cond)</argsstring>
        <name>SDL_CondBroadcast</name>
        <param>
          <type><ref refid="_s_d_l__mutex_8h_1ac50401d1b84d806a0c927c8cf454f96a" kindref="member">SDL_cond</ref> *</type>
          <declname>cond</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Restart all threads that are waiting on the condition variable.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cond</parametername>
</parameternamelist>
<parameterdescription>
<para>the condition variable to signal </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1a1037a8274b0b13118fc78eeb417a1397" kindref="member">SDL_CondSignal</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1af759b2fe1c5507f47854c1edf1ecbabd" kindref="member">SDL_CondWait</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1aa57013f95a9c608cf24a5100b841e863" kindref="member">SDL_CondWaitTimeout</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1a05cd070a02f5ce6eb0abbec4379468a8" kindref="member">SDL_CreateCond</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1a8843feeb270845e07fc23f692707540f" kindref="member">SDL_DestroyCond</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_mutex.h" line="400" column="29" declfile="D:/RayTracing/include/SDL_mutex.h" declline="400" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__mutex_8h_1af759b2fe1c5507f47854c1edf1ecbabd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_CondWait</definition>
        <argsstring>(SDL_cond *cond, SDL_mutex *mutex)</argsstring>
        <name>SDL_CondWait</name>
        <param>
          <type><ref refid="_s_d_l__mutex_8h_1ac50401d1b84d806a0c927c8cf454f96a" kindref="member">SDL_cond</ref> *</type>
          <declname>cond</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__mutex_8h_1ac085162a7cfb9ebd63e2d05d33c03c17" kindref="member">SDL_mutex</ref> *</type>
          <declname>mutex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Wait until a condition variable is signaled.</para>
<para>This function unlocks the specified <computeroutput>mutex</computeroutput> and waits for another thread to call <ref refid="_s_d_l__mutex_8h_1a1037a8274b0b13118fc78eeb417a1397" kindref="member">SDL_CondSignal()</ref> or <ref refid="_s_d_l__mutex_8h_1a2ffd0b45ebdc44057007a59857ba46b3" kindref="member">SDL_CondBroadcast()</ref> on the condition variable <computeroutput>cond</computeroutput>. Once the condition variable is signaled, the mutex is re-locked and the function returns.</para>
<para>The mutex must be locked before calling this function.</para>
<para>This function is the equivalent of calling <ref refid="_s_d_l__mutex_8h_1aa57013f95a9c608cf24a5100b841e863" kindref="member">SDL_CondWaitTimeout()</ref> with a time length of <computeroutput>SDL_MUTEX_MAXWAIT</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cond</parametername>
</parameternamelist>
<parameterdescription>
<para>the condition variable to wait on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mutex</parametername>
</parameternamelist>
<parameterdescription>
<para>the mutex used to coordinate thread access </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 when it is signaled or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1a2ffd0b45ebdc44057007a59857ba46b3" kindref="member">SDL_CondBroadcast</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1a1037a8274b0b13118fc78eeb417a1397" kindref="member">SDL_CondSignal</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1aa57013f95a9c608cf24a5100b841e863" kindref="member">SDL_CondWaitTimeout</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1a05cd070a02f5ce6eb0abbec4379468a8" kindref="member">SDL_CreateCond</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1a8843feeb270845e07fc23f692707540f" kindref="member">SDL_DestroyCond</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_mutex.h" line="428" column="29" declfile="D:/RayTracing/include/SDL_mutex.h" declline="428" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__mutex_8h_1aa57013f95a9c608cf24a5100b841e863" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_CondWaitTimeout</definition>
        <argsstring>(SDL_cond *cond, SDL_mutex *mutex, Uint32 ms)</argsstring>
        <name>SDL_CondWaitTimeout</name>
        <param>
          <type><ref refid="_s_d_l__mutex_8h_1ac50401d1b84d806a0c927c8cf454f96a" kindref="member">SDL_cond</ref> *</type>
          <declname>cond</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__mutex_8h_1ac085162a7cfb9ebd63e2d05d33c03c17" kindref="member">SDL_mutex</ref> *</type>
          <declname>mutex</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref></type>
          <declname>ms</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Wait until a condition variable is signaled or a certain time has passed.</para>
<para>This function unlocks the specified <computeroutput>mutex</computeroutput> and waits for another thread to call <ref refid="_s_d_l__mutex_8h_1a1037a8274b0b13118fc78eeb417a1397" kindref="member">SDL_CondSignal()</ref> or <ref refid="_s_d_l__mutex_8h_1a2ffd0b45ebdc44057007a59857ba46b3" kindref="member">SDL_CondBroadcast()</ref> on the condition variable <computeroutput>cond</computeroutput>, or for the specified time to elapse. Once the condition variable is signaled or the time elapsed, the mutex is re-locked and the function returns.</para>
<para>The mutex must be locked before calling this function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cond</parametername>
</parameternamelist>
<parameterdescription>
<para>the condition variable to wait on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mutex</parametername>
</parameternamelist>
<parameterdescription>
<para>the mutex used to coordinate thread access </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ms</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum time to wait, in milliseconds, or <computeroutput>SDL_MUTEX_MAXWAIT</computeroutput> to wait indefinitely </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the condition variable is signaled, <computeroutput>SDL_MUTEX_TIMEDOUT</computeroutput> if the condition is not signaled in the allotted time, or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1a2ffd0b45ebdc44057007a59857ba46b3" kindref="member">SDL_CondBroadcast</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1a1037a8274b0b13118fc78eeb417a1397" kindref="member">SDL_CondSignal</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1af759b2fe1c5507f47854c1edf1ecbabd" kindref="member">SDL_CondWait</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1a05cd070a02f5ce6eb0abbec4379468a8" kindref="member">SDL_CreateCond</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__mutex_8h_1a8843feeb270845e07fc23f692707540f" kindref="member">SDL_DestroyCond</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_mutex.h" line="457" column="29" declfile="D:/RayTracing/include/SDL_mutex.h" declline="457" declcolumn="29"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="_s_d_l__mutex_8h_1a1214610634c24465d7c50149752791a9" prot="public" static="no">
        <name>SDL_MUTEX_TIMEDOUT</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Synchronization functions which can time out return this value if they time out. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_mutex.h" line="44" column="9" bodyfile="D:/RayTracing/include/SDL_mutex.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_d_l__mutex_8h_1abd2bc8605242c50341362ada961dc914" prot="public" static="no">
        <name>SDL_MUTEX_MAXWAIT</name>
        <initializer>(~(<ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref>)0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is the timeout value which corresponds to never time out. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_mutex.h" line="49" column="9" bodyfile="D:/RayTracing/include/SDL_mutex.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Functions to provide thread synchronization primitives. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/>Simple<sp/>DirectMedia<sp/>Layer</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/>Copyright<sp/>(C)<sp/>1997-2022<sp/>Sam<sp/>Lantinga<sp/>&lt;slouken@libsdl.org&gt;</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/>This<sp/>software<sp/>is<sp/>provided<sp/>&apos;as-is&apos;,<sp/>without<sp/>any<sp/>express<sp/>or<sp/>implied</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/>warranty.<sp/><sp/>In<sp/>no<sp/>event<sp/>will<sp/>the<sp/>authors<sp/>be<sp/>held<sp/>liable<sp/>for<sp/>any<sp/>damages</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/>arising<sp/>from<sp/>the<sp/>use<sp/>of<sp/>this<sp/>software.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/>Permission<sp/>is<sp/>granted<sp/>to<sp/>anyone<sp/>to<sp/>use<sp/>this<sp/>software<sp/>for<sp/>any<sp/>purpose,</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/>including<sp/>commercial<sp/>applications,<sp/>and<sp/>to<sp/>alter<sp/>it<sp/>and<sp/>redistribute<sp/>it</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/>freely,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>restrictions:</highlight></codeline>
<codeline lineno="12"><highlight class="comment"></highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/>1.<sp/>The<sp/>origin<sp/>of<sp/>this<sp/>software<sp/>must<sp/>not<sp/>be<sp/>misrepresented;<sp/>you<sp/>must<sp/>not</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>claim<sp/>that<sp/>you<sp/>wrote<sp/>the<sp/>original<sp/>software.<sp/>If<sp/>you<sp/>use<sp/>this<sp/>software</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>in<sp/>a<sp/>product,<sp/>an<sp/>acknowledgment<sp/>in<sp/>the<sp/>product<sp/>documentation<sp/>would<sp/>be</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>appreciated<sp/>but<sp/>is<sp/>not<sp/>required.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/>2.<sp/>Altered<sp/>source<sp/>versions<sp/>must<sp/>be<sp/>plainly<sp/>marked<sp/>as<sp/>such,<sp/>and<sp/>must<sp/>not<sp/>be</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>misrepresented<sp/>as<sp/>being<sp/>the<sp/>original<sp/>software.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/>3.<sp/>This<sp/>notice<sp/>may<sp/>not<sp/>be<sp/>removed<sp/>or<sp/>altered<sp/>from<sp/>any<sp/>source<sp/>distribution.</highlight></codeline>
<codeline lineno="20"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SDL_mutex_h_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SDL_mutex_h_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_s_d_l__stdinc_8h" kindref="compound">SDL_stdinc.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_s_d_l__error_8h" kindref="compound">SDL_error.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="begin__code_8h" kindref="compound">begin_code.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Set<sp/>up<sp/>for<sp/>C<sp/>function<sp/>definitions,<sp/>even<sp/>when<sp/>using<sp/>C++<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="_s_d_l__mutex_8h_1a1214610634c24465d7c50149752791a9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SDL_MUTEX_TIMEDOUT<sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="_s_d_l__mutex_8h_1abd2bc8605242c50341362ada961dc914" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SDL_MUTEX_MAXWAIT<sp/><sp/><sp/>(~(Uint32)0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>@{<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>SDL<sp/>mutex<sp/>structure,<sp/>defined<sp/>in<sp/>SDL_sysmutex.c<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="_s_d_l__mutex_8h_1ac085162a7cfb9ebd63e2d05d33c03c17" kindref="member">SDL_mutex</ref>;</highlight></codeline>
<codeline lineno="59" refid="_s_d_l__mutex_8h_1ac085162a7cfb9ebd63e2d05d33c03c17" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="_s_d_l__mutex_8h_1ac085162a7cfb9ebd63e2d05d33c03c17" kindref="member">SDL_mutex</ref><sp/><ref refid="_s_d_l__mutex_8h_1ac085162a7cfb9ebd63e2d05d33c03c17" kindref="member">SDL_mutex</ref>;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="_s_d_l__mutex_8h_1a9a47396fe7d67160eb74ef071e1ef668" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="_s_d_l__mutex_8h_1ac085162a7cfb9ebd63e2d05d33c03c17" kindref="member">SDL_mutex</ref><sp/>*<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__mutex_8h_1a9a47396fe7d67160eb74ef071e1ef668" kindref="member">SDL_CreateMutex</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="_s_d_l__mutex_8h_1a0908c6a7356331d197059fbdc6c66a0f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__mutex_8h_1a0908c6a7356331d197059fbdc6c66a0f" kindref="member">SDL_LockMutex</ref>(<ref refid="_s_d_l__mutex_8h_1ac085162a7cfb9ebd63e2d05d33c03c17" kindref="member">SDL_mutex</ref><sp/>*<sp/>mutex);</highlight></codeline>
<codeline lineno="100" refid="_s_d_l__mutex_8h_1a3ce486805b5c21574466d3d93c908597" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SDL_mutexP(m)<sp/><sp/><sp/>SDL_LockMutex(m)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="122" refid="_s_d_l__mutex_8h_1a5097fb4c7147d14a4c6df4515ec862e8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__mutex_8h_1a5097fb4c7147d14a4c6df4515ec862e8" kindref="member">SDL_TryLockMutex</ref>(<ref refid="_s_d_l__mutex_8h_1ac085162a7cfb9ebd63e2d05d33c03c17" kindref="member">SDL_mutex</ref><sp/>*<sp/>mutex);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="141" refid="_s_d_l__mutex_8h_1afee1549c7723ebe13fbfca8ad94f8c9d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__mutex_8h_1afee1549c7723ebe13fbfca8ad94f8c9d" kindref="member">SDL_UnlockMutex</ref>(<ref refid="_s_d_l__mutex_8h_1ac085162a7cfb9ebd63e2d05d33c03c17" kindref="member">SDL_mutex</ref><sp/>*<sp/>mutex);</highlight></codeline>
<codeline lineno="142" refid="_s_d_l__mutex_8h_1aa25335079da2e776536c63e84288d684" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SDL_mutexV(m)<sp/><sp/><sp/>SDL_UnlockMutex(m)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="162" refid="_s_d_l__mutex_8h_1ad2bbcc4e32ac927af62f0cba671f63fe" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__mutex_8h_1ad2bbcc4e32ac927af62f0cba671f63fe" kindref="member">SDL_DestroyMutex</ref>(<ref refid="_s_d_l__mutex_8h_1ac085162a7cfb9ebd63e2d05d33c03c17" kindref="member">SDL_mutex</ref><sp/>*<sp/>mutex);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>@}<sp/>*/</highlight><highlight class="comment">/*<sp/>Mutex<sp/>functions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>@{<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>SDL<sp/>semaphore<sp/>structure,<sp/>defined<sp/>in<sp/>SDL_syssem.c<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">SDL_semaphore;</highlight></codeline>
<codeline lineno="174" refid="_s_d_l__mutex_8h_1aa7d56df841e98eed229d1d4b17327d29" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">SDL_semaphore<sp/><ref refid="_s_d_l__mutex_8h_1aa7d56df841e98eed229d1d4b17327d29" kindref="member">SDL_sem</ref>;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="198" refid="_s_d_l__mutex_8h_1adf777c6c386966b58a00185726572d17" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="_s_d_l__mutex_8h_1aa7d56df841e98eed229d1d4b17327d29" kindref="member">SDL_sem</ref><sp/>*<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__mutex_8h_1adf777c6c386966b58a00185726572d17" kindref="member">SDL_CreateSemaphore</ref>(<ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref><sp/>initial_value);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="217" refid="_s_d_l__mutex_8h_1a23deb3b7e29a5137d804e4be3453a768" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__mutex_8h_1a23deb3b7e29a5137d804e4be3453a768" kindref="member">SDL_DestroySemaphore</ref>(<ref refid="_s_d_l__mutex_8h_1aa7d56df841e98eed229d1d4b17327d29" kindref="member">SDL_sem</ref><sp/>*<sp/>sem);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="244" refid="_s_d_l__mutex_8h_1af51d75d18cb90f28b35c31e853b04792" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__mutex_8h_1af51d75d18cb90f28b35c31e853b04792" kindref="member">SDL_SemWait</ref>(<ref refid="_s_d_l__mutex_8h_1aa7d56df841e98eed229d1d4b17327d29" kindref="member">SDL_sem</ref><sp/>*<sp/>sem);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="268" refid="_s_d_l__mutex_8h_1a517288aaa856ce2264e8420636e85c4a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__mutex_8h_1a517288aaa856ce2264e8420636e85c4a" kindref="member">SDL_SemTryWait</ref>(<ref refid="_s_d_l__mutex_8h_1aa7d56df841e98eed229d1d4b17327d29" kindref="member">SDL_sem</ref><sp/>*<sp/>sem);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="293" refid="_s_d_l__mutex_8h_1a4ea1acfaf722895626174e1e37c497da" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__mutex_8h_1a4ea1acfaf722895626174e1e37c497da" kindref="member">SDL_SemWaitTimeout</ref>(<ref refid="_s_d_l__mutex_8h_1aa7d56df841e98eed229d1d4b17327d29" kindref="member">SDL_sem</ref><sp/>*<sp/>sem,<sp/><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref><sp/>ms);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="311" refid="_s_d_l__mutex_8h_1a0c50f774babf7a44c381238a1f780595" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__mutex_8h_1a0c50f774babf7a44c381238a1f780595" kindref="member">SDL_SemPost</ref>(<ref refid="_s_d_l__mutex_8h_1aa7d56df841e98eed229d1d4b17327d29" kindref="member">SDL_sem</ref><sp/>*<sp/>sem);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="323" refid="_s_d_l__mutex_8h_1ae66390dca585fdab8de871fe32935768" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__mutex_8h_1ae66390dca585fdab8de871fe32935768" kindref="member">SDL_SemValue</ref>(<ref refid="_s_d_l__mutex_8h_1aa7d56df841e98eed229d1d4b17327d29" kindref="member">SDL_sem</ref><sp/>*<sp/>sem);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>@}<sp/>*/</highlight><highlight class="comment">/*<sp/>Semaphore<sp/>functions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>@{<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>SDL<sp/>condition<sp/>variable<sp/>structure,<sp/>defined<sp/>in<sp/>SDL_syscond.c<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="_s_d_l__mutex_8h_1ac50401d1b84d806a0c927c8cf454f96a" kindref="member">SDL_cond</ref>;</highlight></codeline>
<codeline lineno="335" refid="_s_d_l__mutex_8h_1ac50401d1b84d806a0c927c8cf454f96a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="_s_d_l__mutex_8h_1ac50401d1b84d806a0c927c8cf454f96a" kindref="member">SDL_cond</ref><sp/><ref refid="_s_d_l__mutex_8h_1ac50401d1b84d806a0c927c8cf454f96a" kindref="member">SDL_cond</ref>;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="351" refid="_s_d_l__mutex_8h_1a05cd070a02f5ce6eb0abbec4379468a8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="_s_d_l__mutex_8h_1ac50401d1b84d806a0c927c8cf454f96a" kindref="member">SDL_cond</ref><sp/>*<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__mutex_8h_1a05cd070a02f5ce6eb0abbec4379468a8" kindref="member">SDL_CreateCond</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="366" refid="_s_d_l__mutex_8h_1a8843feeb270845e07fc23f692707540f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__mutex_8h_1a8843feeb270845e07fc23f692707540f" kindref="member">SDL_DestroyCond</ref>(<ref refid="_s_d_l__mutex_8h_1ac50401d1b84d806a0c927c8cf454f96a" kindref="member">SDL_cond</ref><sp/>*<sp/>cond);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="383" refid="_s_d_l__mutex_8h_1a1037a8274b0b13118fc78eeb417a1397" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__mutex_8h_1a1037a8274b0b13118fc78eeb417a1397" kindref="member">SDL_CondSignal</ref>(<ref refid="_s_d_l__mutex_8h_1ac50401d1b84d806a0c927c8cf454f96a" kindref="member">SDL_cond</ref><sp/>*<sp/>cond);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="400" refid="_s_d_l__mutex_8h_1a2ffd0b45ebdc44057007a59857ba46b3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__mutex_8h_1a2ffd0b45ebdc44057007a59857ba46b3" kindref="member">SDL_CondBroadcast</ref>(<ref refid="_s_d_l__mutex_8h_1ac50401d1b84d806a0c927c8cf454f96a" kindref="member">SDL_cond</ref><sp/>*<sp/>cond);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="428" refid="_s_d_l__mutex_8h_1af759b2fe1c5507f47854c1edf1ecbabd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__mutex_8h_1af759b2fe1c5507f47854c1edf1ecbabd" kindref="member">SDL_CondWait</ref>(<ref refid="_s_d_l__mutex_8h_1ac50401d1b84d806a0c927c8cf454f96a" kindref="member">SDL_cond</ref><sp/>*<sp/>cond,<sp/><ref refid="_s_d_l__mutex_8h_1ac085162a7cfb9ebd63e2d05d33c03c17" kindref="member">SDL_mutex</ref><sp/>*<sp/>mutex);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="457" refid="_s_d_l__mutex_8h_1aa57013f95a9c608cf24a5100b841e863" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__mutex_8h_1aa57013f95a9c608cf24a5100b841e863" kindref="member">SDL_CondWaitTimeout</ref>(<ref refid="_s_d_l__mutex_8h_1ac50401d1b84d806a0c927c8cf454f96a" kindref="member">SDL_cond</ref><sp/>*<sp/>cond,</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_d_l__mutex_8h_1ac085162a7cfb9ebd63e2d05d33c03c17" kindref="member">SDL_mutex</ref><sp/>*<sp/>mutex,<sp/><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref><sp/>ms);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>@}<sp/>*/</highlight><highlight class="comment">/*<sp/>Condition<sp/>variable<sp/>functions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Ends<sp/>C<sp/>function<sp/>definitions<sp/>when<sp/>using<sp/>C++<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal">}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="close__code_8h" kindref="compound">close_code.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>SDL_mutex_h_<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>vi:<sp/>set<sp/>ts=4<sp/>sw=4<sp/>expandtab:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="D:/RayTracing/include/SDL_mutex.h"/>
  </compounddef>
</doxygen>
