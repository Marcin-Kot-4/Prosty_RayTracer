<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="_s_d_l__thread_8h" kind="file" language="C++">
    <compoundname>SDL_thread.h</compoundname>
    <includes refid="_s_d_l__stdinc_8h" local="yes">SDL_stdinc.h</includes>
    <includes refid="_s_d_l__error_8h" local="yes">SDL_error.h</includes>
    <includes refid="_s_d_l__atomic_8h" local="yes">SDL_atomic.h</includes>
    <includes refid="_s_d_l__mutex_8h" local="yes">SDL_mutex.h</includes>
    <includes refid="begin__code_8h" local="yes">begin_code.h</includes>
    <includes refid="close__code_8h" local="yes">close_code.h</includes>
    <includedby refid="_s_d_l_8h" local="yes">D:/RayTracing/include/SDL.h</includedby>
    <includedby refid="_s_d_l__audio_8h" local="yes">D:/RayTracing/include/SDL_audio.h</includedby>
    <incdepgraph>
      <node id="10">
        <label>SDL_atomic.h</label>
        <link refid="_s_d_l__atomic_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>SDL_config.h</label>
        <link refid="_s_d_l__config_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>SDL_error.h</label>
        <link refid="_s_d_l__error_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>SDL_mutex.h</label>
        <link refid="_s_d_l__mutex_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>SDL_platform.h</label>
        <link refid="_s_d_l__platform_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>SDL_stdinc.h</label>
        <link refid="_s_d_l__stdinc_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>D:/RayTracing/include/SDL_thread.h</label>
        <link refid="_s_d_l__thread_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>begin_code.h</label>
        <link refid="begin__code_8h"/>
      </node>
      <node id="6">
        <label>close_code.h</label>
        <link refid="close__code_8h"/>
      </node>
      <node id="8">
        <label>stdarg.h</label>
      </node>
      <node id="7">
        <label>stddef.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4">
        <label>D:/RayTracing/CApp.cpp</label>
        <link refid="_c_app_8cpp"/>
      </node>
      <node id="3">
        <label>D:/RayTracing/CApp.h</label>
        <link refid="_c_app_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>D:/RayTracing/RayTrace/Image.cpp</label>
        <link refid="_image_8cpp"/>
      </node>
      <node id="6">
        <label>D:/RayTracing/RayTrace/Image.h</label>
        <link refid="_image_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>D:/RayTracing/RayTrace/Scene.cpp</label>
        <link refid="_scene_8cpp"/>
      </node>
      <node id="8">
        <label>D:/RayTracing/RayTrace/Scene.h</label>
        <link refid="_scene_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>D:/RayTracing/RayTrace/Textures/textureimage.cpp</label>
        <link refid="textureimage_8cpp"/>
      </node>
      <node id="10">
        <label>D:/RayTracing/RayTrace/Textures/textureimage.h</label>
        <link refid="textureimage_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>D:/RayTracing/include/SDL.h</label>
        <link refid="_s_d_l_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>D:/RayTracing/include/SDL_audio.h</label>
        <link refid="_s_d_l__audio_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>D:/RayTracing/include/SDL_test.h</label>
        <link refid="_s_d_l__test_8h"/>
      </node>
      <node id="13">
        <label>D:/RayTracing/include/SDL_test_common.h</label>
        <link refid="_s_d_l__test__common_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>D:/RayTracing/include/SDL_test_compare.h</label>
        <link refid="_s_d_l__test__compare_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>D:/RayTracing/include/SDL_test_images.h</label>
        <link refid="_s_d_l__test__images_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>D:/RayTracing/include/SDL_thread.h</label>
        <link refid="_s_d_l__thread_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>D:/RayTracing/main.cpp</label>
        <link refid="main_8cpp"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="_s_d_l__thread_8h_1acce8dea56f6b307fadd2949b64e3ebda" prot="public" static="no" strong="no">
        <type></type>
        <name>SDL_ThreadPriority</name>
        <enumvalue id="_s_d_l__thread_8h_1acce8dea56f6b307fadd2949b64e3ebdaa48d887edbfc7842abdabcec6900d3878" prot="public">
          <name>SDL_THREAD_PRIORITY_LOW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_s_d_l__thread_8h_1acce8dea56f6b307fadd2949b64e3ebdaac3a2f7a29f4c8fe11dca0ea258b07dae" prot="public">
          <name>SDL_THREAD_PRIORITY_NORMAL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_s_d_l__thread_8h_1acce8dea56f6b307fadd2949b64e3ebdaaac5ff8423acdebf3b43c279b8ec2ae0d" prot="public">
          <name>SDL_THREAD_PRIORITY_HIGH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_s_d_l__thread_8h_1acce8dea56f6b307fadd2949b64e3ebdaa334bcf64dc27f8dbc1aa661a494ee8ca" prot="public">
          <name>SDL_THREAD_PRIORITY_TIME_CRITICAL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The SDL thread priority.</para>
<para>SDL will make system changes as necessary in order to apply the thread priority. Code which attempts to control thread state related to priority should be aware that calling SDL_SetThreadPriority may alter such state. SDL_HINT_THREAD_PRIORITY_POLICY can be used to control aspects of this behavior.</para>
<para><simplesect kind="note"><para>On many systems you require special privileges to set high or time critical priority. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_thread.h" line="75" column="1" bodyfile="D:/RayTracing/include/SDL_thread.h" bodystart="75" bodyend="80"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_s_d_l__thread_8h_1a97cd1dc60cea74b74273affb1a974db5" prot="public" static="no">
        <type>struct <ref refid="_s_d_l__thread_8h_1a97cd1dc60cea74b74273affb1a974db5" kindref="member">SDL_Thread</ref></type>
        <definition>typedef struct SDL_Thread SDL_Thread</definition>
        <argsstring></argsstring>
        <name>SDL_Thread</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_thread.h" line="57" column="25" bodyfile="D:/RayTracing/include/SDL_thread.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_s_d_l__thread_8h_1ac4db699531ce9f18f5a8547aa988b88e" prot="public" static="no">
        <type>unsigned long</type>
        <definition>typedef unsigned long SDL_threadID</definition>
        <argsstring></argsstring>
        <name>SDL_threadID</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_thread.h" line="60" column="23" bodyfile="D:/RayTracing/include/SDL_thread.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_s_d_l__thread_8h_1a07ce005c35ad6ac377d6124db7296026" prot="public" static="no">
        <type>unsigned int</type>
        <definition>typedef unsigned int SDL_TLSID</definition>
        <argsstring></argsstring>
        <name>SDL_TLSID</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_thread.h" line="63" column="22" bodyfile="D:/RayTracing/include/SDL_thread.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_s_d_l__thread_8h_1a35d10c50423c326b20abea6a486f53e0" prot="public" static="no">
        <type>int(<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref> *</type>
        <definition>typedef int(SDLCALL * SDL_ThreadFunction) (void *data)</definition>
        <argsstring>)(void *data)</argsstring>
        <name>SDL_ThreadFunction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The function passed to <ref refid="_s_d_l__thread_8h_1ac36c70a33975a8c9399962f8ac310377" kindref="member">SDL_CreateThread()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>what was passed as <computeroutput>data</computeroutput> to <ref refid="_s_d_l__thread_8h_1ac36c70a33975a8c9399962f8ac310377" kindref="member">SDL_CreateThread()</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a value that can be reported through <ref refid="_s_d_l__thread_8h_1ac96743626ed21d2cdb0868a23cca9705" kindref="member">SDL_WaitThread()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_thread.h" line="88" column="9" bodyfile="D:/RayTracing/include/SDL_thread.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_s_d_l__thread_8h_1ac36c70a33975a8c9399962f8ac310377" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__thread_8h_1a97cd1dc60cea74b74273affb1a974db5" kindref="member">SDL_Thread</ref> *<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC SDL_Thread *SDLCALL SDL_CreateThread</definition>
        <argsstring>(SDL_ThreadFunction fn, const char *name, void *data)</argsstring>
        <name>SDL_CreateThread</name>
        <param>
          <type><ref refid="_s_d_l__thread_8h_1a35d10c50423c326b20abea6a486f53e0" kindref="member">SDL_ThreadFunction</ref></type>
          <declname>fn</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref> *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new thread with a default stack size.</para>
<para>This is equivalent to calling:</para>
<para><programlisting filename=".c"><codeline><highlight class="normal"><ref refid="_s_d_l__thread_8h_1a9ab0d63052abb2afdbb14042cee4dbdf" kindref="member">SDL_CreateThreadWithStackSize</ref>(fn,<sp/><ref refid="_s_d_l__opengl__glext_8h_1aaced7cfc21e7d37775d6921bb8177239" kindref="member">name</ref>,<sp/>0,<sp/><ref refid="_s_d_l__opengl_8h_1a2e335d56e2846b0fea47eed068b2d34a" kindref="member">data</ref>);</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>the SDL_ThreadFunction function to call in the new thread </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the thread </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer that is passed to <computeroutput>fn</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an opaque pointer to the new thread object on success, NULL if the new thread could not be created; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__thread_8h_1a9ab0d63052abb2afdbb14042cee4dbdf" kindref="member">SDL_CreateThreadWithStackSize</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__thread_8h_1ac96743626ed21d2cdb0868a23cca9705" kindref="member">SDL_WaitThread</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_thread.h" line="208" column="1" declfile="D:/RayTracing/include/SDL_thread.h" declline="208" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__thread_8h_1a9ab0d63052abb2afdbb14042cee4dbdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__thread_8h_1a97cd1dc60cea74b74273affb1a974db5" kindref="member">SDL_Thread</ref> *<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC SDL_Thread *SDLCALL SDL_CreateThreadWithStackSize</definition>
        <argsstring>(SDL_ThreadFunction fn, const char *name, const size_t stacksize, void *data)</argsstring>
        <name>SDL_CreateThreadWithStackSize</name>
        <param>
          <type><ref refid="_s_d_l__thread_8h_1a35d10c50423c326b20abea6a486f53e0" kindref="member">SDL_ThreadFunction</ref></type>
          <declname>fn</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="_s_d_l__config_8h_1a7c94ea6f8948649f8d181ae55911eeaf" kindref="member">size_t</ref></type>
          <declname>stacksize</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref> *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new thread with a specific stack size.</para>
<para>SDL makes an attempt to report <computeroutput>name</computeroutput> to the system, so that debuggers can display it. Not all platforms support this.</para>
<para>Thread naming is a little complicated: Most systems have very small limits for the string length (Haiku has 32 bytes, Linux currently has 16, Visual C++ 6.0 has <emphasis>nine</emphasis>!), and possibly other arbitrary rules. You&apos;ll have to see what happens with your system&apos;s debugger. The name should be UTF-8 (but using the naming limits of C identifiers is a better bet). There are no requirements for thread naming conventions, so long as the string is null-terminated UTF-8, but these guidelines are helpful in choosing a name:</para>
<para><ulink url="https://stackoverflow.com/questions/149932/naming-conventions-for-threads">https://stackoverflow.com/questions/149932/naming-conventions-for-threads</ulink></para>
<para>If a system imposes requirements, SDL will try to munge the string for it (truncate, etc), but the original string contents will be available from <ref refid="_s_d_l__thread_8h_1a5c1e3618f2be2e3af69d615055defa5a" kindref="member">SDL_GetThreadName()</ref>.</para>
<para>The size (in bytes) of the new stack can be specified. Zero means &quot;use the
system default&quot; which might be wildly different between platforms. x86 Linux generally defaults to eight megabytes, an embedded device might be a few kilobytes instead. You generally need to specify a stack that is a multiple of the system&apos;s page size (in many cases, this is 4 kilobytes, but check your system documentation).</para>
<para>In SDL 2.1, stack size will be folded into the original SDL_CreateThread function, but for backwards compatibility, this is currently a separate function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>the SDL_ThreadFunction function to call in the new thread </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the thread </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stacksize</parametername>
</parameternamelist>
<parameterdescription>
<para>the size, in bytes, to allocate for the new thread stack. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer that is passed to <computeroutput>fn</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an opaque pointer to the new thread object on success, NULL if the new thread could not be created; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.9.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__thread_8h_1ac96743626ed21d2cdb0868a23cca9705" kindref="member">SDL_WaitThread</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_thread.h" line="254" column="1" declfile="D:/RayTracing/include/SDL_thread.h" declline="254" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__thread_8h_1a5c1e3618f2be2e3af69d615055defa5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> const char *<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC const char *SDLCALL SDL_GetThreadName</definition>
        <argsstring>(SDL_Thread *thread)</argsstring>
        <name>SDL_GetThreadName</name>
        <param>
          <type><ref refid="_s_d_l__thread_8h_1a97cd1dc60cea74b74273affb1a974db5" kindref="member">SDL_Thread</ref> *</type>
          <declname>thread</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the thread name as it was specified in <ref refid="_s_d_l__thread_8h_1ac36c70a33975a8c9399962f8ac310377" kindref="member">SDL_CreateThread()</ref>.</para>
<para>This is internal memory, not to be freed by the caller, and remains valid until the specified thread is cleaned up by <ref refid="_s_d_l__thread_8h_1ac96743626ed21d2cdb0868a23cca9705" kindref="member">SDL_WaitThread()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread</parametername>
</parameternamelist>
<parameterdescription>
<para>the thread to query </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to a UTF-8 string that names the specified thread, or NULL if it doesn&apos;t have a name.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__thread_8h_1ac36c70a33975a8c9399962f8ac310377" kindref="member">SDL_CreateThread</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_thread.h" line="272" column="36" declfile="D:/RayTracing/include/SDL_thread.h" declline="272" declcolumn="36"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__thread_8h_1a341933eef1470789de20b05c1392b9ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__thread_8h_1ac4db699531ce9f18f5a8547aa988b88e" kindref="member">SDL_threadID</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC SDL_threadID SDLCALL SDL_ThreadID</definition>
        <argsstring>(void)</argsstring>
        <name>SDL_ThreadID</name>
        <param>
          <type><ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the thread identifier for the current thread.</para>
<para>This thread identifier is as reported by the underlying operating system. If SDL is running on a platform that does not support threads the return value will always be zero.</para>
<para>This function also returns a valid thread ID when called from the main thread.</para>
<para><simplesect kind="return"><para>the ID of the current thread.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__thread_8h_1a0bf5d93ed5cb25ea59307472c62c66db" kindref="member">SDL_GetThreadID</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_thread.h" line="290" column="38" declfile="D:/RayTracing/include/SDL_thread.h" declline="290" declcolumn="38"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__thread_8h_1a0bf5d93ed5cb25ea59307472c62c66db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__thread_8h_1ac4db699531ce9f18f5a8547aa988b88e" kindref="member">SDL_threadID</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC SDL_threadID SDLCALL SDL_GetThreadID</definition>
        <argsstring>(SDL_Thread *thread)</argsstring>
        <name>SDL_GetThreadID</name>
        <param>
          <type><ref refid="_s_d_l__thread_8h_1a97cd1dc60cea74b74273affb1a974db5" kindref="member">SDL_Thread</ref> *</type>
          <declname>thread</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the thread identifier for the specified thread.</para>
<para>This thread identifier is as reported by the underlying operating system. If SDL is running on a platform that does not support threads the return value will always be zero.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread</parametername>
</parameternamelist>
<parameterdescription>
<para>the thread to query </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the ID of the specified thread, or the ID of the current thread if <computeroutput>thread</computeroutput> is NULL.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__thread_8h_1a341933eef1470789de20b05c1392b9ae" kindref="member">SDL_ThreadID</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_thread.h" line="307" column="38" declfile="D:/RayTracing/include/SDL_thread.h" declline="307" declcolumn="38"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__thread_8h_1adf4da9c0e6a6833bef9741344b09699d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_SetThreadPriority</definition>
        <argsstring>(SDL_ThreadPriority priority)</argsstring>
        <name>SDL_SetThreadPriority</name>
        <param>
          <type><ref refid="_s_d_l__thread_8h_1acce8dea56f6b307fadd2949b64e3ebda" kindref="member">SDL_ThreadPriority</ref></type>
          <declname>priority</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the priority for the current thread.</para>
<para>Note that some platforms will not let you alter the priority (or at least, promote the thread to a higher priority) at all, and some require you to be an administrator account. Be prepared for this to fail.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>priority</parametername>
</parameternamelist>
<parameterdescription>
<para>the SDL_ThreadPriority to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_thread.h" line="322" column="29" declfile="D:/RayTracing/include/SDL_thread.h" declline="322" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__thread_8h_1ac96743626ed21d2cdb0868a23cca9705" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC void SDLCALL SDL_WaitThread</definition>
        <argsstring>(SDL_Thread *thread, int *status)</argsstring>
        <name>SDL_WaitThread</name>
        <param>
          <type><ref refid="_s_d_l__thread_8h_1a97cd1dc60cea74b74273affb1a974db5" kindref="member">SDL_Thread</ref> *</type>
          <declname>thread</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>status</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Wait for a thread to finish.</para>
<para>Threads that haven&apos;t been detached will remain (as a &quot;zombie&quot;) until this function cleans them up. Not doing so is a resource leak.</para>
<para>Once a thread has been cleaned up through this function, the SDL_Thread that references it becomes invalid and should not be referenced again. As such, only one thread may call <ref refid="_s_d_l__thread_8h_1ac96743626ed21d2cdb0868a23cca9705" kindref="member">SDL_WaitThread()</ref> on another.</para>
<para>The return code for the thread function is placed in the area pointed to by <computeroutput>status</computeroutput>, if <computeroutput>status</computeroutput> is not NULL.</para>
<para>You may not wait on a thread that has been used in a call to <ref refid="_s_d_l__thread_8h_1af90602c51ef5a62f26ed9931af484906" kindref="member">SDL_DetachThread()</ref>. Use either that function or this one, but not both, or behavior is undefined.</para>
<para>It is safe to pass a NULL thread to this function; it is a no-op.</para>
<para>Note that the thread pointer is freed by this function and is not valid afterward.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread</parametername>
</parameternamelist>
<parameterdescription>
<para>the SDL_Thread pointer that was returned from the <ref refid="_s_d_l__thread_8h_1ac36c70a33975a8c9399962f8ac310377" kindref="member">SDL_CreateThread()</ref> call that started this thread </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to an integer that will receive the value returned from the thread function by its &apos;return&apos;, or NULL to not receive such value back.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__thread_8h_1ac36c70a33975a8c9399962f8ac310377" kindref="member">SDL_CreateThread</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__thread_8h_1af90602c51ef5a62f26ed9931af484906" kindref="member">SDL_DetachThread</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_thread.h" line="357" column="30" declfile="D:/RayTracing/include/SDL_thread.h" declline="357" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__thread_8h_1af90602c51ef5a62f26ed9931af484906" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC void SDLCALL SDL_DetachThread</definition>
        <argsstring>(SDL_Thread *thread)</argsstring>
        <name>SDL_DetachThread</name>
        <param>
          <type><ref refid="_s_d_l__thread_8h_1a97cd1dc60cea74b74273affb1a974db5" kindref="member">SDL_Thread</ref> *</type>
          <declname>thread</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Let a thread clean up on exit without intervention.</para>
<para>A thread may be &quot;detached&quot; to signify that it should not remain until another thread has called <ref refid="_s_d_l__thread_8h_1ac96743626ed21d2cdb0868a23cca9705" kindref="member">SDL_WaitThread()</ref> on it. Detaching a thread is useful for long-running threads that nothing needs to synchronize with or further manage. When a detached thread is done, it simply goes away.</para>
<para>There is no way to recover the return code of a detached thread. If you need this, don&apos;t detach the thread and instead use <ref refid="_s_d_l__thread_8h_1ac96743626ed21d2cdb0868a23cca9705" kindref="member">SDL_WaitThread()</ref>.</para>
<para>Once a thread is detached, you should usually assume the SDL_Thread isn&apos;t safe to reference again, as it will become invalid immediately upon the detached thread&apos;s exit, instead of remaining until someone has called <ref refid="_s_d_l__thread_8h_1ac96743626ed21d2cdb0868a23cca9705" kindref="member">SDL_WaitThread()</ref> to finally clean it up. As such, don&apos;t detach the same thread more than once.</para>
<para>If a thread has already exited when passed to <ref refid="_s_d_l__thread_8h_1af90602c51ef5a62f26ed9931af484906" kindref="member">SDL_DetachThread()</ref>, it will stop waiting for a call to <ref refid="_s_d_l__thread_8h_1ac96743626ed21d2cdb0868a23cca9705" kindref="member">SDL_WaitThread()</ref> and clean up immediately. It is not safe to detach a thread that might be used with <ref refid="_s_d_l__thread_8h_1ac96743626ed21d2cdb0868a23cca9705" kindref="member">SDL_WaitThread()</ref>.</para>
<para>You may not call <ref refid="_s_d_l__thread_8h_1ac96743626ed21d2cdb0868a23cca9705" kindref="member">SDL_WaitThread()</ref> on a thread that has been detached. Use either that function or this one, but not both, or behavior is undefined.</para>
<para>It is safe to pass NULL to this function; it is a no-op.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread</parametername>
</parameternamelist>
<parameterdescription>
<para>the SDL_Thread pointer that was returned from the <ref refid="_s_d_l__thread_8h_1ac36c70a33975a8c9399962f8ac310377" kindref="member">SDL_CreateThread()</ref> call that started this thread</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>This function is available since SDL 2.0.2.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__thread_8h_1ac36c70a33975a8c9399962f8ac310377" kindref="member">SDL_CreateThread</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__thread_8h_1ac96743626ed21d2cdb0868a23cca9705" kindref="member">SDL_WaitThread</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_thread.h" line="393" column="30" declfile="D:/RayTracing/include/SDL_thread.h" declline="393" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__thread_8h_1ac7ed1ec8dec5b902da25b60da2b728fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__thread_8h_1a07ce005c35ad6ac377d6124db7296026" kindref="member">SDL_TLSID</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC SDL_TLSID SDLCALL SDL_TLSCreate</definition>
        <argsstring>(void)</argsstring>
        <name>SDL_TLSCreate</name>
        <param>
          <type><ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a piece of thread-local storage.</para>
<para>This creates an identifier that is globally visible to all threads but refers to data that is thread-specific.</para>
<para><simplesect kind="return"><para>the newly created thread local storage identifier or 0 on error.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__thread_8h_1a1915755c7215e59e1b218b9b94dbf8fd" kindref="member">SDL_TLSGet</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__thread_8h_1a807c8306201205c7c3ac0cb34ac7cd77" kindref="member">SDL_TLSSet</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_thread.h" line="408" column="35" declfile="D:/RayTracing/include/SDL_thread.h" declline="408" declcolumn="35"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__thread_8h_1a1915755c7215e59e1b218b9b94dbf8fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref> *<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC void *SDLCALL SDL_TLSGet</definition>
        <argsstring>(SDL_TLSID id)</argsstring>
        <name>SDL_TLSGet</name>
        <param>
          <type><ref refid="_s_d_l__thread_8h_1a07ce005c35ad6ac377d6124db7296026" kindref="member">SDL_TLSID</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the current thread&apos;s value associated with a thread local storage ID.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>the thread local storage ID </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value associated with the ID for the current thread or NULL if no value has been set; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__thread_8h_1ac7ed1ec8dec5b902da25b60da2b728fa" kindref="member">SDL_TLSCreate</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__thread_8h_1a807c8306201205c7c3ac0cb34ac7cd77" kindref="member">SDL_TLSSet</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_thread.h" line="422" column="31" declfile="D:/RayTracing/include/SDL_thread.h" declline="422" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__thread_8h_1a807c8306201205c7c3ac0cb34ac7cd77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_TLSSet</definition>
        <argsstring>(SDL_TLSID id, const void *value, void(SDLCALL *destructor)(void *))</argsstring>
        <name>SDL_TLSSet</name>
        <param>
          <type><ref refid="_s_d_l__thread_8h_1a07ce005c35ad6ac377d6124db7296026" kindref="member">SDL_TLSID</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>const <ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref> *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref>(<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref> *destructor)(<ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref> *)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the current thread&apos;s value associated with a thread local storage ID.</para>
<para>The function prototype for <computeroutput>destructor</computeroutput> is:</para>
<para><programlisting filename=".c"><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>destructor(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="_s_d_l__opengl__glext_8h_1a8ad81492d410ff2ac11f754f4042150f" kindref="member">value</ref>)</highlight></codeline>
</programlisting></para>
<para>where its parameter <computeroutput>value</computeroutput> is what was passed as <computeroutput>value</computeroutput> to <ref refid="_s_d_l__thread_8h_1a807c8306201205c7c3ac0cb34ac7cd77" kindref="member">SDL_TLSSet()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>the thread local storage ID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to associate with the ID for the current thread </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destructor</parametername>
</parameternamelist>
<parameterdescription>
<para>a function called when the thread exits, to free the value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__thread_8h_1ac7ed1ec8dec5b902da25b60da2b728fa" kindref="member">SDL_TLSCreate</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__thread_8h_1a1915755c7215e59e1b218b9b94dbf8fd" kindref="member">SDL_TLSGet</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_thread.h" line="447" column="29" declfile="D:/RayTracing/include/SDL_thread.h" declline="447" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__thread_8h_1addd72a8ba431ef92685bbc9c89c5c67c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC void SDLCALL SDL_TLSCleanup</definition>
        <argsstring>(void)</argsstring>
        <name>SDL_TLSCleanup</name>
        <param>
          <type><ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Cleanup all TLS data for this thread.</para>
<para><simplesect kind="since"><para>This function is available since SDL 2.0.16. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_thread.h" line="454" column="30" declfile="D:/RayTracing/include/SDL_thread.h" declline="454" declcolumn="30"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Header for the SDL thread management routines. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/>Simple<sp/>DirectMedia<sp/>Layer</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/>Copyright<sp/>(C)<sp/>1997-2022<sp/>Sam<sp/>Lantinga<sp/>&lt;slouken@libsdl.org&gt;</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/>This<sp/>software<sp/>is<sp/>provided<sp/>&apos;as-is&apos;,<sp/>without<sp/>any<sp/>express<sp/>or<sp/>implied</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/>warranty.<sp/><sp/>In<sp/>no<sp/>event<sp/>will<sp/>the<sp/>authors<sp/>be<sp/>held<sp/>liable<sp/>for<sp/>any<sp/>damages</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/>arising<sp/>from<sp/>the<sp/>use<sp/>of<sp/>this<sp/>software.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/>Permission<sp/>is<sp/>granted<sp/>to<sp/>anyone<sp/>to<sp/>use<sp/>this<sp/>software<sp/>for<sp/>any<sp/>purpose,</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/>including<sp/>commercial<sp/>applications,<sp/>and<sp/>to<sp/>alter<sp/>it<sp/>and<sp/>redistribute<sp/>it</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/>freely,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>restrictions:</highlight></codeline>
<codeline lineno="12"><highlight class="comment"></highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/>1.<sp/>The<sp/>origin<sp/>of<sp/>this<sp/>software<sp/>must<sp/>not<sp/>be<sp/>misrepresented;<sp/>you<sp/>must<sp/>not</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>claim<sp/>that<sp/>you<sp/>wrote<sp/>the<sp/>original<sp/>software.<sp/>If<sp/>you<sp/>use<sp/>this<sp/>software</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>in<sp/>a<sp/>product,<sp/>an<sp/>acknowledgment<sp/>in<sp/>the<sp/>product<sp/>documentation<sp/>would<sp/>be</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>appreciated<sp/>but<sp/>is<sp/>not<sp/>required.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/>2.<sp/>Altered<sp/>source<sp/>versions<sp/>must<sp/>be<sp/>plainly<sp/>marked<sp/>as<sp/>such,<sp/>and<sp/>must<sp/>not<sp/>be</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>misrepresented<sp/>as<sp/>being<sp/>the<sp/>original<sp/>software.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/>3.<sp/>This<sp/>notice<sp/>may<sp/>not<sp/>be<sp/>removed<sp/>or<sp/>altered<sp/>from<sp/>any<sp/>source<sp/>distribution.</highlight></codeline>
<codeline lineno="20"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SDL_thread_h_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SDL_thread_h_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_s_d_l__stdinc_8h" kindref="compound">SDL_stdinc.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_s_d_l__error_8h" kindref="compound">SDL_error.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Thread<sp/>synchronization<sp/>primitives<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_s_d_l__atomic_8h" kindref="compound">SDL_atomic.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_s_d_l__mutex_8h" kindref="compound">SDL_mutex.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__WIN32__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;process.h&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>_beginthreadex()<sp/>and<sp/>_endthreadex()<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__OS2__)<sp/></highlight><highlight class="comment">/*<sp/>for<sp/>_beginthread()<sp/>and<sp/>_endthread()<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__EMX__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;process.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="begin__code_8h" kindref="compound">begin_code.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Set<sp/>up<sp/>for<sp/>C<sp/>function<sp/>definitions,<sp/>even<sp/>when<sp/>using<sp/>C++<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>SDL<sp/>thread<sp/>structure,<sp/>defined<sp/>in<sp/>SDL_thread.c<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="_s_d_l__thread_8h_1a97cd1dc60cea74b74273affb1a974db5" kindref="member">SDL_Thread</ref>;</highlight></codeline>
<codeline lineno="57" refid="_s_d_l__thread_8h_1a97cd1dc60cea74b74273affb1a974db5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="_s_d_l__thread_8h_1a97cd1dc60cea74b74273affb1a974db5" kindref="member">SDL_Thread</ref><sp/><ref refid="_s_d_l__thread_8h_1a97cd1dc60cea74b74273affb1a974db5" kindref="member">SDL_Thread</ref>;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>SDL<sp/>thread<sp/>ID<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="_s_d_l__thread_8h_1ac4db699531ce9f18f5a8547aa988b88e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__thread_8h_1ac4db699531ce9f18f5a8547aa988b88e" kindref="member">SDL_threadID</ref>;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Thread<sp/>local<sp/>storage<sp/>ID,<sp/>0<sp/>is<sp/>the<sp/>invalid<sp/>ID<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="_s_d_l__thread_8h_1a07ce005c35ad6ac377d6124db7296026" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__thread_8h_1a07ce005c35ad6ac377d6124db7296026" kindref="member">SDL_TLSID</ref>;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="_s_d_l__thread_8h_1acce8dea56f6b307fadd2949b64e3ebda" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="76" refid="_s_d_l__thread_8h_1acce8dea56f6b307fadd2949b64e3ebdaa48d887edbfc7842abdabcec6900d3878" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_d_l__thread_8h_1acce8dea56f6b307fadd2949b64e3ebdaa48d887edbfc7842abdabcec6900d3878" kindref="member">SDL_THREAD_PRIORITY_LOW</ref>,</highlight></codeline>
<codeline lineno="77" refid="_s_d_l__thread_8h_1acce8dea56f6b307fadd2949b64e3ebdaac3a2f7a29f4c8fe11dca0ea258b07dae" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_d_l__thread_8h_1acce8dea56f6b307fadd2949b64e3ebdaac3a2f7a29f4c8fe11dca0ea258b07dae" kindref="member">SDL_THREAD_PRIORITY_NORMAL</ref>,</highlight></codeline>
<codeline lineno="78" refid="_s_d_l__thread_8h_1acce8dea56f6b307fadd2949b64e3ebdaaac5ff8423acdebf3b43c279b8ec2ae0d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_d_l__thread_8h_1acce8dea56f6b307fadd2949b64e3ebdaaac5ff8423acdebf3b43c279b8ec2ae0d" kindref="member">SDL_THREAD_PRIORITY_HIGH</ref>,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_d_l__thread_8h_1acce8dea56f6b307fadd2949b64e3ebdaa334bcf64dc27f8dbc1aa661a494ee8ca" kindref="member">SDL_THREAD_PRIORITY_TIME_CRITICAL</ref></highlight></codeline>
<codeline lineno="80" refid="_s_d_l__thread_8h_1acce8dea56f6b307fadd2949b64e3ebdaa334bcf64dc27f8dbc1aa661a494ee8ca" refkind="member"><highlight class="normal">}<sp/><ref refid="_s_d_l__thread_8h_1acce8dea56f6b307fadd2949b64e3ebda" kindref="member">SDL_ThreadPriority</ref>;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="_s_d_l__thread_8h_1a35d10c50423c326b20abea6a486f53e0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/>*<sp/><ref refid="_s_d_l__thread_8h_1a35d10c50423c326b20abea6a486f53e0" kindref="member">SDL_ThreadFunction</ref>)<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="_s_d_l__opengl_8h_1a2e335d56e2846b0fea47eed068b2d34a" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__WIN32__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SDL_PASSED_BEGINTHREAD_ENDTHREAD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__config_8h_1a728e973c799f206f0151c8a3bd1e5699" kindref="member">uintptr_t</ref><sp/>(__cdecl<sp/>*<sp/>pfnSDL_CurrentBeginThread)</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/>unsigned,<sp/>unsigned<sp/>(__stdcall<sp/>*<ref refid="_s_d_l__opengl__glext_8h_1a18ae3ab36a07e388833b568cfdfa90c8" kindref="member">func</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="comment">/*arg*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="comment">/*<sp/>threadID<sp/>*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__audio_8h_1aa5cb90967788ada2711894ca158ece01" kindref="member">void</ref><sp/>(__cdecl<sp/>*<sp/>pfnSDL_CurrentEndThread)<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>code);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SDL_beginthread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SDL_beginthread<sp/>_beginthreadex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SDL_endthread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SDL_endthread<sp/>_endthreadex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="_s_d_l__thread_8h_1a97cd1dc60cea74b74273affb1a974db5" kindref="member">SDL_Thread</ref><sp/>*<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><ref refid="_s_d_l__thread_8h_1ac36c70a33975a8c9399962f8ac310377" kindref="member">SDL_CreateThread</ref>(<ref refid="_s_d_l__thread_8h_1a35d10c50423c326b20abea6a486f53e0" kindref="member">SDL_ThreadFunction</ref><sp/>fn,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="_s_d_l__opengl__glext_8h_1aaced7cfc21e7d37775d6921bb8177239" kindref="member">name</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="_s_d_l__opengl_8h_1a2e335d56e2846b0fea47eed068b2d34a" kindref="member">data</ref>,</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfnSDL_CurrentBeginThread<sp/>pfnBeginThread,</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfnSDL_CurrentEndThread<sp/>pfnEndThread);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="_s_d_l__thread_8h_1a97cd1dc60cea74b74273affb1a974db5" kindref="member">SDL_Thread</ref><sp/>*<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><ref refid="_s_d_l__thread_8h_1a9ab0d63052abb2afdbb14042cee4dbdf" kindref="member">SDL_CreateThreadWithStackSize</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/>*<sp/>fn)<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="_s_d_l__opengl__glext_8h_1aaced7cfc21e7d37775d6921bb8177239" kindref="member">name</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>stacksize,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="_s_d_l__opengl_8h_1a2e335d56e2846b0fea47eed068b2d34a" kindref="member">data</ref>,</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfnSDL_CurrentBeginThread<sp/>pfnBeginThread,</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfnSDL_CurrentEndThread<sp/>pfnEndThread);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(SDL_CreateThread)<sp/>&amp;&amp;<sp/>SDL_DYNAMIC_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>SDL_CreateThread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SDL_CreateThread(fn,<sp/>name,<sp/>data)<sp/>SDL_CreateThread_REAL(fn,<sp/>name,<sp/>data,<sp/>(pfnSDL_CurrentBeginThread)SDL_beginthread,<sp/>(pfnSDL_CurrentEndThread)SDL_endthread)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>SDL_CreateThreadWithStackSize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SDL_CreateThreadWithStackSize(fn,<sp/>name,<sp/>stacksize,<sp/>data)<sp/>SDL_CreateThreadWithStackSize_REAL(fn,<sp/>name,<sp/>stacksize,<sp/>data,<sp/>(pfnSDL_CurrentBeginThread)SDL_beginthread,<sp/>(pfnSDL_CurrentEndThread)SDL_endthread)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SDL_CreateThread(fn,<sp/>name,<sp/>data)<sp/>SDL_CreateThread(fn,<sp/>name,<sp/>data,<sp/>(pfnSDL_CurrentBeginThread)SDL_beginthread,<sp/>(pfnSDL_CurrentEndThread)SDL_endthread)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SDL_CreateThreadWithStackSize(fn,<sp/>name,<sp/>stacksize,<sp/>data)<sp/>SDL_CreateThreadWithStackSize(fn,<sp/>name,<sp/>data,<sp/>(pfnSDL_CurrentBeginThread)_beginthreadex,<sp/>(pfnSDL_CurrentEndThread)SDL_endthread)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__OS2__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/>*<sp/>just<sp/>like<sp/>the<sp/>windows<sp/>case<sp/>above:<sp/><sp/>We<sp/>compile<sp/>SDL2</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/>*<sp/>into<sp/>a<sp/>dll<sp/>with<sp/>Watcom&apos;s<sp/>runtime<sp/>statically<sp/>linked.</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SDL_PASSED_BEGINTHREAD_ENDTHREAD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*pfnSDL_CurrentBeginThread)(<ref refid="_s_d_l__audio_8h_1aa5cb90967788ada2711894ca158ece01" kindref="member">void</ref><sp/>(*<ref refid="_s_d_l__opengl__glext_8h_1a18ae3ab36a07e388833b568cfdfa90c8" kindref="member">func</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="comment">/*arg*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__audio_8h_1aa5cb90967788ada2711894ca158ece01" kindref="member">void</ref><sp/>(*pfnSDL_CurrentEndThread)(<ref refid="_s_d_l__audio_8h_1aa5cb90967788ada2711894ca158ece01" kindref="member">void</ref>);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SDL_beginthread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SDL_beginthread<sp/>_beginthread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SDL_endthread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SDL_endthread<sp/>_endthread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="_s_d_l__thread_8h_1a97cd1dc60cea74b74273affb1a974db5" kindref="member">SDL_Thread</ref><sp/>*<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><ref refid="_s_d_l__thread_8h_1ac36c70a33975a8c9399962f8ac310377" kindref="member">SDL_CreateThread</ref>(<ref refid="_s_d_l__thread_8h_1a35d10c50423c326b20abea6a486f53e0" kindref="member">SDL_ThreadFunction</ref><sp/>fn,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="_s_d_l__opengl__glext_8h_1aaced7cfc21e7d37775d6921bb8177239" kindref="member">name</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="_s_d_l__opengl_8h_1a2e335d56e2846b0fea47eed068b2d34a" kindref="member">data</ref>,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfnSDL_CurrentBeginThread<sp/>pfnBeginThread,</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfnSDL_CurrentEndThread<sp/>pfnEndThread);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="_s_d_l__thread_8h_1a97cd1dc60cea74b74273affb1a974db5" kindref="member">SDL_Thread</ref><sp/>*<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><ref refid="_s_d_l__thread_8h_1a9ab0d63052abb2afdbb14042cee4dbdf" kindref="member">SDL_CreateThreadWithStackSize</ref>(<ref refid="_s_d_l__thread_8h_1a35d10c50423c326b20abea6a486f53e0" kindref="member">SDL_ThreadFunction</ref><sp/>fn,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="_s_d_l__opengl__glext_8h_1aaced7cfc21e7d37775d6921bb8177239" kindref="member">name</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>stacksize,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="_s_d_l__opengl_8h_1a2e335d56e2846b0fea47eed068b2d34a" kindref="member">data</ref>,</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfnSDL_CurrentBeginThread<sp/>pfnBeginThread,</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfnSDL_CurrentEndThread<sp/>pfnEndThread);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(SDL_CreateThread)<sp/>&amp;&amp;<sp/>SDL_DYNAMIC_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>SDL_CreateThread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SDL_CreateThread(fn,<sp/>name,<sp/>data)<sp/>SDL_CreateThread_REAL(fn,<sp/>name,<sp/>data,<sp/>(pfnSDL_CurrentBeginThread)SDL_beginthread,<sp/>(pfnSDL_CurrentEndThread)SDL_endthread)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>SDL_CreateThreadWithStackSize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SDL_CreateThreadWithStackSize(fn,<sp/>name,<sp/>stacksize,<sp/>data)<sp/>SDL_CreateThreadWithStackSize_REAL(fn,<sp/>name,<sp/>data,<sp/>(pfnSDL_CurrentBeginThread)SDL_beginthread,<sp/>(pfnSDL_CurrentEndThread)SDL_endthread)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SDL_CreateThread(fn,<sp/>name,<sp/>data)<sp/>SDL_CreateThread(fn,<sp/>name,<sp/>data,<sp/>(pfnSDL_CurrentBeginThread)SDL_beginthread,<sp/>(pfnSDL_CurrentEndThread)SDL_endthread)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SDL_CreateThreadWithStackSize(fn,<sp/>name,<sp/>stacksize,<sp/>data)<sp/>SDL_CreateThreadWithStackSize(fn,<sp/>name,<sp/>stacksize,<sp/>data,<sp/>(pfnSDL_CurrentBeginThread)SDL_beginthread,<sp/>(pfnSDL_CurrentEndThread)SDL_endthread)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="_s_d_l__thread_8h_1a97cd1dc60cea74b74273affb1a974db5" kindref="member">SDL_Thread</ref><sp/>*<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></highlight></codeline>
<codeline lineno="208" refid="_s_d_l__thread_8h_1ac36c70a33975a8c9399962f8ac310377" refkind="member"><highlight class="normal"><ref refid="_s_d_l__thread_8h_1ac36c70a33975a8c9399962f8ac310377" kindref="member">SDL_CreateThread</ref>(<ref refid="_s_d_l__thread_8h_1a35d10c50423c326b20abea6a486f53e0" kindref="member">SDL_ThreadFunction</ref><sp/>fn,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="_s_d_l__opengl__glext_8h_1aaced7cfc21e7d37775d6921bb8177239" kindref="member">name</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="_s_d_l__opengl_8h_1a2e335d56e2846b0fea47eed068b2d34a" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="_s_d_l__thread_8h_1a97cd1dc60cea74b74273affb1a974db5" kindref="member">SDL_Thread</ref><sp/>*<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></highlight></codeline>
<codeline lineno="254" refid="_s_d_l__thread_8h_1a9ab0d63052abb2afdbb14042cee4dbdf" refkind="member"><highlight class="normal"><ref refid="_s_d_l__thread_8h_1a9ab0d63052abb2afdbb14042cee4dbdf" kindref="member">SDL_CreateThreadWithStackSize</ref>(<ref refid="_s_d_l__thread_8h_1a35d10c50423c326b20abea6a486f53e0" kindref="member">SDL_ThreadFunction</ref><sp/>fn,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="_s_d_l__opengl__glext_8h_1aaced7cfc21e7d37775d6921bb8177239" kindref="member">name</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>stacksize,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="_s_d_l__opengl_8h_1a2e335d56e2846b0fea47eed068b2d34a" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="272" refid="_s_d_l__thread_8h_1a5c1e3618f2be2e3af69d615055defa5a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__thread_8h_1a5c1e3618f2be2e3af69d615055defa5a" kindref="member">SDL_GetThreadName</ref>(<ref refid="_s_d_l__thread_8h_1a97cd1dc60cea74b74273affb1a974db5" kindref="member">SDL_Thread</ref><sp/>*thread);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="290" refid="_s_d_l__thread_8h_1a341933eef1470789de20b05c1392b9ae" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="_s_d_l__thread_8h_1ac4db699531ce9f18f5a8547aa988b88e" kindref="member">SDL_threadID</ref><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__thread_8h_1a341933eef1470789de20b05c1392b9ae" kindref="member">SDL_ThreadID</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="307" refid="_s_d_l__thread_8h_1a0bf5d93ed5cb25ea59307472c62c66db" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="_s_d_l__thread_8h_1ac4db699531ce9f18f5a8547aa988b88e" kindref="member">SDL_threadID</ref><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__thread_8h_1a0bf5d93ed5cb25ea59307472c62c66db" kindref="member">SDL_GetThreadID</ref>(<ref refid="_s_d_l__thread_8h_1a97cd1dc60cea74b74273affb1a974db5" kindref="member">SDL_Thread</ref><sp/>*<sp/>thread);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="322" refid="_s_d_l__thread_8h_1adf4da9c0e6a6833bef9741344b09699d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__thread_8h_1adf4da9c0e6a6833bef9741344b09699d" kindref="member">SDL_SetThreadPriority</ref>(<ref refid="_s_d_l__thread_8h_1acce8dea56f6b307fadd2949b64e3ebda" kindref="member">SDL_ThreadPriority</ref><sp/>priority);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="357" refid="_s_d_l__thread_8h_1ac96743626ed21d2cdb0868a23cca9705" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__thread_8h_1ac96743626ed21d2cdb0868a23cca9705" kindref="member">SDL_WaitThread</ref>(<ref refid="_s_d_l__thread_8h_1a97cd1dc60cea74b74273affb1a974db5" kindref="member">SDL_Thread</ref><sp/>*<sp/>thread,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*status);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="393" refid="_s_d_l__thread_8h_1af90602c51ef5a62f26ed9931af484906" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__thread_8h_1af90602c51ef5a62f26ed9931af484906" kindref="member">SDL_DetachThread</ref>(<ref refid="_s_d_l__thread_8h_1a97cd1dc60cea74b74273affb1a974db5" kindref="member">SDL_Thread</ref><sp/>*<sp/>thread);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="408" refid="_s_d_l__thread_8h_1ac7ed1ec8dec5b902da25b60da2b728fa" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="_s_d_l__thread_8h_1a07ce005c35ad6ac377d6124db7296026" kindref="member">SDL_TLSID</ref><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__thread_8h_1ac7ed1ec8dec5b902da25b60da2b728fa" kindref="member">SDL_TLSCreate</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="422" refid="_s_d_l__thread_8h_1a1915755c7215e59e1b218b9b94dbf8fd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__thread_8h_1a1915755c7215e59e1b218b9b94dbf8fd" kindref="member">SDL_TLSGet</ref>(<ref refid="_s_d_l__thread_8h_1a07ce005c35ad6ac377d6124db7296026" kindref="member">SDL_TLSID</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="447" refid="_s_d_l__thread_8h_1a807c8306201205c7c3ac0cb34ac7cd77" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__thread_8h_1a807c8306201205c7c3ac0cb34ac7cd77" kindref="member">SDL_TLSSet</ref>(<ref refid="_s_d_l__thread_8h_1a07ce005c35ad6ac377d6124db7296026" kindref="member">SDL_TLSID</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="_s_d_l__opengl__glext_8h_1a8ad81492d410ff2ac11f754f4042150f" kindref="member">value</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/>*destructor)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*));</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="454" refid="_s_d_l__thread_8h_1addd72a8ba431ef92685bbc9c89c5c67c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__thread_8h_1addd72a8ba431ef92685bbc9c89c5c67c" kindref="member">SDL_TLSCleanup</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Ends<sp/>C<sp/>function<sp/>definitions<sp/>when<sp/>using<sp/>C++<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal">}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="close__code_8h" kindref="compound">close_code.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>SDL_thread_h_<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>vi:<sp/>set<sp/>ts=4<sp/>sw=4<sp/>expandtab:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="D:/RayTracing/include/SDL_thread.h"/>
  </compounddef>
</doxygen>
