<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="md__d___ray_tracing_docs__r_e_a_d_m_e_windows" kind="page">
    <compoundname>md_D__RayTracing_docs_README_windows</compoundname>
    <title>Windows</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><hruler/>
 </para>
<sect1 id="md__d___ray_tracing_docs__r_e_a_d_m_e_windows_1autotoc_md121">
<title>OpenGL ES 2.x support</title>
<para>SDL has support for OpenGL ES 2.x under Windows via two alternative implementations. The most straightforward method consists in running your app in a system with a graphic card paired with a relatively recent (as of November of 2013) driver which supports the WGL_EXT_create_context_es2_profile extension. Vendors known to ship said extension on Windows currently include nVidia and Intel.</para>
<para>The other method involves using the ANGLE library (<ulink url="https://code.google.com/p/angleproject/">https://code.google.com/p/angleproject/</ulink>) If an OpenGL ES 2.x context is requested and no WGL_EXT_create_context_es2_profile extension is found, SDL will try to load the libEGL.dll library provided by ANGLE. To obtain the ANGLE binaries, you can either compile from source from <ulink url="https://chromium.googlesource.com/angle/angle">https://chromium.googlesource.com/angle/angle</ulink> or copy the relevant binaries from a recent Chrome/Chromium install for Windows. The files you need are: <verbatim>* libEGL.dll
* libGLESv2.dll
* d3dcompiler_46.dll (supports Windows Vista or later, better shader compiler)
or...
* d3dcompiler_43.dll (supports Windows XP or later)
</verbatim> If you compile ANGLE from source, you can configure it so it does not need the d3dcompiler_* DLL at all (for details on this, see their documentation). However, by default SDL will try to preload the d3dcompiler_46.dll to comply with ANGLE&apos;s requirements. If you wish SDL to preload d3dcompiler_43.dll (to support Windows XP) or to skip this step at all, you can use the SDL_HINT_VIDEO_WIN_D3DCOMPILER hint (see SDL_hints.h for more details).</para>
<para>Known Bugs: <verbatim>* SDL_GL_SetSwapInterval is currently a no op when using ANGLE. It appears
  that there&apos;s a bug in the library which prevents the window contents from
  refreshing if this is set to anything other than the default value.
</verbatim> </para>
</sect1>
<sect1 id="md__d___ray_tracing_docs__r_e_a_d_m_e_windows_1autotoc_md122">
<title>Vulkan Surface Support</title>
<para>Support for creating Vulkan surfaces is configured on by default. To disable it change the value of <computeroutput>SDL_VIDEO_VULKAN</computeroutput> to 0 in <computeroutput>SDL_config_windows.h</computeroutput>. You must install the <ulink url="https://www.lunarg.com/vulkan-sdk/">Vulkan SDK</ulink> in order to use Vulkan graphics in your application. </para>
</sect1>
    </detaileddescription>
    <location file="D:/RayTracing/docs/README-windows.md"/>
  </compounddef>
</doxygen>
