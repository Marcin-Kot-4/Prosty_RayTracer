<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="_s_d_l__timer_8h" kind="file" language="C++">
    <compoundname>SDL_timer.h</compoundname>
    <includes refid="_s_d_l__stdinc_8h" local="yes">SDL_stdinc.h</includes>
    <includes refid="_s_d_l__error_8h" local="yes">SDL_error.h</includes>
    <includes refid="begin__code_8h" local="yes">begin_code.h</includes>
    <includes refid="close__code_8h" local="yes">close_code.h</includes>
    <includedby refid="_s_d_l_8h" local="yes">D:/RayTracing/include/SDL.h</includedby>
    <incdepgraph>
      <node id="3">
        <label>SDL_config.h</label>
        <link refid="_s_d_l__config_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>SDL_error.h</label>
        <link refid="_s_d_l__error_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>SDL_platform.h</label>
        <link refid="_s_d_l__platform_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>SDL_stdinc.h</label>
        <link refid="_s_d_l__stdinc_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>D:/RayTracing/include/SDL_timer.h</label>
        <link refid="_s_d_l__timer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>begin_code.h</label>
        <link refid="begin__code_8h"/>
      </node>
      <node id="6">
        <label>close_code.h</label>
        <link refid="close__code_8h"/>
      </node>
      <node id="8">
        <label>stdarg.h</label>
      </node>
      <node id="7">
        <label>stddef.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4">
        <label>D:/RayTracing/CApp.cpp</label>
        <link refid="_c_app_8cpp"/>
      </node>
      <node id="3">
        <label>D:/RayTracing/CApp.h</label>
        <link refid="_c_app_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>D:/RayTracing/RayTrace/Image.cpp</label>
        <link refid="_image_8cpp"/>
      </node>
      <node id="6">
        <label>D:/RayTracing/RayTrace/Image.h</label>
        <link refid="_image_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>D:/RayTracing/RayTrace/Scene.cpp</label>
        <link refid="_scene_8cpp"/>
      </node>
      <node id="8">
        <label>D:/RayTracing/RayTrace/Scene.h</label>
        <link refid="_scene_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>D:/RayTracing/RayTrace/Textures/textureimage.cpp</label>
        <link refid="textureimage_8cpp"/>
      </node>
      <node id="10">
        <label>D:/RayTracing/RayTrace/Textures/textureimage.h</label>
        <link refid="textureimage_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>D:/RayTracing/include/SDL.h</label>
        <link refid="_s_d_l_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>D:/RayTracing/include/SDL_test.h</label>
        <link refid="_s_d_l__test_8h"/>
      </node>
      <node id="13">
        <label>D:/RayTracing/include/SDL_test_common.h</label>
        <link refid="_s_d_l__test__common_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>D:/RayTracing/include/SDL_test_compare.h</label>
        <link refid="_s_d_l__test__compare_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>D:/RayTracing/include/SDL_test_images.h</label>
        <link refid="_s_d_l__test__images_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>D:/RayTracing/include/SDL_timer.h</label>
        <link refid="_s_d_l__timer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>D:/RayTracing/main.cpp</label>
        <link refid="main_8cpp"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="_s_d_l__timer_8h_1a5cc109e24ba0c46f6becb28353cd8921" prot="public" static="no">
        <name>SDL_TICKS_PASSED</name>
        <param><defname>A</defname></param>
        <param><defname>B</defname></param>
        <initializer>((<ref refid="_s_d_l__stdinc_8h_1a7a90b941db9d4582e9ad7abb9940ff7e" kindref="member">Sint32</ref>)((B) - (A)) &lt;= 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compare 32-bit SDL ticks values, and return true if <computeroutput>A</computeroutput> has passed <computeroutput>B</computeroutput>.</para>
<para>This should be used with results from <ref refid="_s_d_l__timer_8h_1a0b9bc71d6287e0ffafdc3419760fe2b3" kindref="member">SDL_GetTicks()</ref>, as this macro attempts to deal with the 32-bit counter wrapping back to zero every ~49 days, but should <emphasis>not</emphasis> be used with <ref refid="_s_d_l__timer_8h_1abf49cb0e55ee7685699893d251468861" kindref="member">SDL_GetTicks64()</ref>, which does not have that problem.</para>
<para>For example, with <ref refid="_s_d_l__timer_8h_1a0b9bc71d6287e0ffafdc3419760fe2b3" kindref="member">SDL_GetTicks()</ref>, if you want to wait 100 ms, you could do this:</para>
<para><programlisting filename=".c"><codeline><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref><sp/><ref refid="_s_d_l__opengl__glext_8h_1ad29bb0d8468b264a4e3d9204366cfaab" kindref="member">timeout</ref><sp/>=<sp/><ref refid="_s_d_l__timer_8h_1a0b9bc71d6287e0ffafdc3419760fe2b3" kindref="member">SDL_GetTicks</ref>()<sp/>+<sp/>100;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!<ref refid="_s_d_l__timer_8h_1a5cc109e24ba0c46f6becb28353cd8921" kindref="member">SDL_TICKS_PASSED</ref>(<ref refid="_s_d_l__timer_8h_1a0b9bc71d6287e0ffafdc3419760fe2b3" kindref="member">SDL_GetTicks</ref>(),<sp/><ref refid="_s_d_l__opengl__glext_8h_1ad29bb0d8468b264a4e3d9204366cfaab" kindref="member">timeout</ref>))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>do<sp/>work<sp/>until<sp/>timeout<sp/>has<sp/>elapsed</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>Note that this does not handle tick differences greater than 2^31 so take care when using the above kind of code with large timeout delays (tens of days). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_timer.h" line="106" column="9" bodyfile="D:/RayTracing/include/SDL_timer.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_s_d_l__timer_8h_1a3c5c867db975d245e4a82fcf0cd7de80" prot="public" static="no">
        <type><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref>(<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref> *</type>
        <definition>typedef Uint32(SDLCALL * SDL_TimerCallback) (Uint32 interval, void *param)</definition>
        <argsstring>)(Uint32 interval, void *param)</argsstring>
        <name>SDL_TimerCallback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function prototype for the timer callback function.</para>
<para>The callback function is passed the current timer interval and returns the next timer interval. If the returned value is the same as the one passed in, the periodic alarm continues, otherwise a new alarm is scheduled. If the callback returns 0, the periodic alarm is cancelled. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_timer.h" line="157" column="9" bodyfile="D:/RayTracing/include/SDL_timer.h" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_s_d_l__timer_8h_1a412e8ff8a6c89615ba8f9486b292213a" prot="public" static="no">
        <type>int</type>
        <definition>typedef int SDL_TimerID</definition>
        <argsstring></argsstring>
        <name>SDL_TimerID</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Definition of the timer ID type. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_timer.h" line="162" column="13" bodyfile="D:/RayTracing/include/SDL_timer.h" bodystart="162" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_s_d_l__timer_8h_1a0b9bc71d6287e0ffafdc3419760fe2b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC Uint32 SDLCALL SDL_GetTicks</definition>
        <argsstring>(void)</argsstring>
        <name>SDL_GetTicks</name>
        <param>
          <type><ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the number of milliseconds since SDL library initialization.</para>
<para>This value wraps if the program runs for more than ~49 days.</para>
<para>This function is not recommended as of SDL 2.0.18; use <ref refid="_s_d_l__timer_8h_1abf49cb0e55ee7685699893d251468861" kindref="member">SDL_GetTicks64()</ref> instead, where the value doesn&apos;t wrap every ~49 days. There are places in SDL where we provide a 32-bit timestamp that can not change without breaking binary compatibility, though, so this function isn&apos;t officially deprecated.</para>
<para><simplesect kind="return"><para>an unsigned 32-bit value representing the number of milliseconds since the SDL library initialized.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__timer_8h_1a5cc109e24ba0c46f6becb28353cd8921" kindref="member">SDL_TICKS_PASSED</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_timer.h" line="58" column="32" declfile="D:/RayTracing/include/SDL_timer.h" declline="58" declcolumn="32"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__timer_8h_1abf49cb0e55ee7685699893d251468861" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__stdinc_8h_1ac006cf2bd55a42a9cc8ae9f123aa7e13" kindref="member">Uint64</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC Uint64 SDLCALL SDL_GetTicks64</definition>
        <argsstring>(void)</argsstring>
        <name>SDL_GetTicks64</name>
        <param>
          <type><ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the number of milliseconds since SDL library initialization.</para>
<para>Note that you should not use the SDL_TICKS_PASSED macro with values returned by this function, as that macro does clever math to compensate for the 32-bit overflow every ~49 days that <ref refid="_s_d_l__timer_8h_1a0b9bc71d6287e0ffafdc3419760fe2b3" kindref="member">SDL_GetTicks()</ref> suffers from. 64-bit values from this function can be safely compared directly.</para>
<para>For example, if you want to wait 100 ms, you could do this:</para>
<para><programlisting filename=".c"><codeline><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__stdinc_8h_1ac006cf2bd55a42a9cc8ae9f123aa7e13" kindref="member">Uint64</ref><sp/><ref refid="_s_d_l__opengl__glext_8h_1ad29bb0d8468b264a4e3d9204366cfaab" kindref="member">timeout</ref><sp/>=<sp/><ref refid="_s_d_l__timer_8h_1abf49cb0e55ee7685699893d251468861" kindref="member">SDL_GetTicks64</ref>()<sp/>+<sp/>100;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="_s_d_l__timer_8h_1abf49cb0e55ee7685699893d251468861" kindref="member">SDL_GetTicks64</ref>()<sp/>&lt;<sp/><ref refid="_s_d_l__opengl__glext_8h_1ad29bb0d8468b264a4e3d9204366cfaab" kindref="member">timeout</ref>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>do<sp/>work<sp/>until<sp/>timeout<sp/>has<sp/>elapsed</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><simplesect kind="return"><para>an unsigned 64-bit value representing the number of milliseconds since the SDL library initialized.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.18. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_timer.h" line="82" column="32" declfile="D:/RayTracing/include/SDL_timer.h" declline="82" declcolumn="32"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__timer_8h_1a2dbeb63c4f0564811a4adf3938808977" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__stdinc_8h_1ac006cf2bd55a42a9cc8ae9f123aa7e13" kindref="member">Uint64</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC Uint64 SDLCALL SDL_GetPerformanceCounter</definition>
        <argsstring>(void)</argsstring>
        <name>SDL_GetPerformanceCounter</name>
        <param>
          <type><ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the current value of the high resolution counter.</para>
<para>This function is typically used for profiling.</para>
<para>The counter values are only meaningful relative to each other. Differences between values can be converted to times by using <ref refid="_s_d_l__timer_8h_1a507ebea12e31dacc9f85f7d9febe0efb" kindref="member">SDL_GetPerformanceFrequency()</ref>.</para>
<para><simplesect kind="return"><para>the current counter value.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__timer_8h_1a507ebea12e31dacc9f85f7d9febe0efb" kindref="member">SDL_GetPerformanceFrequency</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_timer.h" line="123" column="32" declfile="D:/RayTracing/include/SDL_timer.h" declline="123" declcolumn="32"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__timer_8h_1a507ebea12e31dacc9f85f7d9febe0efb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__stdinc_8h_1ac006cf2bd55a42a9cc8ae9f123aa7e13" kindref="member">Uint64</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC Uint64 SDLCALL SDL_GetPerformanceFrequency</definition>
        <argsstring>(void)</argsstring>
        <name>SDL_GetPerformanceFrequency</name>
        <param>
          <type><ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the count per second of the high resolution counter.</para>
<para><simplesect kind="return"><para>a platform-specific count per second.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__timer_8h_1a2dbeb63c4f0564811a4adf3938808977" kindref="member">SDL_GetPerformanceCounter</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_timer.h" line="134" column="32" declfile="D:/RayTracing/include/SDL_timer.h" declline="134" declcolumn="32"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__timer_8h_1ae8050b95373b95249064467592ab4e21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC void SDLCALL SDL_Delay</definition>
        <argsstring>(Uint32 ms)</argsstring>
        <name>SDL_Delay</name>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref></type>
          <declname>ms</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Wait a specified number of milliseconds before returning.</para>
<para>This function waits a specified number of milliseconds before returning. It waits at least the specified time, but possibly longer due to OS scheduling.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ms</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of milliseconds to delay</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>This function is available since SDL 2.0.0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_timer.h" line="147" column="30" declfile="D:/RayTracing/include/SDL_timer.h" declline="147" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__timer_8h_1a56ceea49587e3fa5796b2e4bf85603b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__timer_8h_1a412e8ff8a6c89615ba8f9486b292213a" kindref="member">SDL_TimerID</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC SDL_TimerID SDLCALL SDL_AddTimer</definition>
        <argsstring>(Uint32 interval, SDL_TimerCallback callback, void *param)</argsstring>
        <name>SDL_AddTimer</name>
        <param>
          <type><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref></type>
          <declname>interval</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__timer_8h_1a3c5c867db975d245e4a82fcf0cd7de80" kindref="member">SDL_TimerCallback</ref></type>
          <declname>callback</declname>
        </param>
        <param>
          <type><ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref> *</type>
          <declname>param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Call a callback function at a future time.</para>
<para>If you use this function, you must pass <computeroutput>SDL_INIT_TIMER</computeroutput> to <ref refid="_s_d_l_8h_1a8fc8d35348d7c74bad8392d776c937b8" kindref="member">SDL_Init()</ref>.</para>
<para>The callback function is passed the current timer interval and the user supplied parameter from the <ref refid="_s_d_l__timer_8h_1a56ceea49587e3fa5796b2e4bf85603b8" kindref="member">SDL_AddTimer()</ref> call and should return the next timer interval. If the value returned from the callback is 0, the timer is canceled.</para>
<para>The callback is run on a separate thread.</para>
<para>Timers take into account the amount of time it took to execute the callback. For example, if the callback took 250 ms to execute and returned 1000 (ms), the timer would only wait another 750 ms before its next iteration.</para>
<para>Timing may be inexact due to OS scheduling. Be sure to note the current time with <ref refid="_s_d_l__timer_8h_1a0b9bc71d6287e0ffafdc3419760fe2b3" kindref="member">SDL_GetTicks()</ref> or <ref refid="_s_d_l__timer_8h_1a2dbeb63c4f0564811a4adf3938808977" kindref="member">SDL_GetPerformanceCounter()</ref> in case your callback needs to adjust for variances.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>interval</parametername>
</parameternamelist>
<parameterdescription>
<para>the timer delay, in milliseconds, passed to <computeroutput>callback</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>the SDL_TimerCallback function to call when the specified <computeroutput>interval</computeroutput> elapses </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>param</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer that is passed to <computeroutput>callback</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a timer ID or 0 if an error occurs; call <ref refid="_s_d_l__error_8h_1adaef317de186f072f8328798de29d51a" kindref="member">SDL_GetError()</ref> for more information.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__timer_8h_1afe8d418e59a24ae6ad820b92137ab9b2" kindref="member">SDL_RemoveTimer</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_timer.h" line="196" column="37" declfile="D:/RayTracing/include/SDL_timer.h" declline="196" declcolumn="37"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__timer_8h_1afe8d418e59a24ae6ad820b92137ab9b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC SDL_bool SDLCALL SDL_RemoveTimer</definition>
        <argsstring>(SDL_TimerID id)</argsstring>
        <name>SDL_RemoveTimer</name>
        <param>
          <type><ref refid="_s_d_l__timer_8h_1a412e8ff8a6c89615ba8f9486b292213a" kindref="member">SDL_TimerID</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove a timer created with <ref refid="_s_d_l__timer_8h_1a56ceea49587e3fa5796b2e4bf85603b8" kindref="member">SDL_AddTimer()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>the ID of the timer to remove </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SDL_TRUE if the timer is removed or SDL_FALSE if the timer wasn&apos;t found.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__timer_8h_1a56ceea49587e3fa5796b2e4bf85603b8" kindref="member">SDL_AddTimer</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_timer.h" line="211" column="34" declfile="D:/RayTracing/include/SDL_timer.h" declline="211" declcolumn="34"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Header for the SDL time management routines. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/>Simple<sp/>DirectMedia<sp/>Layer</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/>Copyright<sp/>(C)<sp/>1997-2022<sp/>Sam<sp/>Lantinga<sp/>&lt;slouken@libsdl.org&gt;</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/>This<sp/>software<sp/>is<sp/>provided<sp/>&apos;as-is&apos;,<sp/>without<sp/>any<sp/>express<sp/>or<sp/>implied</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/>warranty.<sp/><sp/>In<sp/>no<sp/>event<sp/>will<sp/>the<sp/>authors<sp/>be<sp/>held<sp/>liable<sp/>for<sp/>any<sp/>damages</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/>arising<sp/>from<sp/>the<sp/>use<sp/>of<sp/>this<sp/>software.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/>Permission<sp/>is<sp/>granted<sp/>to<sp/>anyone<sp/>to<sp/>use<sp/>this<sp/>software<sp/>for<sp/>any<sp/>purpose,</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/>including<sp/>commercial<sp/>applications,<sp/>and<sp/>to<sp/>alter<sp/>it<sp/>and<sp/>redistribute<sp/>it</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/>freely,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>restrictions:</highlight></codeline>
<codeline lineno="12"><highlight class="comment"></highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/>1.<sp/>The<sp/>origin<sp/>of<sp/>this<sp/>software<sp/>must<sp/>not<sp/>be<sp/>misrepresented;<sp/>you<sp/>must<sp/>not</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>claim<sp/>that<sp/>you<sp/>wrote<sp/>the<sp/>original<sp/>software.<sp/>If<sp/>you<sp/>use<sp/>this<sp/>software</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>in<sp/>a<sp/>product,<sp/>an<sp/>acknowledgment<sp/>in<sp/>the<sp/>product<sp/>documentation<sp/>would<sp/>be</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>appreciated<sp/>but<sp/>is<sp/>not<sp/>required.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/>2.<sp/>Altered<sp/>source<sp/>versions<sp/>must<sp/>be<sp/>plainly<sp/>marked<sp/>as<sp/>such,<sp/>and<sp/>must<sp/>not<sp/>be</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>misrepresented<sp/>as<sp/>being<sp/>the<sp/>original<sp/>software.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/>3.<sp/>This<sp/>notice<sp/>may<sp/>not<sp/>be<sp/>removed<sp/>or<sp/>altered<sp/>from<sp/>any<sp/>source<sp/>distribution.</highlight></codeline>
<codeline lineno="20"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SDL_timer_h_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SDL_timer_h_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_s_d_l__stdinc_8h" kindref="compound">SDL_stdinc.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_s_d_l__error_8h" kindref="compound">SDL_error.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="begin__code_8h" kindref="compound">begin_code.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Set<sp/>up<sp/>for<sp/>C<sp/>function<sp/>definitions,<sp/>even<sp/>when<sp/>using<sp/>C++<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="_s_d_l__timer_8h_1a0b9bc71d6287e0ffafdc3419760fe2b3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__timer_8h_1a0b9bc71d6287e0ffafdc3419760fe2b3" kindref="member">SDL_GetTicks</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="_s_d_l__timer_8h_1abf49cb0e55ee7685699893d251468861" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="_s_d_l__stdinc_8h_1ac006cf2bd55a42a9cc8ae9f123aa7e13" kindref="member">Uint64</ref><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__timer_8h_1abf49cb0e55ee7685699893d251468861" kindref="member">SDL_GetTicks64</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="_s_d_l__timer_8h_1a5cc109e24ba0c46f6becb28353cd8921" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SDL_TICKS_PASSED(A,<sp/>B)<sp/><sp/>((Sint32)((B)<sp/>-<sp/>(A))<sp/>&lt;=<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="_s_d_l__timer_8h_1a2dbeb63c4f0564811a4adf3938808977" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="_s_d_l__stdinc_8h_1ac006cf2bd55a42a9cc8ae9f123aa7e13" kindref="member">Uint64</ref><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__timer_8h_1a2dbeb63c4f0564811a4adf3938808977" kindref="member">SDL_GetPerformanceCounter</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="134" refid="_s_d_l__timer_8h_1a507ebea12e31dacc9f85f7d9febe0efb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="_s_d_l__stdinc_8h_1ac006cf2bd55a42a9cc8ae9f123aa7e13" kindref="member">Uint64</ref><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__timer_8h_1a507ebea12e31dacc9f85f7d9febe0efb" kindref="member">SDL_GetPerformanceFrequency</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="147" refid="_s_d_l__timer_8h_1ae8050b95373b95249064467592ab4e21" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__timer_8h_1ae8050b95373b95249064467592ab4e21" kindref="member">SDL_Delay</ref>(<ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref><sp/>ms);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="157" refid="_s_d_l__timer_8h_1a3c5c867db975d245e4a82fcf0cd7de80" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref><sp/>(<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/>*<sp/><ref refid="_s_d_l__timer_8h_1a3c5c867db975d245e4a82fcf0cd7de80" kindref="member">SDL_TimerCallback</ref>)<sp/>(<ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref><sp/>interval,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="_s_d_l__opengl__glext_8h_1ac7c896d55e93a6cf7ff8524005b4e7b4" kindref="member">param</ref>);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="162" refid="_s_d_l__timer_8h_1a412e8ff8a6c89615ba8f9486b292213a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__timer_8h_1a412e8ff8a6c89615ba8f9486b292213a" kindref="member">SDL_TimerID</ref>;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="196" refid="_s_d_l__timer_8h_1a56ceea49587e3fa5796b2e4bf85603b8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="_s_d_l__timer_8h_1a412e8ff8a6c89615ba8f9486b292213a" kindref="member">SDL_TimerID</ref><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__timer_8h_1a56ceea49587e3fa5796b2e4bf85603b8" kindref="member">SDL_AddTimer</ref>(<ref refid="_s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d" kindref="member">Uint32</ref><sp/>interval,</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_d_l__timer_8h_1a3c5c867db975d245e4a82fcf0cd7de80" kindref="member">SDL_TimerCallback</ref><sp/>callback,</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="_s_d_l__opengl__glext_8h_1ac7c896d55e93a6cf7ff8524005b4e7b4" kindref="member">param</ref>);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="211" refid="_s_d_l__timer_8h_1afe8d418e59a24ae6ad820b92137ab9b2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__timer_8h_1afe8d418e59a24ae6ad820b92137ab9b2" kindref="member">SDL_RemoveTimer</ref>(<ref refid="_s_d_l__timer_8h_1a412e8ff8a6c89615ba8f9486b292213a" kindref="member">SDL_TimerID</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Ends<sp/>C<sp/>function<sp/>definitions<sp/>when<sp/>using<sp/>C++<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="close__code_8h" kindref="compound">close_code.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>SDL_timer_h_<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>vi:<sp/>set<sp/>ts=4<sp/>sw=4<sp/>expandtab:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="D:/RayTracing/include/SDL_timer.h"/>
  </compounddef>
</doxygen>
