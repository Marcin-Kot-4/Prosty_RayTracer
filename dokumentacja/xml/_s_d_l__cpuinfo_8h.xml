<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="_s_d_l__cpuinfo_8h" kind="file" language="C++">
    <compoundname>SDL_cpuinfo.h</compoundname>
    <includes refid="_s_d_l__stdinc_8h" local="yes">SDL_stdinc.h</includes>
    <includes refid="begin__code_8h" local="yes">begin_code.h</includes>
    <includes refid="close__code_8h" local="yes">close_code.h</includes>
    <includedby refid="_s_d_l_8h" local="yes">D:/RayTracing/include/SDL.h</includedby>
    <incdepgraph>
      <node id="3">
        <label>SDL_config.h</label>
        <link refid="_s_d_l__config_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>D:/RayTracing/include/SDL_cpuinfo.h</label>
        <link refid="_s_d_l__cpuinfo_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>SDL_platform.h</label>
        <link refid="_s_d_l__platform_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>SDL_stdinc.h</label>
        <link refid="_s_d_l__stdinc_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>begin_code.h</label>
        <link refid="begin__code_8h"/>
      </node>
      <node id="6">
        <label>close_code.h</label>
        <link refid="close__code_8h"/>
      </node>
      <node id="8">
        <label>stdarg.h</label>
      </node>
      <node id="7">
        <label>stddef.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4">
        <label>D:/RayTracing/CApp.cpp</label>
        <link refid="_c_app_8cpp"/>
      </node>
      <node id="3">
        <label>D:/RayTracing/CApp.h</label>
        <link refid="_c_app_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>D:/RayTracing/RayTrace/Image.cpp</label>
        <link refid="_image_8cpp"/>
      </node>
      <node id="6">
        <label>D:/RayTracing/RayTrace/Image.h</label>
        <link refid="_image_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>D:/RayTracing/RayTrace/Scene.cpp</label>
        <link refid="_scene_8cpp"/>
      </node>
      <node id="8">
        <label>D:/RayTracing/RayTrace/Scene.h</label>
        <link refid="_scene_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>D:/RayTracing/RayTrace/Textures/textureimage.cpp</label>
        <link refid="textureimage_8cpp"/>
      </node>
      <node id="10">
        <label>D:/RayTracing/RayTrace/Textures/textureimage.h</label>
        <link refid="textureimage_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>D:/RayTracing/include/SDL.h</label>
        <link refid="_s_d_l_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>D:/RayTracing/include/SDL_cpuinfo.h</label>
        <link refid="_s_d_l__cpuinfo_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>D:/RayTracing/include/SDL_test.h</label>
        <link refid="_s_d_l__test_8h"/>
      </node>
      <node id="13">
        <label>D:/RayTracing/include/SDL_test_common.h</label>
        <link refid="_s_d_l__test__common_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>D:/RayTracing/include/SDL_test_compare.h</label>
        <link refid="_s_d_l__test__compare_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>D:/RayTracing/include/SDL_test_images.h</label>
        <link refid="_s_d_l__test__images_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>D:/RayTracing/main.cpp</label>
        <link refid="main_8cpp"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="_s_d_l__cpuinfo_8h_1a05d74b2aab28d821ea7f3f78372fd00e" prot="public" static="no">
        <name>SDL_CACHELINE_SIZE</name>
        <initializer>128</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_cpuinfo.h" line="129" column="9" bodyfile="D:/RayTracing/include/SDL_cpuinfo.h" bodystart="129" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_s_d_l__cpuinfo_8h_1a888cf77e53a67803402e1740a9639bd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_GetCPUCount</definition>
        <argsstring>(void)</argsstring>
        <name>SDL_GetCPUCount</name>
        <param>
          <type><ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the number of CPU cores available.</para>
<para><simplesect kind="return"><para>the total number of logical CPU cores. On CPUs that include technologies such as hyperthreading, the number of logical cores may be more than the number of physical cores.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_cpuinfo.h" line="140" column="29" declfile="D:/RayTracing/include/SDL_cpuinfo.h" declline="140" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__cpuinfo_8h_1aa699924d6c33d2cac8f1983c4ae4091c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_GetCPUCacheLineSize</definition>
        <argsstring>(void)</argsstring>
        <name>SDL_GetCPUCacheLineSize</name>
        <param>
          <type><ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine the L1 cache line size of the CPU.</para>
<para>This is useful for determining multi-threaded structure padding or SIMD prefetch sizes.</para>
<para><simplesect kind="return"><para>the L1 cache line size of the CPU, in bytes.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_cpuinfo.h" line="152" column="29" declfile="D:/RayTracing/include/SDL_cpuinfo.h" declline="152" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__cpuinfo_8h_1afea666a39b6be7821303adcf16e83c47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC SDL_bool SDLCALL SDL_HasRDTSC</definition>
        <argsstring>(void)</argsstring>
        <name>SDL_HasRDTSC</name>
        <param>
          <type><ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine whether the CPU has the RDTSC instruction.</para>
<para>This always returns false on CPUs that aren&apos;t using Intel instruction sets.</para>
<para><simplesect kind="return"><para>SDL_TRUE if the CPU has the RDTSC instruction or SDL_FALSE if not.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1a57efd279a93553cf43a54e3a49db6305" kindref="member">SDL_Has3DNow</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1a9bc2024dc37b1d318eb197c161f8e50b" kindref="member">SDL_HasAltiVec</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1aec739a6c622987314d9a22899c4ba673" kindref="member">SDL_HasAVX</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1a1fa7d982a27fb5a29fc1b291fc1054f4" kindref="member">SDL_HasAVX2</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1aecec2f1434aa2eb5c82f974880f5181f" kindref="member">SDL_HasMMX</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1aed4b71a601e3a12786a5280f59c0e26d" kindref="member">SDL_HasSSE</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1aadc66ce3d29c669f6c78ee17c592336e" kindref="member">SDL_HasSSE2</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1ab0dfbc5d529ba0b65d1fff744da69f5e" kindref="member">SDL_HasSSE3</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1a6719853bee3dd03b8823540705a55932" kindref="member">SDL_HasSSE41</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1a9fea35e1593bb7981cdc1da4d0b2dccb" kindref="member">SDL_HasSSE42</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_cpuinfo.h" line="174" column="34" declfile="D:/RayTracing/include/SDL_cpuinfo.h" declline="174" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__cpuinfo_8h_1a9bc2024dc37b1d318eb197c161f8e50b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC SDL_bool SDLCALL SDL_HasAltiVec</definition>
        <argsstring>(void)</argsstring>
        <name>SDL_HasAltiVec</name>
        <param>
          <type><ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine whether the CPU has AltiVec features.</para>
<para>This always returns false on CPUs that aren&apos;t using PowerPC instruction sets.</para>
<para><simplesect kind="return"><para>SDL_TRUE if the CPU has AltiVec features or SDL_FALSE if not.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1a57efd279a93553cf43a54e3a49db6305" kindref="member">SDL_Has3DNow</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1aec739a6c622987314d9a22899c4ba673" kindref="member">SDL_HasAVX</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1a1fa7d982a27fb5a29fc1b291fc1054f4" kindref="member">SDL_HasAVX2</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1aecec2f1434aa2eb5c82f974880f5181f" kindref="member">SDL_HasMMX</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1afea666a39b6be7821303adcf16e83c47" kindref="member">SDL_HasRDTSC</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1aed4b71a601e3a12786a5280f59c0e26d" kindref="member">SDL_HasSSE</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1aadc66ce3d29c669f6c78ee17c592336e" kindref="member">SDL_HasSSE2</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1ab0dfbc5d529ba0b65d1fff744da69f5e" kindref="member">SDL_HasSSE3</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1a6719853bee3dd03b8823540705a55932" kindref="member">SDL_HasSSE41</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1a9fea35e1593bb7981cdc1da4d0b2dccb" kindref="member">SDL_HasSSE42</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_cpuinfo.h" line="197" column="34" declfile="D:/RayTracing/include/SDL_cpuinfo.h" declline="197" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__cpuinfo_8h_1aecec2f1434aa2eb5c82f974880f5181f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC SDL_bool SDLCALL SDL_HasMMX</definition>
        <argsstring>(void)</argsstring>
        <name>SDL_HasMMX</name>
        <param>
          <type><ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine whether the CPU has MMX features.</para>
<para>This always returns false on CPUs that aren&apos;t using Intel instruction sets.</para>
<para><simplesect kind="return"><para>SDL_TRUE if the CPU has MMX features or SDL_FALSE if not.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1a57efd279a93553cf43a54e3a49db6305" kindref="member">SDL_Has3DNow</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1a9bc2024dc37b1d318eb197c161f8e50b" kindref="member">SDL_HasAltiVec</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1aec739a6c622987314d9a22899c4ba673" kindref="member">SDL_HasAVX</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1a1fa7d982a27fb5a29fc1b291fc1054f4" kindref="member">SDL_HasAVX2</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1afea666a39b6be7821303adcf16e83c47" kindref="member">SDL_HasRDTSC</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1aed4b71a601e3a12786a5280f59c0e26d" kindref="member">SDL_HasSSE</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1aadc66ce3d29c669f6c78ee17c592336e" kindref="member">SDL_HasSSE2</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1ab0dfbc5d529ba0b65d1fff744da69f5e" kindref="member">SDL_HasSSE3</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1a6719853bee3dd03b8823540705a55932" kindref="member">SDL_HasSSE41</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1a9fea35e1593bb7981cdc1da4d0b2dccb" kindref="member">SDL_HasSSE42</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_cpuinfo.h" line="219" column="34" declfile="D:/RayTracing/include/SDL_cpuinfo.h" declline="219" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__cpuinfo_8h_1a57efd279a93553cf43a54e3a49db6305" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC SDL_bool SDLCALL SDL_Has3DNow</definition>
        <argsstring>(void)</argsstring>
        <name>SDL_Has3DNow</name>
        <param>
          <type><ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine whether the CPU has 3DNow! features.</para>
<para>This always returns false on CPUs that aren&apos;t using AMD instruction sets.</para>
<para><simplesect kind="return"><para>SDL_TRUE if the CPU has 3DNow! features or SDL_FALSE if not.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1a9bc2024dc37b1d318eb197c161f8e50b" kindref="member">SDL_HasAltiVec</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1aec739a6c622987314d9a22899c4ba673" kindref="member">SDL_HasAVX</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1a1fa7d982a27fb5a29fc1b291fc1054f4" kindref="member">SDL_HasAVX2</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1aecec2f1434aa2eb5c82f974880f5181f" kindref="member">SDL_HasMMX</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1afea666a39b6be7821303adcf16e83c47" kindref="member">SDL_HasRDTSC</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1aed4b71a601e3a12786a5280f59c0e26d" kindref="member">SDL_HasSSE</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1aadc66ce3d29c669f6c78ee17c592336e" kindref="member">SDL_HasSSE2</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1ab0dfbc5d529ba0b65d1fff744da69f5e" kindref="member">SDL_HasSSE3</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1a6719853bee3dd03b8823540705a55932" kindref="member">SDL_HasSSE41</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1a9fea35e1593bb7981cdc1da4d0b2dccb" kindref="member">SDL_HasSSE42</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_cpuinfo.h" line="241" column="34" declfile="D:/RayTracing/include/SDL_cpuinfo.h" declline="241" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__cpuinfo_8h_1aed4b71a601e3a12786a5280f59c0e26d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC SDL_bool SDLCALL SDL_HasSSE</definition>
        <argsstring>(void)</argsstring>
        <name>SDL_HasSSE</name>
        <param>
          <type><ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine whether the CPU has SSE features.</para>
<para>This always returns false on CPUs that aren&apos;t using Intel instruction sets.</para>
<para><simplesect kind="return"><para>SDL_TRUE if the CPU has SSE features or SDL_FALSE if not.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1a57efd279a93553cf43a54e3a49db6305" kindref="member">SDL_Has3DNow</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1a9bc2024dc37b1d318eb197c161f8e50b" kindref="member">SDL_HasAltiVec</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1aec739a6c622987314d9a22899c4ba673" kindref="member">SDL_HasAVX</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1a1fa7d982a27fb5a29fc1b291fc1054f4" kindref="member">SDL_HasAVX2</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1aecec2f1434aa2eb5c82f974880f5181f" kindref="member">SDL_HasMMX</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1afea666a39b6be7821303adcf16e83c47" kindref="member">SDL_HasRDTSC</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1aadc66ce3d29c669f6c78ee17c592336e" kindref="member">SDL_HasSSE2</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1ab0dfbc5d529ba0b65d1fff744da69f5e" kindref="member">SDL_HasSSE3</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1a6719853bee3dd03b8823540705a55932" kindref="member">SDL_HasSSE41</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1a9fea35e1593bb7981cdc1da4d0b2dccb" kindref="member">SDL_HasSSE42</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_cpuinfo.h" line="263" column="34" declfile="D:/RayTracing/include/SDL_cpuinfo.h" declline="263" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__cpuinfo_8h_1aadc66ce3d29c669f6c78ee17c592336e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC SDL_bool SDLCALL SDL_HasSSE2</definition>
        <argsstring>(void)</argsstring>
        <name>SDL_HasSSE2</name>
        <param>
          <type><ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine whether the CPU has SSE2 features.</para>
<para>This always returns false on CPUs that aren&apos;t using Intel instruction sets.</para>
<para><simplesect kind="return"><para>SDL_TRUE if the CPU has SSE2 features or SDL_FALSE if not.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1a57efd279a93553cf43a54e3a49db6305" kindref="member">SDL_Has3DNow</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1a9bc2024dc37b1d318eb197c161f8e50b" kindref="member">SDL_HasAltiVec</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1aec739a6c622987314d9a22899c4ba673" kindref="member">SDL_HasAVX</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1a1fa7d982a27fb5a29fc1b291fc1054f4" kindref="member">SDL_HasAVX2</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1aecec2f1434aa2eb5c82f974880f5181f" kindref="member">SDL_HasMMX</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1afea666a39b6be7821303adcf16e83c47" kindref="member">SDL_HasRDTSC</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1aed4b71a601e3a12786a5280f59c0e26d" kindref="member">SDL_HasSSE</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1ab0dfbc5d529ba0b65d1fff744da69f5e" kindref="member">SDL_HasSSE3</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1a6719853bee3dd03b8823540705a55932" kindref="member">SDL_HasSSE41</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1a9fea35e1593bb7981cdc1da4d0b2dccb" kindref="member">SDL_HasSSE42</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_cpuinfo.h" line="285" column="34" declfile="D:/RayTracing/include/SDL_cpuinfo.h" declline="285" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__cpuinfo_8h_1ab0dfbc5d529ba0b65d1fff744da69f5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC SDL_bool SDLCALL SDL_HasSSE3</definition>
        <argsstring>(void)</argsstring>
        <name>SDL_HasSSE3</name>
        <param>
          <type><ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine whether the CPU has SSE3 features.</para>
<para>This always returns false on CPUs that aren&apos;t using Intel instruction sets.</para>
<para><simplesect kind="return"><para>SDL_TRUE if the CPU has SSE3 features or SDL_FALSE if not.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1a57efd279a93553cf43a54e3a49db6305" kindref="member">SDL_Has3DNow</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1a9bc2024dc37b1d318eb197c161f8e50b" kindref="member">SDL_HasAltiVec</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1aec739a6c622987314d9a22899c4ba673" kindref="member">SDL_HasAVX</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1a1fa7d982a27fb5a29fc1b291fc1054f4" kindref="member">SDL_HasAVX2</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1aecec2f1434aa2eb5c82f974880f5181f" kindref="member">SDL_HasMMX</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1afea666a39b6be7821303adcf16e83c47" kindref="member">SDL_HasRDTSC</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1aed4b71a601e3a12786a5280f59c0e26d" kindref="member">SDL_HasSSE</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1aadc66ce3d29c669f6c78ee17c592336e" kindref="member">SDL_HasSSE2</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1a6719853bee3dd03b8823540705a55932" kindref="member">SDL_HasSSE41</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1a9fea35e1593bb7981cdc1da4d0b2dccb" kindref="member">SDL_HasSSE42</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_cpuinfo.h" line="307" column="34" declfile="D:/RayTracing/include/SDL_cpuinfo.h" declline="307" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__cpuinfo_8h_1a6719853bee3dd03b8823540705a55932" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC SDL_bool SDLCALL SDL_HasSSE41</definition>
        <argsstring>(void)</argsstring>
        <name>SDL_HasSSE41</name>
        <param>
          <type><ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine whether the CPU has SSE4.1 features.</para>
<para>This always returns false on CPUs that aren&apos;t using Intel instruction sets.</para>
<para><simplesect kind="return"><para>SDL_TRUE if the CPU has SSE4.1 features or SDL_FALSE if not.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1a57efd279a93553cf43a54e3a49db6305" kindref="member">SDL_Has3DNow</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1a9bc2024dc37b1d318eb197c161f8e50b" kindref="member">SDL_HasAltiVec</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1aec739a6c622987314d9a22899c4ba673" kindref="member">SDL_HasAVX</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1a1fa7d982a27fb5a29fc1b291fc1054f4" kindref="member">SDL_HasAVX2</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1aecec2f1434aa2eb5c82f974880f5181f" kindref="member">SDL_HasMMX</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1afea666a39b6be7821303adcf16e83c47" kindref="member">SDL_HasRDTSC</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1aed4b71a601e3a12786a5280f59c0e26d" kindref="member">SDL_HasSSE</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1aadc66ce3d29c669f6c78ee17c592336e" kindref="member">SDL_HasSSE2</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1ab0dfbc5d529ba0b65d1fff744da69f5e" kindref="member">SDL_HasSSE3</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1a9fea35e1593bb7981cdc1da4d0b2dccb" kindref="member">SDL_HasSSE42</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_cpuinfo.h" line="329" column="34" declfile="D:/RayTracing/include/SDL_cpuinfo.h" declline="329" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__cpuinfo_8h_1a9fea35e1593bb7981cdc1da4d0b2dccb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC SDL_bool SDLCALL SDL_HasSSE42</definition>
        <argsstring>(void)</argsstring>
        <name>SDL_HasSSE42</name>
        <param>
          <type><ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine whether the CPU has SSE4.2 features.</para>
<para>This always returns false on CPUs that aren&apos;t using Intel instruction sets.</para>
<para><simplesect kind="return"><para>SDL_TRUE if the CPU has SSE4.2 features or SDL_FALSE if not.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.0.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1a57efd279a93553cf43a54e3a49db6305" kindref="member">SDL_Has3DNow</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1a9bc2024dc37b1d318eb197c161f8e50b" kindref="member">SDL_HasAltiVec</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1aec739a6c622987314d9a22899c4ba673" kindref="member">SDL_HasAVX</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1a1fa7d982a27fb5a29fc1b291fc1054f4" kindref="member">SDL_HasAVX2</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1aecec2f1434aa2eb5c82f974880f5181f" kindref="member">SDL_HasMMX</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1afea666a39b6be7821303adcf16e83c47" kindref="member">SDL_HasRDTSC</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1aed4b71a601e3a12786a5280f59c0e26d" kindref="member">SDL_HasSSE</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1aadc66ce3d29c669f6c78ee17c592336e" kindref="member">SDL_HasSSE2</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1ab0dfbc5d529ba0b65d1fff744da69f5e" kindref="member">SDL_HasSSE3</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1a6719853bee3dd03b8823540705a55932" kindref="member">SDL_HasSSE41</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_cpuinfo.h" line="351" column="34" declfile="D:/RayTracing/include/SDL_cpuinfo.h" declline="351" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__cpuinfo_8h_1aec739a6c622987314d9a22899c4ba673" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC SDL_bool SDLCALL SDL_HasAVX</definition>
        <argsstring>(void)</argsstring>
        <name>SDL_HasAVX</name>
        <param>
          <type><ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine whether the CPU has AVX features.</para>
<para>This always returns false on CPUs that aren&apos;t using Intel instruction sets.</para>
<para><simplesect kind="return"><para>SDL_TRUE if the CPU has AVX features or SDL_FALSE if not.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.2.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1a57efd279a93553cf43a54e3a49db6305" kindref="member">SDL_Has3DNow</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1a9bc2024dc37b1d318eb197c161f8e50b" kindref="member">SDL_HasAltiVec</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1a1fa7d982a27fb5a29fc1b291fc1054f4" kindref="member">SDL_HasAVX2</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1aecec2f1434aa2eb5c82f974880f5181f" kindref="member">SDL_HasMMX</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1afea666a39b6be7821303adcf16e83c47" kindref="member">SDL_HasRDTSC</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1aed4b71a601e3a12786a5280f59c0e26d" kindref="member">SDL_HasSSE</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1aadc66ce3d29c669f6c78ee17c592336e" kindref="member">SDL_HasSSE2</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1ab0dfbc5d529ba0b65d1fff744da69f5e" kindref="member">SDL_HasSSE3</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1a6719853bee3dd03b8823540705a55932" kindref="member">SDL_HasSSE41</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1a9fea35e1593bb7981cdc1da4d0b2dccb" kindref="member">SDL_HasSSE42</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_cpuinfo.h" line="373" column="34" declfile="D:/RayTracing/include/SDL_cpuinfo.h" declline="373" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__cpuinfo_8h_1a1fa7d982a27fb5a29fc1b291fc1054f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC SDL_bool SDLCALL SDL_HasAVX2</definition>
        <argsstring>(void)</argsstring>
        <name>SDL_HasAVX2</name>
        <param>
          <type><ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine whether the CPU has AVX2 features.</para>
<para>This always returns false on CPUs that aren&apos;t using Intel instruction sets.</para>
<para><simplesect kind="return"><para>SDL_TRUE if the CPU has AVX2 features or SDL_FALSE if not.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.4.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1a57efd279a93553cf43a54e3a49db6305" kindref="member">SDL_Has3DNow</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1a9bc2024dc37b1d318eb197c161f8e50b" kindref="member">SDL_HasAltiVec</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1aec739a6c622987314d9a22899c4ba673" kindref="member">SDL_HasAVX</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1aecec2f1434aa2eb5c82f974880f5181f" kindref="member">SDL_HasMMX</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1afea666a39b6be7821303adcf16e83c47" kindref="member">SDL_HasRDTSC</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1aed4b71a601e3a12786a5280f59c0e26d" kindref="member">SDL_HasSSE</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1aadc66ce3d29c669f6c78ee17c592336e" kindref="member">SDL_HasSSE2</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1ab0dfbc5d529ba0b65d1fff744da69f5e" kindref="member">SDL_HasSSE3</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1a6719853bee3dd03b8823540705a55932" kindref="member">SDL_HasSSE41</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1a9fea35e1593bb7981cdc1da4d0b2dccb" kindref="member">SDL_HasSSE42</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_cpuinfo.h" line="395" column="34" declfile="D:/RayTracing/include/SDL_cpuinfo.h" declline="395" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__cpuinfo_8h_1a5108ee8d59a6d8a0a978f96b799bd3b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC SDL_bool SDLCALL SDL_HasAVX512F</definition>
        <argsstring>(void)</argsstring>
        <name>SDL_HasAVX512F</name>
        <param>
          <type><ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine whether the CPU has AVX-512F (foundation) features.</para>
<para>This always returns false on CPUs that aren&apos;t using Intel instruction sets.</para>
<para><simplesect kind="return"><para>SDL_TRUE if the CPU has AVX-512F features or SDL_FALSE if not.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.9.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1aec739a6c622987314d9a22899c4ba673" kindref="member">SDL_HasAVX</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_cpuinfo.h" line="408" column="34" declfile="D:/RayTracing/include/SDL_cpuinfo.h" declline="408" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__cpuinfo_8h_1aa5356bc82108c60c3bee504ee63fda7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC SDL_bool SDLCALL SDL_HasARMSIMD</definition>
        <argsstring>(void)</argsstring>
        <name>SDL_HasARMSIMD</name>
        <param>
          <type><ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine whether the CPU has ARM SIMD (ARMv6) features.</para>
<para>This is different from ARM NEON, which is a different instruction set.</para>
<para>This always returns false on CPUs that aren&apos;t using ARM instruction sets.</para>
<para><simplesect kind="return"><para>SDL_TRUE if the CPU has ARM SIMD features or SDL_FALSE if not.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.12.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1ac5096ea77af07eb4a9d4c754289b2a2b" kindref="member">SDL_HasNEON</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_cpuinfo.h" line="423" column="34" declfile="D:/RayTracing/include/SDL_cpuinfo.h" declline="423" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__cpuinfo_8h_1ac5096ea77af07eb4a9d4c754289b2a2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC SDL_bool SDLCALL SDL_HasNEON</definition>
        <argsstring>(void)</argsstring>
        <name>SDL_HasNEON</name>
        <param>
          <type><ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine whether the CPU has NEON (ARM SIMD) features.</para>
<para>This always returns false on CPUs that aren&apos;t using ARM instruction sets.</para>
<para><simplesect kind="return"><para>SDL_TRUE if the CPU has ARM NEON features or SDL_FALSE if not.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.6. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_cpuinfo.h" line="434" column="34" declfile="D:/RayTracing/include/SDL_cpuinfo.h" declline="434" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__cpuinfo_8h_1af672834675f296bed0e226113695bebd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> int <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC int SDLCALL SDL_GetSystemRAM</definition>
        <argsstring>(void)</argsstring>
        <name>SDL_GetSystemRAM</name>
        <param>
          <type><ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the amount of RAM configured in the system.</para>
<para><simplesect kind="return"><para>the amount of RAM configured in the system in MB.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.1. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_cpuinfo.h" line="443" column="29" declfile="D:/RayTracing/include/SDL_cpuinfo.h" declline="443" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__cpuinfo_8h_1a99cf6527faa408c398a5a678aaf892d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__config_8h_1a7c94ea6f8948649f8d181ae55911eeaf" kindref="member">size_t</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC size_t SDLCALL SDL_SIMDGetAlignment</definition>
        <argsstring>(void)</argsstring>
        <name>SDL_SIMDGetAlignment</name>
        <param>
          <type><ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Report the alignment this system needs for SIMD allocations.</para>
<para>This will return the minimum number of bytes to which a pointer must be aligned to be compatible with SIMD instructions on the current machine. For example, if the machine supports SSE only, it will return 16, but if it supports AVX-512F, it&apos;ll return 64 (etc). This only reports values for instruction sets SDL knows about, so if your SDL build doesn&apos;t have <ref refid="_s_d_l__cpuinfo_8h_1a5108ee8d59a6d8a0a978f96b799bd3b1" kindref="member">SDL_HasAVX512F()</ref>, then it might return 16 for the SSE support it sees and not 64 for the AVX-512 instructions that exist but SDL doesn&apos;t know about. Plan accordingly.</para>
<para><simplesect kind="return"><para>the alignment in bytes needed for available, known SIMD instructions.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.10. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_cpuinfo.h" line="462" column="32" declfile="D:/RayTracing/include/SDL_cpuinfo.h" declline="462" declcolumn="32"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__cpuinfo_8h_1ac2e013a734c8108fa7bd80c5c80abd71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref> *<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC void *SDLCALL SDL_SIMDAlloc</definition>
        <argsstring>(const size_t len)</argsstring>
        <name>SDL_SIMDAlloc</name>
        <param>
          <type>const <ref refid="_s_d_l__config_8h_1a7c94ea6f8948649f8d181ae55911eeaf" kindref="member">size_t</ref></type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate memory in a SIMD-friendly way.</para>
<para>This will allocate a block of memory that is suitable for use with SIMD instructions. Specifically, it will be properly aligned and padded for the system&apos;s supported vector instructions.</para>
<para>The memory returned will be padded such that it is safe to read or write an incomplete vector at the end of the memory block. This can be useful so you don&apos;t have to drop back to a scalar fallback at the end of your SIMD processing loop to deal with the final elements without overflowing the allocated buffer.</para>
<para>You must free this memory with SDL_FreeSIMD(), not free() or <ref refid="_s_d_l__stdinc_8h_1a0e4ade894d550ada1fa19dc2d46e88b8" kindref="member">SDL_free()</ref> or delete[], etc.</para>
<para>Note that SDL will only deal with SIMD instruction sets it is aware of; for example, SDL 2.0.8 knows that SSE wants 16-byte vectors (<ref refid="_s_d_l__cpuinfo_8h_1aed4b71a601e3a12786a5280f59c0e26d" kindref="member">SDL_HasSSE()</ref>), and AVX2 wants 32 bytes (<ref refid="_s_d_l__cpuinfo_8h_1a1fa7d982a27fb5a29fc1b291fc1054f4" kindref="member">SDL_HasAVX2()</ref>), but doesn&apos;t know that AVX-512 wants<orderedlist>
<listitem><para>To be clear: if you can&apos;t decide to use an instruction set with an SDL_Has*() function, don&apos;t use that instruction set with memory allocated through here.</para>
</listitem></orderedlist>
</para>
<para>SDL_AllocSIMD(0) will return a non-NULL pointer, assuming the system isn&apos;t out of memory, but you are not allowed to dereference it (because you only own zero bytes of that buffer).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>The length, in bytes, of the block to allocate. The actual allocated block might be larger due to padding, etc. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to the newly-allocated block, NULL if out of memory.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.10.</para>
</simplesect>
<simplesect kind="see"><para>SDL_SIMDAlignment </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1a674d89c2b103e08a7c94b96103cc27f8" kindref="member">SDL_SIMDRealloc</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1a5bd4b538ff298ee8f2c31ed9da3253d4" kindref="member">SDL_SIMDFree</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_cpuinfo.h" line="501" column="31" declfile="D:/RayTracing/include/SDL_cpuinfo.h" declline="501" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__cpuinfo_8h_1a674d89c2b103e08a7c94b96103cc27f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref> *<ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC void *SDLCALL SDL_SIMDRealloc</definition>
        <argsstring>(void *mem, const size_t len)</argsstring>
        <name>SDL_SIMDRealloc</name>
        <param>
          <type><ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref> *</type>
          <declname>mem</declname>
        </param>
        <param>
          <type>const <ref refid="_s_d_l__config_8h_1a7c94ea6f8948649f8d181ae55911eeaf" kindref="member">size_t</ref></type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reallocate memory obtained from SDL_SIMDAlloc</para>
<para>It is not valid to use this function on a pointer from anything but <ref refid="_s_d_l__cpuinfo_8h_1ac2e013a734c8108fa7bd80c5c80abd71" kindref="member">SDL_SIMDAlloc()</ref>. It can&apos;t be used on pointers from malloc, realloc, SDL_malloc, memalign, new[], etc.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mem</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer obtained from SDL_SIMDAlloc. This function also accepts NULL, at which point this function is the same as calling SDL_SIMDAlloc with a NULL pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>The length, in bytes, of the block to allocated. The actual allocated block might be larger due to padding, etc. Passing 0 will return a non-NULL pointer, assuming the system isn&apos;t out of memory. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to the newly-reallocated block, NULL if out of memory.</para>
</simplesect>
<simplesect kind="since"><para>This function is available since SDL 2.0.14.</para>
</simplesect>
<simplesect kind="see"><para>SDL_SIMDAlignment </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1ac2e013a734c8108fa7bd80c5c80abd71" kindref="member">SDL_SIMDAlloc</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1a5bd4b538ff298ee8f2c31ed9da3253d4" kindref="member">SDL_SIMDFree</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_cpuinfo.h" line="525" column="31" declfile="D:/RayTracing/include/SDL_cpuinfo.h" declline="525" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__cpuinfo_8h_1a5bd4b538ff298ee8f2c31ed9da3253d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref> <ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref> <ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref></type>
        <definition>DECLSPEC void SDLCALL SDL_SIMDFree</definition>
        <argsstring>(void *ptr)</argsstring>
        <name>SDL_SIMDFree</name>
        <param>
          <type><ref refid="_s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95" kindref="member">void</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deallocate memory obtained from SDL_SIMDAlloc</para>
<para>It is not valid to use this function on a pointer from anything but <ref refid="_s_d_l__cpuinfo_8h_1ac2e013a734c8108fa7bd80c5c80abd71" kindref="member">SDL_SIMDAlloc()</ref> or <ref refid="_s_d_l__cpuinfo_8h_1a674d89c2b103e08a7c94b96103cc27f8" kindref="member">SDL_SIMDRealloc()</ref>. It can&apos;t be used on pointers from malloc, realloc, SDL_malloc, memalign, new[], etc.</para>
<para>However, SDL_SIMDFree(NULL) is a legal no-op.</para>
<para>The memory pointed to by <computeroutput>ptr</computeroutput> is no longer valid for access upon return, and may be returned to the system or reused by a future allocation. The pointer passed to this function is no longer safe to dereference once this function returns, and should be discarded.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer, returned from SDL_SIMDAlloc or SDL_SIMDRealloc, to deallocate. NULL is a legal no-op.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>This function is available since SDL 2.0.10.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1ac2e013a734c8108fa7bd80c5c80abd71" kindref="member">SDL_SIMDAlloc</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_s_d_l__cpuinfo_8h_1a674d89c2b103e08a7c94b96103cc27f8" kindref="member">SDL_SIMDRealloc</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/RayTracing/include/SDL_cpuinfo.h" line="549" column="30" declfile="D:/RayTracing/include/SDL_cpuinfo.h" declline="549" declcolumn="30"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>CPU feature detection for SDL. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/>Simple<sp/>DirectMedia<sp/>Layer</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/>Copyright<sp/>(C)<sp/>1997-2022<sp/>Sam<sp/>Lantinga<sp/>&lt;slouken@libsdl.org&gt;</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/>This<sp/>software<sp/>is<sp/>provided<sp/>&apos;as-is&apos;,<sp/>without<sp/>any<sp/>express<sp/>or<sp/>implied</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/>warranty.<sp/><sp/>In<sp/>no<sp/>event<sp/>will<sp/>the<sp/>authors<sp/>be<sp/>held<sp/>liable<sp/>for<sp/>any<sp/>damages</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/>arising<sp/>from<sp/>the<sp/>use<sp/>of<sp/>this<sp/>software.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/>Permission<sp/>is<sp/>granted<sp/>to<sp/>anyone<sp/>to<sp/>use<sp/>this<sp/>software<sp/>for<sp/>any<sp/>purpose,</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/>including<sp/>commercial<sp/>applications,<sp/>and<sp/>to<sp/>alter<sp/>it<sp/>and<sp/>redistribute<sp/>it</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/>freely,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>restrictions:</highlight></codeline>
<codeline lineno="12"><highlight class="comment"></highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/>1.<sp/>The<sp/>origin<sp/>of<sp/>this<sp/>software<sp/>must<sp/>not<sp/>be<sp/>misrepresented;<sp/>you<sp/>must<sp/>not</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>claim<sp/>that<sp/>you<sp/>wrote<sp/>the<sp/>original<sp/>software.<sp/>If<sp/>you<sp/>use<sp/>this<sp/>software</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>in<sp/>a<sp/>product,<sp/>an<sp/>acknowledgment<sp/>in<sp/>the<sp/>product<sp/>documentation<sp/>would<sp/>be</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>appreciated<sp/>but<sp/>is<sp/>not<sp/>required.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/>2.<sp/>Altered<sp/>source<sp/>versions<sp/>must<sp/>be<sp/>plainly<sp/>marked<sp/>as<sp/>such,<sp/>and<sp/>must<sp/>not<sp/>be</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>misrepresented<sp/>as<sp/>being<sp/>the<sp/>original<sp/>software.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/>3.<sp/>This<sp/>notice<sp/>may<sp/>not<sp/>be<sp/>removed<sp/>or<sp/>altered<sp/>from<sp/>any<sp/>source<sp/>distribution.</highlight></codeline>
<codeline lineno="20"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SDL_cpuinfo_h_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SDL_cpuinfo_h_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_s_d_l__stdinc_8h" kindref="compound">SDL_stdinc.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Need<sp/>to<sp/>do<sp/>this<sp/>here<sp/>because<sp/>intrin.h<sp/>has<sp/>C++<sp/>code<sp/>in<sp/>it<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Visual<sp/>Studio<sp/>2005<sp/>has<sp/>a<sp/>bug<sp/>where<sp/>intrin.h<sp/>conflicts<sp/>with<sp/>winnt.h<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)<sp/>&amp;&amp;<sp/>(_MSC_VER<sp/>&gt;=<sp/>1500)<sp/>&amp;&amp;<sp/>(defined(_M_IX86)<sp/>||<sp/>defined(_M_X64))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__clang__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>As<sp/>of<sp/>Clang<sp/>11,<sp/>&apos;_m_prefetchw&apos;<sp/>is<sp/>conflicting<sp/>with<sp/>the<sp/>winnt.h&apos;s<sp/>version,</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/><sp/><sp/>so<sp/>we<sp/>define<sp/>the<sp/>needed<sp/>&apos;_m_prefetch&apos;<sp/>here<sp/>as<sp/>a<sp/>pseudo-header,<sp/>until<sp/>the<sp/>issue<sp/>is<sp/>fixed.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__PRFCHWINTRIN_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__PRFCHWINTRIN_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a9f04218fe09e6ee659e045b2f11542ed" kindref="member">__inline__</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__attribute__((__always_inline__,<sp/>__nodebug__))</highlight></codeline>
<codeline lineno="44"><highlight class="normal">_m_prefetch(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*__P)</highlight></codeline>
<codeline lineno="45"><highlight class="normal">{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>__builtin_prefetch<sp/>(__P,<sp/>0,<sp/>3<sp/></highlight><highlight class="comment">/*<sp/>_MM_HINT_T0<sp/>*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__PRFCHWINTRIN_H<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__clang__<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;intrin.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_WIN64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__MMX__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__MMX__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__3dNOW__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__3dNOW__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__SSE__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__SSE__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__SSE2__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__SSE2__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__SSE3__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__SSE3__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__MINGW64_VERSION_MAJOR)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;intrin.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(SDL_DISABLE_ARM_NEON_H)<sp/>&amp;&amp;<sp/>defined(__ARM_NEON)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;arm_neon.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>altivec.h<sp/>redefining<sp/>bool<sp/>causes<sp/>a<sp/>number<sp/>of<sp/>problems,<sp/>see<sp/>bugs<sp/>3993<sp/>and<sp/>4392,<sp/>so<sp/>you<sp/>need<sp/>to<sp/>explicitly<sp/>define<sp/>SDL_ENABLE_ALTIVEC_H<sp/>to<sp/>have<sp/>it<sp/>included.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(HAVE_ALTIVEC_H)<sp/>&amp;&amp;<sp/>defined(__ALTIVEC__)<sp/>&amp;&amp;<sp/>!defined(__APPLE_ALTIVEC__)<sp/>&amp;&amp;<sp/>defined(SDL_ENABLE_ALTIVEC_H)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;altivec.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(SDL_DISABLE_ARM_NEON_H)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>defined(__ARM_NEON)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>include<sp/>&lt;arm_neon.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>elif<sp/>defined(__WINDOWS__)<sp/>||<sp/>defined(__WINRT__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Visual<sp/>Studio<sp/>doesn&apos;t<sp/>define<sp/>__ARM_ARCH,<sp/>but<sp/>_M_ARM<sp/>(if<sp/>set,<sp/>always<sp/>7),<sp/>and<sp/>_M_ARM64<sp/>(if<sp/>set,<sp/>always<sp/>1).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>if<sp/>defined(_M_ARM)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/>include<sp/>&lt;armintr.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/>include<sp/>&lt;arm_neon.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>__ARM_NEON<sp/>1<sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>__ARM_NEON<sp/>so<sp/>that<sp/>it<sp/>can<sp/>be<sp/>used<sp/>elsewhere,<sp/>at<sp/>compile<sp/>time<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>if<sp/>defined<sp/>(_M_ARM64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/>include<sp/>&lt;arm64intr.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/>include<sp/>&lt;arm64_neon.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>__ARM_NEON<sp/>1<sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>__ARM_NEON<sp/>so<sp/>that<sp/>it<sp/>can<sp/>be<sp/>used<sp/>elsewhere,<sp/>at<sp/>compile<sp/>time<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>compiler<sp/>version<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__3dNOW__)<sp/>&amp;&amp;<sp/>!defined(SDL_DISABLE_MM3DNOW_H)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;mm3dnow.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(HAVE_IMMINTRIN_H)<sp/>&amp;&amp;<sp/>!defined(SDL_DISABLE_IMMINTRIN_H)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;immintrin.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__MMX__)<sp/>&amp;&amp;<sp/>!defined(SDL_DISABLE_MMINTRIN_H)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;mmintrin.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__SSE__)<sp/>&amp;&amp;<sp/>!defined(SDL_DISABLE_XMMINTRIN_H)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;xmmintrin.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__SSE2__)<sp/>&amp;&amp;<sp/>!defined(SDL_DISABLE_EMMINTRIN_H)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;emmintrin.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__SSE3__)<sp/>&amp;&amp;<sp/>!defined(SDL_DISABLE_PMMINTRIN_H)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;pmmintrin.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>HAVE_IMMINTRIN_H<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="begin__code_8h" kindref="compound">begin_code.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Set<sp/>up<sp/>for<sp/>C<sp/>function<sp/>definitions,<sp/>even<sp/>when<sp/>using<sp/>C++<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>is<sp/>a<sp/>guess<sp/>for<sp/>the<sp/>cacheline<sp/>size<sp/>used<sp/>for<sp/>padding.</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*<sp/>Most<sp/>x86<sp/>processors<sp/>have<sp/>a<sp/>64<sp/>byte<sp/>cache<sp/>line.</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*<sp/>The<sp/>64-bit<sp/>PowerPC<sp/>processors<sp/>have<sp/>a<sp/>128<sp/>byte<sp/>cache<sp/>line.</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/>*<sp/>We&apos;ll<sp/>use<sp/>the<sp/>larger<sp/>value<sp/>to<sp/>be<sp/>generally<sp/>safe.</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129" refid="_s_d_l__cpuinfo_8h_1a05d74b2aab28d821ea7f3f78372fd00e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SDL_CACHELINE_SIZE<sp/><sp/>128</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="140" refid="_s_d_l__cpuinfo_8h_1a888cf77e53a67803402e1740a9639bd7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__cpuinfo_8h_1a888cf77e53a67803402e1740a9639bd7" kindref="member">SDL_GetCPUCount</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="152" refid="_s_d_l__cpuinfo_8h_1aa699924d6c33d2cac8f1983c4ae4091c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__cpuinfo_8h_1aa699924d6c33d2cac8f1983c4ae4091c" kindref="member">SDL_GetCPUCacheLineSize</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="174" refid="_s_d_l__cpuinfo_8h_1afea666a39b6be7821303adcf16e83c47" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__cpuinfo_8h_1afea666a39b6be7821303adcf16e83c47" kindref="member">SDL_HasRDTSC</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="197" refid="_s_d_l__cpuinfo_8h_1a9bc2024dc37b1d318eb197c161f8e50b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__cpuinfo_8h_1a9bc2024dc37b1d318eb197c161f8e50b" kindref="member">SDL_HasAltiVec</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="219" refid="_s_d_l__cpuinfo_8h_1aecec2f1434aa2eb5c82f974880f5181f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__cpuinfo_8h_1aecec2f1434aa2eb5c82f974880f5181f" kindref="member">SDL_HasMMX</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="241" refid="_s_d_l__cpuinfo_8h_1a57efd279a93553cf43a54e3a49db6305" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__cpuinfo_8h_1a57efd279a93553cf43a54e3a49db6305" kindref="member">SDL_Has3DNow</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="263" refid="_s_d_l__cpuinfo_8h_1aed4b71a601e3a12786a5280f59c0e26d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__cpuinfo_8h_1aed4b71a601e3a12786a5280f59c0e26d" kindref="member">SDL_HasSSE</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="285" refid="_s_d_l__cpuinfo_8h_1aadc66ce3d29c669f6c78ee17c592336e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__cpuinfo_8h_1aadc66ce3d29c669f6c78ee17c592336e" kindref="member">SDL_HasSSE2</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="307" refid="_s_d_l__cpuinfo_8h_1ab0dfbc5d529ba0b65d1fff744da69f5e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__cpuinfo_8h_1ab0dfbc5d529ba0b65d1fff744da69f5e" kindref="member">SDL_HasSSE3</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="329" refid="_s_d_l__cpuinfo_8h_1a6719853bee3dd03b8823540705a55932" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__cpuinfo_8h_1a6719853bee3dd03b8823540705a55932" kindref="member">SDL_HasSSE41</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="351" refid="_s_d_l__cpuinfo_8h_1a9fea35e1593bb7981cdc1da4d0b2dccb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__cpuinfo_8h_1a9fea35e1593bb7981cdc1da4d0b2dccb" kindref="member">SDL_HasSSE42</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="373" refid="_s_d_l__cpuinfo_8h_1aec739a6c622987314d9a22899c4ba673" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__cpuinfo_8h_1aec739a6c622987314d9a22899c4ba673" kindref="member">SDL_HasAVX</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="395" refid="_s_d_l__cpuinfo_8h_1a1fa7d982a27fb5a29fc1b291fc1054f4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__cpuinfo_8h_1a1fa7d982a27fb5a29fc1b291fc1054f4" kindref="member">SDL_HasAVX2</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="408" refid="_s_d_l__cpuinfo_8h_1a5108ee8d59a6d8a0a978f96b799bd3b1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__cpuinfo_8h_1a5108ee8d59a6d8a0a978f96b799bd3b1" kindref="member">SDL_HasAVX512F</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="423" refid="_s_d_l__cpuinfo_8h_1aa5356bc82108c60c3bee504ee63fda7e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__cpuinfo_8h_1aa5356bc82108c60c3bee504ee63fda7e" kindref="member">SDL_HasARMSIMD</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="434" refid="_s_d_l__cpuinfo_8h_1ac5096ea77af07eb4a9d4c754289b2a2b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/><ref refid="_s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b" kindref="member">SDL_bool</ref><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__cpuinfo_8h_1ac5096ea77af07eb4a9d4c754289b2a2b" kindref="member">SDL_HasNEON</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="443" refid="_s_d_l__cpuinfo_8h_1af672834675f296bed0e226113695bebd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__cpuinfo_8h_1af672834675f296bed0e226113695bebd" kindref="member">SDL_GetSystemRAM</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="462" refid="_s_d_l__cpuinfo_8h_1a99cf6527faa408c398a5a678aaf892d5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__cpuinfo_8h_1a99cf6527faa408c398a5a678aaf892d5" kindref="member">SDL_SIMDGetAlignment</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="501" refid="_s_d_l__cpuinfo_8h_1ac2e013a734c8108fa7bd80c5c80abd71" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__cpuinfo_8h_1ac2e013a734c8108fa7bd80c5c80abd71" kindref="member">SDL_SIMDAlloc</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl__glext_8h_1a652168017ea9a8bbcead03d5c16269fb" kindref="member">len</ref>);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="525" refid="_s_d_l__cpuinfo_8h_1a674d89c2b103e08a7c94b96103cc27f8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__cpuinfo_8h_1a674d89c2b103e08a7c94b96103cc27f8" kindref="member">SDL_SIMDRealloc</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*mem,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="_s_d_l__opengl__glext_8h_1a652168017ea9a8bbcead03d5c16269fb" kindref="member">len</ref>);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="549" refid="_s_d_l__cpuinfo_8h_1a5bd4b538ff298ee8f2c31ed9da3253d4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185" kindref="member">DECLSPEC</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401" kindref="member">SDLCALL</ref><sp/><ref refid="_s_d_l__cpuinfo_8h_1a5bd4b538ff298ee8f2c31ed9da3253d4" kindref="member">SDL_SIMDFree</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Ends<sp/>C<sp/>function<sp/>definitions<sp/>when<sp/>using<sp/>C++<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal">}</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="close__code_8h" kindref="compound">close_code.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>SDL_cpuinfo_h_<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>vi:<sp/>set<sp/>ts=4<sp/>sw=4<sp/>expandtab:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="D:/RayTracing/include/SDL_cpuinfo.h"/>
  </compounddef>
</doxygen>
