.TH "D:/RayTracing/include/SDL_surface.h" 3 "Mon Jan 24 2022" "Version 1.0" "RayTracer" \" -*- nroff -*-
.ad l
.nh
.SH NAME
D:/RayTracing/include/SDL_surface.h
.SH SYNOPSIS
.br
.PP
\fC#include 'SDL_stdinc\&.h'\fP
.br
\fC#include 'SDL_pixels\&.h'\fP
.br
\fC#include 'SDL_rect\&.h'\fP
.br
\fC#include 'SDL_blendmode\&.h'\fP
.br
\fC#include 'SDL_rwops\&.h'\fP
.br
\fC#include 'begin_code\&.h'\fP
.br
\fC#include 'close_code\&.h'\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBSDL_Surface\fP"
.br
.RI "A collection of pixels used in software blitting\&. "
.in -1c
.SS "Surface flags"
These are the currently supported flags for the \fBSDL_Surface\fP\&. 
.in +1c
.ti -1c
.RI "#define \fBSDL_SWSURFACE\fP   0"
.br
.ti -1c
.RI "#define \fBSDL_PREALLOC\fP   0x00000001"
.br
.ti -1c
.RI "#define \fBSDL_RLEACCEL\fP   0x00000002"
.br
.ti -1c
.RI "#define \fBSDL_DONTFREE\fP   0x00000004"
.br
.ti -1c
.RI "#define \fBSDL_SIMD_ALIGNED\fP   0x00000008"
.br
.ti -1c
.RI "#define \fBSDL_MUSTLOCK\fP(S)   (((S)\->\fBflags\fP & \fBSDL_RLEACCEL\fP) != 0)"
.br
.ti -1c
.RI "#define \fBSDL_LoadBMP\fP(file)   \fBSDL_LoadBMP_RW\fP(\fBSDL_RWFromFile\fP(file, 'rb'), 1)"
.br
.ti -1c
.RI "#define \fBSDL_SaveBMP\fP(surface,  file)           \fBSDL_SaveBMP_RW\fP(surface, \fBSDL_RWFromFile\fP(file, 'wb'), 1)"
.br
.ti -1c
.RI "#define \fBSDL_BlitSurface\fP   \fBSDL_UpperBlit\fP"
.br
.ti -1c
.RI "#define \fBSDL_BlitScaled\fP   \fBSDL_UpperBlitScaled\fP"
.br
.ti -1c
.RI "enum \fBSDL_YUV_CONVERSION_MODE\fP { \fBSDL_YUV_CONVERSION_JPEG\fP, \fBSDL_YUV_CONVERSION_BT601\fP, \fBSDL_YUV_CONVERSION_BT709\fP, \fBSDL_YUV_CONVERSION_AUTOMATIC\fP }"
.br
.RI "The formula used for converting between YUV and RGB\&. "
.ti -1c
.RI "typedef struct \fBSDL_Surface\fP \fBSDL_Surface\fP"
.br
.RI "A collection of pixels used in software blitting\&. "
.ti -1c
.RI "typedef int(\fBSDLCALL\fP * \fBSDL_blit\fP) (struct \fBSDL_Surface\fP *\fBsrc\fP, \fBSDL_Rect\fP *srcrect, struct \fBSDL_Surface\fP *\fBdst\fP, \fBSDL_Rect\fP *dstrect)"
.br
.RI "The type of function used for surface blitting functions\&. "
.ti -1c
.RI "\fBDECLSPEC\fP \fBSDL_Surface\fP *\fBSDLCALL\fP \fBSDL_CreateRGBSurface\fP (\fBUint32\fP \fBflags\fP, int \fBwidth\fP, int \fBheight\fP, int \fBdepth\fP, \fBUint32\fP Rmask, \fBUint32\fP Gmask, \fBUint32\fP Bmask, \fBUint32\fP Amask)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP \fBSDL_Surface\fP *\fBSDLCALL\fP \fBSDL_CreateRGBSurfaceWithFormat\fP (\fBUint32\fP \fBflags\fP, int \fBwidth\fP, int \fBheight\fP, int \fBdepth\fP, \fBUint32\fP \fBformat\fP)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP \fBSDL_Surface\fP *\fBSDLCALL\fP \fBSDL_CreateRGBSurfaceFrom\fP (\fBvoid\fP *\fBpixels\fP, int \fBwidth\fP, int \fBheight\fP, int \fBdepth\fP, int pitch, \fBUint32\fP Rmask, \fBUint32\fP Gmask, \fBUint32\fP Bmask, \fBUint32\fP Amask)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP \fBSDL_Surface\fP *\fBSDLCALL\fP \fBSDL_CreateRGBSurfaceWithFormatFrom\fP (\fBvoid\fP *\fBpixels\fP, int \fBwidth\fP, int \fBheight\fP, int \fBdepth\fP, int pitch, \fBUint32\fP \fBformat\fP)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP \fBvoid\fP \fBSDLCALL\fP \fBSDL_FreeSurface\fP (\fBSDL_Surface\fP *surface)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_SetSurfacePalette\fP (\fBSDL_Surface\fP *surface, \fBSDL_Palette\fP *palette)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_LockSurface\fP (\fBSDL_Surface\fP *surface)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP \fBvoid\fP \fBSDLCALL\fP \fBSDL_UnlockSurface\fP (\fBSDL_Surface\fP *surface)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP \fBSDL_Surface\fP *\fBSDLCALL\fP \fBSDL_LoadBMP_RW\fP (\fBSDL_RWops\fP *\fBsrc\fP, int freesrc)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_SaveBMP_RW\fP (\fBSDL_Surface\fP *surface, \fBSDL_RWops\fP *\fBdst\fP, int freedst)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_SetSurfaceRLE\fP (\fBSDL_Surface\fP *surface, int flag)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP \fBSDL_bool\fP \fBSDLCALL\fP \fBSDL_HasSurfaceRLE\fP (\fBSDL_Surface\fP *surface)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_SetColorKey\fP (\fBSDL_Surface\fP *surface, int flag, \fBUint32\fP key)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP \fBSDL_bool\fP \fBSDLCALL\fP \fBSDL_HasColorKey\fP (\fBSDL_Surface\fP *surface)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_GetColorKey\fP (\fBSDL_Surface\fP *surface, \fBUint32\fP *key)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_SetSurfaceColorMod\fP (\fBSDL_Surface\fP *surface, \fBUint8\fP \fBr\fP, \fBUint8\fP \fBg\fP, \fBUint8\fP \fBb\fP)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_GetSurfaceColorMod\fP (\fBSDL_Surface\fP *surface, \fBUint8\fP *\fBr\fP, \fBUint8\fP *\fBg\fP, \fBUint8\fP *\fBb\fP)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_SetSurfaceAlphaMod\fP (\fBSDL_Surface\fP *surface, \fBUint8\fP \fBalpha\fP)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_GetSurfaceAlphaMod\fP (\fBSDL_Surface\fP *surface, \fBUint8\fP *\fBalpha\fP)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_SetSurfaceBlendMode\fP (\fBSDL_Surface\fP *surface, \fBSDL_BlendMode\fP blendMode)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_GetSurfaceBlendMode\fP (\fBSDL_Surface\fP *surface, \fBSDL_BlendMode\fP *blendMode)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP \fBSDL_bool\fP \fBSDLCALL\fP \fBSDL_SetClipRect\fP (\fBSDL_Surface\fP *surface, const \fBSDL_Rect\fP *rect)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP \fBvoid\fP \fBSDLCALL\fP \fBSDL_GetClipRect\fP (\fBSDL_Surface\fP *surface, \fBSDL_Rect\fP *rect)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP \fBSDL_Surface\fP *\fBSDLCALL\fP \fBSDL_DuplicateSurface\fP (\fBSDL_Surface\fP *surface)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP \fBSDL_Surface\fP *\fBSDLCALL\fP \fBSDL_ConvertSurface\fP (\fBSDL_Surface\fP *\fBsrc\fP, const \fBSDL_PixelFormat\fP *fmt, \fBUint32\fP \fBflags\fP)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP \fBSDL_Surface\fP *\fBSDLCALL\fP \fBSDL_ConvertSurfaceFormat\fP (\fBSDL_Surface\fP *\fBsrc\fP, \fBUint32\fP pixel_format, \fBUint32\fP \fBflags\fP)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_ConvertPixels\fP (int \fBwidth\fP, int \fBheight\fP, \fBUint32\fP src_format, const \fBvoid\fP *\fBsrc\fP, int src_pitch, \fBUint32\fP dst_format, \fBvoid\fP *\fBdst\fP, int dst_pitch)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_PremultiplyAlpha\fP (int \fBwidth\fP, int \fBheight\fP, \fBUint32\fP src_format, const \fBvoid\fP *\fBsrc\fP, int src_pitch, \fBUint32\fP dst_format, \fBvoid\fP *\fBdst\fP, int dst_pitch)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_FillRect\fP (\fBSDL_Surface\fP *\fBdst\fP, const \fBSDL_Rect\fP *rect, \fBUint32\fP \fBcolor\fP)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_FillRects\fP (\fBSDL_Surface\fP *\fBdst\fP, const \fBSDL_Rect\fP *rects, int \fBcount\fP, \fBUint32\fP \fBcolor\fP)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_UpperBlit\fP (\fBSDL_Surface\fP *\fBsrc\fP, const \fBSDL_Rect\fP *srcrect, \fBSDL_Surface\fP *\fBdst\fP, \fBSDL_Rect\fP *dstrect)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_LowerBlit\fP (\fBSDL_Surface\fP *\fBsrc\fP, \fBSDL_Rect\fP *srcrect, \fBSDL_Surface\fP *\fBdst\fP, \fBSDL_Rect\fP *dstrect)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_SoftStretch\fP (\fBSDL_Surface\fP *\fBsrc\fP, const \fBSDL_Rect\fP *srcrect, \fBSDL_Surface\fP *\fBdst\fP, const \fBSDL_Rect\fP *dstrect)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_SoftStretchLinear\fP (\fBSDL_Surface\fP *\fBsrc\fP, const \fBSDL_Rect\fP *srcrect, \fBSDL_Surface\fP *\fBdst\fP, const \fBSDL_Rect\fP *dstrect)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_UpperBlitScaled\fP (\fBSDL_Surface\fP *\fBsrc\fP, const \fBSDL_Rect\fP *srcrect, \fBSDL_Surface\fP *\fBdst\fP, \fBSDL_Rect\fP *dstrect)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_LowerBlitScaled\fP (\fBSDL_Surface\fP *\fBsrc\fP, \fBSDL_Rect\fP *srcrect, \fBSDL_Surface\fP *\fBdst\fP, \fBSDL_Rect\fP *dstrect)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP \fBvoid\fP \fBSDLCALL\fP \fBSDL_SetYUVConversionMode\fP (\fBSDL_YUV_CONVERSION_MODE\fP \fBmode\fP)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP \fBSDL_YUV_CONVERSION_MODE\fP \fBSDLCALL\fP \fBSDL_GetYUVConversionMode\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP \fBSDL_YUV_CONVERSION_MODE\fP \fBSDLCALL\fP \fBSDL_GetYUVConversionModeForResolution\fP (int \fBwidth\fP, int \fBheight\fP)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Header file for \fBSDL_Surface\fP definition and management functions\&. 
.SH "Macro Definition Documentation"
.PP 
.SS "#define SDL_BlitScaled   \fBSDL_UpperBlitScaled\fP"

.SS "#define SDL_BlitSurface   \fBSDL_UpperBlit\fP"
Performs a fast blit from the source surface to the destination surface\&.
.PP
This assumes that the source and destination rectangles are the same size\&. If either \fCsrcrect\fP or \fCdstrect\fP are NULL, the entire surface (\fCsrc\fP or \fCdst\fP) is copied\&. The final blit rectangles are saved in \fCsrcrect\fP and \fCdstrect\fP after all clipping is performed\&.
.PP
\fBReturns\fP
.RS 4
0 if the blit is successful, otherwise it returns -1\&.
.RE
.PP
The blit function should not be called on a locked surface\&.
.PP
The blit semantics for surfaces with and without blending and colorkey are defined as follows: 
.PP
.nf
RGBA->RGB:
  Source surface blend mode set to SDL_BLENDMODE_BLEND:
    alpha-blend (using the source alpha-channel and per-surface alpha)
    SDL_SRCCOLORKEY ignored\&.
  Source surface blend mode set to SDL_BLENDMODE_NONE:
    copy RGB\&.
    if SDL_SRCCOLORKEY set, only copy the pixels matching the
    RGB values of the source color key, ignoring alpha in the
    comparison\&.

RGB->RGBA:
  Source surface blend mode set to SDL_BLENDMODE_BLEND:
    alpha-blend (using the source per-surface alpha)
  Source surface blend mode set to SDL_BLENDMODE_NONE:
    copy RGB, set destination alpha to source per-surface alpha value\&.
  both:
    if SDL_SRCCOLORKEY set, only copy the pixels matching the
    source color key\&.

RGBA->RGBA:
  Source surface blend mode set to SDL_BLENDMODE_BLEND:
    alpha-blend (using the source alpha-channel and per-surface alpha)
    SDL_SRCCOLORKEY ignored\&.
  Source surface blend mode set to SDL_BLENDMODE_NONE:
    copy all of RGBA to the destination\&.
    if SDL_SRCCOLORKEY set, only copy the pixels matching the
    RGB values of the source color key, ignoring alpha in the
    comparison\&.

RGB->RGB:
  Source surface blend mode set to SDL_BLENDMODE_BLEND:
    alpha-blend (using the source per-surface alpha)
  Source surface blend mode set to SDL_BLENDMODE_NONE:
    copy RGB\&.
  both:
    if SDL_SRCCOLORKEY set, only copy the pixels matching the
    source color key\&.

.fi
.PP
.PP
You should call \fBSDL_BlitSurface()\fP unless you know exactly how SDL blitting works internally and how to use the other blit functions\&. 
.SS "#define SDL_DONTFREE   0x00000004"
Surface is referenced internally 
.SS "#define SDL_LoadBMP(file)   \fBSDL_LoadBMP_RW\fP(\fBSDL_RWFromFile\fP(file, 'rb'), 1)"
Load a surface from a file\&.
.PP
Convenience macro\&. 
.SS "#define SDL_MUSTLOCK(S)   (((S)\->\fBflags\fP & \fBSDL_RLEACCEL\fP) != 0)"
Evaluates to true if the surface needs to be locked before access\&. 
.SS "#define SDL_PREALLOC   0x00000001"
Surface uses preallocated memory 
.SS "#define SDL_RLEACCEL   0x00000002"
Surface is RLE encoded 
.SS "#define SDL_SaveBMP(surface, file)           \fBSDL_SaveBMP_RW\fP(surface, \fBSDL_RWFromFile\fP(file, 'wb'), 1)"
Save a surface to a file\&.
.PP
Convenience macro\&. 
.SS "#define SDL_SIMD_ALIGNED   0x00000008"
Surface uses aligned memory 
.SS "#define SDL_SWSURFACE   0"
Just here for compatibility 
.SH "Typedef Documentation"
.PP 
.SS "typedef int(\fBSDLCALL\fP * SDL_blit) (struct \fBSDL_Surface\fP *\fBsrc\fP, \fBSDL_Rect\fP *srcrect, struct \fBSDL_Surface\fP *\fBdst\fP, \fBSDL_Rect\fP *dstrect)"

.PP
The type of function used for surface blitting functions\&. 
.SS "typedef struct \fBSDL_Surface\fP \fBSDL_Surface\fP"

.PP
A collection of pixels used in software blitting\&. 
.PP
\fBNote\fP
.RS 4
This structure should be treated as read-only, except for \fCpixels\fP, which, if not NULL, contains the raw pixel data for the surface\&. 
.RE
.PP

.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBSDL_YUV_CONVERSION_MODE\fP"

.PP
The formula used for converting between YUV and RGB\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISDL_YUV_CONVERSION_JPEG \fP\fP
Full range JPEG 
.TP
\fB\fISDL_YUV_CONVERSION_BT601 \fP\fP
BT\&.601 (the default) 
.TP
\fB\fISDL_YUV_CONVERSION_BT709 \fP\fP
BT\&.709 
.TP
\fB\fISDL_YUV_CONVERSION_AUTOMATIC \fP\fP
BT\&.601 for SD content, BT\&.709 for HD content 
.SH "Function Documentation"
.PP 
.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_ConvertPixels (int width, int height, \fBUint32\fP src_format, const \fBvoid\fP * src, int src_pitch, \fBUint32\fP dst_format, \fBvoid\fP * dst, int dst_pitch)"
Copy a block of pixels of one format to another format\&.
.PP
\fBParameters\fP
.RS 4
\fIwidth\fP the width of the block to copy, in pixels 
.br
\fIheight\fP the height of the block to copy, in pixels 
.br
\fIsrc_format\fP an SDL_PixelFormatEnum value of the \fCsrc\fP pixels format 
.br
\fIsrc\fP a pointer to the source pixels 
.br
\fIsrc_pitch\fP the pitch of the source pixels, in bytes 
.br
\fIdst_format\fP an SDL_PixelFormatEnum value of the \fCdst\fP pixels format 
.br
\fIdst\fP a pointer to be filled in with new pixel data 
.br
\fIdst_pitch\fP the pitch of the destination pixels, in bytes 
.RE
.PP
\fBReturns\fP
.RS 4
0 on success or a negative error code on failure; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&. 
.RE
.PP

.SS "\fBDECLSPEC\fP \fBSDL_Surface\fP *\fBSDLCALL\fP SDL_ConvertSurface (\fBSDL_Surface\fP * src, const \fBSDL_PixelFormat\fP * fmt, \fBUint32\fP flags)"
Copy an existing surface to a new surface of the specified format\&.
.PP
This function is used to optimize images for faster \fIrepeat\fP blitting\&. This is accomplished by converting the original and storing the result as a new surface\&. The new, optimized surface can then be used as the source for future blits, making them faster\&.
.PP
\fBParameters\fP
.RS 4
\fIsrc\fP the existing \fBSDL_Surface\fP structure to convert 
.br
\fIfmt\fP the \fBSDL_PixelFormat\fP structure that the new surface is optimized for 
.br
\fIflags\fP the flags are unused and should be set to 0; this is a leftover from SDL 1\&.2's API 
.RE
.PP
\fBReturns\fP
.RS 4
the new \fBSDL_Surface\fP structure that is created or NULL if it fails; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_AllocFormat\fP 
.PP
\fBSDL_ConvertSurfaceFormat\fP 
.PP
\fBSDL_CreateRGBSurface\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP \fBSDL_Surface\fP *\fBSDLCALL\fP SDL_ConvertSurfaceFormat (\fBSDL_Surface\fP * src, \fBUint32\fP pixel_format, \fBUint32\fP flags)"
Copy an existing surface to a new surface of the specified format enum\&.
.PP
This function operates just like \fBSDL_ConvertSurface()\fP, but accepts an SDL_PixelFormatEnum value instead of an \fBSDL_PixelFormat\fP structure\&. As such, it might be easier to call but it doesn't have access to palette information for the destination surface, in case that would be important\&.
.PP
\fBParameters\fP
.RS 4
\fIsrc\fP the existing \fBSDL_Surface\fP structure to convert 
.br
\fIpixel_format\fP the SDL_PixelFormatEnum that the new surface is optimized for 
.br
\fIflags\fP the flags are unused and should be set to 0; this is a leftover from SDL 1\&.2's API 
.RE
.PP
\fBReturns\fP
.RS 4
the new \fBSDL_Surface\fP structure that is created or NULL if it fails; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_AllocFormat\fP 
.PP
\fBSDL_ConvertSurface\fP 
.PP
\fBSDL_CreateRGBSurface\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP \fBSDL_Surface\fP *\fBSDLCALL\fP SDL_CreateRGBSurface (\fBUint32\fP flags, int width, int height, int depth, \fBUint32\fP Rmask, \fBUint32\fP Gmask, \fBUint32\fP Bmask, \fBUint32\fP Amask)"
Allocate a new RGB surface\&.
.PP
If \fCdepth\fP is 4 or 8 bits, an empty palette is allocated for the surface\&. If \fCdepth\fP is greater than 8 bits, the pixel format is set using the [RGBA]mask parameters\&.
.PP
The [RGBA]mask parameters are the bitmasks used to extract that color from a pixel\&. For instance, \fCRmask\fP being 0xFF000000 means the red data is stored in the most significant byte\&. Using zeros for the RGB masks sets a default value, based on the depth\&. For example:
.PP
.PP
.nf
 {c++}
SDL_CreateRGBSurface(0,w,h,32,0,0,0,0);
.fi
.PP
.PP
However, using zero for the Amask results in an Amask of 0\&.
.PP
By default surfaces with an alpha mask are set up for blending as with:
.PP
.PP
.nf
 {c++}
SDL_SetSurfaceBlendMode(surface, SDL_BLENDMODE_BLEND)
.fi
.PP
.PP
You can change this by calling \fBSDL_SetSurfaceBlendMode()\fP and selecting a different \fCblendMode\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIflags\fP the flags are unused and should be set to 0 
.br
\fIwidth\fP the width of the surface 
.br
\fIheight\fP the height of the surface 
.br
\fIdepth\fP the depth of the surface in bits 
.br
\fIRmask\fP the red mask for the pixels 
.br
\fIGmask\fP the green mask for the pixels 
.br
\fIBmask\fP the blue mask for the pixels 
.br
\fIAmask\fP the alpha mask for the pixels 
.RE
.PP
\fBReturns\fP
.RS 4
the new \fBSDL_Surface\fP structure that is created or NULL if it fails; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_CreateRGBSurfaceFrom\fP 
.PP
\fBSDL_CreateRGBSurfaceWithFormat\fP 
.PP
\fBSDL_FreeSurface\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP \fBSDL_Surface\fP *\fBSDLCALL\fP SDL_CreateRGBSurfaceFrom (\fBvoid\fP * pixels, int width, int height, int depth, int pitch, \fBUint32\fP Rmask, \fBUint32\fP Gmask, \fBUint32\fP Bmask, \fBUint32\fP Amask)"
Allocate a new RGB surface with existing pixel data\&.
.PP
This function operates mostly like \fBSDL_CreateRGBSurface()\fP, except it does not allocate memory for the pixel data, instead the caller provides an existing buffer of data for the surface to use\&.
.PP
No copy is made of the pixel data\&. Pixel data is not managed automatically; you must free the surface before you free the pixel data\&.
.PP
\fBParameters\fP
.RS 4
\fIpixels\fP a pointer to existing pixel data 
.br
\fIwidth\fP the width of the surface 
.br
\fIheight\fP the height of the surface 
.br
\fIdepth\fP the depth of the surface in bits 
.br
\fIpitch\fP the pitch of the surface in bytes 
.br
\fIRmask\fP the red mask for the pixels 
.br
\fIGmask\fP the green mask for the pixels 
.br
\fIBmask\fP the blue mask for the pixels 
.br
\fIAmask\fP the alpha mask for the pixels 
.RE
.PP
\fBReturns\fP
.RS 4
the new \fBSDL_Surface\fP structure that is created or NULL if it fails; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_CreateRGBSurface\fP 
.PP
\fBSDL_CreateRGBSurfaceWithFormat\fP 
.PP
\fBSDL_FreeSurface\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP \fBSDL_Surface\fP *\fBSDLCALL\fP SDL_CreateRGBSurfaceWithFormat (\fBUint32\fP flags, int width, int height, int depth, \fBUint32\fP format)"
Allocate a new RGB surface with a specific pixel format\&.
.PP
This function operates mostly like \fBSDL_CreateRGBSurface()\fP, except instead of providing pixel color masks, you provide it with a predefined format from SDL_PixelFormatEnum\&.
.PP
\fBParameters\fP
.RS 4
\fIflags\fP the flags are unused and should be set to 0 
.br
\fIwidth\fP the width of the surface 
.br
\fIheight\fP the height of the surface 
.br
\fIdepth\fP the depth of the surface in bits 
.br
\fIformat\fP the SDL_PixelFormatEnum for the new surface's pixel format\&. 
.RE
.PP
\fBReturns\fP
.RS 4
the new \fBSDL_Surface\fP structure that is created or NULL if it fails; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.5\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_CreateRGBSurface\fP 
.PP
\fBSDL_CreateRGBSurfaceFrom\fP 
.PP
\fBSDL_FreeSurface\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP \fBSDL_Surface\fP *\fBSDLCALL\fP SDL_CreateRGBSurfaceWithFormatFrom (\fBvoid\fP * pixels, int width, int height, int depth, int pitch, \fBUint32\fP format)"
Allocate a new RGB surface with with a specific pixel format and existing pixel data\&.
.PP
This function operates mostly like \fBSDL_CreateRGBSurfaceFrom()\fP, except instead of providing pixel color masks, you provide it with a predefined format from SDL_PixelFormatEnum\&.
.PP
No copy is made of the pixel data\&. Pixel data is not managed automatically; you must free the surface before you free the pixel data\&.
.PP
\fBParameters\fP
.RS 4
\fIpixels\fP a pointer to existing pixel data 
.br
\fIwidth\fP the width of the surface 
.br
\fIheight\fP the height of the surface 
.br
\fIdepth\fP the depth of the surface in bits 
.br
\fIpitch\fP the pitch of the surface in bytes 
.br
\fIformat\fP the SDL_PixelFormatEnum for the new surface's pixel format\&. 
.RE
.PP
\fBReturns\fP
.RS 4
the new \fBSDL_Surface\fP structure that is created or NULL if it fails; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.5\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_CreateRGBSurfaceFrom\fP 
.PP
\fBSDL_CreateRGBSurfaceWithFormat\fP 
.PP
\fBSDL_FreeSurface\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP \fBSDL_Surface\fP *\fBSDLCALL\fP SDL_DuplicateSurface (\fBSDL_Surface\fP * surface)"

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_FillRect (\fBSDL_Surface\fP * dst, const \fBSDL_Rect\fP * rect, \fBUint32\fP color)"
Perform a fast fill of a rectangle with a specific color\&.
.PP
\fCcolor\fP should be a pixel of the format used by the surface, and can be generated by \fBSDL_MapRGB()\fP or \fBSDL_MapRGBA()\fP\&. If the color value contains an alpha component then the destination is simply filled with that alpha information, no blending takes place\&.
.PP
If there is a clip rectangle set on the destination (set via \fBSDL_SetClipRect()\fP), then this function will fill based on the intersection of the clip rectangle and \fCrect\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIdst\fP the \fBSDL_Surface\fP structure that is the drawing target 
.br
\fIrect\fP the \fBSDL_Rect\fP structure representing the rectangle to fill, or NULL to fill the entire surface 
.br
\fIcolor\fP the color to fill with 
.RE
.PP
\fBReturns\fP
.RS 4
0 on success or a negative error code on failure; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_FillRects\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_FillRects (\fBSDL_Surface\fP * dst, const \fBSDL_Rect\fP * rects, int count, \fBUint32\fP color)"
Perform a fast fill of a set of rectangles with a specific color\&.
.PP
\fCcolor\fP should be a pixel of the format used by the surface, and can be generated by \fBSDL_MapRGB()\fP or \fBSDL_MapRGBA()\fP\&. If the color value contains an alpha component then the destination is simply filled with that alpha information, no blending takes place\&.
.PP
If there is a clip rectangle set on the destination (set via \fBSDL_SetClipRect()\fP), then this function will fill based on the intersection of the clip rectangle and \fCrect\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIdst\fP the \fBSDL_Surface\fP structure that is the drawing target 
.br
\fIrects\fP an array of SDL_Rects representing the rectangles to fill\&. 
.br
\fIcount\fP the number of rectangles in the array 
.br
\fIcolor\fP the color to fill with 
.RE
.PP
\fBReturns\fP
.RS 4
0 on success or a negative error code on failure; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_FillRect\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP \fBvoid\fP \fBSDLCALL\fP SDL_FreeSurface (\fBSDL_Surface\fP * surface)"
Free an RGB surface\&.
.PP
It is safe to pass NULL to this function\&.
.PP
\fBParameters\fP
.RS 4
\fIsurface\fP the \fBSDL_Surface\fP to free\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_CreateRGBSurface\fP 
.PP
\fBSDL_CreateRGBSurfaceFrom\fP 
.PP
\fBSDL_LoadBMP\fP 
.PP
\fBSDL_LoadBMP_RW\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP \fBvoid\fP \fBSDLCALL\fP SDL_GetClipRect (\fBSDL_Surface\fP * surface, \fBSDL_Rect\fP * rect)"
Get the clipping rectangle for a surface\&.
.PP
When \fCsurface\fP is the destination of a blit, only the area within the clip rectangle is drawn into\&.
.PP
\fBParameters\fP
.RS 4
\fIsurface\fP the \fBSDL_Surface\fP structure representing the surface to be clipped 
.br
\fIrect\fP an \fBSDL_Rect\fP structure filled in with the clipping rectangle for the surface
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_BlitSurface\fP 
.PP
\fBSDL_SetClipRect\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_GetColorKey (\fBSDL_Surface\fP * surface, \fBUint32\fP * key)"
Get the color key (transparent pixel) for a surface\&.
.PP
The color key is a pixel of the format used by the surface, as generated by \fBSDL_MapRGB()\fP\&.
.PP
If the surface doesn't have color key enabled this function returns -1\&.
.PP
\fBParameters\fP
.RS 4
\fIsurface\fP the \fBSDL_Surface\fP structure to query 
.br
\fIkey\fP a pointer filled in with the transparent pixel 
.RE
.PP
\fBReturns\fP
.RS 4
0 on success or a negative error code on failure; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_BlitSurface\fP 
.PP
\fBSDL_SetColorKey\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_GetSurfaceAlphaMod (\fBSDL_Surface\fP * surface, \fBUint8\fP * alpha)"
Get the additional alpha value used in blit operations\&.
.PP
\fBParameters\fP
.RS 4
\fIsurface\fP the \fBSDL_Surface\fP structure to query 
.br
\fIalpha\fP a pointer filled in with the current alpha value 
.RE
.PP
\fBReturns\fP
.RS 4
0 on success or a negative error code on failure; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_GetSurfaceColorMod\fP 
.PP
\fBSDL_SetSurfaceAlphaMod\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_GetSurfaceBlendMode (\fBSDL_Surface\fP * surface, \fBSDL_BlendMode\fP * blendMode)"
Get the blend mode used for blit operations\&.
.PP
\fBParameters\fP
.RS 4
\fIsurface\fP the \fBSDL_Surface\fP structure to query 
.br
\fIblendMode\fP a pointer filled in with the current SDL_BlendMode 
.RE
.PP
\fBReturns\fP
.RS 4
0 on success or a negative error code on failure; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_SetSurfaceBlendMode\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_GetSurfaceColorMod (\fBSDL_Surface\fP * surface, \fBUint8\fP * r, \fBUint8\fP * g, \fBUint8\fP * b)"
Get the additional color value multiplied into blit operations\&.
.PP
\fBParameters\fP
.RS 4
\fIsurface\fP the \fBSDL_Surface\fP structure to query 
.br
\fIr\fP a pointer filled in with the current red color value 
.br
\fIg\fP a pointer filled in with the current green color value 
.br
\fIb\fP a pointer filled in with the current blue color value 
.RE
.PP
\fBReturns\fP
.RS 4
0 on success or a negative error code on failure; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_GetSurfaceAlphaMod\fP 
.PP
\fBSDL_SetSurfaceColorMod\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP \fBSDL_YUV_CONVERSION_MODE\fP \fBSDLCALL\fP SDL_GetYUVConversionMode (\fBvoid\fP)"
Get the YUV conversion mode
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.8\&. 
.RE
.PP

.SS "\fBDECLSPEC\fP \fBSDL_YUV_CONVERSION_MODE\fP \fBSDLCALL\fP SDL_GetYUVConversionModeForResolution (int width, int height)"
Get the YUV conversion mode, returning the correct mode for the resolution when the current conversion mode is SDL_YUV_CONVERSION_AUTOMATIC
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.8\&. 
.RE
.PP

.SS "\fBDECLSPEC\fP \fBSDL_bool\fP \fBSDLCALL\fP SDL_HasColorKey (\fBSDL_Surface\fP * surface)"
Returns whether the surface has a color key
.PP
It is safe to pass a NULL \fCsurface\fP here; it will return SDL_FALSE\&.
.PP
\fBParameters\fP
.RS 4
\fIsurface\fP the \fBSDL_Surface\fP structure to query 
.RE
.PP
\fBReturns\fP
.RS 4
SDL_TRUE if the surface has a color key, SDL_FALSE otherwise\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.9\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_SetColorKey\fP 
.PP
\fBSDL_GetColorKey\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP \fBSDL_bool\fP \fBSDLCALL\fP SDL_HasSurfaceRLE (\fBSDL_Surface\fP * surface)"
Returns whether the surface is RLE enabled
.PP
It is safe to pass a NULL \fCsurface\fP here; it will return SDL_FALSE\&.
.PP
\fBParameters\fP
.RS 4
\fIsurface\fP the \fBSDL_Surface\fP structure to query 
.RE
.PP
\fBReturns\fP
.RS 4
SDL_TRUE if the surface is RLE enabled, SDL_FALSE otherwise\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.14\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_SetSurfaceRLE\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP \fBSDL_Surface\fP *\fBSDLCALL\fP SDL_LoadBMP_RW (\fBSDL_RWops\fP * src, int freesrc)"
Load a BMP image from a seekable SDL data stream\&.
.PP
The new surface should be freed with \fBSDL_FreeSurface()\fP\&. Not doing so will result in a memory leak\&.
.PP
src is an open \fBSDL_RWops\fP buffer, typically loaded with SDL_RWFromFile\&. Alternitavely, you might also use the macro SDL_LoadBMP to load a bitmap from a file, convert it to an \fBSDL_Surface\fP and then close the file\&.
.PP
\fBParameters\fP
.RS 4
\fIsrc\fP the data stream for the surface 
.br
\fIfreesrc\fP non-zero to close the stream after being read 
.RE
.PP
\fBReturns\fP
.RS 4
a pointer to a new \fBSDL_Surface\fP structure or NULL if there was an error; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_FreeSurface\fP 
.PP
\fBSDL_RWFromFile\fP 
.PP
\fBSDL_LoadBMP\fP 
.PP
\fBSDL_SaveBMP_RW\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_LockSurface (\fBSDL_Surface\fP * surface)"
Set up a surface for directly accessing the pixels\&.
.PP
Between calls to \fBSDL_LockSurface()\fP / \fBSDL_UnlockSurface()\fP, you can write to and read from \fCsurface->pixels\fP, using the pixel format stored in \fCsurface->format\fP\&. Once you are done accessing the surface, you should use \fBSDL_UnlockSurface()\fP to release it\&.
.PP
Not all surfaces require locking\&. If \fC\fBSDL_MUSTLOCK(surface)\fP\fP evaluates to 0, then you can read and write to the surface at any time, and the pixel format of the surface will not change\&.
.PP
\fBParameters\fP
.RS 4
\fIsurface\fP the \fBSDL_Surface\fP structure to be locked 
.RE
.PP
\fBReturns\fP
.RS 4
0 on success or a negative error code on failure; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_MUSTLOCK\fP 
.PP
\fBSDL_UnlockSurface\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_LowerBlit (\fBSDL_Surface\fP * src, \fBSDL_Rect\fP * srcrect, \fBSDL_Surface\fP * dst, \fBSDL_Rect\fP * dstrect)"
Perform low-level surface blitting only\&.
.PP
This is a semi-private blit function and it performs low-level surface blitting, assuming the input rectangles have already been clipped\&.
.PP
Unless you know what you're doing, you should be using \fBSDL_BlitSurface()\fP instead\&.
.PP
\fBParameters\fP
.RS 4
\fIsrc\fP the \fBSDL_Surface\fP structure to be copied from 
.br
\fIsrcrect\fP the \fBSDL_Rect\fP structure representing the rectangle to be copied, or NULL to copy the entire surface 
.br
\fIdst\fP the \fBSDL_Surface\fP structure that is the blit target 
.br
\fIdstrect\fP the \fBSDL_Rect\fP structure representing the rectangle that is copied into 
.RE
.PP
\fBReturns\fP
.RS 4
0 on success or a negative error code on failure; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_BlitSurface\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_LowerBlitScaled (\fBSDL_Surface\fP * src, \fBSDL_Rect\fP * srcrect, \fBSDL_Surface\fP * dst, \fBSDL_Rect\fP * dstrect)"
Perform low-level surface scaled blitting only\&.
.PP
This is a semi-private function and it performs low-level surface blitting, assuming the input rectangles have already been clipped\&.
.PP
\fBParameters\fP
.RS 4
\fIsrc\fP the \fBSDL_Surface\fP structure to be copied from 
.br
\fIsrcrect\fP the \fBSDL_Rect\fP structure representing the rectangle to be copied 
.br
\fIdst\fP the \fBSDL_Surface\fP structure that is the blit target 
.br
\fIdstrect\fP the \fBSDL_Rect\fP structure representing the rectangle that is copied into 
.RE
.PP
\fBReturns\fP
.RS 4
0 on success or a negative error code on failure; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_BlitScaled\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_PremultiplyAlpha (int width, int height, \fBUint32\fP src_format, const \fBvoid\fP * src, int src_pitch, \fBUint32\fP dst_format, \fBvoid\fP * dst, int dst_pitch)"
Premultiply the alpha on a block of pixels\&.
.PP
This is safe to use with src == dst, but not for other overlapping areas\&.
.PP
This function is currently only implemented for SDL_PIXELFORMAT_ARGB8888\&.
.PP
\fBParameters\fP
.RS 4
\fIwidth\fP the width of the block to convert, in pixels 
.br
\fIheight\fP the height of the block to convert, in pixels 
.br
\fIsrc_format\fP an SDL_PixelFormatEnum value of the \fCsrc\fP pixels format 
.br
\fIsrc\fP a pointer to the source pixels 
.br
\fIsrc_pitch\fP the pitch of the source pixels, in bytes 
.br
\fIdst_format\fP an SDL_PixelFormatEnum value of the \fCdst\fP pixels format 
.br
\fIdst\fP a pointer to be filled in with premultiplied pixel data 
.br
\fIdst_pitch\fP the pitch of the destination pixels, in bytes 
.RE
.PP
\fBReturns\fP
.RS 4
0 on success or a negative error code on failure; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.18\&. 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_SaveBMP_RW (\fBSDL_Surface\fP * surface, \fBSDL_RWops\fP * dst, int freedst)"
Save a surface to a seekable SDL data stream in BMP format\&.
.PP
Surfaces with a 24-bit, 32-bit and paletted 8-bit format get saved in the BMP directly\&. Other RGB formats with 8-bit or higher get converted to a 24-bit surface or, if they have an alpha mask or a colorkey, to a 32-bit surface before they are saved\&. YUV and paletted 1-bit and 4-bit formats are not supported\&.
.PP
\fBParameters\fP
.RS 4
\fIsurface\fP the \fBSDL_Surface\fP structure containing the image to be saved 
.br
\fIdst\fP a data stream to save to 
.br
\fIfreedst\fP non-zero to close the stream after being written 
.RE
.PP
\fBReturns\fP
.RS 4
0 on success or a negative error code on failure; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_LoadBMP_RW\fP 
.PP
\fBSDL_SaveBMP\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP \fBSDL_bool\fP \fBSDLCALL\fP SDL_SetClipRect (\fBSDL_Surface\fP * surface, const \fBSDL_Rect\fP * rect)"
Set the clipping rectangle for a surface\&.
.PP
When \fCsurface\fP is the destination of a blit, only the area within the clip rectangle is drawn into\&.
.PP
Note that blits are automatically clipped to the edges of the source and destination surfaces\&.
.PP
\fBParameters\fP
.RS 4
\fIsurface\fP the \fBSDL_Surface\fP structure to be clipped 
.br
\fIrect\fP the \fBSDL_Rect\fP structure representing the clipping rectangle, or NULL to disable clipping 
.RE
.PP
\fBReturns\fP
.RS 4
SDL_TRUE if the rectangle intersects the surface, otherwise SDL_FALSE and blits will be completely clipped\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_BlitSurface\fP 
.PP
\fBSDL_GetClipRect\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_SetColorKey (\fBSDL_Surface\fP * surface, int flag, \fBUint32\fP key)"
Set the color key (transparent pixel) in a surface\&.
.PP
The color key defines a pixel value that will be treated as transparent in a blit\&. For example, one can use this to specify that cyan pixels should be considered transparent, and therefore not rendered\&.
.PP
It is a pixel of the format used by the surface, as generated by \fBSDL_MapRGB()\fP\&.
.PP
RLE acceleration can substantially speed up blitting of images with large horizontal runs of transparent pixels\&. See \fBSDL_SetSurfaceRLE()\fP for details\&.
.PP
\fBParameters\fP
.RS 4
\fIsurface\fP the \fBSDL_Surface\fP structure to update 
.br
\fIflag\fP SDL_TRUE to enable color key, SDL_FALSE to disable color key 
.br
\fIkey\fP the transparent pixel 
.RE
.PP
\fBReturns\fP
.RS 4
0 on success or a negative error code on failure; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_BlitSurface\fP 
.PP
\fBSDL_GetColorKey\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_SetSurfaceAlphaMod (\fBSDL_Surface\fP * surface, \fBUint8\fP alpha)"
Set an additional alpha value used in blit operations\&.
.PP
When this surface is blitted, during the blit operation the source alpha value is modulated by this alpha value according to the following formula:
.PP
\fCsrcA = srcA * (alpha / 255)\fP
.PP
\fBParameters\fP
.RS 4
\fIsurface\fP the \fBSDL_Surface\fP structure to update 
.br
\fIalpha\fP the alpha value multiplied into blit operations 
.RE
.PP
\fBReturns\fP
.RS 4
0 on success or a negative error code on failure; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_GetSurfaceAlphaMod\fP 
.PP
\fBSDL_SetSurfaceColorMod\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_SetSurfaceBlendMode (\fBSDL_Surface\fP * surface, \fBSDL_BlendMode\fP blendMode)"
Set the blend mode used for blit operations\&.
.PP
To copy a surface to another surface (or texture) without blending with the existing data, the blendmode of the SOURCE surface should be set to \fCSDL_BLENDMODE_NONE\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIsurface\fP the \fBSDL_Surface\fP structure to update 
.br
\fIblendMode\fP the SDL_BlendMode to use for blit blending 
.RE
.PP
\fBReturns\fP
.RS 4
0 on success or a negative error code on failure; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_GetSurfaceBlendMode\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_SetSurfaceColorMod (\fBSDL_Surface\fP * surface, \fBUint8\fP r, \fBUint8\fP g, \fBUint8\fP b)"
Set an additional color value multiplied into blit operations\&.
.PP
When this surface is blitted, during the blit operation each source color channel is modulated by the appropriate color value according to the following formula:
.PP
\fCsrcC = srcC * (color / 255)\fP
.PP
\fBParameters\fP
.RS 4
\fIsurface\fP the \fBSDL_Surface\fP structure to update 
.br
\fIr\fP the red color value multiplied into blit operations 
.br
\fIg\fP the green color value multiplied into blit operations 
.br
\fIb\fP the blue color value multiplied into blit operations 
.RE
.PP
\fBReturns\fP
.RS 4
0 on success or a negative error code on failure; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_GetSurfaceColorMod\fP 
.PP
\fBSDL_SetSurfaceAlphaMod\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_SetSurfacePalette (\fBSDL_Surface\fP * surface, \fBSDL_Palette\fP * palette)"
Set the palette used by a surface\&.
.PP
A single palette can be shared with many surfaces\&.
.PP
\fBParameters\fP
.RS 4
\fIsurface\fP the \fBSDL_Surface\fP structure to update 
.br
\fIpalette\fP the \fBSDL_Palette\fP structure to use 
.RE
.PP
\fBReturns\fP
.RS 4
0 on success or a negative error code on failure; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&. 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_SetSurfaceRLE (\fBSDL_Surface\fP * surface, int flag)"
Set the RLE acceleration hint for a surface\&.
.PP
If RLE is enabled, color key and alpha blending blits are much faster, but the surface must be locked before directly accessing the pixels\&.
.PP
\fBParameters\fP
.RS 4
\fIsurface\fP the \fBSDL_Surface\fP structure to optimize 
.br
\fIflag\fP 0 to disable, non-zero to enable RLE acceleration 
.RE
.PP
\fBReturns\fP
.RS 4
0 on success or a negative error code on failure; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_BlitSurface\fP 
.PP
\fBSDL_LockSurface\fP 
.PP
\fBSDL_UnlockSurface\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP \fBvoid\fP \fBSDLCALL\fP SDL_SetYUVConversionMode (\fBSDL_YUV_CONVERSION_MODE\fP mode)"
Set the YUV conversion mode
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.8\&. 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_SoftStretch (\fBSDL_Surface\fP * src, const \fBSDL_Rect\fP * srcrect, \fBSDL_Surface\fP * dst, const \fBSDL_Rect\fP * dstrect)"
Perform a fast, low quality, stretch blit between two surfaces of the same format\&.
.PP
Please use \fBSDL_BlitScaled()\fP instead\&.
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&. 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_SoftStretchLinear (\fBSDL_Surface\fP * src, const \fBSDL_Rect\fP * srcrect, \fBSDL_Surface\fP * dst, const \fBSDL_Rect\fP * dstrect)"
Perform bilinear scaling between two surfaces of the same format, 32BPP\&.
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.16\&. 
.RE
.PP

.SS "\fBDECLSPEC\fP \fBvoid\fP \fBSDLCALL\fP SDL_UnlockSurface (\fBSDL_Surface\fP * surface)"
Release a surface after directly accessing the pixels\&.
.PP
\fBParameters\fP
.RS 4
\fIsurface\fP the \fBSDL_Surface\fP structure to be unlocked
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_LockSurface\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_UpperBlit (\fBSDL_Surface\fP * src, const \fBSDL_Rect\fP * srcrect, \fBSDL_Surface\fP * dst, \fBSDL_Rect\fP * dstrect)"
Perform a fast blit from the source surface to the destination surface\&.
.PP
\fBSDL_UpperBlit()\fP has been replaced by \fBSDL_BlitSurface()\fP, which is merely a macro for this function with a less confusing name\&.
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_BlitSurface\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_UpperBlitScaled (\fBSDL_Surface\fP * src, const \fBSDL_Rect\fP * srcrect, \fBSDL_Surface\fP * dst, \fBSDL_Rect\fP * dstrect)"
Perform a scaled surface copy to a destination surface\&.
.PP
\fBSDL_UpperBlitScaled()\fP has been replaced by \fBSDL_BlitScaled()\fP, which is merely a macro for this function with a less confusing name\&.
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_BlitScaled\fP 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for RayTracer from the source code\&.
