.TH "md__d___ray_tracing_docs__r_e_a_d_m_e_cmake" 3 "Mon Jan 24 2022" "Version 1.0" "RayTracer" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md__d___ray_tracing_docs__r_e_a_d_m_e_cmake \- CMake 
(www\&.cmake\&.org)
.PP
SDL's build system was traditionally based on autotools\&. Over time, this approach has suffered from several issues across the different supported platforms\&. To solve these problems, a new build system based on CMake is under development\&. It works in parallel to the legacy system, so users can experiment with it without complication\&. While still experimental, the build system should be usable on the following platforms:
.PP
.IP "\(bu" 2
FreeBSD
.IP "\(bu" 2
Linux
.IP "\(bu" 2
VS\&.NET 2010
.IP "\(bu" 2
MinGW and Msys
.IP "\(bu" 2
macOS, iOS, and tvOS, with support for XCode
.PP
.PP
.PP
 
.SH "Usage"
.PP
Assuming the source for SDL is located at ~/sdl 
.PP
.nf
cd ~
mkdir build
cd build
cmake \&.\&./sdl

.fi
.PP
 This will build the static and dynamic versions of SDL in the ~/build directory\&.
.PP
.PP
 
.SH "Usage, iOS/tvOS"
.PP
CMake 3\&.14+ natively includes support for iOS and tvOS\&. SDL binaries may be built using Xcode or Make, possibly among other build-systems\&.
.PP
When using a recent version of CMake (3\&.14+), it should be possible to:
.PP
.IP "\(bu" 2
build SDL for iOS, both static and dynamic
.IP "\(bu" 2
build SDL test apps (as iOS/tvOS \&.app bundles)
.IP "\(bu" 2
generate a working SDL_config\&.h for iOS (using SDL_config\&.h\&.cmake as a basis)
.PP
.PP
To use, set the following CMake variables when running CMake's configuration stage:
.PP
.IP "\(bu" 2
\fCCMAKE_SYSTEM_NAME=<OS>\fP (either \fCiOS\fP or \fCtvOS\fP)
.IP "\(bu" 2
\fCCMAKE_OSX_SYSROOT=<SDK>\fP (examples: \fCiphoneos\fP, \fCiphonesimulator\fP, \fCiphoneos12\&.4\fP, \fC/full/path/to/iPhoneOS\&.sdk\fP, \fCappletvos\fP, \fCappletvsimulator\fP, \fCappletvos12\&.4\fP, \fC/full/path/to/AppleTVOS\&.sdk\fP, etc\&.)
.IP "\(bu" 2
\fCCMAKE_OSX_ARCHITECTURES=<semicolon-separated list of CPU architectures>\fP (example: 'arm64;armv7s;x86_64')
.PP
.SS "Examples (for iOS/tvOS):"
.IP "\(bu" 2
for iOS-Simulator, using the latest, installed SDK:
.PP
\fCcmake ~/sdl -DCMAKE_SYSTEM_NAME=iOS -DCMAKE_OSX_SYSROOT=iphonesimulator -DCMAKE_OSX_ARCHITECTURES=x86_64\fP
.IP "\(bu" 2
for iOS-Device, using the latest, installed SDK, 64-bit only
.PP
\fCcmake ~/sdl -DCMAKE_SYSTEM_NAME=iOS -DCMAKE_OSX_SYSROOT=iphoneos -DCMAKE_OSX_ARCHITECTURES=arm64\fP
.IP "\(bu" 2
for iOS-Device, using the latest, installed SDK, mixed 32/64 bit
.PP
\fCcmake ~/sdl -DCMAKE_SYSTEM_NAME=iOS -DCMAKE_OSX_SYSROOT=iphoneos -DCMAKE_OSX_ARCHITECTURES='arm64;armv7s'\fP
.IP "\(bu" 2
for iOS-Device, using a specific SDK revision (iOS 12\&.4, in this example):
.PP
\fCcmake ~/sdl -DCMAKE_SYSTEM_NAME=iOS -DCMAKE_OSX_SYSROOT=iphoneos12\&.4 -DCMAKE_OSX_ARCHITECTURES=arm64\fP
.IP "\(bu" 2
for iOS-Simulator, using the latest, installed SDK, and building SDL test apps (as \&.app bundles):
.PP
\fCcmake ~/sdl -DSDL_TEST=1 -DCMAKE_SYSTEM_NAME=iOS -DCMAKE_OSX_SYSROOT=iphonesimulator -DCMAKE_OSX_ARCHITECTURES=x86_64\fP
.IP "\(bu" 2
for tvOS-Simulator, using the latest, installed SDK:
.PP
\fCcmake ~/sdl -DCMAKE_SYSTEM_NAME=tvOS -DCMAKE_OSX_SYSROOT=appletvsimulator -DCMAKE_OSX_ARCHITECTURES=x86_64\fP
.IP "\(bu" 2
for tvOS-Device, using the latest, installed SDK:
.PP
\fCcmake ~/sdl -DCMAKE_SYSTEM_NAME=tvOS -DCMAKE_OSX_SYSROOT=appletvos -DCMAKE_OSX_ARCHITECTURES=arm64\fP 
.PP

