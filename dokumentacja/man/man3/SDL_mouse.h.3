.TH "D:/RayTracing/include/SDL_mouse.h" 3 "Mon Jan 24 2022" "Version 1.0" "RayTracer" \" -*- nroff -*-
.ad l
.nh
.SH NAME
D:/RayTracing/include/SDL_mouse.h
.SH SYNOPSIS
.br
.PP
\fC#include 'SDL_stdinc\&.h'\fP
.br
\fC#include 'SDL_error\&.h'\fP
.br
\fC#include 'SDL_video\&.h'\fP
.br
\fC#include 'begin_code\&.h'\fP
.br
\fC#include 'close_code\&.h'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBSDL_BUTTON\fP(X)   (1 << ((X)\-1))"
.br
.ti -1c
.RI "#define \fBSDL_BUTTON_LEFT\fP   1"
.br
.ti -1c
.RI "#define \fBSDL_BUTTON_MIDDLE\fP   2"
.br
.ti -1c
.RI "#define \fBSDL_BUTTON_RIGHT\fP   3"
.br
.ti -1c
.RI "#define \fBSDL_BUTTON_X1\fP   4"
.br
.ti -1c
.RI "#define \fBSDL_BUTTON_X2\fP   5"
.br
.ti -1c
.RI "#define \fBSDL_BUTTON_LMASK\fP   \fBSDL_BUTTON\fP(\fBSDL_BUTTON_LEFT\fP)"
.br
.ti -1c
.RI "#define \fBSDL_BUTTON_MMASK\fP   \fBSDL_BUTTON\fP(\fBSDL_BUTTON_MIDDLE\fP)"
.br
.ti -1c
.RI "#define \fBSDL_BUTTON_RMASK\fP   \fBSDL_BUTTON\fP(\fBSDL_BUTTON_RIGHT\fP)"
.br
.ti -1c
.RI "#define \fBSDL_BUTTON_X1MASK\fP   \fBSDL_BUTTON\fP(\fBSDL_BUTTON_X1\fP)"
.br
.ti -1c
.RI "#define \fBSDL_BUTTON_X2MASK\fP   \fBSDL_BUTTON\fP(\fBSDL_BUTTON_X2\fP)"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fBSDL_Cursor\fP \fBSDL_Cursor\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBSDL_SystemCursor\fP { \fBSDL_SYSTEM_CURSOR_ARROW\fP, \fBSDL_SYSTEM_CURSOR_IBEAM\fP, \fBSDL_SYSTEM_CURSOR_WAIT\fP, \fBSDL_SYSTEM_CURSOR_CROSSHAIR\fP, \fBSDL_SYSTEM_CURSOR_WAITARROW\fP, \fBSDL_SYSTEM_CURSOR_SIZENWSE\fP, \fBSDL_SYSTEM_CURSOR_SIZENESW\fP, \fBSDL_SYSTEM_CURSOR_SIZEWE\fP, \fBSDL_SYSTEM_CURSOR_SIZENS\fP, \fBSDL_SYSTEM_CURSOR_SIZEALL\fP, \fBSDL_SYSTEM_CURSOR_NO\fP, \fBSDL_SYSTEM_CURSOR_HAND\fP, \fBSDL_NUM_SYSTEM_CURSORS\fP }"
.br
.RI "Cursor types for \fBSDL_CreateSystemCursor()\fP\&. "
.ti -1c
.RI "enum \fBSDL_MouseWheelDirection\fP { \fBSDL_MOUSEWHEEL_NORMAL\fP, \fBSDL_MOUSEWHEEL_FLIPPED\fP }"
.br
.RI "Scroll direction types for the Scroll event\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBDECLSPEC\fP \fBSDL_Window\fP *\fBSDLCALL\fP \fBSDL_GetMouseFocus\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP \fBUint32\fP \fBSDLCALL\fP \fBSDL_GetMouseState\fP (int *\fBx\fP, int *\fBy\fP)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP \fBUint32\fP \fBSDLCALL\fP \fBSDL_GetGlobalMouseState\fP (int *\fBx\fP, int *\fBy\fP)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP \fBUint32\fP \fBSDLCALL\fP \fBSDL_GetRelativeMouseState\fP (int *\fBx\fP, int *\fBy\fP)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP \fBvoid\fP \fBSDLCALL\fP \fBSDL_WarpMouseInWindow\fP (\fBSDL_Window\fP *window, int \fBx\fP, int \fBy\fP)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_WarpMouseGlobal\fP (int \fBx\fP, int \fBy\fP)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_SetRelativeMouseMode\fP (\fBSDL_bool\fP \fBenabled\fP)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_CaptureMouse\fP (\fBSDL_bool\fP \fBenabled\fP)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP \fBSDL_bool\fP \fBSDLCALL\fP \fBSDL_GetRelativeMouseMode\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP \fBSDL_Cursor\fP *\fBSDLCALL\fP \fBSDL_CreateCursor\fP (const \fBUint8\fP *\fBdata\fP, const \fBUint8\fP *\fBmask\fP, int \fBw\fP, int \fBh\fP, int hot_x, int hot_y)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP \fBSDL_Cursor\fP *\fBSDLCALL\fP \fBSDL_CreateColorCursor\fP (\fBSDL_Surface\fP *surface, int hot_x, int hot_y)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP \fBSDL_Cursor\fP *\fBSDLCALL\fP \fBSDL_CreateSystemCursor\fP (\fBSDL_SystemCursor\fP \fBid\fP)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP \fBvoid\fP \fBSDLCALL\fP \fBSDL_SetCursor\fP (\fBSDL_Cursor\fP *cursor)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP \fBSDL_Cursor\fP *\fBSDLCALL\fP \fBSDL_GetCursor\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP \fBSDL_Cursor\fP *\fBSDLCALL\fP \fBSDL_GetDefaultCursor\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP \fBvoid\fP \fBSDLCALL\fP \fBSDL_FreeCursor\fP (\fBSDL_Cursor\fP *cursor)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_ShowCursor\fP (int toggle)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Include file for SDL mouse event handling\&. 
.SH "Macro Definition Documentation"
.PP 
.SS "#define SDL_BUTTON(X)   (1 << ((X)\-1))"
Used as a mask when testing buttons in buttonstate\&.
.PP
.IP "\(bu" 2
Button 1: Left mouse button
.IP "\(bu" 2
Button 2: Middle mouse button
.IP "\(bu" 2
Button 3: Right mouse button 
.PP

.SS "#define SDL_BUTTON_LEFT   1"

.SS "#define SDL_BUTTON_LMASK   \fBSDL_BUTTON\fP(\fBSDL_BUTTON_LEFT\fP)"

.SS "#define SDL_BUTTON_MIDDLE   2"

.SS "#define SDL_BUTTON_MMASK   \fBSDL_BUTTON\fP(\fBSDL_BUTTON_MIDDLE\fP)"

.SS "#define SDL_BUTTON_RIGHT   3"

.SS "#define SDL_BUTTON_RMASK   \fBSDL_BUTTON\fP(\fBSDL_BUTTON_RIGHT\fP)"

.SS "#define SDL_BUTTON_X1   4"

.SS "#define SDL_BUTTON_X1MASK   \fBSDL_BUTTON\fP(\fBSDL_BUTTON_X1\fP)"

.SS "#define SDL_BUTTON_X2   5"

.SS "#define SDL_BUTTON_X2MASK   \fBSDL_BUTTON\fP(\fBSDL_BUTTON_X2\fP)"

.SH "Typedef Documentation"
.PP 
.SS "typedef struct \fBSDL_Cursor\fP \fBSDL_Cursor\fP"
Implementation dependent 
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBSDL_MouseWheelDirection\fP"

.PP
Scroll direction types for the Scroll event\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISDL_MOUSEWHEEL_NORMAL \fP\fP
The scroll direction is normal 
.TP
\fB\fISDL_MOUSEWHEEL_FLIPPED \fP\fP
The scroll direction is flipped / natural 
.SS "enum \fBSDL_SystemCursor\fP"

.PP
Cursor types for \fBSDL_CreateSystemCursor()\fP\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISDL_SYSTEM_CURSOR_ARROW \fP\fP
Arrow 
.TP
\fB\fISDL_SYSTEM_CURSOR_IBEAM \fP\fP
I-beam 
.TP
\fB\fISDL_SYSTEM_CURSOR_WAIT \fP\fP
Wait 
.TP
\fB\fISDL_SYSTEM_CURSOR_CROSSHAIR \fP\fP
Crosshair 
.TP
\fB\fISDL_SYSTEM_CURSOR_WAITARROW \fP\fP
Small wait cursor (or Wait if not available) 
.TP
\fB\fISDL_SYSTEM_CURSOR_SIZENWSE \fP\fP
Double arrow pointing northwest and southeast 
.TP
\fB\fISDL_SYSTEM_CURSOR_SIZENESW \fP\fP
Double arrow pointing northeast and southwest 
.TP
\fB\fISDL_SYSTEM_CURSOR_SIZEWE \fP\fP
Double arrow pointing west and east 
.TP
\fB\fISDL_SYSTEM_CURSOR_SIZENS \fP\fP
Double arrow pointing north and south 
.TP
\fB\fISDL_SYSTEM_CURSOR_SIZEALL \fP\fP
Four pointed arrow pointing north, south, east, and west 
.TP
\fB\fISDL_SYSTEM_CURSOR_NO \fP\fP
Slashed circle or crossbones 
.TP
\fB\fISDL_SYSTEM_CURSOR_HAND \fP\fP
Hand 
.TP
\fB\fISDL_NUM_SYSTEM_CURSORS \fP\fP
.SH "Function Documentation"
.PP 
.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_CaptureMouse (\fBSDL_bool\fP enabled)"
Capture the mouse and to track input outside an SDL window\&.
.PP
Capturing enables your app to obtain mouse events globally, instead of just within your window\&. Not all video targets support this function\&. When capturing is enabled, the current window will get all mouse events, but unlike relative mode, no change is made to the cursor and it is not restrained to your window\&.
.PP
This function may also deny mouse input to other windows--both those in your application and others on the system--so you should use this function sparingly, and in small bursts\&. For example, you might want to track the mouse while the user is dragging something, until the user releases a mouse button\&. It is not recommended that you capture the mouse for long periods of time, such as the entire time your app is running\&. For that, you should probably use \fBSDL_SetRelativeMouseMode()\fP or \fBSDL_SetWindowGrab()\fP, depending on your goals\&.
.PP
While captured, mouse events still report coordinates relative to the current (foreground) window, but those coordinates may be outside the bounds of the window (including negative values)\&. Capturing is only allowed for the foreground window\&. If the window loses focus while capturing, the capture will be disabled automatically\&.
.PP
While capturing is enabled, the current window will have the \fCSDL_WINDOW_MOUSE_CAPTURE\fP flag set\&.
.PP
\fBParameters\fP
.RS 4
\fIenabled\fP SDL_TRUE to enable capturing, SDL_FALSE to disable\&. 
.RE
.PP
\fBReturns\fP
.RS 4
0 on success or -1 if not supported; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.4\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_GetGlobalMouseState\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP \fBSDL_Cursor\fP *\fBSDLCALL\fP SDL_CreateColorCursor (\fBSDL_Surface\fP * surface, int hot_x, int hot_y)"
Create a color cursor\&.
.PP
\fBParameters\fP
.RS 4
\fIsurface\fP an \fBSDL_Surface\fP structure representing the cursor image 
.br
\fIhot_x\fP the x position of the cursor hot spot 
.br
\fIhot_y\fP the y position of the cursor hot spot 
.RE
.PP
\fBReturns\fP
.RS 4
the new cursor on success or NULL on failure; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_CreateCursor\fP 
.PP
\fBSDL_FreeCursor\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP \fBSDL_Cursor\fP *\fBSDLCALL\fP SDL_CreateCursor (const \fBUint8\fP * data, const \fBUint8\fP * mask, int w, int h, int hot_x, int hot_y)"
Create a cursor using the specified bitmap data and mask (in MSB format)\&.
.PP
\fCmask\fP has to be in MSB (Most Significant Bit) format\&.
.PP
The cursor width (\fCw\fP) must be a multiple of 8 bits\&.
.PP
The cursor is created in black and white according to the following:
.PP
.IP "\(bu" 2
data=0, mask=1: white
.IP "\(bu" 2
data=1, mask=1: black
.IP "\(bu" 2
data=0, mask=0: transparent
.IP "\(bu" 2
data=1, mask=0: inverted color if possible, black if not\&.
.PP
.PP
Cursors created with this function must be freed with \fBSDL_FreeCursor()\fP\&.
.PP
If you want to have a color cursor, or create your cursor from an \fBSDL_Surface\fP, you should use \fBSDL_CreateColorCursor()\fP\&. Alternately, you can hide the cursor and draw your own as part of your game's rendering, but it will be bound to the framerate\&.
.PP
Also, since SDL 2\&.0\&.0, \fBSDL_CreateSystemCursor()\fP is available, which provides twelve readily available system cursors to pick from\&.
.PP
\fBParameters\fP
.RS 4
\fIdata\fP the color value for each pixel of the cursor 
.br
\fImask\fP the mask value for each pixel of the cursor 
.br
\fIw\fP the width of the cursor 
.br
\fIh\fP the height of the cursor 
.br
\fIhot_x\fP the X-axis location of the upper left corner of the cursor relative to the actual mouse position 
.br
\fIhot_y\fP the Y-axis location of the upper left corner of the cursor relative to the actual mouse position 
.RE
.PP
\fBReturns\fP
.RS 4
a new cursor with the specified parameters on success or NULL on failure; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_FreeCursor\fP 
.PP
\fBSDL_SetCursor\fP 
.PP
\fBSDL_ShowCursor\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP \fBSDL_Cursor\fP *\fBSDLCALL\fP SDL_CreateSystemCursor (\fBSDL_SystemCursor\fP id)"
Create a system cursor\&.
.PP
\fBParameters\fP
.RS 4
\fIid\fP an SDL_SystemCursor enum value 
.RE
.PP
\fBReturns\fP
.RS 4
a cursor on success or NULL on failure; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_FreeCursor\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP \fBvoid\fP \fBSDLCALL\fP SDL_FreeCursor (\fBSDL_Cursor\fP * cursor)"
Free a previously-created cursor\&.
.PP
Use this function to free cursor resources created with \fBSDL_CreateCursor()\fP, \fBSDL_CreateColorCursor()\fP or \fBSDL_CreateSystemCursor()\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIcursor\fP the cursor to free
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_CreateColorCursor\fP 
.PP
\fBSDL_CreateCursor\fP 
.PP
\fBSDL_CreateSystemCursor\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP \fBSDL_Cursor\fP *\fBSDLCALL\fP SDL_GetCursor (\fBvoid\fP)"
Get the active cursor\&.
.PP
This function returns a pointer to the current cursor which is owned by the library\&. It is not necessary to free the cursor with \fBSDL_FreeCursor()\fP\&.
.PP
\fBReturns\fP
.RS 4
the active cursor or NULL if there is no mouse\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_SetCursor\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP \fBSDL_Cursor\fP *\fBSDLCALL\fP SDL_GetDefaultCursor (\fBvoid\fP)"
Get the default cursor\&.
.PP
\fBReturns\fP
.RS 4
the default cursor on success or NULL on failure\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_CreateSystemCursor\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP \fBUint32\fP \fBSDLCALL\fP SDL_GetGlobalMouseState (int * x, int * y)"
Get the current state of the mouse in relation to the desktop\&.
.PP
This works similarly to \fBSDL_GetMouseState()\fP, but the coordinates will be reported relative to the top-left of the desktop\&. This can be useful if you need to track the mouse outside of a specific window and \fBSDL_CaptureMouse()\fP doesn't fit your needs\&. For example, it could be useful if you need to track the mouse while dragging a window, where coordinates relative to a window might not be in sync at all times\&.
.PP
Note: \fBSDL_GetMouseState()\fP returns the mouse position as SDL understands it from the last pump of the event queue\&. This function, however, queries the OS for the current mouse position, and as such, might be a slightly less efficient function\&. Unless you know what you're doing and have a good reason to use this function, you probably want \fBSDL_GetMouseState()\fP instead\&.
.PP
\fBParameters\fP
.RS 4
\fIx\fP filled in with the current X coord relative to the desktop; can be NULL 
.br
\fIy\fP filled in with the current Y coord relative to the desktop; can be NULL 
.RE
.PP
\fBReturns\fP
.RS 4
the current button state as a bitmask which can be tested using the \fBSDL_BUTTON(X)\fP macros\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.4\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_CaptureMouse\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP \fBSDL_Window\fP *\fBSDLCALL\fP SDL_GetMouseFocus (\fBvoid\fP)"
Get the window which currently has mouse focus\&.
.PP
\fBReturns\fP
.RS 4
the window with mouse focus\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&. 
.RE
.PP

.SS "\fBDECLSPEC\fP \fBUint32\fP \fBSDLCALL\fP SDL_GetMouseState (int * x, int * y)"
Retrieve the current state of the mouse\&.
.PP
The current button state is returned as a button bitmask, which can be tested using the \fC\fBSDL_BUTTON(X)\fP\fP macros (where \fCX\fP is generally 1 for the left, 2 for middle, 3 for the right button), and \fCx\fP and \fCy\fP are set to the mouse cursor position relative to the focus window\&. You can pass NULL for either \fCx\fP or \fCy\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIx\fP the x coordinate of the mouse cursor position relative to the focus window 
.br
\fIy\fP the y coordinate of the mouse cursor position relative to the focus window 
.RE
.PP
\fBReturns\fP
.RS 4
a 32-bit button bitmask of the current button state\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_GetGlobalMouseState\fP 
.PP
\fBSDL_GetRelativeMouseState\fP 
.PP
\fBSDL_PumpEvents\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP \fBSDL_bool\fP \fBSDLCALL\fP SDL_GetRelativeMouseMode (\fBvoid\fP)"
Query whether relative mouse mode is enabled\&.
.PP
\fBReturns\fP
.RS 4
SDL_TRUE if relative mode is enabled or SDL_FALSE otherwise\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_SetRelativeMouseMode\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP \fBUint32\fP \fBSDLCALL\fP SDL_GetRelativeMouseState (int * x, int * y)"
Retrieve the relative state of the mouse\&.
.PP
The current button state is returned as a button bitmask, which can be tested using the \fC\fBSDL_BUTTON(X)\fP\fP macros (where \fCX\fP is generally 1 for the left, 2 for middle, 3 for the right button), and \fCx\fP and \fCy\fP are set to the mouse deltas since the last call to \fBSDL_GetRelativeMouseState()\fP or since event initialization\&. You can pass NULL for either \fCx\fP or \fCy\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIx\fP a pointer filled with the last recorded x coordinate of the mouse 
.br
\fIy\fP a pointer filled with the last recorded y coordinate of the mouse 
.RE
.PP
\fBReturns\fP
.RS 4
a 32-bit button bitmask of the relative button state\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_GetMouseState\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP \fBvoid\fP \fBSDLCALL\fP SDL_SetCursor (\fBSDL_Cursor\fP * cursor)"
Set the active cursor\&.
.PP
This function sets the currently active cursor to the specified one\&. If the cursor is currently visible, the change will be immediately represented on the display\&. SDL_SetCursor(NULL) can be used to force cursor redraw, if this is desired for any reason\&.
.PP
\fBParameters\fP
.RS 4
\fIcursor\fP a cursor to make active
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_CreateCursor\fP 
.PP
\fBSDL_GetCursor\fP 
.PP
\fBSDL_ShowCursor\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_SetRelativeMouseMode (\fBSDL_bool\fP enabled)"
Set relative mouse mode\&.
.PP
While the mouse is in relative mode, the cursor is hidden, and the driver will try to report continuous motion in the current window\&. Only relative motion events will be delivered, the mouse position will not change\&.
.PP
Note that this function will not be able to provide continuous relative motion when used over Microsoft Remote Desktop, instead motion is limited to the bounds of the screen\&.
.PP
This function will flush any pending mouse motion\&.
.PP
\fBParameters\fP
.RS 4
\fIenabled\fP SDL_TRUE to enable relative mode, SDL_FALSE to disable\&. 
.RE
.PP
\fBReturns\fP
.RS 4
0 on success or a negative error code on failure; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
If relative mode is not supported, this returns -1\&.
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_GetRelativeMouseMode\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_ShowCursor (int toggle)"
Toggle whether or not the cursor is shown\&.
.PP
The cursor starts off displayed but can be turned off\&. Passing \fCSDL_ENABLE\fP displays the cursor and passing \fCSDL_DISABLE\fP hides it\&.
.PP
The current state of the mouse cursor can be queried by passing \fCSDL_QUERY\fP; either \fCSDL_DISABLE\fP or \fCSDL_ENABLE\fP will be returned\&.
.PP
\fBParameters\fP
.RS 4
\fItoggle\fP \fCSDL_ENABLE\fP to show the cursor, \fCSDL_DISABLE\fP to hide it, \fCSDL_QUERY\fP to query the current state without changing it\&. 
.RE
.PP
\fBReturns\fP
.RS 4
\fCSDL_ENABLE\fP if the cursor is shown, or \fCSDL_DISABLE\fP if the cursor is hidden, or a negative error code on failure; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_CreateCursor\fP 
.PP
\fBSDL_SetCursor\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_WarpMouseGlobal (int x, int y)"
Move the mouse to the given position in global screen space\&.
.PP
This function generates a mouse motion event\&.
.PP
A failure of this function usually means that it is unsupported by a platform\&.
.PP
Note that this function will appear to succeed, but not actually move the mouse when used over Microsoft Remote Desktop\&.
.PP
\fBParameters\fP
.RS 4
\fIx\fP the x coordinate 
.br
\fIy\fP the y coordinate 
.RE
.PP
\fBReturns\fP
.RS 4
0 on success or a negative error code on failure; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.4\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_WarpMouseInWindow\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP \fBvoid\fP \fBSDLCALL\fP SDL_WarpMouseInWindow (\fBSDL_Window\fP * window, int x, int y)"
Move the mouse cursor to the given position within the window\&.
.PP
This function generates a mouse motion event\&.
.PP
Note that this function will appear to succeed, but not actually move the mouse when used over Microsoft Remote Desktop\&.
.PP
\fBParameters\fP
.RS 4
\fIwindow\fP the window to move the mouse into, or NULL for the current mouse focus 
.br
\fIx\fP the x coordinate within the window 
.br
\fIy\fP the y coordinate within the window
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_WarpMouseGlobal\fP 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for RayTracer from the source code\&.
