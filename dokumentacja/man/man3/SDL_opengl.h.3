.TH "D:/RayTracing/include/SDL_opengl.h" 3 "Mon Jan 24 2022" "Version 1.0" "RayTracer" \" -*- nroff -*-
.ad l
.nh
.SH NAME
D:/RayTracing/include/SDL_opengl.h
.SH SYNOPSIS
.br
.PP
\fC#include 'SDL_config\&.h'\fP
.br
\fC#include 'SDL_opengl_glext\&.h'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fB__gl_h_\fP"
.br
.ti -1c
.RI "#define \fBGLAPI\fP   extern"
.br
.ti -1c
.RI "#define \fBGLAPIENTRY\fP"
.br
.ti -1c
.RI "#define \fBAPIENTRY\fP   \fBGLAPIENTRY\fP"
.br
.ti -1c
.RI "#define \fBAPIENTRYP\fP   \fBAPIENTRY\fP *"
.br
.ti -1c
.RI "#define \fBGLAPIENTRYP\fP   \fBGLAPIENTRY\fP *"
.br
.ti -1c
.RI "#define \fBGL_VERSION_1_1\fP   1"
.br
.ti -1c
.RI "#define \fBGL_VERSION_1_2\fP   1"
.br
.ti -1c
.RI "#define \fBGL_VERSION_1_3\fP   1"
.br
.ti -1c
.RI "#define \fBGL_ARB_imaging\fP   1"
.br
.ti -1c
.RI "#define \fBGL_FALSE\fP   0"
.br
.ti -1c
.RI "#define \fBGL_TRUE\fP   1"
.br
.ti -1c
.RI "#define \fBGL_BYTE\fP   0x1400"
.br
.ti -1c
.RI "#define \fBGL_UNSIGNED_BYTE\fP   0x1401"
.br
.ti -1c
.RI "#define \fBGL_SHORT\fP   0x1402"
.br
.ti -1c
.RI "#define \fBGL_UNSIGNED_SHORT\fP   0x1403"
.br
.ti -1c
.RI "#define \fBGL_INT\fP   0x1404"
.br
.ti -1c
.RI "#define \fBGL_UNSIGNED_INT\fP   0x1405"
.br
.ti -1c
.RI "#define \fBGL_FLOAT\fP   0x1406"
.br
.ti -1c
.RI "#define \fBGL_2_BYTES\fP   0x1407"
.br
.ti -1c
.RI "#define \fBGL_3_BYTES\fP   0x1408"
.br
.ti -1c
.RI "#define \fBGL_4_BYTES\fP   0x1409"
.br
.ti -1c
.RI "#define \fBGL_DOUBLE\fP   0x140A"
.br
.ti -1c
.RI "#define \fBGL_POINTS\fP   0x0000"
.br
.ti -1c
.RI "#define \fBGL_LINES\fP   0x0001"
.br
.ti -1c
.RI "#define \fBGL_LINE_LOOP\fP   0x0002"
.br
.ti -1c
.RI "#define \fBGL_LINE_STRIP\fP   0x0003"
.br
.ti -1c
.RI "#define \fBGL_TRIANGLES\fP   0x0004"
.br
.ti -1c
.RI "#define \fBGL_TRIANGLE_STRIP\fP   0x0005"
.br
.ti -1c
.RI "#define \fBGL_TRIANGLE_FAN\fP   0x0006"
.br
.ti -1c
.RI "#define \fBGL_QUADS\fP   0x0007"
.br
.ti -1c
.RI "#define \fBGL_QUAD_STRIP\fP   0x0008"
.br
.ti -1c
.RI "#define \fBGL_POLYGON\fP   0x0009"
.br
.ti -1c
.RI "#define \fBGL_VERTEX_ARRAY\fP   0x8074"
.br
.ti -1c
.RI "#define \fBGL_NORMAL_ARRAY\fP   0x8075"
.br
.ti -1c
.RI "#define \fBGL_COLOR_ARRAY\fP   0x8076"
.br
.ti -1c
.RI "#define \fBGL_INDEX_ARRAY\fP   0x8077"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_COORD_ARRAY\fP   0x8078"
.br
.ti -1c
.RI "#define \fBGL_EDGE_FLAG_ARRAY\fP   0x8079"
.br
.ti -1c
.RI "#define \fBGL_VERTEX_ARRAY_SIZE\fP   0x807A"
.br
.ti -1c
.RI "#define \fBGL_VERTEX_ARRAY_TYPE\fP   0x807B"
.br
.ti -1c
.RI "#define \fBGL_VERTEX_ARRAY_STRIDE\fP   0x807C"
.br
.ti -1c
.RI "#define \fBGL_NORMAL_ARRAY_TYPE\fP   0x807E"
.br
.ti -1c
.RI "#define \fBGL_NORMAL_ARRAY_STRIDE\fP   0x807F"
.br
.ti -1c
.RI "#define \fBGL_COLOR_ARRAY_SIZE\fP   0x8081"
.br
.ti -1c
.RI "#define \fBGL_COLOR_ARRAY_TYPE\fP   0x8082"
.br
.ti -1c
.RI "#define \fBGL_COLOR_ARRAY_STRIDE\fP   0x8083"
.br
.ti -1c
.RI "#define \fBGL_INDEX_ARRAY_TYPE\fP   0x8085"
.br
.ti -1c
.RI "#define \fBGL_INDEX_ARRAY_STRIDE\fP   0x8086"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_COORD_ARRAY_SIZE\fP   0x8088"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_COORD_ARRAY_TYPE\fP   0x8089"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_COORD_ARRAY_STRIDE\fP   0x808A"
.br
.ti -1c
.RI "#define \fBGL_EDGE_FLAG_ARRAY_STRIDE\fP   0x808C"
.br
.ti -1c
.RI "#define \fBGL_VERTEX_ARRAY_POINTER\fP   0x808E"
.br
.ti -1c
.RI "#define \fBGL_NORMAL_ARRAY_POINTER\fP   0x808F"
.br
.ti -1c
.RI "#define \fBGL_COLOR_ARRAY_POINTER\fP   0x8090"
.br
.ti -1c
.RI "#define \fBGL_INDEX_ARRAY_POINTER\fP   0x8091"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_COORD_ARRAY_POINTER\fP   0x8092"
.br
.ti -1c
.RI "#define \fBGL_EDGE_FLAG_ARRAY_POINTER\fP   0x8093"
.br
.ti -1c
.RI "#define \fBGL_V2F\fP   0x2A20"
.br
.ti -1c
.RI "#define \fBGL_V3F\fP   0x2A21"
.br
.ti -1c
.RI "#define \fBGL_C4UB_V2F\fP   0x2A22"
.br
.ti -1c
.RI "#define \fBGL_C4UB_V3F\fP   0x2A23"
.br
.ti -1c
.RI "#define \fBGL_C3F_V3F\fP   0x2A24"
.br
.ti -1c
.RI "#define \fBGL_N3F_V3F\fP   0x2A25"
.br
.ti -1c
.RI "#define \fBGL_C4F_N3F_V3F\fP   0x2A26"
.br
.ti -1c
.RI "#define \fBGL_T2F_V3F\fP   0x2A27"
.br
.ti -1c
.RI "#define \fBGL_T4F_V4F\fP   0x2A28"
.br
.ti -1c
.RI "#define \fBGL_T2F_C4UB_V3F\fP   0x2A29"
.br
.ti -1c
.RI "#define \fBGL_T2F_C3F_V3F\fP   0x2A2A"
.br
.ti -1c
.RI "#define \fBGL_T2F_N3F_V3F\fP   0x2A2B"
.br
.ti -1c
.RI "#define \fBGL_T2F_C4F_N3F_V3F\fP   0x2A2C"
.br
.ti -1c
.RI "#define \fBGL_T4F_C4F_N3F_V4F\fP   0x2A2D"
.br
.ti -1c
.RI "#define \fBGL_MATRIX_MODE\fP   0x0BA0"
.br
.ti -1c
.RI "#define \fBGL_MODELVIEW\fP   0x1700"
.br
.ti -1c
.RI "#define \fBGL_PROJECTION\fP   0x1701"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE\fP   0x1702"
.br
.ti -1c
.RI "#define \fBGL_POINT_SMOOTH\fP   0x0B10"
.br
.ti -1c
.RI "#define \fBGL_POINT_SIZE\fP   0x0B11"
.br
.ti -1c
.RI "#define \fBGL_POINT_SIZE_GRANULARITY\fP   0x0B13"
.br
.ti -1c
.RI "#define \fBGL_POINT_SIZE_RANGE\fP   0x0B12"
.br
.ti -1c
.RI "#define \fBGL_LINE_SMOOTH\fP   0x0B20"
.br
.ti -1c
.RI "#define \fBGL_LINE_STIPPLE\fP   0x0B24"
.br
.ti -1c
.RI "#define \fBGL_LINE_STIPPLE_PATTERN\fP   0x0B25"
.br
.ti -1c
.RI "#define \fBGL_LINE_STIPPLE_REPEAT\fP   0x0B26"
.br
.ti -1c
.RI "#define \fBGL_LINE_WIDTH\fP   0x0B21"
.br
.ti -1c
.RI "#define \fBGL_LINE_WIDTH_GRANULARITY\fP   0x0B23"
.br
.ti -1c
.RI "#define \fBGL_LINE_WIDTH_RANGE\fP   0x0B22"
.br
.ti -1c
.RI "#define \fBGL_POINT\fP   0x1B00"
.br
.ti -1c
.RI "#define \fBGL_LINE\fP   0x1B01"
.br
.ti -1c
.RI "#define \fBGL_FILL\fP   0x1B02"
.br
.ti -1c
.RI "#define \fBGL_CW\fP   0x0900"
.br
.ti -1c
.RI "#define \fBGL_CCW\fP   0x0901"
.br
.ti -1c
.RI "#define \fBGL_FRONT\fP   0x0404"
.br
.ti -1c
.RI "#define \fBGL_BACK\fP   0x0405"
.br
.ti -1c
.RI "#define \fBGL_POLYGON_MODE\fP   0x0B40"
.br
.ti -1c
.RI "#define \fBGL_POLYGON_SMOOTH\fP   0x0B41"
.br
.ti -1c
.RI "#define \fBGL_POLYGON_STIPPLE\fP   0x0B42"
.br
.ti -1c
.RI "#define \fBGL_EDGE_FLAG\fP   0x0B43"
.br
.ti -1c
.RI "#define \fBGL_CULL_FACE\fP   0x0B44"
.br
.ti -1c
.RI "#define \fBGL_CULL_FACE_MODE\fP   0x0B45"
.br
.ti -1c
.RI "#define \fBGL_FRONT_FACE\fP   0x0B46"
.br
.ti -1c
.RI "#define \fBGL_POLYGON_OFFSET_FACTOR\fP   0x8038"
.br
.ti -1c
.RI "#define \fBGL_POLYGON_OFFSET_UNITS\fP   0x2A00"
.br
.ti -1c
.RI "#define \fBGL_POLYGON_OFFSET_POINT\fP   0x2A01"
.br
.ti -1c
.RI "#define \fBGL_POLYGON_OFFSET_LINE\fP   0x2A02"
.br
.ti -1c
.RI "#define \fBGL_POLYGON_OFFSET_FILL\fP   0x8037"
.br
.ti -1c
.RI "#define \fBGL_COMPILE\fP   0x1300"
.br
.ti -1c
.RI "#define \fBGL_COMPILE_AND_EXECUTE\fP   0x1301"
.br
.ti -1c
.RI "#define \fBGL_LIST_BASE\fP   0x0B32"
.br
.ti -1c
.RI "#define \fBGL_LIST_INDEX\fP   0x0B33"
.br
.ti -1c
.RI "#define \fBGL_LIST_MODE\fP   0x0B30"
.br
.ti -1c
.RI "#define \fBGL_NEVER\fP   0x0200"
.br
.ti -1c
.RI "#define \fBGL_LESS\fP   0x0201"
.br
.ti -1c
.RI "#define \fBGL_EQUAL\fP   0x0202"
.br
.ti -1c
.RI "#define \fBGL_LEQUAL\fP   0x0203"
.br
.ti -1c
.RI "#define \fBGL_GREATER\fP   0x0204"
.br
.ti -1c
.RI "#define \fBGL_NOTEQUAL\fP   0x0205"
.br
.ti -1c
.RI "#define \fBGL_GEQUAL\fP   0x0206"
.br
.ti -1c
.RI "#define \fBGL_ALWAYS\fP   0x0207"
.br
.ti -1c
.RI "#define \fBGL_DEPTH_TEST\fP   0x0B71"
.br
.ti -1c
.RI "#define \fBGL_DEPTH_BITS\fP   0x0D56"
.br
.ti -1c
.RI "#define \fBGL_DEPTH_CLEAR_VALUE\fP   0x0B73"
.br
.ti -1c
.RI "#define \fBGL_DEPTH_FUNC\fP   0x0B74"
.br
.ti -1c
.RI "#define \fBGL_DEPTH_RANGE\fP   0x0B70"
.br
.ti -1c
.RI "#define \fBGL_DEPTH_WRITEMASK\fP   0x0B72"
.br
.ti -1c
.RI "#define \fBGL_DEPTH_COMPONENT\fP   0x1902"
.br
.ti -1c
.RI "#define \fBGL_LIGHTING\fP   0x0B50"
.br
.ti -1c
.RI "#define \fBGL_LIGHT0\fP   0x4000"
.br
.ti -1c
.RI "#define \fBGL_LIGHT1\fP   0x4001"
.br
.ti -1c
.RI "#define \fBGL_LIGHT2\fP   0x4002"
.br
.ti -1c
.RI "#define \fBGL_LIGHT3\fP   0x4003"
.br
.ti -1c
.RI "#define \fBGL_LIGHT4\fP   0x4004"
.br
.ti -1c
.RI "#define \fBGL_LIGHT5\fP   0x4005"
.br
.ti -1c
.RI "#define \fBGL_LIGHT6\fP   0x4006"
.br
.ti -1c
.RI "#define \fBGL_LIGHT7\fP   0x4007"
.br
.ti -1c
.RI "#define \fBGL_SPOT_EXPONENT\fP   0x1205"
.br
.ti -1c
.RI "#define \fBGL_SPOT_CUTOFF\fP   0x1206"
.br
.ti -1c
.RI "#define \fBGL_CONSTANT_ATTENUATION\fP   0x1207"
.br
.ti -1c
.RI "#define \fBGL_LINEAR_ATTENUATION\fP   0x1208"
.br
.ti -1c
.RI "#define \fBGL_QUADRATIC_ATTENUATION\fP   0x1209"
.br
.ti -1c
.RI "#define \fBGL_AMBIENT\fP   0x1200"
.br
.ti -1c
.RI "#define \fBGL_DIFFUSE\fP   0x1201"
.br
.ti -1c
.RI "#define \fBGL_SPECULAR\fP   0x1202"
.br
.ti -1c
.RI "#define \fBGL_SHININESS\fP   0x1601"
.br
.ti -1c
.RI "#define \fBGL_EMISSION\fP   0x1600"
.br
.ti -1c
.RI "#define \fBGL_POSITION\fP   0x1203"
.br
.ti -1c
.RI "#define \fBGL_SPOT_DIRECTION\fP   0x1204"
.br
.ti -1c
.RI "#define \fBGL_AMBIENT_AND_DIFFUSE\fP   0x1602"
.br
.ti -1c
.RI "#define \fBGL_COLOR_INDEXES\fP   0x1603"
.br
.ti -1c
.RI "#define \fBGL_LIGHT_MODEL_TWO_SIDE\fP   0x0B52"
.br
.ti -1c
.RI "#define \fBGL_LIGHT_MODEL_LOCAL_VIEWER\fP   0x0B51"
.br
.ti -1c
.RI "#define \fBGL_LIGHT_MODEL_AMBIENT\fP   0x0B53"
.br
.ti -1c
.RI "#define \fBGL_FRONT_AND_BACK\fP   0x0408"
.br
.ti -1c
.RI "#define \fBGL_SHADE_MODEL\fP   0x0B54"
.br
.ti -1c
.RI "#define \fBGL_FLAT\fP   0x1D00"
.br
.ti -1c
.RI "#define \fBGL_SMOOTH\fP   0x1D01"
.br
.ti -1c
.RI "#define \fBGL_COLOR_MATERIAL\fP   0x0B57"
.br
.ti -1c
.RI "#define \fBGL_COLOR_MATERIAL_FACE\fP   0x0B55"
.br
.ti -1c
.RI "#define \fBGL_COLOR_MATERIAL_PARAMETER\fP   0x0B56"
.br
.ti -1c
.RI "#define \fBGL_NORMALIZE\fP   0x0BA1"
.br
.ti -1c
.RI "#define \fBGL_CLIP_PLANE0\fP   0x3000"
.br
.ti -1c
.RI "#define \fBGL_CLIP_PLANE1\fP   0x3001"
.br
.ti -1c
.RI "#define \fBGL_CLIP_PLANE2\fP   0x3002"
.br
.ti -1c
.RI "#define \fBGL_CLIP_PLANE3\fP   0x3003"
.br
.ti -1c
.RI "#define \fBGL_CLIP_PLANE4\fP   0x3004"
.br
.ti -1c
.RI "#define \fBGL_CLIP_PLANE5\fP   0x3005"
.br
.ti -1c
.RI "#define \fBGL_ACCUM_RED_BITS\fP   0x0D58"
.br
.ti -1c
.RI "#define \fBGL_ACCUM_GREEN_BITS\fP   0x0D59"
.br
.ti -1c
.RI "#define \fBGL_ACCUM_BLUE_BITS\fP   0x0D5A"
.br
.ti -1c
.RI "#define \fBGL_ACCUM_ALPHA_BITS\fP   0x0D5B"
.br
.ti -1c
.RI "#define \fBGL_ACCUM_CLEAR_VALUE\fP   0x0B80"
.br
.ti -1c
.RI "#define \fBGL_ACCUM\fP   0x0100"
.br
.ti -1c
.RI "#define \fBGL_ADD\fP   0x0104"
.br
.ti -1c
.RI "#define \fBGL_LOAD\fP   0x0101"
.br
.ti -1c
.RI "#define \fBGL_MULT\fP   0x0103"
.br
.ti -1c
.RI "#define \fBGL_RETURN\fP   0x0102"
.br
.ti -1c
.RI "#define \fBGL_ALPHA_TEST\fP   0x0BC0"
.br
.ti -1c
.RI "#define \fBGL_ALPHA_TEST_REF\fP   0x0BC2"
.br
.ti -1c
.RI "#define \fBGL_ALPHA_TEST_FUNC\fP   0x0BC1"
.br
.ti -1c
.RI "#define \fBGL_BLEND\fP   0x0BE2"
.br
.ti -1c
.RI "#define \fBGL_BLEND_SRC\fP   0x0BE1"
.br
.ti -1c
.RI "#define \fBGL_BLEND_DST\fP   0x0BE0"
.br
.ti -1c
.RI "#define \fBGL_ZERO\fP   0"
.br
.ti -1c
.RI "#define \fBGL_ONE\fP   1"
.br
.ti -1c
.RI "#define \fBGL_SRC_COLOR\fP   0x0300"
.br
.ti -1c
.RI "#define \fBGL_ONE_MINUS_SRC_COLOR\fP   0x0301"
.br
.ti -1c
.RI "#define \fBGL_SRC_ALPHA\fP   0x0302"
.br
.ti -1c
.RI "#define \fBGL_ONE_MINUS_SRC_ALPHA\fP   0x0303"
.br
.ti -1c
.RI "#define \fBGL_DST_ALPHA\fP   0x0304"
.br
.ti -1c
.RI "#define \fBGL_ONE_MINUS_DST_ALPHA\fP   0x0305"
.br
.ti -1c
.RI "#define \fBGL_DST_COLOR\fP   0x0306"
.br
.ti -1c
.RI "#define \fBGL_ONE_MINUS_DST_COLOR\fP   0x0307"
.br
.ti -1c
.RI "#define \fBGL_SRC_ALPHA_SATURATE\fP   0x0308"
.br
.ti -1c
.RI "#define \fBGL_FEEDBACK\fP   0x1C01"
.br
.ti -1c
.RI "#define \fBGL_RENDER\fP   0x1C00"
.br
.ti -1c
.RI "#define \fBGL_SELECT\fP   0x1C02"
.br
.ti -1c
.RI "#define \fBGL_2D\fP   0x0600"
.br
.ti -1c
.RI "#define \fBGL_3D\fP   0x0601"
.br
.ti -1c
.RI "#define \fBGL_3D_COLOR\fP   0x0602"
.br
.ti -1c
.RI "#define \fBGL_3D_COLOR_TEXTURE\fP   0x0603"
.br
.ti -1c
.RI "#define \fBGL_4D_COLOR_TEXTURE\fP   0x0604"
.br
.ti -1c
.RI "#define \fBGL_POINT_TOKEN\fP   0x0701"
.br
.ti -1c
.RI "#define \fBGL_LINE_TOKEN\fP   0x0702"
.br
.ti -1c
.RI "#define \fBGL_LINE_RESET_TOKEN\fP   0x0707"
.br
.ti -1c
.RI "#define \fBGL_POLYGON_TOKEN\fP   0x0703"
.br
.ti -1c
.RI "#define \fBGL_BITMAP_TOKEN\fP   0x0704"
.br
.ti -1c
.RI "#define \fBGL_DRAW_PIXEL_TOKEN\fP   0x0705"
.br
.ti -1c
.RI "#define \fBGL_COPY_PIXEL_TOKEN\fP   0x0706"
.br
.ti -1c
.RI "#define \fBGL_PASS_THROUGH_TOKEN\fP   0x0700"
.br
.ti -1c
.RI "#define \fBGL_FEEDBACK_BUFFER_POINTER\fP   0x0DF0"
.br
.ti -1c
.RI "#define \fBGL_FEEDBACK_BUFFER_SIZE\fP   0x0DF1"
.br
.ti -1c
.RI "#define \fBGL_FEEDBACK_BUFFER_TYPE\fP   0x0DF2"
.br
.ti -1c
.RI "#define \fBGL_SELECTION_BUFFER_POINTER\fP   0x0DF3"
.br
.ti -1c
.RI "#define \fBGL_SELECTION_BUFFER_SIZE\fP   0x0DF4"
.br
.ti -1c
.RI "#define \fBGL_FOG\fP   0x0B60"
.br
.ti -1c
.RI "#define \fBGL_FOG_MODE\fP   0x0B65"
.br
.ti -1c
.RI "#define \fBGL_FOG_DENSITY\fP   0x0B62"
.br
.ti -1c
.RI "#define \fBGL_FOG_COLOR\fP   0x0B66"
.br
.ti -1c
.RI "#define \fBGL_FOG_INDEX\fP   0x0B61"
.br
.ti -1c
.RI "#define \fBGL_FOG_START\fP   0x0B63"
.br
.ti -1c
.RI "#define \fBGL_FOG_END\fP   0x0B64"
.br
.ti -1c
.RI "#define \fBGL_LINEAR\fP   0x2601"
.br
.ti -1c
.RI "#define \fBGL_EXP\fP   0x0800"
.br
.ti -1c
.RI "#define \fBGL_EXP2\fP   0x0801"
.br
.ti -1c
.RI "#define \fBGL_LOGIC_OP\fP   0x0BF1"
.br
.ti -1c
.RI "#define \fBGL_INDEX_LOGIC_OP\fP   0x0BF1"
.br
.ti -1c
.RI "#define \fBGL_COLOR_LOGIC_OP\fP   0x0BF2"
.br
.ti -1c
.RI "#define \fBGL_LOGIC_OP_MODE\fP   0x0BF0"
.br
.ti -1c
.RI "#define \fBGL_CLEAR\fP   0x1500"
.br
.ti -1c
.RI "#define \fBGL_SET\fP   0x150F"
.br
.ti -1c
.RI "#define \fBGL_COPY\fP   0x1503"
.br
.ti -1c
.RI "#define \fBGL_COPY_INVERTED\fP   0x150C"
.br
.ti -1c
.RI "#define \fBGL_NOOP\fP   0x1505"
.br
.ti -1c
.RI "#define \fBGL_INVERT\fP   0x150A"
.br
.ti -1c
.RI "#define \fBGL_AND\fP   0x1501"
.br
.ti -1c
.RI "#define \fBGL_NAND\fP   0x150E"
.br
.ti -1c
.RI "#define \fBGL_OR\fP   0x1507"
.br
.ti -1c
.RI "#define \fBGL_NOR\fP   0x1508"
.br
.ti -1c
.RI "#define \fBGL_XOR\fP   0x1506"
.br
.ti -1c
.RI "#define \fBGL_EQUIV\fP   0x1509"
.br
.ti -1c
.RI "#define \fBGL_AND_REVERSE\fP   0x1502"
.br
.ti -1c
.RI "#define \fBGL_AND_INVERTED\fP   0x1504"
.br
.ti -1c
.RI "#define \fBGL_OR_REVERSE\fP   0x150B"
.br
.ti -1c
.RI "#define \fBGL_OR_INVERTED\fP   0x150D"
.br
.ti -1c
.RI "#define \fBGL_STENCIL_BITS\fP   0x0D57"
.br
.ti -1c
.RI "#define \fBGL_STENCIL_TEST\fP   0x0B90"
.br
.ti -1c
.RI "#define \fBGL_STENCIL_CLEAR_VALUE\fP   0x0B91"
.br
.ti -1c
.RI "#define \fBGL_STENCIL_FUNC\fP   0x0B92"
.br
.ti -1c
.RI "#define \fBGL_STENCIL_VALUE_MASK\fP   0x0B93"
.br
.ti -1c
.RI "#define \fBGL_STENCIL_FAIL\fP   0x0B94"
.br
.ti -1c
.RI "#define \fBGL_STENCIL_PASS_DEPTH_FAIL\fP   0x0B95"
.br
.ti -1c
.RI "#define \fBGL_STENCIL_PASS_DEPTH_PASS\fP   0x0B96"
.br
.ti -1c
.RI "#define \fBGL_STENCIL_REF\fP   0x0B97"
.br
.ti -1c
.RI "#define \fBGL_STENCIL_WRITEMASK\fP   0x0B98"
.br
.ti -1c
.RI "#define \fBGL_STENCIL_INDEX\fP   0x1901"
.br
.ti -1c
.RI "#define \fBGL_KEEP\fP   0x1E00"
.br
.ti -1c
.RI "#define \fBGL_REPLACE\fP   0x1E01"
.br
.ti -1c
.RI "#define \fBGL_INCR\fP   0x1E02"
.br
.ti -1c
.RI "#define \fBGL_DECR\fP   0x1E03"
.br
.ti -1c
.RI "#define \fBGL_NONE\fP   0"
.br
.ti -1c
.RI "#define \fBGL_LEFT\fP   0x0406"
.br
.ti -1c
.RI "#define \fBGL_RIGHT\fP   0x0407"
.br
.ti -1c
.RI "#define \fBGL_FRONT_LEFT\fP   0x0400"
.br
.ti -1c
.RI "#define \fBGL_FRONT_RIGHT\fP   0x0401"
.br
.ti -1c
.RI "#define \fBGL_BACK_LEFT\fP   0x0402"
.br
.ti -1c
.RI "#define \fBGL_BACK_RIGHT\fP   0x0403"
.br
.ti -1c
.RI "#define \fBGL_AUX0\fP   0x0409"
.br
.ti -1c
.RI "#define \fBGL_AUX1\fP   0x040A"
.br
.ti -1c
.RI "#define \fBGL_AUX2\fP   0x040B"
.br
.ti -1c
.RI "#define \fBGL_AUX3\fP   0x040C"
.br
.ti -1c
.RI "#define \fBGL_COLOR_INDEX\fP   0x1900"
.br
.ti -1c
.RI "#define \fBGL_RED\fP   0x1903"
.br
.ti -1c
.RI "#define \fBGL_GREEN\fP   0x1904"
.br
.ti -1c
.RI "#define \fBGL_BLUE\fP   0x1905"
.br
.ti -1c
.RI "#define \fBGL_ALPHA\fP   0x1906"
.br
.ti -1c
.RI "#define \fBGL_LUMINANCE\fP   0x1909"
.br
.ti -1c
.RI "#define \fBGL_LUMINANCE_ALPHA\fP   0x190A"
.br
.ti -1c
.RI "#define \fBGL_ALPHA_BITS\fP   0x0D55"
.br
.ti -1c
.RI "#define \fBGL_RED_BITS\fP   0x0D52"
.br
.ti -1c
.RI "#define \fBGL_GREEN_BITS\fP   0x0D53"
.br
.ti -1c
.RI "#define \fBGL_BLUE_BITS\fP   0x0D54"
.br
.ti -1c
.RI "#define \fBGL_INDEX_BITS\fP   0x0D51"
.br
.ti -1c
.RI "#define \fBGL_SUBPIXEL_BITS\fP   0x0D50"
.br
.ti -1c
.RI "#define \fBGL_AUX_BUFFERS\fP   0x0C00"
.br
.ti -1c
.RI "#define \fBGL_READ_BUFFER\fP   0x0C02"
.br
.ti -1c
.RI "#define \fBGL_DRAW_BUFFER\fP   0x0C01"
.br
.ti -1c
.RI "#define \fBGL_DOUBLEBUFFER\fP   0x0C32"
.br
.ti -1c
.RI "#define \fBGL_STEREO\fP   0x0C33"
.br
.ti -1c
.RI "#define \fBGL_BITMAP\fP   0x1A00"
.br
.ti -1c
.RI "#define \fBGL_COLOR\fP   0x1800"
.br
.ti -1c
.RI "#define \fBGL_DEPTH\fP   0x1801"
.br
.ti -1c
.RI "#define \fBGL_STENCIL\fP   0x1802"
.br
.ti -1c
.RI "#define \fBGL_DITHER\fP   0x0BD0"
.br
.ti -1c
.RI "#define \fBGL_RGB\fP   0x1907"
.br
.ti -1c
.RI "#define \fBGL_RGBA\fP   0x1908"
.br
.ti -1c
.RI "#define \fBGL_MAX_LIST_NESTING\fP   0x0B31"
.br
.ti -1c
.RI "#define \fBGL_MAX_EVAL_ORDER\fP   0x0D30"
.br
.ti -1c
.RI "#define \fBGL_MAX_LIGHTS\fP   0x0D31"
.br
.ti -1c
.RI "#define \fBGL_MAX_CLIP_PLANES\fP   0x0D32"
.br
.ti -1c
.RI "#define \fBGL_MAX_TEXTURE_SIZE\fP   0x0D33"
.br
.ti -1c
.RI "#define \fBGL_MAX_PIXEL_MAP_TABLE\fP   0x0D34"
.br
.ti -1c
.RI "#define \fBGL_MAX_ATTRIB_STACK_DEPTH\fP   0x0D35"
.br
.ti -1c
.RI "#define \fBGL_MAX_MODELVIEW_STACK_DEPTH\fP   0x0D36"
.br
.ti -1c
.RI "#define \fBGL_MAX_NAME_STACK_DEPTH\fP   0x0D37"
.br
.ti -1c
.RI "#define \fBGL_MAX_PROJECTION_STACK_DEPTH\fP   0x0D38"
.br
.ti -1c
.RI "#define \fBGL_MAX_TEXTURE_STACK_DEPTH\fP   0x0D39"
.br
.ti -1c
.RI "#define \fBGL_MAX_VIEWPORT_DIMS\fP   0x0D3A"
.br
.ti -1c
.RI "#define \fBGL_MAX_CLIENT_ATTRIB_STACK_DEPTH\fP   0x0D3B"
.br
.ti -1c
.RI "#define \fBGL_ATTRIB_STACK_DEPTH\fP   0x0BB0"
.br
.ti -1c
.RI "#define \fBGL_CLIENT_ATTRIB_STACK_DEPTH\fP   0x0BB1"
.br
.ti -1c
.RI "#define \fBGL_COLOR_CLEAR_VALUE\fP   0x0C22"
.br
.ti -1c
.RI "#define \fBGL_COLOR_WRITEMASK\fP   0x0C23"
.br
.ti -1c
.RI "#define \fBGL_CURRENT_INDEX\fP   0x0B01"
.br
.ti -1c
.RI "#define \fBGL_CURRENT_COLOR\fP   0x0B00"
.br
.ti -1c
.RI "#define \fBGL_CURRENT_NORMAL\fP   0x0B02"
.br
.ti -1c
.RI "#define \fBGL_CURRENT_RASTER_COLOR\fP   0x0B04"
.br
.ti -1c
.RI "#define \fBGL_CURRENT_RASTER_DISTANCE\fP   0x0B09"
.br
.ti -1c
.RI "#define \fBGL_CURRENT_RASTER_INDEX\fP   0x0B05"
.br
.ti -1c
.RI "#define \fBGL_CURRENT_RASTER_POSITION\fP   0x0B07"
.br
.ti -1c
.RI "#define \fBGL_CURRENT_RASTER_TEXTURE_COORDS\fP   0x0B06"
.br
.ti -1c
.RI "#define \fBGL_CURRENT_RASTER_POSITION_VALID\fP   0x0B08"
.br
.ti -1c
.RI "#define \fBGL_CURRENT_TEXTURE_COORDS\fP   0x0B03"
.br
.ti -1c
.RI "#define \fBGL_INDEX_CLEAR_VALUE\fP   0x0C20"
.br
.ti -1c
.RI "#define \fBGL_INDEX_MODE\fP   0x0C30"
.br
.ti -1c
.RI "#define \fBGL_INDEX_WRITEMASK\fP   0x0C21"
.br
.ti -1c
.RI "#define \fBGL_MODELVIEW_MATRIX\fP   0x0BA6"
.br
.ti -1c
.RI "#define \fBGL_MODELVIEW_STACK_DEPTH\fP   0x0BA3"
.br
.ti -1c
.RI "#define \fBGL_NAME_STACK_DEPTH\fP   0x0D70"
.br
.ti -1c
.RI "#define \fBGL_PROJECTION_MATRIX\fP   0x0BA7"
.br
.ti -1c
.RI "#define \fBGL_PROJECTION_STACK_DEPTH\fP   0x0BA4"
.br
.ti -1c
.RI "#define \fBGL_RENDER_MODE\fP   0x0C40"
.br
.ti -1c
.RI "#define \fBGL_RGBA_MODE\fP   0x0C31"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_MATRIX\fP   0x0BA8"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_STACK_DEPTH\fP   0x0BA5"
.br
.ti -1c
.RI "#define \fBGL_VIEWPORT\fP   0x0BA2"
.br
.ti -1c
.RI "#define \fBGL_AUTO_NORMAL\fP   0x0D80"
.br
.ti -1c
.RI "#define \fBGL_MAP1_COLOR_4\fP   0x0D90"
.br
.ti -1c
.RI "#define \fBGL_MAP1_INDEX\fP   0x0D91"
.br
.ti -1c
.RI "#define \fBGL_MAP1_NORMAL\fP   0x0D92"
.br
.ti -1c
.RI "#define \fBGL_MAP1_TEXTURE_COORD_1\fP   0x0D93"
.br
.ti -1c
.RI "#define \fBGL_MAP1_TEXTURE_COORD_2\fP   0x0D94"
.br
.ti -1c
.RI "#define \fBGL_MAP1_TEXTURE_COORD_3\fP   0x0D95"
.br
.ti -1c
.RI "#define \fBGL_MAP1_TEXTURE_COORD_4\fP   0x0D96"
.br
.ti -1c
.RI "#define \fBGL_MAP1_VERTEX_3\fP   0x0D97"
.br
.ti -1c
.RI "#define \fBGL_MAP1_VERTEX_4\fP   0x0D98"
.br
.ti -1c
.RI "#define \fBGL_MAP2_COLOR_4\fP   0x0DB0"
.br
.ti -1c
.RI "#define \fBGL_MAP2_INDEX\fP   0x0DB1"
.br
.ti -1c
.RI "#define \fBGL_MAP2_NORMAL\fP   0x0DB2"
.br
.ti -1c
.RI "#define \fBGL_MAP2_TEXTURE_COORD_1\fP   0x0DB3"
.br
.ti -1c
.RI "#define \fBGL_MAP2_TEXTURE_COORD_2\fP   0x0DB4"
.br
.ti -1c
.RI "#define \fBGL_MAP2_TEXTURE_COORD_3\fP   0x0DB5"
.br
.ti -1c
.RI "#define \fBGL_MAP2_TEXTURE_COORD_4\fP   0x0DB6"
.br
.ti -1c
.RI "#define \fBGL_MAP2_VERTEX_3\fP   0x0DB7"
.br
.ti -1c
.RI "#define \fBGL_MAP2_VERTEX_4\fP   0x0DB8"
.br
.ti -1c
.RI "#define \fBGL_MAP1_GRID_DOMAIN\fP   0x0DD0"
.br
.ti -1c
.RI "#define \fBGL_MAP1_GRID_SEGMENTS\fP   0x0DD1"
.br
.ti -1c
.RI "#define \fBGL_MAP2_GRID_DOMAIN\fP   0x0DD2"
.br
.ti -1c
.RI "#define \fBGL_MAP2_GRID_SEGMENTS\fP   0x0DD3"
.br
.ti -1c
.RI "#define \fBGL_COEFF\fP   0x0A00"
.br
.ti -1c
.RI "#define \fBGL_ORDER\fP   0x0A01"
.br
.ti -1c
.RI "#define \fBGL_DOMAIN\fP   0x0A02"
.br
.ti -1c
.RI "#define \fBGL_PERSPECTIVE_CORRECTION_HINT\fP   0x0C50"
.br
.ti -1c
.RI "#define \fBGL_POINT_SMOOTH_HINT\fP   0x0C51"
.br
.ti -1c
.RI "#define \fBGL_LINE_SMOOTH_HINT\fP   0x0C52"
.br
.ti -1c
.RI "#define \fBGL_POLYGON_SMOOTH_HINT\fP   0x0C53"
.br
.ti -1c
.RI "#define \fBGL_FOG_HINT\fP   0x0C54"
.br
.ti -1c
.RI "#define \fBGL_DONT_CARE\fP   0x1100"
.br
.ti -1c
.RI "#define \fBGL_FASTEST\fP   0x1101"
.br
.ti -1c
.RI "#define \fBGL_NICEST\fP   0x1102"
.br
.ti -1c
.RI "#define \fBGL_SCISSOR_BOX\fP   0x0C10"
.br
.ti -1c
.RI "#define \fBGL_SCISSOR_TEST\fP   0x0C11"
.br
.ti -1c
.RI "#define \fBGL_MAP_COLOR\fP   0x0D10"
.br
.ti -1c
.RI "#define \fBGL_MAP_STENCIL\fP   0x0D11"
.br
.ti -1c
.RI "#define \fBGL_INDEX_SHIFT\fP   0x0D12"
.br
.ti -1c
.RI "#define \fBGL_INDEX_OFFSET\fP   0x0D13"
.br
.ti -1c
.RI "#define \fBGL_RED_SCALE\fP   0x0D14"
.br
.ti -1c
.RI "#define \fBGL_RED_BIAS\fP   0x0D15"
.br
.ti -1c
.RI "#define \fBGL_GREEN_SCALE\fP   0x0D18"
.br
.ti -1c
.RI "#define \fBGL_GREEN_BIAS\fP   0x0D19"
.br
.ti -1c
.RI "#define \fBGL_BLUE_SCALE\fP   0x0D1A"
.br
.ti -1c
.RI "#define \fBGL_BLUE_BIAS\fP   0x0D1B"
.br
.ti -1c
.RI "#define \fBGL_ALPHA_SCALE\fP   0x0D1C"
.br
.ti -1c
.RI "#define \fBGL_ALPHA_BIAS\fP   0x0D1D"
.br
.ti -1c
.RI "#define \fBGL_DEPTH_SCALE\fP   0x0D1E"
.br
.ti -1c
.RI "#define \fBGL_DEPTH_BIAS\fP   0x0D1F"
.br
.ti -1c
.RI "#define \fBGL_PIXEL_MAP_S_TO_S_SIZE\fP   0x0CB1"
.br
.ti -1c
.RI "#define \fBGL_PIXEL_MAP_I_TO_I_SIZE\fP   0x0CB0"
.br
.ti -1c
.RI "#define \fBGL_PIXEL_MAP_I_TO_R_SIZE\fP   0x0CB2"
.br
.ti -1c
.RI "#define \fBGL_PIXEL_MAP_I_TO_G_SIZE\fP   0x0CB3"
.br
.ti -1c
.RI "#define \fBGL_PIXEL_MAP_I_TO_B_SIZE\fP   0x0CB4"
.br
.ti -1c
.RI "#define \fBGL_PIXEL_MAP_I_TO_A_SIZE\fP   0x0CB5"
.br
.ti -1c
.RI "#define \fBGL_PIXEL_MAP_R_TO_R_SIZE\fP   0x0CB6"
.br
.ti -1c
.RI "#define \fBGL_PIXEL_MAP_G_TO_G_SIZE\fP   0x0CB7"
.br
.ti -1c
.RI "#define \fBGL_PIXEL_MAP_B_TO_B_SIZE\fP   0x0CB8"
.br
.ti -1c
.RI "#define \fBGL_PIXEL_MAP_A_TO_A_SIZE\fP   0x0CB9"
.br
.ti -1c
.RI "#define \fBGL_PIXEL_MAP_S_TO_S\fP   0x0C71"
.br
.ti -1c
.RI "#define \fBGL_PIXEL_MAP_I_TO_I\fP   0x0C70"
.br
.ti -1c
.RI "#define \fBGL_PIXEL_MAP_I_TO_R\fP   0x0C72"
.br
.ti -1c
.RI "#define \fBGL_PIXEL_MAP_I_TO_G\fP   0x0C73"
.br
.ti -1c
.RI "#define \fBGL_PIXEL_MAP_I_TO_B\fP   0x0C74"
.br
.ti -1c
.RI "#define \fBGL_PIXEL_MAP_I_TO_A\fP   0x0C75"
.br
.ti -1c
.RI "#define \fBGL_PIXEL_MAP_R_TO_R\fP   0x0C76"
.br
.ti -1c
.RI "#define \fBGL_PIXEL_MAP_G_TO_G\fP   0x0C77"
.br
.ti -1c
.RI "#define \fBGL_PIXEL_MAP_B_TO_B\fP   0x0C78"
.br
.ti -1c
.RI "#define \fBGL_PIXEL_MAP_A_TO_A\fP   0x0C79"
.br
.ti -1c
.RI "#define \fBGL_PACK_ALIGNMENT\fP   0x0D05"
.br
.ti -1c
.RI "#define \fBGL_PACK_LSB_FIRST\fP   0x0D01"
.br
.ti -1c
.RI "#define \fBGL_PACK_ROW_LENGTH\fP   0x0D02"
.br
.ti -1c
.RI "#define \fBGL_PACK_SKIP_PIXELS\fP   0x0D04"
.br
.ti -1c
.RI "#define \fBGL_PACK_SKIP_ROWS\fP   0x0D03"
.br
.ti -1c
.RI "#define \fBGL_PACK_SWAP_BYTES\fP   0x0D00"
.br
.ti -1c
.RI "#define \fBGL_UNPACK_ALIGNMENT\fP   0x0CF5"
.br
.ti -1c
.RI "#define \fBGL_UNPACK_LSB_FIRST\fP   0x0CF1"
.br
.ti -1c
.RI "#define \fBGL_UNPACK_ROW_LENGTH\fP   0x0CF2"
.br
.ti -1c
.RI "#define \fBGL_UNPACK_SKIP_PIXELS\fP   0x0CF4"
.br
.ti -1c
.RI "#define \fBGL_UNPACK_SKIP_ROWS\fP   0x0CF3"
.br
.ti -1c
.RI "#define \fBGL_UNPACK_SWAP_BYTES\fP   0x0CF0"
.br
.ti -1c
.RI "#define \fBGL_ZOOM_X\fP   0x0D16"
.br
.ti -1c
.RI "#define \fBGL_ZOOM_Y\fP   0x0D17"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_ENV\fP   0x2300"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_ENV_MODE\fP   0x2200"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_1D\fP   0x0DE0"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_2D\fP   0x0DE1"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_WRAP_S\fP   0x2802"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_WRAP_T\fP   0x2803"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_MAG_FILTER\fP   0x2800"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_MIN_FILTER\fP   0x2801"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_ENV_COLOR\fP   0x2201"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_GEN_S\fP   0x0C60"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_GEN_T\fP   0x0C61"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_GEN_R\fP   0x0C62"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_GEN_Q\fP   0x0C63"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_GEN_MODE\fP   0x2500"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_BORDER_COLOR\fP   0x1004"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_WIDTH\fP   0x1000"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_HEIGHT\fP   0x1001"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_BORDER\fP   0x1005"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_COMPONENTS\fP   0x1003"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_RED_SIZE\fP   0x805C"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_GREEN_SIZE\fP   0x805D"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_BLUE_SIZE\fP   0x805E"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_ALPHA_SIZE\fP   0x805F"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_LUMINANCE_SIZE\fP   0x8060"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_INTENSITY_SIZE\fP   0x8061"
.br
.ti -1c
.RI "#define \fBGL_NEAREST_MIPMAP_NEAREST\fP   0x2700"
.br
.ti -1c
.RI "#define \fBGL_NEAREST_MIPMAP_LINEAR\fP   0x2702"
.br
.ti -1c
.RI "#define \fBGL_LINEAR_MIPMAP_NEAREST\fP   0x2701"
.br
.ti -1c
.RI "#define \fBGL_LINEAR_MIPMAP_LINEAR\fP   0x2703"
.br
.ti -1c
.RI "#define \fBGL_OBJECT_LINEAR\fP   0x2401"
.br
.ti -1c
.RI "#define \fBGL_OBJECT_PLANE\fP   0x2501"
.br
.ti -1c
.RI "#define \fBGL_EYE_LINEAR\fP   0x2400"
.br
.ti -1c
.RI "#define \fBGL_EYE_PLANE\fP   0x2502"
.br
.ti -1c
.RI "#define \fBGL_SPHERE_MAP\fP   0x2402"
.br
.ti -1c
.RI "#define \fBGL_DECAL\fP   0x2101"
.br
.ti -1c
.RI "#define \fBGL_MODULATE\fP   0x2100"
.br
.ti -1c
.RI "#define \fBGL_NEAREST\fP   0x2600"
.br
.ti -1c
.RI "#define \fBGL_REPEAT\fP   0x2901"
.br
.ti -1c
.RI "#define \fBGL_CLAMP\fP   0x2900"
.br
.ti -1c
.RI "#define \fBGL_S\fP   0x2000"
.br
.ti -1c
.RI "#define \fBGL_T\fP   0x2001"
.br
.ti -1c
.RI "#define \fBGL_R\fP   0x2002"
.br
.ti -1c
.RI "#define \fBGL_Q\fP   0x2003"
.br
.ti -1c
.RI "#define \fBGL_VENDOR\fP   0x1F00"
.br
.ti -1c
.RI "#define \fBGL_RENDERER\fP   0x1F01"
.br
.ti -1c
.RI "#define \fBGL_VERSION\fP   0x1F02"
.br
.ti -1c
.RI "#define \fBGL_EXTENSIONS\fP   0x1F03"
.br
.ti -1c
.RI "#define \fBGL_NO_ERROR\fP   0"
.br
.ti -1c
.RI "#define \fBGL_INVALID_ENUM\fP   0x0500"
.br
.ti -1c
.RI "#define \fBGL_INVALID_VALUE\fP   0x0501"
.br
.ti -1c
.RI "#define \fBGL_INVALID_OPERATION\fP   0x0502"
.br
.ti -1c
.RI "#define \fBGL_STACK_OVERFLOW\fP   0x0503"
.br
.ti -1c
.RI "#define \fBGL_STACK_UNDERFLOW\fP   0x0504"
.br
.ti -1c
.RI "#define \fBGL_OUT_OF_MEMORY\fP   0x0505"
.br
.ti -1c
.RI "#define \fBGL_CURRENT_BIT\fP   0x00000001"
.br
.ti -1c
.RI "#define \fBGL_POINT_BIT\fP   0x00000002"
.br
.ti -1c
.RI "#define \fBGL_LINE_BIT\fP   0x00000004"
.br
.ti -1c
.RI "#define \fBGL_POLYGON_BIT\fP   0x00000008"
.br
.ti -1c
.RI "#define \fBGL_POLYGON_STIPPLE_BIT\fP   0x00000010"
.br
.ti -1c
.RI "#define \fBGL_PIXEL_MODE_BIT\fP   0x00000020"
.br
.ti -1c
.RI "#define \fBGL_LIGHTING_BIT\fP   0x00000040"
.br
.ti -1c
.RI "#define \fBGL_FOG_BIT\fP   0x00000080"
.br
.ti -1c
.RI "#define \fBGL_DEPTH_BUFFER_BIT\fP   0x00000100"
.br
.ti -1c
.RI "#define \fBGL_ACCUM_BUFFER_BIT\fP   0x00000200"
.br
.ti -1c
.RI "#define \fBGL_STENCIL_BUFFER_BIT\fP   0x00000400"
.br
.ti -1c
.RI "#define \fBGL_VIEWPORT_BIT\fP   0x00000800"
.br
.ti -1c
.RI "#define \fBGL_TRANSFORM_BIT\fP   0x00001000"
.br
.ti -1c
.RI "#define \fBGL_ENABLE_BIT\fP   0x00002000"
.br
.ti -1c
.RI "#define \fBGL_COLOR_BUFFER_BIT\fP   0x00004000"
.br
.ti -1c
.RI "#define \fBGL_HINT_BIT\fP   0x00008000"
.br
.ti -1c
.RI "#define \fBGL_EVAL_BIT\fP   0x00010000"
.br
.ti -1c
.RI "#define \fBGL_LIST_BIT\fP   0x00020000"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_BIT\fP   0x00040000"
.br
.ti -1c
.RI "#define \fBGL_SCISSOR_BIT\fP   0x00080000"
.br
.ti -1c
.RI "#define \fBGL_ALL_ATTRIB_BITS\fP   0x000FFFFF"
.br
.ti -1c
.RI "#define \fBGL_PROXY_TEXTURE_1D\fP   0x8063"
.br
.ti -1c
.RI "#define \fBGL_PROXY_TEXTURE_2D\fP   0x8064"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_PRIORITY\fP   0x8066"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_RESIDENT\fP   0x8067"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_BINDING_1D\fP   0x8068"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_BINDING_2D\fP   0x8069"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_INTERNAL_FORMAT\fP   0x1003"
.br
.ti -1c
.RI "#define \fBGL_ALPHA4\fP   0x803B"
.br
.ti -1c
.RI "#define \fBGL_ALPHA8\fP   0x803C"
.br
.ti -1c
.RI "#define \fBGL_ALPHA12\fP   0x803D"
.br
.ti -1c
.RI "#define \fBGL_ALPHA16\fP   0x803E"
.br
.ti -1c
.RI "#define \fBGL_LUMINANCE4\fP   0x803F"
.br
.ti -1c
.RI "#define \fBGL_LUMINANCE8\fP   0x8040"
.br
.ti -1c
.RI "#define \fBGL_LUMINANCE12\fP   0x8041"
.br
.ti -1c
.RI "#define \fBGL_LUMINANCE16\fP   0x8042"
.br
.ti -1c
.RI "#define \fBGL_LUMINANCE4_ALPHA4\fP   0x8043"
.br
.ti -1c
.RI "#define \fBGL_LUMINANCE6_ALPHA2\fP   0x8044"
.br
.ti -1c
.RI "#define \fBGL_LUMINANCE8_ALPHA8\fP   0x8045"
.br
.ti -1c
.RI "#define \fBGL_LUMINANCE12_ALPHA4\fP   0x8046"
.br
.ti -1c
.RI "#define \fBGL_LUMINANCE12_ALPHA12\fP   0x8047"
.br
.ti -1c
.RI "#define \fBGL_LUMINANCE16_ALPHA16\fP   0x8048"
.br
.ti -1c
.RI "#define \fBGL_INTENSITY\fP   0x8049"
.br
.ti -1c
.RI "#define \fBGL_INTENSITY4\fP   0x804A"
.br
.ti -1c
.RI "#define \fBGL_INTENSITY8\fP   0x804B"
.br
.ti -1c
.RI "#define \fBGL_INTENSITY12\fP   0x804C"
.br
.ti -1c
.RI "#define \fBGL_INTENSITY16\fP   0x804D"
.br
.ti -1c
.RI "#define \fBGL_R3_G3_B2\fP   0x2A10"
.br
.ti -1c
.RI "#define \fBGL_RGB4\fP   0x804F"
.br
.ti -1c
.RI "#define \fBGL_RGB5\fP   0x8050"
.br
.ti -1c
.RI "#define \fBGL_RGB8\fP   0x8051"
.br
.ti -1c
.RI "#define \fBGL_RGB10\fP   0x8052"
.br
.ti -1c
.RI "#define \fBGL_RGB12\fP   0x8053"
.br
.ti -1c
.RI "#define \fBGL_RGB16\fP   0x8054"
.br
.ti -1c
.RI "#define \fBGL_RGBA2\fP   0x8055"
.br
.ti -1c
.RI "#define \fBGL_RGBA4\fP   0x8056"
.br
.ti -1c
.RI "#define \fBGL_RGB5_A1\fP   0x8057"
.br
.ti -1c
.RI "#define \fBGL_RGBA8\fP   0x8058"
.br
.ti -1c
.RI "#define \fBGL_RGB10_A2\fP   0x8059"
.br
.ti -1c
.RI "#define \fBGL_RGBA12\fP   0x805A"
.br
.ti -1c
.RI "#define \fBGL_RGBA16\fP   0x805B"
.br
.ti -1c
.RI "#define \fBGL_CLIENT_PIXEL_STORE_BIT\fP   0x00000001"
.br
.ti -1c
.RI "#define \fBGL_CLIENT_VERTEX_ARRAY_BIT\fP   0x00000002"
.br
.ti -1c
.RI "#define \fBGL_ALL_CLIENT_ATTRIB_BITS\fP   0xFFFFFFFF"
.br
.ti -1c
.RI "#define \fBGL_CLIENT_ALL_ATTRIB_BITS\fP   0xFFFFFFFF"
.br
.ti -1c
.RI "#define \fBGL_RESCALE_NORMAL\fP   0x803A"
.br
.ti -1c
.RI "#define \fBGL_CLAMP_TO_EDGE\fP   0x812F"
.br
.ti -1c
.RI "#define \fBGL_MAX_ELEMENTS_VERTICES\fP   0x80E8"
.br
.ti -1c
.RI "#define \fBGL_MAX_ELEMENTS_INDICES\fP   0x80E9"
.br
.ti -1c
.RI "#define \fBGL_BGR\fP   0x80E0"
.br
.ti -1c
.RI "#define \fBGL_BGRA\fP   0x80E1"
.br
.ti -1c
.RI "#define \fBGL_UNSIGNED_BYTE_3_3_2\fP   0x8032"
.br
.ti -1c
.RI "#define \fBGL_UNSIGNED_BYTE_2_3_3_REV\fP   0x8362"
.br
.ti -1c
.RI "#define \fBGL_UNSIGNED_SHORT_5_6_5\fP   0x8363"
.br
.ti -1c
.RI "#define \fBGL_UNSIGNED_SHORT_5_6_5_REV\fP   0x8364"
.br
.ti -1c
.RI "#define \fBGL_UNSIGNED_SHORT_4_4_4_4\fP   0x8033"
.br
.ti -1c
.RI "#define \fBGL_UNSIGNED_SHORT_4_4_4_4_REV\fP   0x8365"
.br
.ti -1c
.RI "#define \fBGL_UNSIGNED_SHORT_5_5_5_1\fP   0x8034"
.br
.ti -1c
.RI "#define \fBGL_UNSIGNED_SHORT_1_5_5_5_REV\fP   0x8366"
.br
.ti -1c
.RI "#define \fBGL_UNSIGNED_INT_8_8_8_8\fP   0x8035"
.br
.ti -1c
.RI "#define \fBGL_UNSIGNED_INT_8_8_8_8_REV\fP   0x8367"
.br
.ti -1c
.RI "#define \fBGL_UNSIGNED_INT_10_10_10_2\fP   0x8036"
.br
.ti -1c
.RI "#define \fBGL_UNSIGNED_INT_2_10_10_10_REV\fP   0x8368"
.br
.ti -1c
.RI "#define \fBGL_LIGHT_MODEL_COLOR_CONTROL\fP   0x81F8"
.br
.ti -1c
.RI "#define \fBGL_SINGLE_COLOR\fP   0x81F9"
.br
.ti -1c
.RI "#define \fBGL_SEPARATE_SPECULAR_COLOR\fP   0x81FA"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_MIN_LOD\fP   0x813A"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_MAX_LOD\fP   0x813B"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_BASE_LEVEL\fP   0x813C"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_MAX_LEVEL\fP   0x813D"
.br
.ti -1c
.RI "#define \fBGL_SMOOTH_POINT_SIZE_RANGE\fP   0x0B12"
.br
.ti -1c
.RI "#define \fBGL_SMOOTH_POINT_SIZE_GRANULARITY\fP   0x0B13"
.br
.ti -1c
.RI "#define \fBGL_SMOOTH_LINE_WIDTH_RANGE\fP   0x0B22"
.br
.ti -1c
.RI "#define \fBGL_SMOOTH_LINE_WIDTH_GRANULARITY\fP   0x0B23"
.br
.ti -1c
.RI "#define \fBGL_ALIASED_POINT_SIZE_RANGE\fP   0x846D"
.br
.ti -1c
.RI "#define \fBGL_ALIASED_LINE_WIDTH_RANGE\fP   0x846E"
.br
.ti -1c
.RI "#define \fBGL_PACK_SKIP_IMAGES\fP   0x806B"
.br
.ti -1c
.RI "#define \fBGL_PACK_IMAGE_HEIGHT\fP   0x806C"
.br
.ti -1c
.RI "#define \fBGL_UNPACK_SKIP_IMAGES\fP   0x806D"
.br
.ti -1c
.RI "#define \fBGL_UNPACK_IMAGE_HEIGHT\fP   0x806E"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_3D\fP   0x806F"
.br
.ti -1c
.RI "#define \fBGL_PROXY_TEXTURE_3D\fP   0x8070"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_DEPTH\fP   0x8071"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_WRAP_R\fP   0x8072"
.br
.ti -1c
.RI "#define \fBGL_MAX_3D_TEXTURE_SIZE\fP   0x8073"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_BINDING_3D\fP   0x806A"
.br
.ti -1c
.RI "#define \fBGL_CONSTANT_COLOR\fP   0x8001"
.br
.ti -1c
.RI "#define \fBGL_ONE_MINUS_CONSTANT_COLOR\fP   0x8002"
.br
.ti -1c
.RI "#define \fBGL_CONSTANT_ALPHA\fP   0x8003"
.br
.ti -1c
.RI "#define \fBGL_ONE_MINUS_CONSTANT_ALPHA\fP   0x8004"
.br
.ti -1c
.RI "#define \fBGL_COLOR_TABLE\fP   0x80D0"
.br
.ti -1c
.RI "#define \fBGL_POST_CONVOLUTION_COLOR_TABLE\fP   0x80D1"
.br
.ti -1c
.RI "#define \fBGL_POST_COLOR_MATRIX_COLOR_TABLE\fP   0x80D2"
.br
.ti -1c
.RI "#define \fBGL_PROXY_COLOR_TABLE\fP   0x80D3"
.br
.ti -1c
.RI "#define \fBGL_PROXY_POST_CONVOLUTION_COLOR_TABLE\fP   0x80D4"
.br
.ti -1c
.RI "#define \fBGL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE\fP   0x80D5"
.br
.ti -1c
.RI "#define \fBGL_COLOR_TABLE_SCALE\fP   0x80D6"
.br
.ti -1c
.RI "#define \fBGL_COLOR_TABLE_BIAS\fP   0x80D7"
.br
.ti -1c
.RI "#define \fBGL_COLOR_TABLE_FORMAT\fP   0x80D8"
.br
.ti -1c
.RI "#define \fBGL_COLOR_TABLE_WIDTH\fP   0x80D9"
.br
.ti -1c
.RI "#define \fBGL_COLOR_TABLE_RED_SIZE\fP   0x80DA"
.br
.ti -1c
.RI "#define \fBGL_COLOR_TABLE_GREEN_SIZE\fP   0x80DB"
.br
.ti -1c
.RI "#define \fBGL_COLOR_TABLE_BLUE_SIZE\fP   0x80DC"
.br
.ti -1c
.RI "#define \fBGL_COLOR_TABLE_ALPHA_SIZE\fP   0x80DD"
.br
.ti -1c
.RI "#define \fBGL_COLOR_TABLE_LUMINANCE_SIZE\fP   0x80DE"
.br
.ti -1c
.RI "#define \fBGL_COLOR_TABLE_INTENSITY_SIZE\fP   0x80DF"
.br
.ti -1c
.RI "#define \fBGL_CONVOLUTION_1D\fP   0x8010"
.br
.ti -1c
.RI "#define \fBGL_CONVOLUTION_2D\fP   0x8011"
.br
.ti -1c
.RI "#define \fBGL_SEPARABLE_2D\fP   0x8012"
.br
.ti -1c
.RI "#define \fBGL_CONVOLUTION_BORDER_MODE\fP   0x8013"
.br
.ti -1c
.RI "#define \fBGL_CONVOLUTION_FILTER_SCALE\fP   0x8014"
.br
.ti -1c
.RI "#define \fBGL_CONVOLUTION_FILTER_BIAS\fP   0x8015"
.br
.ti -1c
.RI "#define \fBGL_REDUCE\fP   0x8016"
.br
.ti -1c
.RI "#define \fBGL_CONVOLUTION_FORMAT\fP   0x8017"
.br
.ti -1c
.RI "#define \fBGL_CONVOLUTION_WIDTH\fP   0x8018"
.br
.ti -1c
.RI "#define \fBGL_CONVOLUTION_HEIGHT\fP   0x8019"
.br
.ti -1c
.RI "#define \fBGL_MAX_CONVOLUTION_WIDTH\fP   0x801A"
.br
.ti -1c
.RI "#define \fBGL_MAX_CONVOLUTION_HEIGHT\fP   0x801B"
.br
.ti -1c
.RI "#define \fBGL_POST_CONVOLUTION_RED_SCALE\fP   0x801C"
.br
.ti -1c
.RI "#define \fBGL_POST_CONVOLUTION_GREEN_SCALE\fP   0x801D"
.br
.ti -1c
.RI "#define \fBGL_POST_CONVOLUTION_BLUE_SCALE\fP   0x801E"
.br
.ti -1c
.RI "#define \fBGL_POST_CONVOLUTION_ALPHA_SCALE\fP   0x801F"
.br
.ti -1c
.RI "#define \fBGL_POST_CONVOLUTION_RED_BIAS\fP   0x8020"
.br
.ti -1c
.RI "#define \fBGL_POST_CONVOLUTION_GREEN_BIAS\fP   0x8021"
.br
.ti -1c
.RI "#define \fBGL_POST_CONVOLUTION_BLUE_BIAS\fP   0x8022"
.br
.ti -1c
.RI "#define \fBGL_POST_CONVOLUTION_ALPHA_BIAS\fP   0x8023"
.br
.ti -1c
.RI "#define \fBGL_CONSTANT_BORDER\fP   0x8151"
.br
.ti -1c
.RI "#define \fBGL_REPLICATE_BORDER\fP   0x8153"
.br
.ti -1c
.RI "#define \fBGL_CONVOLUTION_BORDER_COLOR\fP   0x8154"
.br
.ti -1c
.RI "#define \fBGL_COLOR_MATRIX\fP   0x80B1"
.br
.ti -1c
.RI "#define \fBGL_COLOR_MATRIX_STACK_DEPTH\fP   0x80B2"
.br
.ti -1c
.RI "#define \fBGL_MAX_COLOR_MATRIX_STACK_DEPTH\fP   0x80B3"
.br
.ti -1c
.RI "#define \fBGL_POST_COLOR_MATRIX_RED_SCALE\fP   0x80B4"
.br
.ti -1c
.RI "#define \fBGL_POST_COLOR_MATRIX_GREEN_SCALE\fP   0x80B5"
.br
.ti -1c
.RI "#define \fBGL_POST_COLOR_MATRIX_BLUE_SCALE\fP   0x80B6"
.br
.ti -1c
.RI "#define \fBGL_POST_COLOR_MATRIX_ALPHA_SCALE\fP   0x80B7"
.br
.ti -1c
.RI "#define \fBGL_POST_COLOR_MATRIX_RED_BIAS\fP   0x80B8"
.br
.ti -1c
.RI "#define \fBGL_POST_COLOR_MATRIX_GREEN_BIAS\fP   0x80B9"
.br
.ti -1c
.RI "#define \fBGL_POST_COLOR_MATRIX_BLUE_BIAS\fP   0x80BA"
.br
.ti -1c
.RI "#define \fBGL_POST_COLOR_MATRIX_ALPHA_BIAS\fP   0x80BB"
.br
.ti -1c
.RI "#define \fBGL_HISTOGRAM\fP   0x8024"
.br
.ti -1c
.RI "#define \fBGL_PROXY_HISTOGRAM\fP   0x8025"
.br
.ti -1c
.RI "#define \fBGL_HISTOGRAM_WIDTH\fP   0x8026"
.br
.ti -1c
.RI "#define \fBGL_HISTOGRAM_FORMAT\fP   0x8027"
.br
.ti -1c
.RI "#define \fBGL_HISTOGRAM_RED_SIZE\fP   0x8028"
.br
.ti -1c
.RI "#define \fBGL_HISTOGRAM_GREEN_SIZE\fP   0x8029"
.br
.ti -1c
.RI "#define \fBGL_HISTOGRAM_BLUE_SIZE\fP   0x802A"
.br
.ti -1c
.RI "#define \fBGL_HISTOGRAM_ALPHA_SIZE\fP   0x802B"
.br
.ti -1c
.RI "#define \fBGL_HISTOGRAM_LUMINANCE_SIZE\fP   0x802C"
.br
.ti -1c
.RI "#define \fBGL_HISTOGRAM_SINK\fP   0x802D"
.br
.ti -1c
.RI "#define \fBGL_MINMAX\fP   0x802E"
.br
.ti -1c
.RI "#define \fBGL_MINMAX_FORMAT\fP   0x802F"
.br
.ti -1c
.RI "#define \fBGL_MINMAX_SINK\fP   0x8030"
.br
.ti -1c
.RI "#define \fBGL_TABLE_TOO_LARGE\fP   0x8031"
.br
.ti -1c
.RI "#define \fBGL_BLEND_EQUATION\fP   0x8009"
.br
.ti -1c
.RI "#define \fBGL_MIN\fP   0x8007"
.br
.ti -1c
.RI "#define \fBGL_MAX\fP   0x8008"
.br
.ti -1c
.RI "#define \fBGL_FUNC_ADD\fP   0x8006"
.br
.ti -1c
.RI "#define \fBGL_FUNC_SUBTRACT\fP   0x800A"
.br
.ti -1c
.RI "#define \fBGL_FUNC_REVERSE_SUBTRACT\fP   0x800B"
.br
.ti -1c
.RI "#define \fBGL_BLEND_COLOR\fP   0x8005"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE0\fP   0x84C0"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE1\fP   0x84C1"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE2\fP   0x84C2"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE3\fP   0x84C3"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE4\fP   0x84C4"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE5\fP   0x84C5"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE6\fP   0x84C6"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE7\fP   0x84C7"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE8\fP   0x84C8"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE9\fP   0x84C9"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE10\fP   0x84CA"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE11\fP   0x84CB"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE12\fP   0x84CC"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE13\fP   0x84CD"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE14\fP   0x84CE"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE15\fP   0x84CF"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE16\fP   0x84D0"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE17\fP   0x84D1"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE18\fP   0x84D2"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE19\fP   0x84D3"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE20\fP   0x84D4"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE21\fP   0x84D5"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE22\fP   0x84D6"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE23\fP   0x84D7"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE24\fP   0x84D8"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE25\fP   0x84D9"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE26\fP   0x84DA"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE27\fP   0x84DB"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE28\fP   0x84DC"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE29\fP   0x84DD"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE30\fP   0x84DE"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE31\fP   0x84DF"
.br
.ti -1c
.RI "#define \fBGL_ACTIVE_TEXTURE\fP   0x84E0"
.br
.ti -1c
.RI "#define \fBGL_CLIENT_ACTIVE_TEXTURE\fP   0x84E1"
.br
.ti -1c
.RI "#define \fBGL_MAX_TEXTURE_UNITS\fP   0x84E2"
.br
.ti -1c
.RI "#define \fBGL_NORMAL_MAP\fP   0x8511"
.br
.ti -1c
.RI "#define \fBGL_REFLECTION_MAP\fP   0x8512"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_CUBE_MAP\fP   0x8513"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_BINDING_CUBE_MAP\fP   0x8514"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_CUBE_MAP_POSITIVE_X\fP   0x8515"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_CUBE_MAP_NEGATIVE_X\fP   0x8516"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_CUBE_MAP_POSITIVE_Y\fP   0x8517"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_CUBE_MAP_NEGATIVE_Y\fP   0x8518"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_CUBE_MAP_POSITIVE_Z\fP   0x8519"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_CUBE_MAP_NEGATIVE_Z\fP   0x851A"
.br
.ti -1c
.RI "#define \fBGL_PROXY_TEXTURE_CUBE_MAP\fP   0x851B"
.br
.ti -1c
.RI "#define \fBGL_MAX_CUBE_MAP_TEXTURE_SIZE\fP   0x851C"
.br
.ti -1c
.RI "#define \fBGL_COMPRESSED_ALPHA\fP   0x84E9"
.br
.ti -1c
.RI "#define \fBGL_COMPRESSED_LUMINANCE\fP   0x84EA"
.br
.ti -1c
.RI "#define \fBGL_COMPRESSED_LUMINANCE_ALPHA\fP   0x84EB"
.br
.ti -1c
.RI "#define \fBGL_COMPRESSED_INTENSITY\fP   0x84EC"
.br
.ti -1c
.RI "#define \fBGL_COMPRESSED_RGB\fP   0x84ED"
.br
.ti -1c
.RI "#define \fBGL_COMPRESSED_RGBA\fP   0x84EE"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_COMPRESSION_HINT\fP   0x84EF"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_COMPRESSED_IMAGE_SIZE\fP   0x86A0"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE_COMPRESSED\fP   0x86A1"
.br
.ti -1c
.RI "#define \fBGL_NUM_COMPRESSED_TEXTURE_FORMATS\fP   0x86A2"
.br
.ti -1c
.RI "#define \fBGL_COMPRESSED_TEXTURE_FORMATS\fP   0x86A3"
.br
.ti -1c
.RI "#define \fBGL_MULTISAMPLE\fP   0x809D"
.br
.ti -1c
.RI "#define \fBGL_SAMPLE_ALPHA_TO_COVERAGE\fP   0x809E"
.br
.ti -1c
.RI "#define \fBGL_SAMPLE_ALPHA_TO_ONE\fP   0x809F"
.br
.ti -1c
.RI "#define \fBGL_SAMPLE_COVERAGE\fP   0x80A0"
.br
.ti -1c
.RI "#define \fBGL_SAMPLE_BUFFERS\fP   0x80A8"
.br
.ti -1c
.RI "#define \fBGL_SAMPLES\fP   0x80A9"
.br
.ti -1c
.RI "#define \fBGL_SAMPLE_COVERAGE_VALUE\fP   0x80AA"
.br
.ti -1c
.RI "#define \fBGL_SAMPLE_COVERAGE_INVERT\fP   0x80AB"
.br
.ti -1c
.RI "#define \fBGL_MULTISAMPLE_BIT\fP   0x20000000"
.br
.ti -1c
.RI "#define \fBGL_TRANSPOSE_MODELVIEW_MATRIX\fP   0x84E3"
.br
.ti -1c
.RI "#define \fBGL_TRANSPOSE_PROJECTION_MATRIX\fP   0x84E4"
.br
.ti -1c
.RI "#define \fBGL_TRANSPOSE_TEXTURE_MATRIX\fP   0x84E5"
.br
.ti -1c
.RI "#define \fBGL_TRANSPOSE_COLOR_MATRIX\fP   0x84E6"
.br
.ti -1c
.RI "#define \fBGL_COMBINE\fP   0x8570"
.br
.ti -1c
.RI "#define \fBGL_COMBINE_RGB\fP   0x8571"
.br
.ti -1c
.RI "#define \fBGL_COMBINE_ALPHA\fP   0x8572"
.br
.ti -1c
.RI "#define \fBGL_SOURCE0_RGB\fP   0x8580"
.br
.ti -1c
.RI "#define \fBGL_SOURCE1_RGB\fP   0x8581"
.br
.ti -1c
.RI "#define \fBGL_SOURCE2_RGB\fP   0x8582"
.br
.ti -1c
.RI "#define \fBGL_SOURCE0_ALPHA\fP   0x8588"
.br
.ti -1c
.RI "#define \fBGL_SOURCE1_ALPHA\fP   0x8589"
.br
.ti -1c
.RI "#define \fBGL_SOURCE2_ALPHA\fP   0x858A"
.br
.ti -1c
.RI "#define \fBGL_OPERAND0_RGB\fP   0x8590"
.br
.ti -1c
.RI "#define \fBGL_OPERAND1_RGB\fP   0x8591"
.br
.ti -1c
.RI "#define \fBGL_OPERAND2_RGB\fP   0x8592"
.br
.ti -1c
.RI "#define \fBGL_OPERAND0_ALPHA\fP   0x8598"
.br
.ti -1c
.RI "#define \fBGL_OPERAND1_ALPHA\fP   0x8599"
.br
.ti -1c
.RI "#define \fBGL_OPERAND2_ALPHA\fP   0x859A"
.br
.ti -1c
.RI "#define \fBGL_RGB_SCALE\fP   0x8573"
.br
.ti -1c
.RI "#define \fBGL_ADD_SIGNED\fP   0x8574"
.br
.ti -1c
.RI "#define \fBGL_INTERPOLATE\fP   0x8575"
.br
.ti -1c
.RI "#define \fBGL_SUBTRACT\fP   0x84E7"
.br
.ti -1c
.RI "#define \fBGL_CONSTANT\fP   0x8576"
.br
.ti -1c
.RI "#define \fBGL_PRIMARY_COLOR\fP   0x8577"
.br
.ti -1c
.RI "#define \fBGL_PREVIOUS\fP   0x8578"
.br
.ti -1c
.RI "#define \fBGL_DOT3_RGB\fP   0x86AE"
.br
.ti -1c
.RI "#define \fBGL_DOT3_RGBA\fP   0x86AF"
.br
.ti -1c
.RI "#define \fBGL_CLAMP_TO_BORDER\fP   0x812D"
.br
.ti -1c
.RI "#define \fBGL_ARB_multitexture\fP   1"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE0_ARB\fP   0x84C0"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE1_ARB\fP   0x84C1"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE2_ARB\fP   0x84C2"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE3_ARB\fP   0x84C3"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE4_ARB\fP   0x84C4"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE5_ARB\fP   0x84C5"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE6_ARB\fP   0x84C6"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE7_ARB\fP   0x84C7"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE8_ARB\fP   0x84C8"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE9_ARB\fP   0x84C9"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE10_ARB\fP   0x84CA"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE11_ARB\fP   0x84CB"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE12_ARB\fP   0x84CC"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE13_ARB\fP   0x84CD"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE14_ARB\fP   0x84CE"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE15_ARB\fP   0x84CF"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE16_ARB\fP   0x84D0"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE17_ARB\fP   0x84D1"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE18_ARB\fP   0x84D2"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE19_ARB\fP   0x84D3"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE20_ARB\fP   0x84D4"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE21_ARB\fP   0x84D5"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE22_ARB\fP   0x84D6"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE23_ARB\fP   0x84D7"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE24_ARB\fP   0x84D8"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE25_ARB\fP   0x84D9"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE26_ARB\fP   0x84DA"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE27_ARB\fP   0x84DB"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE28_ARB\fP   0x84DC"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE29_ARB\fP   0x84DD"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE30_ARB\fP   0x84DE"
.br
.ti -1c
.RI "#define \fBGL_TEXTURE31_ARB\fP   0x84DF"
.br
.ti -1c
.RI "#define \fBGL_ACTIVE_TEXTURE_ARB\fP   0x84E0"
.br
.ti -1c
.RI "#define \fBGL_CLIENT_ACTIVE_TEXTURE_ARB\fP   0x84E1"
.br
.ti -1c
.RI "#define \fBGL_MAX_TEXTURE_UNITS_ARB\fP   0x84E2"
.br
.ti -1c
.RI "#define \fBGL_MESA_packed_depth_stencil\fP   1"
.br
.ti -1c
.RI "#define \fBGL_DEPTH_STENCIL_MESA\fP   0x8750"
.br
.ti -1c
.RI "#define \fBGL_UNSIGNED_INT_24_8_MESA\fP   0x8751"
.br
.ti -1c
.RI "#define \fBGL_UNSIGNED_INT_8_24_REV_MESA\fP   0x8752"
.br
.ti -1c
.RI "#define \fBGL_UNSIGNED_SHORT_15_1_MESA\fP   0x8753"
.br
.ti -1c
.RI "#define \fBGL_UNSIGNED_SHORT_1_15_REV_MESA\fP   0x8754"
.br
.ti -1c
.RI "#define \fBGL_ATI_blend_equation_separate\fP   1"
.br
.ti -1c
.RI "#define \fBGL_ALPHA_BLEND_EQUATION_ATI\fP   0x883D"
.br
.ti -1c
.RI "#define \fBGL_OES_EGL_image\fP   1"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef unsigned int \fBGLenum\fP"
.br
.ti -1c
.RI "typedef unsigned char \fBGLboolean\fP"
.br
.ti -1c
.RI "typedef unsigned int \fBGLbitfield\fP"
.br
.ti -1c
.RI "typedef \fBvoid\fP \fBGLvoid\fP"
.br
.ti -1c
.RI "typedef signed char \fBGLbyte\fP"
.br
.ti -1c
.RI "typedef short \fBGLshort\fP"
.br
.ti -1c
.RI "typedef int \fBGLint\fP"
.br
.ti -1c
.RI "typedef unsigned char \fBGLubyte\fP"
.br
.ti -1c
.RI "typedef unsigned short \fBGLushort\fP"
.br
.ti -1c
.RI "typedef unsigned int \fBGLuint\fP"
.br
.ti -1c
.RI "typedef int \fBGLsizei\fP"
.br
.ti -1c
.RI "typedef float \fBGLfloat\fP"
.br
.ti -1c
.RI "typedef float \fBGLclampf\fP"
.br
.ti -1c
.RI "typedef double \fBGLdouble\fP"
.br
.ti -1c
.RI "typedef double \fBGLclampd\fP"
.br
.ti -1c
.RI "typedef \fBGLuint\fP \fBstart\fP"
.br
.ti -1c
.RI "typedef \fBGLuint\fP \fBGLuint\fP \fBend\fP"
.br
.ti -1c
.RI "typedef \fBGLuint\fP \fBGLuint\fP \fBGLsizei\fP \fBcount\fP"
.br
.ti -1c
.RI "typedef \fBGLuint\fP \fBGLuint\fP \fBGLsizei\fP \fBGLenum\fP \fBtype\fP"
.br
.ti -1c
.RI "typedef \fBGLuint\fP \fBGLuint\fP \fBGLsizei\fP \fBGLenum\fP const \fBGLvoid\fP * \fBindices\fP"
.br
.ti -1c
.RI "typedef \fBGLint\fP \fBlevel\fP"
.br
.ti -1c
.RI "typedef \fBGLint\fP \fBGLint\fP \fBinternalformat\fP"
.br
.ti -1c
.RI "typedef \fBGLint\fP \fBGLint\fP \fBGLsizei\fP \fBwidth\fP"
.br
.ti -1c
.RI "typedef \fBGLint\fP \fBGLint\fP \fBGLsizei\fP \fBGLsizei\fP \fBheight\fP"
.br
.ti -1c
.RI "typedef \fBGLint\fP \fBGLint\fP \fBGLsizei\fP \fBGLsizei\fP \fBGLsizei\fP \fBdepth\fP"
.br
.ti -1c
.RI "typedef \fBGLint\fP \fBGLint\fP \fBGLsizei\fP \fBGLsizei\fP \fBGLsizei\fP \fBGLint\fP \fBborder\fP"
.br
.ti -1c
.RI "typedef \fBGLint\fP \fBGLint\fP \fBGLsizei\fP \fBGLsizei\fP \fBGLsizei\fP \fBGLint\fP \fBGLenum\fP \fBformat\fP"
.br
.ti -1c
.RI "typedef \fBGLint\fP \fBGLint\fP \fBGLsizei\fP \fBGLsizei\fP \fBGLsizei\fP \fBGLint\fP \fBGLenum\fP \fBGLenum\fP const \fBGLvoid\fP * \fBpixels\fP"
.br
.ti -1c
.RI "typedef \fBGLint\fP \fBGLint\fP \fBxoffset\fP"
.br
.ti -1c
.RI "typedef \fBGLint\fP \fBGLint\fP \fBGLint\fP \fByoffset\fP"
.br
.ti -1c
.RI "typedef \fBGLint\fP \fBGLint\fP \fBGLint\fP \fBGLint\fP \fBzoffset\fP"
.br
.ti -1c
.RI "typedef \fBGLint\fP \fBGLint\fP \fBGLint\fP \fBGLint\fP \fBGLint\fP \fBx\fP"
.br
.ti -1c
.RI "typedef \fBGLint\fP \fBGLint\fP \fBGLint\fP \fBGLint\fP \fBGLint\fP \fBGLint\fP \fBy\fP"
.br
.ti -1c
.RI "typedef \fBGLboolean\fP \fBinvert\fP"
.br
.ti -1c
.RI "typedef \fBGLint\fP \fBGLenum\fP \fBGLsizei\fP \fBGLsizei\fP \fBGLsizei\fP \fBGLint\fP \fBGLsizei\fP \fBimageSize\fP"
.br
.ti -1c
.RI "typedef \fBGLint\fP \fBGLenum\fP \fBGLsizei\fP \fBGLsizei\fP \fBGLsizei\fP \fBGLint\fP \fBGLsizei\fP const \fBGLvoid\fP * \fBdata\fP"
.br
.ti -1c
.RI "typedef \fBGLint\fP \fBGLvoid\fP * \fBimg\fP"
.br
.ti -1c
.RI "typedef \fBGLdouble\fP \fBs\fP"
.br
.ti -1c
.RI "typedef const \fBGLdouble\fP * \fBv\fP"
.br
.ti -1c
.RI "typedef \fBGLdouble\fP \fBGLdouble\fP \fBt\fP"
.br
.ti -1c
.RI "typedef \fBGLdouble\fP \fBGLdouble\fP \fBGLdouble\fP \fBr\fP"
.br
.ti -1c
.RI "typedef \fBGLdouble\fP \fBGLdouble\fP \fBGLdouble\fP \fBGLdouble\fP \fBq\fP"
.br
.ti -1c
.RI "typedef \fBGLenum\fP \fBmodeA\fP"
.br
.ti -1c
.RI "typedef \fBvoid\fP * \fBGLeglImageOES\fP"
.br
.ti -1c
.RI "typedef \fBGLeglImageOES\fP \fBimage\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglClearIndex\fP (\fBGLfloat\fP \fBc\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglClearColor\fP (\fBGLclampf\fP red, \fBGLclampf\fP \fBgreen\fP, \fBGLclampf\fP \fBblue\fP, \fBGLclampf\fP \fBalpha\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglClear\fP (\fBGLbitfield\fP \fBmask\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglIndexMask\fP (\fBGLuint\fP \fBmask\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglColorMask\fP (\fBGLboolean\fP red, \fBGLboolean\fP \fBgreen\fP, \fBGLboolean\fP \fBblue\fP, \fBGLboolean\fP \fBalpha\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglAlphaFunc\fP (\fBGLenum\fP \fBfunc\fP, \fBGLclampf\fP \fBref\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglBlendFunc\fP (\fBGLenum\fP sfactor, \fBGLenum\fP dfactor)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglLogicOp\fP (\fBGLenum\fP opcode)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglCullFace\fP (\fBGLenum\fP \fBmode\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglFrontFace\fP (\fBGLenum\fP \fBmode\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglPointSize\fP (\fBGLfloat\fP \fBsize\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglLineWidth\fP (\fBGLfloat\fP \fBwidth\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglLineStipple\fP (\fBGLint\fP factor, \fBGLushort\fP \fBpattern\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglPolygonMode\fP (\fBGLenum\fP \fBface\fP, \fBGLenum\fP \fBmode\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglPolygonOffset\fP (\fBGLfloat\fP factor, \fBGLfloat\fP \fBunits\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglPolygonStipple\fP (const \fBGLubyte\fP *\fBmask\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglGetPolygonStipple\fP (\fBGLubyte\fP *\fBmask\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglEdgeFlag\fP (\fBGLboolean\fP flag)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglEdgeFlagv\fP (const \fBGLboolean\fP *flag)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglScissor\fP (\fBGLint\fP \fBx\fP, \fBGLint\fP \fBy\fP, \fBGLsizei\fP \fBwidth\fP, \fBGLsizei\fP \fBheight\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglClipPlane\fP (\fBGLenum\fP plane, const \fBGLdouble\fP *\fBequation\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglGetClipPlane\fP (\fBGLenum\fP plane, \fBGLdouble\fP *\fBequation\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglDrawBuffer\fP (\fBGLenum\fP \fBmode\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglReadBuffer\fP (\fBGLenum\fP \fBmode\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglEnable\fP (\fBGLenum\fP \fBcap\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglDisable\fP (\fBGLenum\fP \fBcap\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBGLboolean\fP \fBGLAPIENTRY\fP \fBglIsEnabled\fP (\fBGLenum\fP \fBcap\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglEnableClientState\fP (\fBGLenum\fP \fBcap\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglDisableClientState\fP (\fBGLenum\fP \fBcap\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglGetBooleanv\fP (\fBGLenum\fP \fBpname\fP, \fBGLboolean\fP *\fBparams\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglGetDoublev\fP (\fBGLenum\fP \fBpname\fP, \fBGLdouble\fP *\fBparams\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglGetFloatv\fP (\fBGLenum\fP \fBpname\fP, \fBGLfloat\fP *\fBparams\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglGetIntegerv\fP (\fBGLenum\fP \fBpname\fP, \fBGLint\fP *\fBparams\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglPushAttrib\fP (\fBGLbitfield\fP \fBmask\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglPopAttrib\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglPushClientAttrib\fP (\fBGLbitfield\fP \fBmask\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglPopClientAttrib\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBGLint\fP \fBGLAPIENTRY\fP \fBglRenderMode\fP (\fBGLenum\fP \fBmode\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBGLenum\fP \fBGLAPIENTRY\fP \fBglGetError\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP const \fBGLubyte\fP *\fBGLAPIENTRY\fP \fBglGetString\fP (\fBGLenum\fP \fBname\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglFinish\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglFlush\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglHint\fP (\fBGLenum\fP \fBtarget\fP, \fBGLenum\fP \fBmode\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglClearDepth\fP (\fBGLclampd\fP \fBdepth\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglDepthFunc\fP (\fBGLenum\fP \fBfunc\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglDepthMask\fP (\fBGLboolean\fP flag)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglDepthRange\fP (\fBGLclampd\fP near_val, \fBGLclampd\fP far_val)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglClearAccum\fP (\fBGLfloat\fP red, \fBGLfloat\fP \fBgreen\fP, \fBGLfloat\fP \fBblue\fP, \fBGLfloat\fP \fBalpha\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglAccum\fP (\fBGLenum\fP op, \fBGLfloat\fP \fBvalue\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMatrixMode\fP (\fBGLenum\fP \fBmode\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglOrtho\fP (\fBGLdouble\fP \fBleft\fP, \fBGLdouble\fP \fBright\fP, \fBGLdouble\fP \fBbottom\fP, \fBGLdouble\fP \fBtop\fP, \fBGLdouble\fP near_val, \fBGLdouble\fP far_val)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglFrustum\fP (\fBGLdouble\fP \fBleft\fP, \fBGLdouble\fP \fBright\fP, \fBGLdouble\fP \fBbottom\fP, \fBGLdouble\fP \fBtop\fP, \fBGLdouble\fP near_val, \fBGLdouble\fP far_val)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglViewport\fP (\fBGLint\fP \fBx\fP, \fBGLint\fP \fBy\fP, \fBGLsizei\fP \fBwidth\fP, \fBGLsizei\fP \fBheight\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglPushMatrix\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglPopMatrix\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglLoadIdentity\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglLoadMatrixd\fP (const \fBGLdouble\fP *\fBm\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglLoadMatrixf\fP (const \fBGLfloat\fP *\fBm\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultMatrixd\fP (const \fBGLdouble\fP *\fBm\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultMatrixf\fP (const \fBGLfloat\fP *\fBm\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglRotated\fP (\fBGLdouble\fP \fBangle\fP, \fBGLdouble\fP \fBx\fP, \fBGLdouble\fP \fBy\fP, \fBGLdouble\fP \fBz\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglRotatef\fP (\fBGLfloat\fP \fBangle\fP, \fBGLfloat\fP \fBx\fP, \fBGLfloat\fP \fBy\fP, \fBGLfloat\fP \fBz\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglScaled\fP (\fBGLdouble\fP \fBx\fP, \fBGLdouble\fP \fBy\fP, \fBGLdouble\fP \fBz\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglScalef\fP (\fBGLfloat\fP \fBx\fP, \fBGLfloat\fP \fBy\fP, \fBGLfloat\fP \fBz\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglTranslated\fP (\fBGLdouble\fP \fBx\fP, \fBGLdouble\fP \fBy\fP, \fBGLdouble\fP \fBz\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglTranslatef\fP (\fBGLfloat\fP \fBx\fP, \fBGLfloat\fP \fBy\fP, \fBGLfloat\fP \fBz\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBGLboolean\fP \fBGLAPIENTRY\fP \fBglIsList\fP (\fBGLuint\fP list)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglDeleteLists\fP (\fBGLuint\fP list, \fBGLsizei\fP \fBrange\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBGLuint\fP \fBGLAPIENTRY\fP \fBglGenLists\fP (\fBGLsizei\fP \fBrange\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglNewList\fP (\fBGLuint\fP list, \fBGLenum\fP \fBmode\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglEndList\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglCallList\fP (\fBGLuint\fP list)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglCallLists\fP (\fBGLsizei\fP \fBn\fP, \fBGLenum\fP \fBtype\fP, const \fBGLvoid\fP *lists)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglListBase\fP (\fBGLuint\fP base)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglBegin\fP (\fBGLenum\fP \fBmode\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglEnd\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglVertex2d\fP (\fBGLdouble\fP \fBx\fP, \fBGLdouble\fP \fBy\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglVertex2f\fP (\fBGLfloat\fP \fBx\fP, \fBGLfloat\fP \fBy\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglVertex2i\fP (\fBGLint\fP \fBx\fP, \fBGLint\fP \fBy\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglVertex2s\fP (\fBGLshort\fP \fBx\fP, \fBGLshort\fP \fBy\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglVertex3d\fP (\fBGLdouble\fP \fBx\fP, \fBGLdouble\fP \fBy\fP, \fBGLdouble\fP \fBz\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglVertex3f\fP (\fBGLfloat\fP \fBx\fP, \fBGLfloat\fP \fBy\fP, \fBGLfloat\fP \fBz\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglVertex3i\fP (\fBGLint\fP \fBx\fP, \fBGLint\fP \fBy\fP, \fBGLint\fP \fBz\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglVertex3s\fP (\fBGLshort\fP \fBx\fP, \fBGLshort\fP \fBy\fP, \fBGLshort\fP \fBz\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglVertex4d\fP (\fBGLdouble\fP \fBx\fP, \fBGLdouble\fP \fBy\fP, \fBGLdouble\fP \fBz\fP, \fBGLdouble\fP \fBw\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglVertex4f\fP (\fBGLfloat\fP \fBx\fP, \fBGLfloat\fP \fBy\fP, \fBGLfloat\fP \fBz\fP, \fBGLfloat\fP \fBw\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglVertex4i\fP (\fBGLint\fP \fBx\fP, \fBGLint\fP \fBy\fP, \fBGLint\fP \fBz\fP, \fBGLint\fP \fBw\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglVertex4s\fP (\fBGLshort\fP \fBx\fP, \fBGLshort\fP \fBy\fP, \fBGLshort\fP \fBz\fP, \fBGLshort\fP \fBw\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglVertex2dv\fP (const \fBGLdouble\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglVertex2fv\fP (const \fBGLfloat\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglVertex2iv\fP (const \fBGLint\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglVertex2sv\fP (const \fBGLshort\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglVertex3dv\fP (const \fBGLdouble\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglVertex3fv\fP (const \fBGLfloat\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglVertex3iv\fP (const \fBGLint\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglVertex3sv\fP (const \fBGLshort\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglVertex4dv\fP (const \fBGLdouble\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglVertex4fv\fP (const \fBGLfloat\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglVertex4iv\fP (const \fBGLint\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglVertex4sv\fP (const \fBGLshort\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglNormal3b\fP (\fBGLbyte\fP \fBnx\fP, \fBGLbyte\fP \fBny\fP, \fBGLbyte\fP \fBnz\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglNormal3d\fP (\fBGLdouble\fP \fBnx\fP, \fBGLdouble\fP \fBny\fP, \fBGLdouble\fP \fBnz\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglNormal3f\fP (\fBGLfloat\fP \fBnx\fP, \fBGLfloat\fP \fBny\fP, \fBGLfloat\fP \fBnz\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglNormal3i\fP (\fBGLint\fP \fBnx\fP, \fBGLint\fP \fBny\fP, \fBGLint\fP \fBnz\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglNormal3s\fP (\fBGLshort\fP \fBnx\fP, \fBGLshort\fP \fBny\fP, \fBGLshort\fP \fBnz\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglNormal3bv\fP (const \fBGLbyte\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglNormal3dv\fP (const \fBGLdouble\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglNormal3fv\fP (const \fBGLfloat\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglNormal3iv\fP (const \fBGLint\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglNormal3sv\fP (const \fBGLshort\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglIndexd\fP (\fBGLdouble\fP \fBc\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglIndexf\fP (\fBGLfloat\fP \fBc\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglIndexi\fP (\fBGLint\fP \fBc\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglIndexs\fP (\fBGLshort\fP \fBc\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglIndexub\fP (\fBGLubyte\fP \fBc\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglIndexdv\fP (const \fBGLdouble\fP *\fBc\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglIndexfv\fP (const \fBGLfloat\fP *\fBc\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglIndexiv\fP (const \fBGLint\fP *\fBc\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglIndexsv\fP (const \fBGLshort\fP *\fBc\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglIndexubv\fP (const \fBGLubyte\fP *\fBc\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglColor3b\fP (\fBGLbyte\fP red, \fBGLbyte\fP \fBgreen\fP, \fBGLbyte\fP \fBblue\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglColor3d\fP (\fBGLdouble\fP red, \fBGLdouble\fP \fBgreen\fP, \fBGLdouble\fP \fBblue\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglColor3f\fP (\fBGLfloat\fP red, \fBGLfloat\fP \fBgreen\fP, \fBGLfloat\fP \fBblue\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglColor3i\fP (\fBGLint\fP red, \fBGLint\fP \fBgreen\fP, \fBGLint\fP \fBblue\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglColor3s\fP (\fBGLshort\fP red, \fBGLshort\fP \fBgreen\fP, \fBGLshort\fP \fBblue\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglColor3ub\fP (\fBGLubyte\fP red, \fBGLubyte\fP \fBgreen\fP, \fBGLubyte\fP \fBblue\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglColor3ui\fP (\fBGLuint\fP red, \fBGLuint\fP \fBgreen\fP, \fBGLuint\fP \fBblue\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglColor3us\fP (\fBGLushort\fP red, \fBGLushort\fP \fBgreen\fP, \fBGLushort\fP \fBblue\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglColor4b\fP (\fBGLbyte\fP red, \fBGLbyte\fP \fBgreen\fP, \fBGLbyte\fP \fBblue\fP, \fBGLbyte\fP \fBalpha\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglColor4d\fP (\fBGLdouble\fP red, \fBGLdouble\fP \fBgreen\fP, \fBGLdouble\fP \fBblue\fP, \fBGLdouble\fP \fBalpha\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglColor4f\fP (\fBGLfloat\fP red, \fBGLfloat\fP \fBgreen\fP, \fBGLfloat\fP \fBblue\fP, \fBGLfloat\fP \fBalpha\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglColor4i\fP (\fBGLint\fP red, \fBGLint\fP \fBgreen\fP, \fBGLint\fP \fBblue\fP, \fBGLint\fP \fBalpha\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglColor4s\fP (\fBGLshort\fP red, \fBGLshort\fP \fBgreen\fP, \fBGLshort\fP \fBblue\fP, \fBGLshort\fP \fBalpha\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglColor4ub\fP (\fBGLubyte\fP red, \fBGLubyte\fP \fBgreen\fP, \fBGLubyte\fP \fBblue\fP, \fBGLubyte\fP \fBalpha\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglColor4ui\fP (\fBGLuint\fP red, \fBGLuint\fP \fBgreen\fP, \fBGLuint\fP \fBblue\fP, \fBGLuint\fP \fBalpha\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglColor4us\fP (\fBGLushort\fP red, \fBGLushort\fP \fBgreen\fP, \fBGLushort\fP \fBblue\fP, \fBGLushort\fP \fBalpha\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglColor3bv\fP (const \fBGLbyte\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglColor3dv\fP (const \fBGLdouble\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglColor3fv\fP (const \fBGLfloat\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglColor3iv\fP (const \fBGLint\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglColor3sv\fP (const \fBGLshort\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglColor3ubv\fP (const \fBGLubyte\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglColor3uiv\fP (const \fBGLuint\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglColor3usv\fP (const \fBGLushort\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglColor4bv\fP (const \fBGLbyte\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglColor4dv\fP (const \fBGLdouble\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglColor4fv\fP (const \fBGLfloat\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglColor4iv\fP (const \fBGLint\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglColor4sv\fP (const \fBGLshort\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglColor4ubv\fP (const \fBGLubyte\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglColor4uiv\fP (const \fBGLuint\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglColor4usv\fP (const \fBGLushort\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglTexCoord1d\fP (\fBGLdouble\fP \fBs\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglTexCoord1f\fP (\fBGLfloat\fP \fBs\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglTexCoord1i\fP (\fBGLint\fP \fBs\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglTexCoord1s\fP (\fBGLshort\fP \fBs\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglTexCoord2d\fP (\fBGLdouble\fP \fBs\fP, \fBGLdouble\fP \fBt\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglTexCoord2f\fP (\fBGLfloat\fP \fBs\fP, \fBGLfloat\fP \fBt\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglTexCoord2i\fP (\fBGLint\fP \fBs\fP, \fBGLint\fP \fBt\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglTexCoord2s\fP (\fBGLshort\fP \fBs\fP, \fBGLshort\fP \fBt\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglTexCoord3d\fP (\fBGLdouble\fP \fBs\fP, \fBGLdouble\fP \fBt\fP, \fBGLdouble\fP \fBr\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglTexCoord3f\fP (\fBGLfloat\fP \fBs\fP, \fBGLfloat\fP \fBt\fP, \fBGLfloat\fP \fBr\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglTexCoord3i\fP (\fBGLint\fP \fBs\fP, \fBGLint\fP \fBt\fP, \fBGLint\fP \fBr\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglTexCoord3s\fP (\fBGLshort\fP \fBs\fP, \fBGLshort\fP \fBt\fP, \fBGLshort\fP \fBr\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglTexCoord4d\fP (\fBGLdouble\fP \fBs\fP, \fBGLdouble\fP \fBt\fP, \fBGLdouble\fP \fBr\fP, \fBGLdouble\fP \fBq\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglTexCoord4f\fP (\fBGLfloat\fP \fBs\fP, \fBGLfloat\fP \fBt\fP, \fBGLfloat\fP \fBr\fP, \fBGLfloat\fP \fBq\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglTexCoord4i\fP (\fBGLint\fP \fBs\fP, \fBGLint\fP \fBt\fP, \fBGLint\fP \fBr\fP, \fBGLint\fP \fBq\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglTexCoord4s\fP (\fBGLshort\fP \fBs\fP, \fBGLshort\fP \fBt\fP, \fBGLshort\fP \fBr\fP, \fBGLshort\fP \fBq\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglTexCoord1dv\fP (const \fBGLdouble\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglTexCoord1fv\fP (const \fBGLfloat\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglTexCoord1iv\fP (const \fBGLint\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglTexCoord1sv\fP (const \fBGLshort\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglTexCoord2dv\fP (const \fBGLdouble\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglTexCoord2fv\fP (const \fBGLfloat\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglTexCoord2iv\fP (const \fBGLint\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglTexCoord2sv\fP (const \fBGLshort\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglTexCoord3dv\fP (const \fBGLdouble\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglTexCoord3fv\fP (const \fBGLfloat\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglTexCoord3iv\fP (const \fBGLint\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglTexCoord3sv\fP (const \fBGLshort\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglTexCoord4dv\fP (const \fBGLdouble\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglTexCoord4fv\fP (const \fBGLfloat\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglTexCoord4iv\fP (const \fBGLint\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglTexCoord4sv\fP (const \fBGLshort\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglRasterPos2d\fP (\fBGLdouble\fP \fBx\fP, \fBGLdouble\fP \fBy\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglRasterPos2f\fP (\fBGLfloat\fP \fBx\fP, \fBGLfloat\fP \fBy\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglRasterPos2i\fP (\fBGLint\fP \fBx\fP, \fBGLint\fP \fBy\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglRasterPos2s\fP (\fBGLshort\fP \fBx\fP, \fBGLshort\fP \fBy\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglRasterPos3d\fP (\fBGLdouble\fP \fBx\fP, \fBGLdouble\fP \fBy\fP, \fBGLdouble\fP \fBz\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglRasterPos3f\fP (\fBGLfloat\fP \fBx\fP, \fBGLfloat\fP \fBy\fP, \fBGLfloat\fP \fBz\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglRasterPos3i\fP (\fBGLint\fP \fBx\fP, \fBGLint\fP \fBy\fP, \fBGLint\fP \fBz\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglRasterPos3s\fP (\fBGLshort\fP \fBx\fP, \fBGLshort\fP \fBy\fP, \fBGLshort\fP \fBz\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglRasterPos4d\fP (\fBGLdouble\fP \fBx\fP, \fBGLdouble\fP \fBy\fP, \fBGLdouble\fP \fBz\fP, \fBGLdouble\fP \fBw\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglRasterPos4f\fP (\fBGLfloat\fP \fBx\fP, \fBGLfloat\fP \fBy\fP, \fBGLfloat\fP \fBz\fP, \fBGLfloat\fP \fBw\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglRasterPos4i\fP (\fBGLint\fP \fBx\fP, \fBGLint\fP \fBy\fP, \fBGLint\fP \fBz\fP, \fBGLint\fP \fBw\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglRasterPos4s\fP (\fBGLshort\fP \fBx\fP, \fBGLshort\fP \fBy\fP, \fBGLshort\fP \fBz\fP, \fBGLshort\fP \fBw\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglRasterPos2dv\fP (const \fBGLdouble\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglRasterPos2fv\fP (const \fBGLfloat\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglRasterPos2iv\fP (const \fBGLint\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglRasterPos2sv\fP (const \fBGLshort\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglRasterPos3dv\fP (const \fBGLdouble\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglRasterPos3fv\fP (const \fBGLfloat\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglRasterPos3iv\fP (const \fBGLint\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglRasterPos3sv\fP (const \fBGLshort\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglRasterPos4dv\fP (const \fBGLdouble\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglRasterPos4fv\fP (const \fBGLfloat\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglRasterPos4iv\fP (const \fBGLint\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglRasterPos4sv\fP (const \fBGLshort\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglRectd\fP (\fBGLdouble\fP \fBx1\fP, \fBGLdouble\fP \fBy1\fP, \fBGLdouble\fP \fBx2\fP, \fBGLdouble\fP \fBy2\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglRectf\fP (\fBGLfloat\fP \fBx1\fP, \fBGLfloat\fP \fBy1\fP, \fBGLfloat\fP \fBx2\fP, \fBGLfloat\fP \fBy2\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglRecti\fP (\fBGLint\fP \fBx1\fP, \fBGLint\fP \fBy1\fP, \fBGLint\fP \fBx2\fP, \fBGLint\fP \fBy2\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglRects\fP (\fBGLshort\fP \fBx1\fP, \fBGLshort\fP \fBy1\fP, \fBGLshort\fP \fBx2\fP, \fBGLshort\fP \fBy2\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglRectdv\fP (const \fBGLdouble\fP *\fBv1\fP, const \fBGLdouble\fP *\fBv2\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglRectfv\fP (const \fBGLfloat\fP *\fBv1\fP, const \fBGLfloat\fP *\fBv2\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglRectiv\fP (const \fBGLint\fP *\fBv1\fP, const \fBGLint\fP *\fBv2\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglRectsv\fP (const \fBGLshort\fP *\fBv1\fP, const \fBGLshort\fP *\fBv2\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglVertexPointer\fP (\fBGLint\fP \fBsize\fP, \fBGLenum\fP \fBtype\fP, \fBGLsizei\fP \fBstride\fP, const \fBGLvoid\fP *ptr)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglNormalPointer\fP (\fBGLenum\fP \fBtype\fP, \fBGLsizei\fP \fBstride\fP, const \fBGLvoid\fP *ptr)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglColorPointer\fP (\fBGLint\fP \fBsize\fP, \fBGLenum\fP \fBtype\fP, \fBGLsizei\fP \fBstride\fP, const \fBGLvoid\fP *ptr)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglIndexPointer\fP (\fBGLenum\fP \fBtype\fP, \fBGLsizei\fP \fBstride\fP, const \fBGLvoid\fP *ptr)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglTexCoordPointer\fP (\fBGLint\fP \fBsize\fP, \fBGLenum\fP \fBtype\fP, \fBGLsizei\fP \fBstride\fP, const \fBGLvoid\fP *ptr)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglEdgeFlagPointer\fP (\fBGLsizei\fP \fBstride\fP, const \fBGLvoid\fP *ptr)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglGetPointerv\fP (\fBGLenum\fP \fBpname\fP, \fBGLvoid\fP **\fBparams\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglArrayElement\fP (\fBGLint\fP i)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglDrawArrays\fP (\fBGLenum\fP \fBmode\fP, \fBGLint\fP \fBfirst\fP, \fBGLsizei\fP \fBcount\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglDrawElements\fP (\fBGLenum\fP \fBmode\fP, \fBGLsizei\fP \fBcount\fP, \fBGLenum\fP \fBtype\fP, const \fBGLvoid\fP *\fBindices\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglInterleavedArrays\fP (\fBGLenum\fP \fBformat\fP, \fBGLsizei\fP \fBstride\fP, const \fBGLvoid\fP *\fBpointer\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglShadeModel\fP (\fBGLenum\fP \fBmode\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglLightf\fP (\fBGLenum\fP light, \fBGLenum\fP \fBpname\fP, \fBGLfloat\fP \fBparam\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglLighti\fP (\fBGLenum\fP light, \fBGLenum\fP \fBpname\fP, \fBGLint\fP \fBparam\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglLightfv\fP (\fBGLenum\fP light, \fBGLenum\fP \fBpname\fP, const \fBGLfloat\fP *\fBparams\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglLightiv\fP (\fBGLenum\fP light, \fBGLenum\fP \fBpname\fP, const \fBGLint\fP *\fBparams\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglGetLightfv\fP (\fBGLenum\fP light, \fBGLenum\fP \fBpname\fP, \fBGLfloat\fP *\fBparams\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglGetLightiv\fP (\fBGLenum\fP light, \fBGLenum\fP \fBpname\fP, \fBGLint\fP *\fBparams\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglLightModelf\fP (\fBGLenum\fP \fBpname\fP, \fBGLfloat\fP \fBparam\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglLightModeli\fP (\fBGLenum\fP \fBpname\fP, \fBGLint\fP \fBparam\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglLightModelfv\fP (\fBGLenum\fP \fBpname\fP, const \fBGLfloat\fP *\fBparams\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglLightModeliv\fP (\fBGLenum\fP \fBpname\fP, const \fBGLint\fP *\fBparams\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMaterialf\fP (\fBGLenum\fP \fBface\fP, \fBGLenum\fP \fBpname\fP, \fBGLfloat\fP \fBparam\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMateriali\fP (\fBGLenum\fP \fBface\fP, \fBGLenum\fP \fBpname\fP, \fBGLint\fP \fBparam\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMaterialfv\fP (\fBGLenum\fP \fBface\fP, \fBGLenum\fP \fBpname\fP, const \fBGLfloat\fP *\fBparams\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMaterialiv\fP (\fBGLenum\fP \fBface\fP, \fBGLenum\fP \fBpname\fP, const \fBGLint\fP *\fBparams\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglGetMaterialfv\fP (\fBGLenum\fP \fBface\fP, \fBGLenum\fP \fBpname\fP, \fBGLfloat\fP *\fBparams\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglGetMaterialiv\fP (\fBGLenum\fP \fBface\fP, \fBGLenum\fP \fBpname\fP, \fBGLint\fP *\fBparams\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglColorMaterial\fP (\fBGLenum\fP \fBface\fP, \fBGLenum\fP \fBmode\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglPixelZoom\fP (\fBGLfloat\fP xfactor, \fBGLfloat\fP \fByfactor\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglPixelStoref\fP (\fBGLenum\fP \fBpname\fP, \fBGLfloat\fP \fBparam\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglPixelStorei\fP (\fBGLenum\fP \fBpname\fP, \fBGLint\fP \fBparam\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglPixelTransferf\fP (\fBGLenum\fP \fBpname\fP, \fBGLfloat\fP \fBparam\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglPixelTransferi\fP (\fBGLenum\fP \fBpname\fP, \fBGLint\fP \fBparam\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglPixelMapfv\fP (\fBGLenum\fP map, \fBGLsizei\fP mapsize, const \fBGLfloat\fP *\fBvalues\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglPixelMapuiv\fP (\fBGLenum\fP map, \fBGLsizei\fP mapsize, const \fBGLuint\fP *\fBvalues\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglPixelMapusv\fP (\fBGLenum\fP map, \fBGLsizei\fP mapsize, const \fBGLushort\fP *\fBvalues\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglGetPixelMapfv\fP (\fBGLenum\fP map, \fBGLfloat\fP *\fBvalues\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglGetPixelMapuiv\fP (\fBGLenum\fP map, \fBGLuint\fP *\fBvalues\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglGetPixelMapusv\fP (\fBGLenum\fP map, \fBGLushort\fP *\fBvalues\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglBitmap\fP (\fBGLsizei\fP \fBwidth\fP, \fBGLsizei\fP \fBheight\fP, \fBGLfloat\fP \fBxorig\fP, \fBGLfloat\fP \fByorig\fP, \fBGLfloat\fP \fBxmove\fP, \fBGLfloat\fP \fBymove\fP, const \fBGLubyte\fP *\fBbitmap\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglReadPixels\fP (\fBGLint\fP \fBx\fP, \fBGLint\fP \fBy\fP, \fBGLsizei\fP \fBwidth\fP, \fBGLsizei\fP \fBheight\fP, \fBGLenum\fP \fBformat\fP, \fBGLenum\fP \fBtype\fP, \fBGLvoid\fP *\fBpixels\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglDrawPixels\fP (\fBGLsizei\fP \fBwidth\fP, \fBGLsizei\fP \fBheight\fP, \fBGLenum\fP \fBformat\fP, \fBGLenum\fP \fBtype\fP, const \fBGLvoid\fP *\fBpixels\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglCopyPixels\fP (\fBGLint\fP \fBx\fP, \fBGLint\fP \fBy\fP, \fBGLsizei\fP \fBwidth\fP, \fBGLsizei\fP \fBheight\fP, \fBGLenum\fP \fBtype\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglStencilFunc\fP (\fBGLenum\fP \fBfunc\fP, \fBGLint\fP \fBref\fP, \fBGLuint\fP \fBmask\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglStencilMask\fP (\fBGLuint\fP \fBmask\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglStencilOp\fP (\fBGLenum\fP fail, \fBGLenum\fP zfail, \fBGLenum\fP zpass)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglClearStencil\fP (\fBGLint\fP \fBs\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglTexGend\fP (\fBGLenum\fP \fBcoord\fP, \fBGLenum\fP \fBpname\fP, \fBGLdouble\fP \fBparam\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglTexGenf\fP (\fBGLenum\fP \fBcoord\fP, \fBGLenum\fP \fBpname\fP, \fBGLfloat\fP \fBparam\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglTexGeni\fP (\fBGLenum\fP \fBcoord\fP, \fBGLenum\fP \fBpname\fP, \fBGLint\fP \fBparam\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglTexGendv\fP (\fBGLenum\fP \fBcoord\fP, \fBGLenum\fP \fBpname\fP, const \fBGLdouble\fP *\fBparams\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglTexGenfv\fP (\fBGLenum\fP \fBcoord\fP, \fBGLenum\fP \fBpname\fP, const \fBGLfloat\fP *\fBparams\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglTexGeniv\fP (\fBGLenum\fP \fBcoord\fP, \fBGLenum\fP \fBpname\fP, const \fBGLint\fP *\fBparams\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglGetTexGendv\fP (\fBGLenum\fP \fBcoord\fP, \fBGLenum\fP \fBpname\fP, \fBGLdouble\fP *\fBparams\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglGetTexGenfv\fP (\fBGLenum\fP \fBcoord\fP, \fBGLenum\fP \fBpname\fP, \fBGLfloat\fP *\fBparams\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglGetTexGeniv\fP (\fBGLenum\fP \fBcoord\fP, \fBGLenum\fP \fBpname\fP, \fBGLint\fP *\fBparams\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglTexEnvf\fP (\fBGLenum\fP \fBtarget\fP, \fBGLenum\fP \fBpname\fP, \fBGLfloat\fP \fBparam\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglTexEnvi\fP (\fBGLenum\fP \fBtarget\fP, \fBGLenum\fP \fBpname\fP, \fBGLint\fP \fBparam\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglTexEnvfv\fP (\fBGLenum\fP \fBtarget\fP, \fBGLenum\fP \fBpname\fP, const \fBGLfloat\fP *\fBparams\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglTexEnviv\fP (\fBGLenum\fP \fBtarget\fP, \fBGLenum\fP \fBpname\fP, const \fBGLint\fP *\fBparams\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglGetTexEnvfv\fP (\fBGLenum\fP \fBtarget\fP, \fBGLenum\fP \fBpname\fP, \fBGLfloat\fP *\fBparams\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglGetTexEnviv\fP (\fBGLenum\fP \fBtarget\fP, \fBGLenum\fP \fBpname\fP, \fBGLint\fP *\fBparams\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglTexParameterf\fP (\fBGLenum\fP \fBtarget\fP, \fBGLenum\fP \fBpname\fP, \fBGLfloat\fP \fBparam\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglTexParameteri\fP (\fBGLenum\fP \fBtarget\fP, \fBGLenum\fP \fBpname\fP, \fBGLint\fP \fBparam\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglTexParameterfv\fP (\fBGLenum\fP \fBtarget\fP, \fBGLenum\fP \fBpname\fP, const \fBGLfloat\fP *\fBparams\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglTexParameteriv\fP (\fBGLenum\fP \fBtarget\fP, \fBGLenum\fP \fBpname\fP, const \fBGLint\fP *\fBparams\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglGetTexParameterfv\fP (\fBGLenum\fP \fBtarget\fP, \fBGLenum\fP \fBpname\fP, \fBGLfloat\fP *\fBparams\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglGetTexParameteriv\fP (\fBGLenum\fP \fBtarget\fP, \fBGLenum\fP \fBpname\fP, \fBGLint\fP *\fBparams\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglGetTexLevelParameterfv\fP (\fBGLenum\fP \fBtarget\fP, \fBGLint\fP \fBlevel\fP, \fBGLenum\fP \fBpname\fP, \fBGLfloat\fP *\fBparams\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglGetTexLevelParameteriv\fP (\fBGLenum\fP \fBtarget\fP, \fBGLint\fP \fBlevel\fP, \fBGLenum\fP \fBpname\fP, \fBGLint\fP *\fBparams\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglTexImage1D\fP (\fBGLenum\fP \fBtarget\fP, \fBGLint\fP \fBlevel\fP, \fBGLint\fP \fBinternalFormat\fP, \fBGLsizei\fP \fBwidth\fP, \fBGLint\fP \fBborder\fP, \fBGLenum\fP \fBformat\fP, \fBGLenum\fP \fBtype\fP, const \fBGLvoid\fP *\fBpixels\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglTexImage2D\fP (\fBGLenum\fP \fBtarget\fP, \fBGLint\fP \fBlevel\fP, \fBGLint\fP \fBinternalFormat\fP, \fBGLsizei\fP \fBwidth\fP, \fBGLsizei\fP \fBheight\fP, \fBGLint\fP \fBborder\fP, \fBGLenum\fP \fBformat\fP, \fBGLenum\fP \fBtype\fP, const \fBGLvoid\fP *\fBpixels\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglGetTexImage\fP (\fBGLenum\fP \fBtarget\fP, \fBGLint\fP \fBlevel\fP, \fBGLenum\fP \fBformat\fP, \fBGLenum\fP \fBtype\fP, \fBGLvoid\fP *\fBpixels\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglGenTextures\fP (\fBGLsizei\fP \fBn\fP, \fBGLuint\fP *\fBtextures\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglDeleteTextures\fP (\fBGLsizei\fP \fBn\fP, const \fBGLuint\fP *\fBtextures\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglBindTexture\fP (\fBGLenum\fP \fBtarget\fP, \fBGLuint\fP \fBtexture\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglPrioritizeTextures\fP (\fBGLsizei\fP \fBn\fP, const \fBGLuint\fP *\fBtextures\fP, const \fBGLclampf\fP *\fBpriorities\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBGLboolean\fP \fBGLAPIENTRY\fP \fBglAreTexturesResident\fP (\fBGLsizei\fP \fBn\fP, const \fBGLuint\fP *\fBtextures\fP, \fBGLboolean\fP *\fBresidences\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBGLboolean\fP \fBGLAPIENTRY\fP \fBglIsTexture\fP (\fBGLuint\fP \fBtexture\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglTexSubImage1D\fP (\fBGLenum\fP \fBtarget\fP, \fBGLint\fP \fBlevel\fP, \fBGLint\fP \fBxoffset\fP, \fBGLsizei\fP \fBwidth\fP, \fBGLenum\fP \fBformat\fP, \fBGLenum\fP \fBtype\fP, const \fBGLvoid\fP *\fBpixels\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglTexSubImage2D\fP (\fBGLenum\fP \fBtarget\fP, \fBGLint\fP \fBlevel\fP, \fBGLint\fP \fBxoffset\fP, \fBGLint\fP \fByoffset\fP, \fBGLsizei\fP \fBwidth\fP, \fBGLsizei\fP \fBheight\fP, \fBGLenum\fP \fBformat\fP, \fBGLenum\fP \fBtype\fP, const \fBGLvoid\fP *\fBpixels\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglCopyTexImage1D\fP (\fBGLenum\fP \fBtarget\fP, \fBGLint\fP \fBlevel\fP, \fBGLenum\fP \fBinternalformat\fP, \fBGLint\fP \fBx\fP, \fBGLint\fP \fBy\fP, \fBGLsizei\fP \fBwidth\fP, \fBGLint\fP \fBborder\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglCopyTexImage2D\fP (\fBGLenum\fP \fBtarget\fP, \fBGLint\fP \fBlevel\fP, \fBGLenum\fP \fBinternalformat\fP, \fBGLint\fP \fBx\fP, \fBGLint\fP \fBy\fP, \fBGLsizei\fP \fBwidth\fP, \fBGLsizei\fP \fBheight\fP, \fBGLint\fP \fBborder\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglCopyTexSubImage1D\fP (\fBGLenum\fP \fBtarget\fP, \fBGLint\fP \fBlevel\fP, \fBGLint\fP \fBxoffset\fP, \fBGLint\fP \fBx\fP, \fBGLint\fP \fBy\fP, \fBGLsizei\fP \fBwidth\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglCopyTexSubImage2D\fP (\fBGLenum\fP \fBtarget\fP, \fBGLint\fP \fBlevel\fP, \fBGLint\fP \fBxoffset\fP, \fBGLint\fP \fByoffset\fP, \fBGLint\fP \fBx\fP, \fBGLint\fP \fBy\fP, \fBGLsizei\fP \fBwidth\fP, \fBGLsizei\fP \fBheight\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMap1d\fP (\fBGLenum\fP \fBtarget\fP, \fBGLdouble\fP \fBu1\fP, \fBGLdouble\fP \fBu2\fP, \fBGLint\fP \fBstride\fP, \fBGLint\fP \fBorder\fP, const \fBGLdouble\fP *\fBpoints\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMap1f\fP (\fBGLenum\fP \fBtarget\fP, \fBGLfloat\fP \fBu1\fP, \fBGLfloat\fP \fBu2\fP, \fBGLint\fP \fBstride\fP, \fBGLint\fP \fBorder\fP, const \fBGLfloat\fP *\fBpoints\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMap2d\fP (\fBGLenum\fP \fBtarget\fP, \fBGLdouble\fP \fBu1\fP, \fBGLdouble\fP \fBu2\fP, \fBGLint\fP \fBustride\fP, \fBGLint\fP \fBuorder\fP, \fBGLdouble\fP \fBv1\fP, \fBGLdouble\fP \fBv2\fP, \fBGLint\fP \fBvstride\fP, \fBGLint\fP \fBvorder\fP, const \fBGLdouble\fP *\fBpoints\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMap2f\fP (\fBGLenum\fP \fBtarget\fP, \fBGLfloat\fP \fBu1\fP, \fBGLfloat\fP \fBu2\fP, \fBGLint\fP \fBustride\fP, \fBGLint\fP \fBuorder\fP, \fBGLfloat\fP \fBv1\fP, \fBGLfloat\fP \fBv2\fP, \fBGLint\fP \fBvstride\fP, \fBGLint\fP \fBvorder\fP, const \fBGLfloat\fP *\fBpoints\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglGetMapdv\fP (\fBGLenum\fP \fBtarget\fP, \fBGLenum\fP \fBquery\fP, \fBGLdouble\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglGetMapfv\fP (\fBGLenum\fP \fBtarget\fP, \fBGLenum\fP \fBquery\fP, \fBGLfloat\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglGetMapiv\fP (\fBGLenum\fP \fBtarget\fP, \fBGLenum\fP \fBquery\fP, \fBGLint\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglEvalCoord1d\fP (\fBGLdouble\fP u)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglEvalCoord1f\fP (\fBGLfloat\fP u)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglEvalCoord1dv\fP (const \fBGLdouble\fP *u)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglEvalCoord1fv\fP (const \fBGLfloat\fP *u)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglEvalCoord2d\fP (\fBGLdouble\fP u, \fBGLdouble\fP \fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglEvalCoord2f\fP (\fBGLfloat\fP u, \fBGLfloat\fP \fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglEvalCoord2dv\fP (const \fBGLdouble\fP *u)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglEvalCoord2fv\fP (const \fBGLfloat\fP *u)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMapGrid1d\fP (\fBGLint\fP un, \fBGLdouble\fP \fBu1\fP, \fBGLdouble\fP \fBu2\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMapGrid1f\fP (\fBGLint\fP un, \fBGLfloat\fP \fBu1\fP, \fBGLfloat\fP \fBu2\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMapGrid2d\fP (\fBGLint\fP un, \fBGLdouble\fP \fBu1\fP, \fBGLdouble\fP \fBu2\fP, \fBGLint\fP vn, \fBGLdouble\fP \fBv1\fP, \fBGLdouble\fP \fBv2\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMapGrid2f\fP (\fBGLint\fP un, \fBGLfloat\fP \fBu1\fP, \fBGLfloat\fP \fBu2\fP, \fBGLint\fP vn, \fBGLfloat\fP \fBv1\fP, \fBGLfloat\fP \fBv2\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglEvalPoint1\fP (\fBGLint\fP i)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglEvalPoint2\fP (\fBGLint\fP i, \fBGLint\fP j)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglEvalMesh1\fP (\fBGLenum\fP \fBmode\fP, \fBGLint\fP i1, \fBGLint\fP i2)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglEvalMesh2\fP (\fBGLenum\fP \fBmode\fP, \fBGLint\fP i1, \fBGLint\fP i2, \fBGLint\fP j1, \fBGLint\fP j2)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglFogf\fP (\fBGLenum\fP \fBpname\fP, \fBGLfloat\fP \fBparam\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglFogi\fP (\fBGLenum\fP \fBpname\fP, \fBGLint\fP \fBparam\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglFogfv\fP (\fBGLenum\fP \fBpname\fP, const \fBGLfloat\fP *\fBparams\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglFogiv\fP (\fBGLenum\fP \fBpname\fP, const \fBGLint\fP *\fBparams\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglFeedbackBuffer\fP (\fBGLsizei\fP \fBsize\fP, \fBGLenum\fP \fBtype\fP, \fBGLfloat\fP *\fBbuffer\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglPassThrough\fP (\fBGLfloat\fP token)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglSelectBuffer\fP (\fBGLsizei\fP \fBsize\fP, \fBGLuint\fP *\fBbuffer\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglInitNames\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglLoadName\fP (\fBGLuint\fP \fBname\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglPushName\fP (\fBGLuint\fP \fBname\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglPopName\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglDrawRangeElements\fP (\fBGLenum\fP \fBmode\fP, \fBGLuint\fP \fBstart\fP, \fBGLuint\fP \fBend\fP, \fBGLsizei\fP \fBcount\fP, \fBGLenum\fP \fBtype\fP, const \fBGLvoid\fP *\fBindices\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglTexImage3D\fP (\fBGLenum\fP \fBtarget\fP, \fBGLint\fP \fBlevel\fP, \fBGLint\fP \fBinternalFormat\fP, \fBGLsizei\fP \fBwidth\fP, \fBGLsizei\fP \fBheight\fP, \fBGLsizei\fP \fBdepth\fP, \fBGLint\fP \fBborder\fP, \fBGLenum\fP \fBformat\fP, \fBGLenum\fP \fBtype\fP, const \fBGLvoid\fP *\fBpixels\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglTexSubImage3D\fP (\fBGLenum\fP \fBtarget\fP, \fBGLint\fP \fBlevel\fP, \fBGLint\fP \fBxoffset\fP, \fBGLint\fP \fByoffset\fP, \fBGLint\fP \fBzoffset\fP, \fBGLsizei\fP \fBwidth\fP, \fBGLsizei\fP \fBheight\fP, \fBGLsizei\fP \fBdepth\fP, \fBGLenum\fP \fBformat\fP, \fBGLenum\fP \fBtype\fP, const \fBGLvoid\fP *\fBpixels\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglCopyTexSubImage3D\fP (\fBGLenum\fP \fBtarget\fP, \fBGLint\fP \fBlevel\fP, \fBGLint\fP \fBxoffset\fP, \fBGLint\fP \fByoffset\fP, \fBGLint\fP \fBzoffset\fP, \fBGLint\fP \fBx\fP, \fBGLint\fP \fBy\fP, \fBGLsizei\fP \fBwidth\fP, \fBGLsizei\fP \fBheight\fP)"
.br
.ti -1c
.RI "typedef \fBvoid\fP (\fBAPIENTRYP\fP PFNGLDRAWRANGEELEMENTSPROC)(\fBGLenum\fP \fBmode\fP"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglColorTable\fP (\fBGLenum\fP \fBtarget\fP, \fBGLenum\fP \fBinternalformat\fP, \fBGLsizei\fP \fBwidth\fP, \fBGLenum\fP \fBformat\fP, \fBGLenum\fP \fBtype\fP, const \fBGLvoid\fP *\fBtable\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglColorSubTable\fP (\fBGLenum\fP \fBtarget\fP, \fBGLsizei\fP \fBstart\fP, \fBGLsizei\fP \fBcount\fP, \fBGLenum\fP \fBformat\fP, \fBGLenum\fP \fBtype\fP, const \fBGLvoid\fP *\fBdata\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglColorTableParameteriv\fP (\fBGLenum\fP \fBtarget\fP, \fBGLenum\fP \fBpname\fP, const \fBGLint\fP *\fBparams\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglColorTableParameterfv\fP (\fBGLenum\fP \fBtarget\fP, \fBGLenum\fP \fBpname\fP, const \fBGLfloat\fP *\fBparams\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglCopyColorSubTable\fP (\fBGLenum\fP \fBtarget\fP, \fBGLsizei\fP \fBstart\fP, \fBGLint\fP \fBx\fP, \fBGLint\fP \fBy\fP, \fBGLsizei\fP \fBwidth\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglCopyColorTable\fP (\fBGLenum\fP \fBtarget\fP, \fBGLenum\fP \fBinternalformat\fP, \fBGLint\fP \fBx\fP, \fBGLint\fP \fBy\fP, \fBGLsizei\fP \fBwidth\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglGetColorTable\fP (\fBGLenum\fP \fBtarget\fP, \fBGLenum\fP \fBformat\fP, \fBGLenum\fP \fBtype\fP, \fBGLvoid\fP *\fBtable\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglGetColorTableParameterfv\fP (\fBGLenum\fP \fBtarget\fP, \fBGLenum\fP \fBpname\fP, \fBGLfloat\fP *\fBparams\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglGetColorTableParameteriv\fP (\fBGLenum\fP \fBtarget\fP, \fBGLenum\fP \fBpname\fP, \fBGLint\fP *\fBparams\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglBlendEquation\fP (\fBGLenum\fP \fBmode\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglBlendColor\fP (\fBGLclampf\fP red, \fBGLclampf\fP \fBgreen\fP, \fBGLclampf\fP \fBblue\fP, \fBGLclampf\fP \fBalpha\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglHistogram\fP (\fBGLenum\fP \fBtarget\fP, \fBGLsizei\fP \fBwidth\fP, \fBGLenum\fP \fBinternalformat\fP, \fBGLboolean\fP \fBsink\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglResetHistogram\fP (\fBGLenum\fP \fBtarget\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglGetHistogram\fP (\fBGLenum\fP \fBtarget\fP, \fBGLboolean\fP \fBreset\fP, \fBGLenum\fP \fBformat\fP, \fBGLenum\fP \fBtype\fP, \fBGLvoid\fP *\fBvalues\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglGetHistogramParameterfv\fP (\fBGLenum\fP \fBtarget\fP, \fBGLenum\fP \fBpname\fP, \fBGLfloat\fP *\fBparams\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglGetHistogramParameteriv\fP (\fBGLenum\fP \fBtarget\fP, \fBGLenum\fP \fBpname\fP, \fBGLint\fP *\fBparams\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMinmax\fP (\fBGLenum\fP \fBtarget\fP, \fBGLenum\fP \fBinternalformat\fP, \fBGLboolean\fP \fBsink\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglResetMinmax\fP (\fBGLenum\fP \fBtarget\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglGetMinmax\fP (\fBGLenum\fP \fBtarget\fP, \fBGLboolean\fP \fBreset\fP, \fBGLenum\fP \fBformat\fP, \fBGLenum\fP \fBtypes\fP, \fBGLvoid\fP *\fBvalues\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglGetMinmaxParameterfv\fP (\fBGLenum\fP \fBtarget\fP, \fBGLenum\fP \fBpname\fP, \fBGLfloat\fP *\fBparams\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglGetMinmaxParameteriv\fP (\fBGLenum\fP \fBtarget\fP, \fBGLenum\fP \fBpname\fP, \fBGLint\fP *\fBparams\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglConvolutionFilter1D\fP (\fBGLenum\fP \fBtarget\fP, \fBGLenum\fP \fBinternalformat\fP, \fBGLsizei\fP \fBwidth\fP, \fBGLenum\fP \fBformat\fP, \fBGLenum\fP \fBtype\fP, const \fBGLvoid\fP *\fBimage\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglConvolutionFilter2D\fP (\fBGLenum\fP \fBtarget\fP, \fBGLenum\fP \fBinternalformat\fP, \fBGLsizei\fP \fBwidth\fP, \fBGLsizei\fP \fBheight\fP, \fBGLenum\fP \fBformat\fP, \fBGLenum\fP \fBtype\fP, const \fBGLvoid\fP *\fBimage\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglConvolutionParameterf\fP (\fBGLenum\fP \fBtarget\fP, \fBGLenum\fP \fBpname\fP, \fBGLfloat\fP \fBparams\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglConvolutionParameterfv\fP (\fBGLenum\fP \fBtarget\fP, \fBGLenum\fP \fBpname\fP, const \fBGLfloat\fP *\fBparams\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglConvolutionParameteri\fP (\fBGLenum\fP \fBtarget\fP, \fBGLenum\fP \fBpname\fP, \fBGLint\fP \fBparams\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglConvolutionParameteriv\fP (\fBGLenum\fP \fBtarget\fP, \fBGLenum\fP \fBpname\fP, const \fBGLint\fP *\fBparams\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglCopyConvolutionFilter1D\fP (\fBGLenum\fP \fBtarget\fP, \fBGLenum\fP \fBinternalformat\fP, \fBGLint\fP \fBx\fP, \fBGLint\fP \fBy\fP, \fBGLsizei\fP \fBwidth\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglCopyConvolutionFilter2D\fP (\fBGLenum\fP \fBtarget\fP, \fBGLenum\fP \fBinternalformat\fP, \fBGLint\fP \fBx\fP, \fBGLint\fP \fBy\fP, \fBGLsizei\fP \fBwidth\fP, \fBGLsizei\fP \fBheight\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglGetConvolutionFilter\fP (\fBGLenum\fP \fBtarget\fP, \fBGLenum\fP \fBformat\fP, \fBGLenum\fP \fBtype\fP, \fBGLvoid\fP *\fBimage\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglGetConvolutionParameterfv\fP (\fBGLenum\fP \fBtarget\fP, \fBGLenum\fP \fBpname\fP, \fBGLfloat\fP *\fBparams\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglGetConvolutionParameteriv\fP (\fBGLenum\fP \fBtarget\fP, \fBGLenum\fP \fBpname\fP, \fBGLint\fP *\fBparams\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglSeparableFilter2D\fP (\fBGLenum\fP \fBtarget\fP, \fBGLenum\fP \fBinternalformat\fP, \fBGLsizei\fP \fBwidth\fP, \fBGLsizei\fP \fBheight\fP, \fBGLenum\fP \fBformat\fP, \fBGLenum\fP \fBtype\fP, const \fBGLvoid\fP *\fBrow\fP, const \fBGLvoid\fP *\fBcolumn\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglGetSeparableFilter\fP (\fBGLenum\fP \fBtarget\fP, \fBGLenum\fP \fBformat\fP, \fBGLenum\fP \fBtype\fP, \fBGLvoid\fP *\fBrow\fP, \fBGLvoid\fP *\fBcolumn\fP, \fBGLvoid\fP *\fBspan\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglActiveTexture\fP (\fBGLenum\fP \fBtexture\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglClientActiveTexture\fP (\fBGLenum\fP \fBtexture\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglCompressedTexImage1D\fP (\fBGLenum\fP \fBtarget\fP, \fBGLint\fP \fBlevel\fP, \fBGLenum\fP \fBinternalformat\fP, \fBGLsizei\fP \fBwidth\fP, \fBGLint\fP \fBborder\fP, \fBGLsizei\fP \fBimageSize\fP, const \fBGLvoid\fP *\fBdata\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglCompressedTexImage2D\fP (\fBGLenum\fP \fBtarget\fP, \fBGLint\fP \fBlevel\fP, \fBGLenum\fP \fBinternalformat\fP, \fBGLsizei\fP \fBwidth\fP, \fBGLsizei\fP \fBheight\fP, \fBGLint\fP \fBborder\fP, \fBGLsizei\fP \fBimageSize\fP, const \fBGLvoid\fP *\fBdata\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglCompressedTexImage3D\fP (\fBGLenum\fP \fBtarget\fP, \fBGLint\fP \fBlevel\fP, \fBGLenum\fP \fBinternalformat\fP, \fBGLsizei\fP \fBwidth\fP, \fBGLsizei\fP \fBheight\fP, \fBGLsizei\fP \fBdepth\fP, \fBGLint\fP \fBborder\fP, \fBGLsizei\fP \fBimageSize\fP, const \fBGLvoid\fP *\fBdata\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglCompressedTexSubImage1D\fP (\fBGLenum\fP \fBtarget\fP, \fBGLint\fP \fBlevel\fP, \fBGLint\fP \fBxoffset\fP, \fBGLsizei\fP \fBwidth\fP, \fBGLenum\fP \fBformat\fP, \fBGLsizei\fP \fBimageSize\fP, const \fBGLvoid\fP *\fBdata\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglCompressedTexSubImage2D\fP (\fBGLenum\fP \fBtarget\fP, \fBGLint\fP \fBlevel\fP, \fBGLint\fP \fBxoffset\fP, \fBGLint\fP \fByoffset\fP, \fBGLsizei\fP \fBwidth\fP, \fBGLsizei\fP \fBheight\fP, \fBGLenum\fP \fBformat\fP, \fBGLsizei\fP \fBimageSize\fP, const \fBGLvoid\fP *\fBdata\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglCompressedTexSubImage3D\fP (\fBGLenum\fP \fBtarget\fP, \fBGLint\fP \fBlevel\fP, \fBGLint\fP \fBxoffset\fP, \fBGLint\fP \fByoffset\fP, \fBGLint\fP \fBzoffset\fP, \fBGLsizei\fP \fBwidth\fP, \fBGLsizei\fP \fBheight\fP, \fBGLsizei\fP \fBdepth\fP, \fBGLenum\fP \fBformat\fP, \fBGLsizei\fP \fBimageSize\fP, const \fBGLvoid\fP *\fBdata\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglGetCompressedTexImage\fP (\fBGLenum\fP \fBtarget\fP, \fBGLint\fP \fBlod\fP, \fBGLvoid\fP *\fBimg\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord1d\fP (\fBGLenum\fP \fBtarget\fP, \fBGLdouble\fP \fBs\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord1dv\fP (\fBGLenum\fP \fBtarget\fP, const \fBGLdouble\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord1f\fP (\fBGLenum\fP \fBtarget\fP, \fBGLfloat\fP \fBs\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord1fv\fP (\fBGLenum\fP \fBtarget\fP, const \fBGLfloat\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord1i\fP (\fBGLenum\fP \fBtarget\fP, \fBGLint\fP \fBs\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord1iv\fP (\fBGLenum\fP \fBtarget\fP, const \fBGLint\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord1s\fP (\fBGLenum\fP \fBtarget\fP, \fBGLshort\fP \fBs\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord1sv\fP (\fBGLenum\fP \fBtarget\fP, const \fBGLshort\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord2d\fP (\fBGLenum\fP \fBtarget\fP, \fBGLdouble\fP \fBs\fP, \fBGLdouble\fP \fBt\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord2dv\fP (\fBGLenum\fP \fBtarget\fP, const \fBGLdouble\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord2f\fP (\fBGLenum\fP \fBtarget\fP, \fBGLfloat\fP \fBs\fP, \fBGLfloat\fP \fBt\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord2fv\fP (\fBGLenum\fP \fBtarget\fP, const \fBGLfloat\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord2i\fP (\fBGLenum\fP \fBtarget\fP, \fBGLint\fP \fBs\fP, \fBGLint\fP \fBt\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord2iv\fP (\fBGLenum\fP \fBtarget\fP, const \fBGLint\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord2s\fP (\fBGLenum\fP \fBtarget\fP, \fBGLshort\fP \fBs\fP, \fBGLshort\fP \fBt\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord2sv\fP (\fBGLenum\fP \fBtarget\fP, const \fBGLshort\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord3d\fP (\fBGLenum\fP \fBtarget\fP, \fBGLdouble\fP \fBs\fP, \fBGLdouble\fP \fBt\fP, \fBGLdouble\fP \fBr\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord3dv\fP (\fBGLenum\fP \fBtarget\fP, const \fBGLdouble\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord3f\fP (\fBGLenum\fP \fBtarget\fP, \fBGLfloat\fP \fBs\fP, \fBGLfloat\fP \fBt\fP, \fBGLfloat\fP \fBr\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord3fv\fP (\fBGLenum\fP \fBtarget\fP, const \fBGLfloat\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord3i\fP (\fBGLenum\fP \fBtarget\fP, \fBGLint\fP \fBs\fP, \fBGLint\fP \fBt\fP, \fBGLint\fP \fBr\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord3iv\fP (\fBGLenum\fP \fBtarget\fP, const \fBGLint\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord3s\fP (\fBGLenum\fP \fBtarget\fP, \fBGLshort\fP \fBs\fP, \fBGLshort\fP \fBt\fP, \fBGLshort\fP \fBr\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord3sv\fP (\fBGLenum\fP \fBtarget\fP, const \fBGLshort\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord4d\fP (\fBGLenum\fP \fBtarget\fP, \fBGLdouble\fP \fBs\fP, \fBGLdouble\fP \fBt\fP, \fBGLdouble\fP \fBr\fP, \fBGLdouble\fP \fBq\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord4dv\fP (\fBGLenum\fP \fBtarget\fP, const \fBGLdouble\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord4f\fP (\fBGLenum\fP \fBtarget\fP, \fBGLfloat\fP \fBs\fP, \fBGLfloat\fP \fBt\fP, \fBGLfloat\fP \fBr\fP, \fBGLfloat\fP \fBq\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord4fv\fP (\fBGLenum\fP \fBtarget\fP, const \fBGLfloat\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord4i\fP (\fBGLenum\fP \fBtarget\fP, \fBGLint\fP \fBs\fP, \fBGLint\fP \fBt\fP, \fBGLint\fP \fBr\fP, \fBGLint\fP \fBq\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord4iv\fP (\fBGLenum\fP \fBtarget\fP, const \fBGLint\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord4s\fP (\fBGLenum\fP \fBtarget\fP, \fBGLshort\fP \fBs\fP, \fBGLshort\fP \fBt\fP, \fBGLshort\fP \fBr\fP, \fBGLshort\fP \fBq\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord4sv\fP (\fBGLenum\fP \fBtarget\fP, const \fBGLshort\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglLoadTransposeMatrixd\fP (const \fBGLdouble\fP \fBm\fP[16])"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglLoadTransposeMatrixf\fP (const \fBGLfloat\fP \fBm\fP[16])"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultTransposeMatrixd\fP (const \fBGLdouble\fP \fBm\fP[16])"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultTransposeMatrixf\fP (const \fBGLfloat\fP \fBm\fP[16])"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglSampleCoverage\fP (\fBGLclampf\fP \fBvalue\fP, \fBGLboolean\fP \fBinvert\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglActiveTextureARB\fP (\fBGLenum\fP \fBtexture\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglClientActiveTextureARB\fP (\fBGLenum\fP \fBtexture\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord1dARB\fP (\fBGLenum\fP \fBtarget\fP, \fBGLdouble\fP \fBs\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord1dvARB\fP (\fBGLenum\fP \fBtarget\fP, const \fBGLdouble\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord1fARB\fP (\fBGLenum\fP \fBtarget\fP, \fBGLfloat\fP \fBs\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord1fvARB\fP (\fBGLenum\fP \fBtarget\fP, const \fBGLfloat\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord1iARB\fP (\fBGLenum\fP \fBtarget\fP, \fBGLint\fP \fBs\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord1ivARB\fP (\fBGLenum\fP \fBtarget\fP, const \fBGLint\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord1sARB\fP (\fBGLenum\fP \fBtarget\fP, \fBGLshort\fP \fBs\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord1svARB\fP (\fBGLenum\fP \fBtarget\fP, const \fBGLshort\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord2dARB\fP (\fBGLenum\fP \fBtarget\fP, \fBGLdouble\fP \fBs\fP, \fBGLdouble\fP \fBt\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord2dvARB\fP (\fBGLenum\fP \fBtarget\fP, const \fBGLdouble\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord2fARB\fP (\fBGLenum\fP \fBtarget\fP, \fBGLfloat\fP \fBs\fP, \fBGLfloat\fP \fBt\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord2fvARB\fP (\fBGLenum\fP \fBtarget\fP, const \fBGLfloat\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord2iARB\fP (\fBGLenum\fP \fBtarget\fP, \fBGLint\fP \fBs\fP, \fBGLint\fP \fBt\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord2ivARB\fP (\fBGLenum\fP \fBtarget\fP, const \fBGLint\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord2sARB\fP (\fBGLenum\fP \fBtarget\fP, \fBGLshort\fP \fBs\fP, \fBGLshort\fP \fBt\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord2svARB\fP (\fBGLenum\fP \fBtarget\fP, const \fBGLshort\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord3dARB\fP (\fBGLenum\fP \fBtarget\fP, \fBGLdouble\fP \fBs\fP, \fBGLdouble\fP \fBt\fP, \fBGLdouble\fP \fBr\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord3dvARB\fP (\fBGLenum\fP \fBtarget\fP, const \fBGLdouble\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord3fARB\fP (\fBGLenum\fP \fBtarget\fP, \fBGLfloat\fP \fBs\fP, \fBGLfloat\fP \fBt\fP, \fBGLfloat\fP \fBr\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord3fvARB\fP (\fBGLenum\fP \fBtarget\fP, const \fBGLfloat\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord3iARB\fP (\fBGLenum\fP \fBtarget\fP, \fBGLint\fP \fBs\fP, \fBGLint\fP \fBt\fP, \fBGLint\fP \fBr\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord3ivARB\fP (\fBGLenum\fP \fBtarget\fP, const \fBGLint\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord3sARB\fP (\fBGLenum\fP \fBtarget\fP, \fBGLshort\fP \fBs\fP, \fBGLshort\fP \fBt\fP, \fBGLshort\fP \fBr\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord3svARB\fP (\fBGLenum\fP \fBtarget\fP, const \fBGLshort\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord4dARB\fP (\fBGLenum\fP \fBtarget\fP, \fBGLdouble\fP \fBs\fP, \fBGLdouble\fP \fBt\fP, \fBGLdouble\fP \fBr\fP, \fBGLdouble\fP \fBq\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord4dvARB\fP (\fBGLenum\fP \fBtarget\fP, const \fBGLdouble\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord4fARB\fP (\fBGLenum\fP \fBtarget\fP, \fBGLfloat\fP \fBs\fP, \fBGLfloat\fP \fBt\fP, \fBGLfloat\fP \fBr\fP, \fBGLfloat\fP \fBq\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord4fvARB\fP (\fBGLenum\fP \fBtarget\fP, const \fBGLfloat\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord4iARB\fP (\fBGLenum\fP \fBtarget\fP, \fBGLint\fP \fBs\fP, \fBGLint\fP \fBt\fP, \fBGLint\fP \fBr\fP, \fBGLint\fP \fBq\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord4ivARB\fP (\fBGLenum\fP \fBtarget\fP, const \fBGLint\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord4sARB\fP (\fBGLenum\fP \fBtarget\fP, \fBGLshort\fP \fBs\fP, \fBGLshort\fP \fBt\fP, \fBGLshort\fP \fBr\fP, \fBGLshort\fP \fBq\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglMultiTexCoord4svARB\fP (\fBGLenum\fP \fBtarget\fP, const \fBGLshort\fP *\fBv\fP)"
.br
.ti -1c
.RI "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP \fBglBlendEquationSeparateATI\fP (\fBGLenum\fP \fBmodeRGB\fP, \fBGLenum\fP \fBmodeA\fP)"
.br
.in -1c
.SH "Detailed Description"
.PP 
This is a simple file to encapsulate the OpenGL API headers\&. 
.SH "Macro Definition Documentation"
.PP 
.SS "#define __gl_h_"

.SS "#define APIENTRY   \fBGLAPIENTRY\fP"

.SS "#define APIENTRYP   \fBAPIENTRY\fP *"

.SS "#define GL_2_BYTES   0x1407"

.SS "#define GL_2D   0x0600"

.SS "#define GL_3_BYTES   0x1408"

.SS "#define GL_3D   0x0601"

.SS "#define GL_3D_COLOR   0x0602"

.SS "#define GL_3D_COLOR_TEXTURE   0x0603"

.SS "#define GL_4_BYTES   0x1409"

.SS "#define GL_4D_COLOR_TEXTURE   0x0604"

.SS "#define GL_ACCUM   0x0100"

.SS "#define GL_ACCUM_ALPHA_BITS   0x0D5B"

.SS "#define GL_ACCUM_BLUE_BITS   0x0D5A"

.SS "#define GL_ACCUM_BUFFER_BIT   0x00000200"

.SS "#define GL_ACCUM_CLEAR_VALUE   0x0B80"

.SS "#define GL_ACCUM_GREEN_BITS   0x0D59"

.SS "#define GL_ACCUM_RED_BITS   0x0D58"

.SS "#define GL_ACTIVE_TEXTURE   0x84E0"

.SS "#define GL_ACTIVE_TEXTURE_ARB   0x84E0"

.SS "#define GL_ADD   0x0104"

.SS "#define GL_ADD_SIGNED   0x8574"

.SS "#define GL_ALIASED_LINE_WIDTH_RANGE   0x846E"

.SS "#define GL_ALIASED_POINT_SIZE_RANGE   0x846D"

.SS "#define GL_ALL_ATTRIB_BITS   0x000FFFFF"

.SS "#define GL_ALL_CLIENT_ATTRIB_BITS   0xFFFFFFFF"

.SS "#define GL_ALPHA   0x1906"

.SS "#define GL_ALPHA12   0x803D"

.SS "#define GL_ALPHA16   0x803E"

.SS "#define GL_ALPHA4   0x803B"

.SS "#define GL_ALPHA8   0x803C"

.SS "#define GL_ALPHA_BIAS   0x0D1D"

.SS "#define GL_ALPHA_BITS   0x0D55"

.SS "#define GL_ALPHA_BLEND_EQUATION_ATI   0x883D"

.SS "#define GL_ALPHA_SCALE   0x0D1C"

.SS "#define GL_ALPHA_TEST   0x0BC0"

.SS "#define GL_ALPHA_TEST_FUNC   0x0BC1"

.SS "#define GL_ALPHA_TEST_REF   0x0BC2"

.SS "#define GL_ALWAYS   0x0207"

.SS "#define GL_AMBIENT   0x1200"

.SS "#define GL_AMBIENT_AND_DIFFUSE   0x1602"

.SS "#define GL_AND   0x1501"

.SS "#define GL_AND_INVERTED   0x1504"

.SS "#define GL_AND_REVERSE   0x1502"

.SS "#define GL_ARB_imaging   1"

.SS "#define GL_ARB_multitexture   1"

.SS "#define GL_ATI_blend_equation_separate   1"

.SS "#define GL_ATTRIB_STACK_DEPTH   0x0BB0"

.SS "#define GL_AUTO_NORMAL   0x0D80"

.SS "#define GL_AUX0   0x0409"

.SS "#define GL_AUX1   0x040A"

.SS "#define GL_AUX2   0x040B"

.SS "#define GL_AUX3   0x040C"

.SS "#define GL_AUX_BUFFERS   0x0C00"

.SS "#define GL_BACK   0x0405"

.SS "#define GL_BACK_LEFT   0x0402"

.SS "#define GL_BACK_RIGHT   0x0403"

.SS "#define GL_BGR   0x80E0"

.SS "#define GL_BGRA   0x80E1"

.SS "#define GL_BITMAP   0x1A00"

.SS "#define GL_BITMAP_TOKEN   0x0704"

.SS "#define GL_BLEND   0x0BE2"

.SS "#define GL_BLEND_COLOR   0x8005"

.SS "#define GL_BLEND_DST   0x0BE0"

.SS "#define GL_BLEND_EQUATION   0x8009"

.SS "#define GL_BLEND_SRC   0x0BE1"

.SS "#define GL_BLUE   0x1905"

.SS "#define GL_BLUE_BIAS   0x0D1B"

.SS "#define GL_BLUE_BITS   0x0D54"

.SS "#define GL_BLUE_SCALE   0x0D1A"

.SS "#define GL_BYTE   0x1400"

.SS "#define GL_C3F_V3F   0x2A24"

.SS "#define GL_C4F_N3F_V3F   0x2A26"

.SS "#define GL_C4UB_V2F   0x2A22"

.SS "#define GL_C4UB_V3F   0x2A23"

.SS "#define GL_CCW   0x0901"

.SS "#define GL_CLAMP   0x2900"

.SS "#define GL_CLAMP_TO_BORDER   0x812D"

.SS "#define GL_CLAMP_TO_EDGE   0x812F"

.SS "#define GL_CLEAR   0x1500"

.SS "#define GL_CLIENT_ACTIVE_TEXTURE   0x84E1"

.SS "#define GL_CLIENT_ACTIVE_TEXTURE_ARB   0x84E1"

.SS "#define GL_CLIENT_ALL_ATTRIB_BITS   0xFFFFFFFF"

.SS "#define GL_CLIENT_ATTRIB_STACK_DEPTH   0x0BB1"

.SS "#define GL_CLIENT_PIXEL_STORE_BIT   0x00000001"

.SS "#define GL_CLIENT_VERTEX_ARRAY_BIT   0x00000002"

.SS "#define GL_CLIP_PLANE0   0x3000"

.SS "#define GL_CLIP_PLANE1   0x3001"

.SS "#define GL_CLIP_PLANE2   0x3002"

.SS "#define GL_CLIP_PLANE3   0x3003"

.SS "#define GL_CLIP_PLANE4   0x3004"

.SS "#define GL_CLIP_PLANE5   0x3005"

.SS "#define GL_COEFF   0x0A00"

.SS "#define GL_COLOR   0x1800"

.SS "#define GL_COLOR_ARRAY   0x8076"

.SS "#define GL_COLOR_ARRAY_POINTER   0x8090"

.SS "#define GL_COLOR_ARRAY_SIZE   0x8081"

.SS "#define GL_COLOR_ARRAY_STRIDE   0x8083"

.SS "#define GL_COLOR_ARRAY_TYPE   0x8082"

.SS "#define GL_COLOR_BUFFER_BIT   0x00004000"

.SS "#define GL_COLOR_CLEAR_VALUE   0x0C22"

.SS "#define GL_COLOR_INDEX   0x1900"

.SS "#define GL_COLOR_INDEXES   0x1603"

.SS "#define GL_COLOR_LOGIC_OP   0x0BF2"

.SS "#define GL_COLOR_MATERIAL   0x0B57"

.SS "#define GL_COLOR_MATERIAL_FACE   0x0B55"

.SS "#define GL_COLOR_MATERIAL_PARAMETER   0x0B56"

.SS "#define GL_COLOR_MATRIX   0x80B1"

.SS "#define GL_COLOR_MATRIX_STACK_DEPTH   0x80B2"

.SS "#define GL_COLOR_TABLE   0x80D0"

.SS "#define GL_COLOR_TABLE_ALPHA_SIZE   0x80DD"

.SS "#define GL_COLOR_TABLE_BIAS   0x80D7"

.SS "#define GL_COLOR_TABLE_BLUE_SIZE   0x80DC"

.SS "#define GL_COLOR_TABLE_FORMAT   0x80D8"

.SS "#define GL_COLOR_TABLE_GREEN_SIZE   0x80DB"

.SS "#define GL_COLOR_TABLE_INTENSITY_SIZE   0x80DF"

.SS "#define GL_COLOR_TABLE_LUMINANCE_SIZE   0x80DE"

.SS "#define GL_COLOR_TABLE_RED_SIZE   0x80DA"

.SS "#define GL_COLOR_TABLE_SCALE   0x80D6"

.SS "#define GL_COLOR_TABLE_WIDTH   0x80D9"

.SS "#define GL_COLOR_WRITEMASK   0x0C23"

.SS "#define GL_COMBINE   0x8570"

.SS "#define GL_COMBINE_ALPHA   0x8572"

.SS "#define GL_COMBINE_RGB   0x8571"

.SS "#define GL_COMPILE   0x1300"

.SS "#define GL_COMPILE_AND_EXECUTE   0x1301"

.SS "#define GL_COMPRESSED_ALPHA   0x84E9"

.SS "#define GL_COMPRESSED_INTENSITY   0x84EC"

.SS "#define GL_COMPRESSED_LUMINANCE   0x84EA"

.SS "#define GL_COMPRESSED_LUMINANCE_ALPHA   0x84EB"

.SS "#define GL_COMPRESSED_RGB   0x84ED"

.SS "#define GL_COMPRESSED_RGBA   0x84EE"

.SS "#define GL_COMPRESSED_TEXTURE_FORMATS   0x86A3"

.SS "#define GL_CONSTANT   0x8576"

.SS "#define GL_CONSTANT_ALPHA   0x8003"

.SS "#define GL_CONSTANT_ATTENUATION   0x1207"

.SS "#define GL_CONSTANT_BORDER   0x8151"

.SS "#define GL_CONSTANT_COLOR   0x8001"

.SS "#define GL_CONVOLUTION_1D   0x8010"

.SS "#define GL_CONVOLUTION_2D   0x8011"

.SS "#define GL_CONVOLUTION_BORDER_COLOR   0x8154"

.SS "#define GL_CONVOLUTION_BORDER_MODE   0x8013"

.SS "#define GL_CONVOLUTION_FILTER_BIAS   0x8015"

.SS "#define GL_CONVOLUTION_FILTER_SCALE   0x8014"

.SS "#define GL_CONVOLUTION_FORMAT   0x8017"

.SS "#define GL_CONVOLUTION_HEIGHT   0x8019"

.SS "#define GL_CONVOLUTION_WIDTH   0x8018"

.SS "#define GL_COPY   0x1503"

.SS "#define GL_COPY_INVERTED   0x150C"

.SS "#define GL_COPY_PIXEL_TOKEN   0x0706"

.SS "#define GL_CULL_FACE   0x0B44"

.SS "#define GL_CULL_FACE_MODE   0x0B45"

.SS "#define GL_CURRENT_BIT   0x00000001"

.SS "#define GL_CURRENT_COLOR   0x0B00"

.SS "#define GL_CURRENT_INDEX   0x0B01"

.SS "#define GL_CURRENT_NORMAL   0x0B02"

.SS "#define GL_CURRENT_RASTER_COLOR   0x0B04"

.SS "#define GL_CURRENT_RASTER_DISTANCE   0x0B09"

.SS "#define GL_CURRENT_RASTER_INDEX   0x0B05"

.SS "#define GL_CURRENT_RASTER_POSITION   0x0B07"

.SS "#define GL_CURRENT_RASTER_POSITION_VALID   0x0B08"

.SS "#define GL_CURRENT_RASTER_TEXTURE_COORDS   0x0B06"

.SS "#define GL_CURRENT_TEXTURE_COORDS   0x0B03"

.SS "#define GL_CW   0x0900"

.SS "#define GL_DECAL   0x2101"

.SS "#define GL_DECR   0x1E03"

.SS "#define GL_DEPTH   0x1801"

.SS "#define GL_DEPTH_BIAS   0x0D1F"

.SS "#define GL_DEPTH_BITS   0x0D56"

.SS "#define GL_DEPTH_BUFFER_BIT   0x00000100"

.SS "#define GL_DEPTH_CLEAR_VALUE   0x0B73"

.SS "#define GL_DEPTH_COMPONENT   0x1902"

.SS "#define GL_DEPTH_FUNC   0x0B74"

.SS "#define GL_DEPTH_RANGE   0x0B70"

.SS "#define GL_DEPTH_SCALE   0x0D1E"

.SS "#define GL_DEPTH_STENCIL_MESA   0x8750"

.SS "#define GL_DEPTH_TEST   0x0B71"

.SS "#define GL_DEPTH_WRITEMASK   0x0B72"

.SS "#define GL_DIFFUSE   0x1201"

.SS "#define GL_DITHER   0x0BD0"

.SS "#define GL_DOMAIN   0x0A02"

.SS "#define GL_DONT_CARE   0x1100"

.SS "#define GL_DOT3_RGB   0x86AE"

.SS "#define GL_DOT3_RGBA   0x86AF"

.SS "#define GL_DOUBLE   0x140A"

.SS "#define GL_DOUBLEBUFFER   0x0C32"

.SS "#define GL_DRAW_BUFFER   0x0C01"

.SS "#define GL_DRAW_PIXEL_TOKEN   0x0705"

.SS "#define GL_DST_ALPHA   0x0304"

.SS "#define GL_DST_COLOR   0x0306"

.SS "#define GL_EDGE_FLAG   0x0B43"

.SS "#define GL_EDGE_FLAG_ARRAY   0x8079"

.SS "#define GL_EDGE_FLAG_ARRAY_POINTER   0x8093"

.SS "#define GL_EDGE_FLAG_ARRAY_STRIDE   0x808C"

.SS "#define GL_EMISSION   0x1600"

.SS "#define GL_ENABLE_BIT   0x00002000"

.SS "#define GL_EQUAL   0x0202"

.SS "#define GL_EQUIV   0x1509"

.SS "#define GL_EVAL_BIT   0x00010000"

.SS "#define GL_EXP   0x0800"

.SS "#define GL_EXP2   0x0801"

.SS "#define GL_EXTENSIONS   0x1F03"

.SS "#define GL_EYE_LINEAR   0x2400"

.SS "#define GL_EYE_PLANE   0x2502"

.SS "#define GL_FALSE   0"

.SS "#define GL_FASTEST   0x1101"

.SS "#define GL_FEEDBACK   0x1C01"

.SS "#define GL_FEEDBACK_BUFFER_POINTER   0x0DF0"

.SS "#define GL_FEEDBACK_BUFFER_SIZE   0x0DF1"

.SS "#define GL_FEEDBACK_BUFFER_TYPE   0x0DF2"

.SS "#define GL_FILL   0x1B02"

.SS "#define GL_FLAT   0x1D00"

.SS "#define GL_FLOAT   0x1406"

.SS "#define GL_FOG   0x0B60"

.SS "#define GL_FOG_BIT   0x00000080"

.SS "#define GL_FOG_COLOR   0x0B66"

.SS "#define GL_FOG_DENSITY   0x0B62"

.SS "#define GL_FOG_END   0x0B64"

.SS "#define GL_FOG_HINT   0x0C54"

.SS "#define GL_FOG_INDEX   0x0B61"

.SS "#define GL_FOG_MODE   0x0B65"

.SS "#define GL_FOG_START   0x0B63"

.SS "#define GL_FRONT   0x0404"

.SS "#define GL_FRONT_AND_BACK   0x0408"

.SS "#define GL_FRONT_FACE   0x0B46"

.SS "#define GL_FRONT_LEFT   0x0400"

.SS "#define GL_FRONT_RIGHT   0x0401"

.SS "#define GL_FUNC_ADD   0x8006"

.SS "#define GL_FUNC_REVERSE_SUBTRACT   0x800B"

.SS "#define GL_FUNC_SUBTRACT   0x800A"

.SS "#define GL_GEQUAL   0x0206"

.SS "#define GL_GREATER   0x0204"

.SS "#define GL_GREEN   0x1904"

.SS "#define GL_GREEN_BIAS   0x0D19"

.SS "#define GL_GREEN_BITS   0x0D53"

.SS "#define GL_GREEN_SCALE   0x0D18"

.SS "#define GL_HINT_BIT   0x00008000"

.SS "#define GL_HISTOGRAM   0x8024"

.SS "#define GL_HISTOGRAM_ALPHA_SIZE   0x802B"

.SS "#define GL_HISTOGRAM_BLUE_SIZE   0x802A"

.SS "#define GL_HISTOGRAM_FORMAT   0x8027"

.SS "#define GL_HISTOGRAM_GREEN_SIZE   0x8029"

.SS "#define GL_HISTOGRAM_LUMINANCE_SIZE   0x802C"

.SS "#define GL_HISTOGRAM_RED_SIZE   0x8028"

.SS "#define GL_HISTOGRAM_SINK   0x802D"

.SS "#define GL_HISTOGRAM_WIDTH   0x8026"

.SS "#define GL_INCR   0x1E02"

.SS "#define GL_INDEX_ARRAY   0x8077"

.SS "#define GL_INDEX_ARRAY_POINTER   0x8091"

.SS "#define GL_INDEX_ARRAY_STRIDE   0x8086"

.SS "#define GL_INDEX_ARRAY_TYPE   0x8085"

.SS "#define GL_INDEX_BITS   0x0D51"

.SS "#define GL_INDEX_CLEAR_VALUE   0x0C20"

.SS "#define GL_INDEX_LOGIC_OP   0x0BF1"

.SS "#define GL_INDEX_MODE   0x0C30"

.SS "#define GL_INDEX_OFFSET   0x0D13"

.SS "#define GL_INDEX_SHIFT   0x0D12"

.SS "#define GL_INDEX_WRITEMASK   0x0C21"

.SS "#define GL_INT   0x1404"

.SS "#define GL_INTENSITY   0x8049"

.SS "#define GL_INTENSITY12   0x804C"

.SS "#define GL_INTENSITY16   0x804D"

.SS "#define GL_INTENSITY4   0x804A"

.SS "#define GL_INTENSITY8   0x804B"

.SS "#define GL_INTERPOLATE   0x8575"

.SS "#define GL_INVALID_ENUM   0x0500"

.SS "#define GL_INVALID_OPERATION   0x0502"

.SS "#define GL_INVALID_VALUE   0x0501"

.SS "#define GL_INVERT   0x150A"

.SS "#define GL_KEEP   0x1E00"

.SS "#define GL_LEFT   0x0406"

.SS "#define GL_LEQUAL   0x0203"

.SS "#define GL_LESS   0x0201"

.SS "#define GL_LIGHT0   0x4000"

.SS "#define GL_LIGHT1   0x4001"

.SS "#define GL_LIGHT2   0x4002"

.SS "#define GL_LIGHT3   0x4003"

.SS "#define GL_LIGHT4   0x4004"

.SS "#define GL_LIGHT5   0x4005"

.SS "#define GL_LIGHT6   0x4006"

.SS "#define GL_LIGHT7   0x4007"

.SS "#define GL_LIGHT_MODEL_AMBIENT   0x0B53"

.SS "#define GL_LIGHT_MODEL_COLOR_CONTROL   0x81F8"

.SS "#define GL_LIGHT_MODEL_LOCAL_VIEWER   0x0B51"

.SS "#define GL_LIGHT_MODEL_TWO_SIDE   0x0B52"

.SS "#define GL_LIGHTING   0x0B50"

.SS "#define GL_LIGHTING_BIT   0x00000040"

.SS "#define GL_LINE   0x1B01"

.SS "#define GL_LINE_BIT   0x00000004"

.SS "#define GL_LINE_LOOP   0x0002"

.SS "#define GL_LINE_RESET_TOKEN   0x0707"

.SS "#define GL_LINE_SMOOTH   0x0B20"

.SS "#define GL_LINE_SMOOTH_HINT   0x0C52"

.SS "#define GL_LINE_STIPPLE   0x0B24"

.SS "#define GL_LINE_STIPPLE_PATTERN   0x0B25"

.SS "#define GL_LINE_STIPPLE_REPEAT   0x0B26"

.SS "#define GL_LINE_STRIP   0x0003"

.SS "#define GL_LINE_TOKEN   0x0702"

.SS "#define GL_LINE_WIDTH   0x0B21"

.SS "#define GL_LINE_WIDTH_GRANULARITY   0x0B23"

.SS "#define GL_LINE_WIDTH_RANGE   0x0B22"

.SS "#define GL_LINEAR   0x2601"

.SS "#define GL_LINEAR_ATTENUATION   0x1208"

.SS "#define GL_LINEAR_MIPMAP_LINEAR   0x2703"

.SS "#define GL_LINEAR_MIPMAP_NEAREST   0x2701"

.SS "#define GL_LINES   0x0001"

.SS "#define GL_LIST_BASE   0x0B32"

.SS "#define GL_LIST_BIT   0x00020000"

.SS "#define GL_LIST_INDEX   0x0B33"

.SS "#define GL_LIST_MODE   0x0B30"

.SS "#define GL_LOAD   0x0101"

.SS "#define GL_LOGIC_OP   0x0BF1"

.SS "#define GL_LOGIC_OP_MODE   0x0BF0"

.SS "#define GL_LUMINANCE   0x1909"

.SS "#define GL_LUMINANCE12   0x8041"

.SS "#define GL_LUMINANCE12_ALPHA12   0x8047"

.SS "#define GL_LUMINANCE12_ALPHA4   0x8046"

.SS "#define GL_LUMINANCE16   0x8042"

.SS "#define GL_LUMINANCE16_ALPHA16   0x8048"

.SS "#define GL_LUMINANCE4   0x803F"

.SS "#define GL_LUMINANCE4_ALPHA4   0x8043"

.SS "#define GL_LUMINANCE6_ALPHA2   0x8044"

.SS "#define GL_LUMINANCE8   0x8040"

.SS "#define GL_LUMINANCE8_ALPHA8   0x8045"

.SS "#define GL_LUMINANCE_ALPHA   0x190A"

.SS "#define GL_MAP1_COLOR_4   0x0D90"

.SS "#define GL_MAP1_GRID_DOMAIN   0x0DD0"

.SS "#define GL_MAP1_GRID_SEGMENTS   0x0DD1"

.SS "#define GL_MAP1_INDEX   0x0D91"

.SS "#define GL_MAP1_NORMAL   0x0D92"

.SS "#define GL_MAP1_TEXTURE_COORD_1   0x0D93"

.SS "#define GL_MAP1_TEXTURE_COORD_2   0x0D94"

.SS "#define GL_MAP1_TEXTURE_COORD_3   0x0D95"

.SS "#define GL_MAP1_TEXTURE_COORD_4   0x0D96"

.SS "#define GL_MAP1_VERTEX_3   0x0D97"

.SS "#define GL_MAP1_VERTEX_4   0x0D98"

.SS "#define GL_MAP2_COLOR_4   0x0DB0"

.SS "#define GL_MAP2_GRID_DOMAIN   0x0DD2"

.SS "#define GL_MAP2_GRID_SEGMENTS   0x0DD3"

.SS "#define GL_MAP2_INDEX   0x0DB1"

.SS "#define GL_MAP2_NORMAL   0x0DB2"

.SS "#define GL_MAP2_TEXTURE_COORD_1   0x0DB3"

.SS "#define GL_MAP2_TEXTURE_COORD_2   0x0DB4"

.SS "#define GL_MAP2_TEXTURE_COORD_3   0x0DB5"

.SS "#define GL_MAP2_TEXTURE_COORD_4   0x0DB6"

.SS "#define GL_MAP2_VERTEX_3   0x0DB7"

.SS "#define GL_MAP2_VERTEX_4   0x0DB8"

.SS "#define GL_MAP_COLOR   0x0D10"

.SS "#define GL_MAP_STENCIL   0x0D11"

.SS "#define GL_MATRIX_MODE   0x0BA0"

.SS "#define GL_MAX   0x8008"

.SS "#define GL_MAX_3D_TEXTURE_SIZE   0x8073"

.SS "#define GL_MAX_ATTRIB_STACK_DEPTH   0x0D35"

.SS "#define GL_MAX_CLIENT_ATTRIB_STACK_DEPTH   0x0D3B"

.SS "#define GL_MAX_CLIP_PLANES   0x0D32"

.SS "#define GL_MAX_COLOR_MATRIX_STACK_DEPTH   0x80B3"

.SS "#define GL_MAX_CONVOLUTION_HEIGHT   0x801B"

.SS "#define GL_MAX_CONVOLUTION_WIDTH   0x801A"

.SS "#define GL_MAX_CUBE_MAP_TEXTURE_SIZE   0x851C"

.SS "#define GL_MAX_ELEMENTS_INDICES   0x80E9"

.SS "#define GL_MAX_ELEMENTS_VERTICES   0x80E8"

.SS "#define GL_MAX_EVAL_ORDER   0x0D30"

.SS "#define GL_MAX_LIGHTS   0x0D31"

.SS "#define GL_MAX_LIST_NESTING   0x0B31"

.SS "#define GL_MAX_MODELVIEW_STACK_DEPTH   0x0D36"

.SS "#define GL_MAX_NAME_STACK_DEPTH   0x0D37"

.SS "#define GL_MAX_PIXEL_MAP_TABLE   0x0D34"

.SS "#define GL_MAX_PROJECTION_STACK_DEPTH   0x0D38"

.SS "#define GL_MAX_TEXTURE_SIZE   0x0D33"

.SS "#define GL_MAX_TEXTURE_STACK_DEPTH   0x0D39"

.SS "#define GL_MAX_TEXTURE_UNITS   0x84E2"

.SS "#define GL_MAX_TEXTURE_UNITS_ARB   0x84E2"

.SS "#define GL_MAX_VIEWPORT_DIMS   0x0D3A"

.SS "#define GL_MESA_packed_depth_stencil   1"

.SS "#define GL_MIN   0x8007"

.SS "#define GL_MINMAX   0x802E"

.SS "#define GL_MINMAX_FORMAT   0x802F"

.SS "#define GL_MINMAX_SINK   0x8030"

.SS "#define GL_MODELVIEW   0x1700"

.SS "#define GL_MODELVIEW_MATRIX   0x0BA6"

.SS "#define GL_MODELVIEW_STACK_DEPTH   0x0BA3"

.SS "#define GL_MODULATE   0x2100"

.SS "#define GL_MULT   0x0103"

.SS "#define GL_MULTISAMPLE   0x809D"

.SS "#define GL_MULTISAMPLE_BIT   0x20000000"

.SS "#define GL_N3F_V3F   0x2A25"

.SS "#define GL_NAME_STACK_DEPTH   0x0D70"

.SS "#define GL_NAND   0x150E"

.SS "#define GL_NEAREST   0x2600"

.SS "#define GL_NEAREST_MIPMAP_LINEAR   0x2702"

.SS "#define GL_NEAREST_MIPMAP_NEAREST   0x2700"

.SS "#define GL_NEVER   0x0200"

.SS "#define GL_NICEST   0x1102"

.SS "#define GL_NO_ERROR   0"

.SS "#define GL_NONE   0"

.SS "#define GL_NOOP   0x1505"

.SS "#define GL_NOR   0x1508"

.SS "#define GL_NORMAL_ARRAY   0x8075"

.SS "#define GL_NORMAL_ARRAY_POINTER   0x808F"

.SS "#define GL_NORMAL_ARRAY_STRIDE   0x807F"

.SS "#define GL_NORMAL_ARRAY_TYPE   0x807E"

.SS "#define GL_NORMAL_MAP   0x8511"

.SS "#define GL_NORMALIZE   0x0BA1"

.SS "#define GL_NOTEQUAL   0x0205"

.SS "#define GL_NUM_COMPRESSED_TEXTURE_FORMATS   0x86A2"

.SS "#define GL_OBJECT_LINEAR   0x2401"

.SS "#define GL_OBJECT_PLANE   0x2501"

.SS "#define GL_OES_EGL_image   1"

.SS "#define GL_ONE   1"

.SS "#define GL_ONE_MINUS_CONSTANT_ALPHA   0x8004"

.SS "#define GL_ONE_MINUS_CONSTANT_COLOR   0x8002"

.SS "#define GL_ONE_MINUS_DST_ALPHA   0x0305"

.SS "#define GL_ONE_MINUS_DST_COLOR   0x0307"

.SS "#define GL_ONE_MINUS_SRC_ALPHA   0x0303"

.SS "#define GL_ONE_MINUS_SRC_COLOR   0x0301"

.SS "#define GL_OPERAND0_ALPHA   0x8598"

.SS "#define GL_OPERAND0_RGB   0x8590"

.SS "#define GL_OPERAND1_ALPHA   0x8599"

.SS "#define GL_OPERAND1_RGB   0x8591"

.SS "#define GL_OPERAND2_ALPHA   0x859A"

.SS "#define GL_OPERAND2_RGB   0x8592"

.SS "#define GL_OR   0x1507"

.SS "#define GL_OR_INVERTED   0x150D"

.SS "#define GL_OR_REVERSE   0x150B"

.SS "#define GL_ORDER   0x0A01"

.SS "#define GL_OUT_OF_MEMORY   0x0505"

.SS "#define GL_PACK_ALIGNMENT   0x0D05"

.SS "#define GL_PACK_IMAGE_HEIGHT   0x806C"

.SS "#define GL_PACK_LSB_FIRST   0x0D01"

.SS "#define GL_PACK_ROW_LENGTH   0x0D02"

.SS "#define GL_PACK_SKIP_IMAGES   0x806B"

.SS "#define GL_PACK_SKIP_PIXELS   0x0D04"

.SS "#define GL_PACK_SKIP_ROWS   0x0D03"

.SS "#define GL_PACK_SWAP_BYTES   0x0D00"

.SS "#define GL_PASS_THROUGH_TOKEN   0x0700"

.SS "#define GL_PERSPECTIVE_CORRECTION_HINT   0x0C50"

.SS "#define GL_PIXEL_MAP_A_TO_A   0x0C79"

.SS "#define GL_PIXEL_MAP_A_TO_A_SIZE   0x0CB9"

.SS "#define GL_PIXEL_MAP_B_TO_B   0x0C78"

.SS "#define GL_PIXEL_MAP_B_TO_B_SIZE   0x0CB8"

.SS "#define GL_PIXEL_MAP_G_TO_G   0x0C77"

.SS "#define GL_PIXEL_MAP_G_TO_G_SIZE   0x0CB7"

.SS "#define GL_PIXEL_MAP_I_TO_A   0x0C75"

.SS "#define GL_PIXEL_MAP_I_TO_A_SIZE   0x0CB5"

.SS "#define GL_PIXEL_MAP_I_TO_B   0x0C74"

.SS "#define GL_PIXEL_MAP_I_TO_B_SIZE   0x0CB4"

.SS "#define GL_PIXEL_MAP_I_TO_G   0x0C73"

.SS "#define GL_PIXEL_MAP_I_TO_G_SIZE   0x0CB3"

.SS "#define GL_PIXEL_MAP_I_TO_I   0x0C70"

.SS "#define GL_PIXEL_MAP_I_TO_I_SIZE   0x0CB0"

.SS "#define GL_PIXEL_MAP_I_TO_R   0x0C72"

.SS "#define GL_PIXEL_MAP_I_TO_R_SIZE   0x0CB2"

.SS "#define GL_PIXEL_MAP_R_TO_R   0x0C76"

.SS "#define GL_PIXEL_MAP_R_TO_R_SIZE   0x0CB6"

.SS "#define GL_PIXEL_MAP_S_TO_S   0x0C71"

.SS "#define GL_PIXEL_MAP_S_TO_S_SIZE   0x0CB1"

.SS "#define GL_PIXEL_MODE_BIT   0x00000020"

.SS "#define GL_POINT   0x1B00"

.SS "#define GL_POINT_BIT   0x00000002"

.SS "#define GL_POINT_SIZE   0x0B11"

.SS "#define GL_POINT_SIZE_GRANULARITY   0x0B13"

.SS "#define GL_POINT_SIZE_RANGE   0x0B12"

.SS "#define GL_POINT_SMOOTH   0x0B10"

.SS "#define GL_POINT_SMOOTH_HINT   0x0C51"

.SS "#define GL_POINT_TOKEN   0x0701"

.SS "#define GL_POINTS   0x0000"

.SS "#define GL_POLYGON   0x0009"

.SS "#define GL_POLYGON_BIT   0x00000008"

.SS "#define GL_POLYGON_MODE   0x0B40"

.SS "#define GL_POLYGON_OFFSET_FACTOR   0x8038"

.SS "#define GL_POLYGON_OFFSET_FILL   0x8037"

.SS "#define GL_POLYGON_OFFSET_LINE   0x2A02"

.SS "#define GL_POLYGON_OFFSET_POINT   0x2A01"

.SS "#define GL_POLYGON_OFFSET_UNITS   0x2A00"

.SS "#define GL_POLYGON_SMOOTH   0x0B41"

.SS "#define GL_POLYGON_SMOOTH_HINT   0x0C53"

.SS "#define GL_POLYGON_STIPPLE   0x0B42"

.SS "#define GL_POLYGON_STIPPLE_BIT   0x00000010"

.SS "#define GL_POLYGON_TOKEN   0x0703"

.SS "#define GL_POSITION   0x1203"

.SS "#define GL_POST_COLOR_MATRIX_ALPHA_BIAS   0x80BB"

.SS "#define GL_POST_COLOR_MATRIX_ALPHA_SCALE   0x80B7"

.SS "#define GL_POST_COLOR_MATRIX_BLUE_BIAS   0x80BA"

.SS "#define GL_POST_COLOR_MATRIX_BLUE_SCALE   0x80B6"

.SS "#define GL_POST_COLOR_MATRIX_COLOR_TABLE   0x80D2"

.SS "#define GL_POST_COLOR_MATRIX_GREEN_BIAS   0x80B9"

.SS "#define GL_POST_COLOR_MATRIX_GREEN_SCALE   0x80B5"

.SS "#define GL_POST_COLOR_MATRIX_RED_BIAS   0x80B8"

.SS "#define GL_POST_COLOR_MATRIX_RED_SCALE   0x80B4"

.SS "#define GL_POST_CONVOLUTION_ALPHA_BIAS   0x8023"

.SS "#define GL_POST_CONVOLUTION_ALPHA_SCALE   0x801F"

.SS "#define GL_POST_CONVOLUTION_BLUE_BIAS   0x8022"

.SS "#define GL_POST_CONVOLUTION_BLUE_SCALE   0x801E"

.SS "#define GL_POST_CONVOLUTION_COLOR_TABLE   0x80D1"

.SS "#define GL_POST_CONVOLUTION_GREEN_BIAS   0x8021"

.SS "#define GL_POST_CONVOLUTION_GREEN_SCALE   0x801D"

.SS "#define GL_POST_CONVOLUTION_RED_BIAS   0x8020"

.SS "#define GL_POST_CONVOLUTION_RED_SCALE   0x801C"

.SS "#define GL_PREVIOUS   0x8578"

.SS "#define GL_PRIMARY_COLOR   0x8577"

.SS "#define GL_PROJECTION   0x1701"

.SS "#define GL_PROJECTION_MATRIX   0x0BA7"

.SS "#define GL_PROJECTION_STACK_DEPTH   0x0BA4"

.SS "#define GL_PROXY_COLOR_TABLE   0x80D3"

.SS "#define GL_PROXY_HISTOGRAM   0x8025"

.SS "#define GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE   0x80D5"

.SS "#define GL_PROXY_POST_CONVOLUTION_COLOR_TABLE   0x80D4"

.SS "#define GL_PROXY_TEXTURE_1D   0x8063"

.SS "#define GL_PROXY_TEXTURE_2D   0x8064"

.SS "#define GL_PROXY_TEXTURE_3D   0x8070"

.SS "#define GL_PROXY_TEXTURE_CUBE_MAP   0x851B"

.SS "#define GL_Q   0x2003"

.SS "#define GL_QUAD_STRIP   0x0008"

.SS "#define GL_QUADRATIC_ATTENUATION   0x1209"

.SS "#define GL_QUADS   0x0007"

.SS "#define GL_R   0x2002"

.SS "#define GL_R3_G3_B2   0x2A10"

.SS "#define GL_READ_BUFFER   0x0C02"

.SS "#define GL_RED   0x1903"

.SS "#define GL_RED_BIAS   0x0D15"

.SS "#define GL_RED_BITS   0x0D52"

.SS "#define GL_RED_SCALE   0x0D14"

.SS "#define GL_REDUCE   0x8016"

.SS "#define GL_REFLECTION_MAP   0x8512"

.SS "#define GL_RENDER   0x1C00"

.SS "#define GL_RENDER_MODE   0x0C40"

.SS "#define GL_RENDERER   0x1F01"

.SS "#define GL_REPEAT   0x2901"

.SS "#define GL_REPLACE   0x1E01"

.SS "#define GL_REPLICATE_BORDER   0x8153"

.SS "#define GL_RESCALE_NORMAL   0x803A"

.SS "#define GL_RETURN   0x0102"

.SS "#define GL_RGB   0x1907"

.SS "#define GL_RGB10   0x8052"

.SS "#define GL_RGB10_A2   0x8059"

.SS "#define GL_RGB12   0x8053"

.SS "#define GL_RGB16   0x8054"

.SS "#define GL_RGB4   0x804F"

.SS "#define GL_RGB5   0x8050"

.SS "#define GL_RGB5_A1   0x8057"

.SS "#define GL_RGB8   0x8051"

.SS "#define GL_RGB_SCALE   0x8573"

.SS "#define GL_RGBA   0x1908"

.SS "#define GL_RGBA12   0x805A"

.SS "#define GL_RGBA16   0x805B"

.SS "#define GL_RGBA2   0x8055"

.SS "#define GL_RGBA4   0x8056"

.SS "#define GL_RGBA8   0x8058"

.SS "#define GL_RGBA_MODE   0x0C31"

.SS "#define GL_RIGHT   0x0407"

.SS "#define GL_S   0x2000"

.SS "#define GL_SAMPLE_ALPHA_TO_COVERAGE   0x809E"

.SS "#define GL_SAMPLE_ALPHA_TO_ONE   0x809F"

.SS "#define GL_SAMPLE_BUFFERS   0x80A8"

.SS "#define GL_SAMPLE_COVERAGE   0x80A0"

.SS "#define GL_SAMPLE_COVERAGE_INVERT   0x80AB"

.SS "#define GL_SAMPLE_COVERAGE_VALUE   0x80AA"

.SS "#define GL_SAMPLES   0x80A9"

.SS "#define GL_SCISSOR_BIT   0x00080000"

.SS "#define GL_SCISSOR_BOX   0x0C10"

.SS "#define GL_SCISSOR_TEST   0x0C11"

.SS "#define GL_SELECT   0x1C02"

.SS "#define GL_SELECTION_BUFFER_POINTER   0x0DF3"

.SS "#define GL_SELECTION_BUFFER_SIZE   0x0DF4"

.SS "#define GL_SEPARABLE_2D   0x8012"

.SS "#define GL_SEPARATE_SPECULAR_COLOR   0x81FA"

.SS "#define GL_SET   0x150F"

.SS "#define GL_SHADE_MODEL   0x0B54"

.SS "#define GL_SHININESS   0x1601"

.SS "#define GL_SHORT   0x1402"

.SS "#define GL_SINGLE_COLOR   0x81F9"

.SS "#define GL_SMOOTH   0x1D01"

.SS "#define GL_SMOOTH_LINE_WIDTH_GRANULARITY   0x0B23"

.SS "#define GL_SMOOTH_LINE_WIDTH_RANGE   0x0B22"

.SS "#define GL_SMOOTH_POINT_SIZE_GRANULARITY   0x0B13"

.SS "#define GL_SMOOTH_POINT_SIZE_RANGE   0x0B12"

.SS "#define GL_SOURCE0_ALPHA   0x8588"

.SS "#define GL_SOURCE0_RGB   0x8580"

.SS "#define GL_SOURCE1_ALPHA   0x8589"

.SS "#define GL_SOURCE1_RGB   0x8581"

.SS "#define GL_SOURCE2_ALPHA   0x858A"

.SS "#define GL_SOURCE2_RGB   0x8582"

.SS "#define GL_SPECULAR   0x1202"

.SS "#define GL_SPHERE_MAP   0x2402"

.SS "#define GL_SPOT_CUTOFF   0x1206"

.SS "#define GL_SPOT_DIRECTION   0x1204"

.SS "#define GL_SPOT_EXPONENT   0x1205"

.SS "#define GL_SRC_ALPHA   0x0302"

.SS "#define GL_SRC_ALPHA_SATURATE   0x0308"

.SS "#define GL_SRC_COLOR   0x0300"

.SS "#define GL_STACK_OVERFLOW   0x0503"

.SS "#define GL_STACK_UNDERFLOW   0x0504"

.SS "#define GL_STENCIL   0x1802"

.SS "#define GL_STENCIL_BITS   0x0D57"

.SS "#define GL_STENCIL_BUFFER_BIT   0x00000400"

.SS "#define GL_STENCIL_CLEAR_VALUE   0x0B91"

.SS "#define GL_STENCIL_FAIL   0x0B94"

.SS "#define GL_STENCIL_FUNC   0x0B92"

.SS "#define GL_STENCIL_INDEX   0x1901"

.SS "#define GL_STENCIL_PASS_DEPTH_FAIL   0x0B95"

.SS "#define GL_STENCIL_PASS_DEPTH_PASS   0x0B96"

.SS "#define GL_STENCIL_REF   0x0B97"

.SS "#define GL_STENCIL_TEST   0x0B90"

.SS "#define GL_STENCIL_VALUE_MASK   0x0B93"

.SS "#define GL_STENCIL_WRITEMASK   0x0B98"

.SS "#define GL_STEREO   0x0C33"

.SS "#define GL_SUBPIXEL_BITS   0x0D50"

.SS "#define GL_SUBTRACT   0x84E7"

.SS "#define GL_T   0x2001"

.SS "#define GL_T2F_C3F_V3F   0x2A2A"

.SS "#define GL_T2F_C4F_N3F_V3F   0x2A2C"

.SS "#define GL_T2F_C4UB_V3F   0x2A29"

.SS "#define GL_T2F_N3F_V3F   0x2A2B"

.SS "#define GL_T2F_V3F   0x2A27"

.SS "#define GL_T4F_C4F_N3F_V4F   0x2A2D"

.SS "#define GL_T4F_V4F   0x2A28"

.SS "#define GL_TABLE_TOO_LARGE   0x8031"

.SS "#define GL_TEXTURE   0x1702"

.SS "#define GL_TEXTURE0   0x84C0"

.SS "#define GL_TEXTURE0_ARB   0x84C0"

.SS "#define GL_TEXTURE1   0x84C1"

.SS "#define GL_TEXTURE10   0x84CA"

.SS "#define GL_TEXTURE10_ARB   0x84CA"

.SS "#define GL_TEXTURE11   0x84CB"

.SS "#define GL_TEXTURE11_ARB   0x84CB"

.SS "#define GL_TEXTURE12   0x84CC"

.SS "#define GL_TEXTURE12_ARB   0x84CC"

.SS "#define GL_TEXTURE13   0x84CD"

.SS "#define GL_TEXTURE13_ARB   0x84CD"

.SS "#define GL_TEXTURE14   0x84CE"

.SS "#define GL_TEXTURE14_ARB   0x84CE"

.SS "#define GL_TEXTURE15   0x84CF"

.SS "#define GL_TEXTURE15_ARB   0x84CF"

.SS "#define GL_TEXTURE16   0x84D0"

.SS "#define GL_TEXTURE16_ARB   0x84D0"

.SS "#define GL_TEXTURE17   0x84D1"

.SS "#define GL_TEXTURE17_ARB   0x84D1"

.SS "#define GL_TEXTURE18   0x84D2"

.SS "#define GL_TEXTURE18_ARB   0x84D2"

.SS "#define GL_TEXTURE19   0x84D3"

.SS "#define GL_TEXTURE19_ARB   0x84D3"

.SS "#define GL_TEXTURE1_ARB   0x84C1"

.SS "#define GL_TEXTURE2   0x84C2"

.SS "#define GL_TEXTURE20   0x84D4"

.SS "#define GL_TEXTURE20_ARB   0x84D4"

.SS "#define GL_TEXTURE21   0x84D5"

.SS "#define GL_TEXTURE21_ARB   0x84D5"

.SS "#define GL_TEXTURE22   0x84D6"

.SS "#define GL_TEXTURE22_ARB   0x84D6"

.SS "#define GL_TEXTURE23   0x84D7"

.SS "#define GL_TEXTURE23_ARB   0x84D7"

.SS "#define GL_TEXTURE24   0x84D8"

.SS "#define GL_TEXTURE24_ARB   0x84D8"

.SS "#define GL_TEXTURE25   0x84D9"

.SS "#define GL_TEXTURE25_ARB   0x84D9"

.SS "#define GL_TEXTURE26   0x84DA"

.SS "#define GL_TEXTURE26_ARB   0x84DA"

.SS "#define GL_TEXTURE27   0x84DB"

.SS "#define GL_TEXTURE27_ARB   0x84DB"

.SS "#define GL_TEXTURE28   0x84DC"

.SS "#define GL_TEXTURE28_ARB   0x84DC"

.SS "#define GL_TEXTURE29   0x84DD"

.SS "#define GL_TEXTURE29_ARB   0x84DD"

.SS "#define GL_TEXTURE2_ARB   0x84C2"

.SS "#define GL_TEXTURE3   0x84C3"

.SS "#define GL_TEXTURE30   0x84DE"

.SS "#define GL_TEXTURE30_ARB   0x84DE"

.SS "#define GL_TEXTURE31   0x84DF"

.SS "#define GL_TEXTURE31_ARB   0x84DF"

.SS "#define GL_TEXTURE3_ARB   0x84C3"

.SS "#define GL_TEXTURE4   0x84C4"

.SS "#define GL_TEXTURE4_ARB   0x84C4"

.SS "#define GL_TEXTURE5   0x84C5"

.SS "#define GL_TEXTURE5_ARB   0x84C5"

.SS "#define GL_TEXTURE6   0x84C6"

.SS "#define GL_TEXTURE6_ARB   0x84C6"

.SS "#define GL_TEXTURE7   0x84C7"

.SS "#define GL_TEXTURE7_ARB   0x84C7"

.SS "#define GL_TEXTURE8   0x84C8"

.SS "#define GL_TEXTURE8_ARB   0x84C8"

.SS "#define GL_TEXTURE9   0x84C9"

.SS "#define GL_TEXTURE9_ARB   0x84C9"

.SS "#define GL_TEXTURE_1D   0x0DE0"

.SS "#define GL_TEXTURE_2D   0x0DE1"

.SS "#define GL_TEXTURE_3D   0x806F"

.SS "#define GL_TEXTURE_ALPHA_SIZE   0x805F"

.SS "#define GL_TEXTURE_BASE_LEVEL   0x813C"

.SS "#define GL_TEXTURE_BINDING_1D   0x8068"

.SS "#define GL_TEXTURE_BINDING_2D   0x8069"

.SS "#define GL_TEXTURE_BINDING_3D   0x806A"

.SS "#define GL_TEXTURE_BINDING_CUBE_MAP   0x8514"

.SS "#define GL_TEXTURE_BIT   0x00040000"

.SS "#define GL_TEXTURE_BLUE_SIZE   0x805E"

.SS "#define GL_TEXTURE_BORDER   0x1005"

.SS "#define GL_TEXTURE_BORDER_COLOR   0x1004"

.SS "#define GL_TEXTURE_COMPONENTS   0x1003"

.SS "#define GL_TEXTURE_COMPRESSED   0x86A1"

.SS "#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE   0x86A0"

.SS "#define GL_TEXTURE_COMPRESSION_HINT   0x84EF"

.SS "#define GL_TEXTURE_COORD_ARRAY   0x8078"

.SS "#define GL_TEXTURE_COORD_ARRAY_POINTER   0x8092"

.SS "#define GL_TEXTURE_COORD_ARRAY_SIZE   0x8088"

.SS "#define GL_TEXTURE_COORD_ARRAY_STRIDE   0x808A"

.SS "#define GL_TEXTURE_COORD_ARRAY_TYPE   0x8089"

.SS "#define GL_TEXTURE_CUBE_MAP   0x8513"

.SS "#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X   0x8516"

.SS "#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y   0x8518"

.SS "#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z   0x851A"

.SS "#define GL_TEXTURE_CUBE_MAP_POSITIVE_X   0x8515"

.SS "#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y   0x8517"

.SS "#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z   0x8519"

.SS "#define GL_TEXTURE_DEPTH   0x8071"

.SS "#define GL_TEXTURE_ENV   0x2300"

.SS "#define GL_TEXTURE_ENV_COLOR   0x2201"

.SS "#define GL_TEXTURE_ENV_MODE   0x2200"

.SS "#define GL_TEXTURE_GEN_MODE   0x2500"

.SS "#define GL_TEXTURE_GEN_Q   0x0C63"

.SS "#define GL_TEXTURE_GEN_R   0x0C62"

.SS "#define GL_TEXTURE_GEN_S   0x0C60"

.SS "#define GL_TEXTURE_GEN_T   0x0C61"

.SS "#define GL_TEXTURE_GREEN_SIZE   0x805D"

.SS "#define GL_TEXTURE_HEIGHT   0x1001"

.SS "#define GL_TEXTURE_INTENSITY_SIZE   0x8061"

.SS "#define GL_TEXTURE_INTERNAL_FORMAT   0x1003"

.SS "#define GL_TEXTURE_LUMINANCE_SIZE   0x8060"

.SS "#define GL_TEXTURE_MAG_FILTER   0x2800"

.SS "#define GL_TEXTURE_MATRIX   0x0BA8"

.SS "#define GL_TEXTURE_MAX_LEVEL   0x813D"

.SS "#define GL_TEXTURE_MAX_LOD   0x813B"

.SS "#define GL_TEXTURE_MIN_FILTER   0x2801"

.SS "#define GL_TEXTURE_MIN_LOD   0x813A"

.SS "#define GL_TEXTURE_PRIORITY   0x8066"

.SS "#define GL_TEXTURE_RED_SIZE   0x805C"

.SS "#define GL_TEXTURE_RESIDENT   0x8067"

.SS "#define GL_TEXTURE_STACK_DEPTH   0x0BA5"

.SS "#define GL_TEXTURE_WIDTH   0x1000"

.SS "#define GL_TEXTURE_WRAP_R   0x8072"

.SS "#define GL_TEXTURE_WRAP_S   0x2802"

.SS "#define GL_TEXTURE_WRAP_T   0x2803"

.SS "#define GL_TRANSFORM_BIT   0x00001000"

.SS "#define GL_TRANSPOSE_COLOR_MATRIX   0x84E6"

.SS "#define GL_TRANSPOSE_MODELVIEW_MATRIX   0x84E3"

.SS "#define GL_TRANSPOSE_PROJECTION_MATRIX   0x84E4"

.SS "#define GL_TRANSPOSE_TEXTURE_MATRIX   0x84E5"

.SS "#define GL_TRIANGLE_FAN   0x0006"

.SS "#define GL_TRIANGLE_STRIP   0x0005"

.SS "#define GL_TRIANGLES   0x0004"

.SS "#define GL_TRUE   1"

.SS "#define GL_UNPACK_ALIGNMENT   0x0CF5"

.SS "#define GL_UNPACK_IMAGE_HEIGHT   0x806E"

.SS "#define GL_UNPACK_LSB_FIRST   0x0CF1"

.SS "#define GL_UNPACK_ROW_LENGTH   0x0CF2"

.SS "#define GL_UNPACK_SKIP_IMAGES   0x806D"

.SS "#define GL_UNPACK_SKIP_PIXELS   0x0CF4"

.SS "#define GL_UNPACK_SKIP_ROWS   0x0CF3"

.SS "#define GL_UNPACK_SWAP_BYTES   0x0CF0"

.SS "#define GL_UNSIGNED_BYTE   0x1401"

.SS "#define GL_UNSIGNED_BYTE_2_3_3_REV   0x8362"

.SS "#define GL_UNSIGNED_BYTE_3_3_2   0x8032"

.SS "#define GL_UNSIGNED_INT   0x1405"

.SS "#define GL_UNSIGNED_INT_10_10_10_2   0x8036"

.SS "#define GL_UNSIGNED_INT_24_8_MESA   0x8751"

.SS "#define GL_UNSIGNED_INT_2_10_10_10_REV   0x8368"

.SS "#define GL_UNSIGNED_INT_8_24_REV_MESA   0x8752"

.SS "#define GL_UNSIGNED_INT_8_8_8_8   0x8035"

.SS "#define GL_UNSIGNED_INT_8_8_8_8_REV   0x8367"

.SS "#define GL_UNSIGNED_SHORT   0x1403"

.SS "#define GL_UNSIGNED_SHORT_15_1_MESA   0x8753"

.SS "#define GL_UNSIGNED_SHORT_1_15_REV_MESA   0x8754"

.SS "#define GL_UNSIGNED_SHORT_1_5_5_5_REV   0x8366"

.SS "#define GL_UNSIGNED_SHORT_4_4_4_4   0x8033"

.SS "#define GL_UNSIGNED_SHORT_4_4_4_4_REV   0x8365"

.SS "#define GL_UNSIGNED_SHORT_5_5_5_1   0x8034"

.SS "#define GL_UNSIGNED_SHORT_5_6_5   0x8363"

.SS "#define GL_UNSIGNED_SHORT_5_6_5_REV   0x8364"

.SS "#define GL_V2F   0x2A20"

.SS "#define GL_V3F   0x2A21"

.SS "#define GL_VENDOR   0x1F00"

.SS "#define GL_VERSION   0x1F02"

.SS "#define GL_VERSION_1_1   1"

.SS "#define GL_VERSION_1_2   1"

.SS "#define GL_VERSION_1_3   1"

.SS "#define GL_VERTEX_ARRAY   0x8074"

.SS "#define GL_VERTEX_ARRAY_POINTER   0x808E"

.SS "#define GL_VERTEX_ARRAY_SIZE   0x807A"

.SS "#define GL_VERTEX_ARRAY_STRIDE   0x807C"

.SS "#define GL_VERTEX_ARRAY_TYPE   0x807B"

.SS "#define GL_VIEWPORT   0x0BA2"

.SS "#define GL_VIEWPORT_BIT   0x00000800"

.SS "#define GL_XOR   0x1506"

.SS "#define GL_ZERO   0"

.SS "#define GL_ZOOM_X   0x0D16"

.SS "#define GL_ZOOM_Y   0x0D17"

.SS "#define GLAPI   extern"

.SS "#define GLAPIENTRY"

.SS "#define GLAPIENTRYP   \fBGLAPIENTRY\fP *"

.SH "Typedef Documentation"
.PP 
.SS "typedef \fBGLint\fP \fBGLenum\fP \fBGLsizei\fP \fBGLsizei\fP \fBGLsizei\fP \fBGLint\fP \fBborder\fP"

.SS "typedef \fBGLsizei\fP \fBcount\fP"

.SS "typedef \fBGLint\fP \fBGLsizei\fP \fBGLsizei\fP \fBGLenum\fP \fBGLenum\fP \fBGLsizei\fP \fBGLvoid\fP * \fBdata\fP"

.SS "typedef \fBGLint\fP \fBGLint\fP \fBGLint\fP \fBGLint\fP \fBGLsizei\fP \fBGLsizei\fP \fBGLsizei\fP \fBdepth\fP"

.SS "typedef \fBGLuint\fP \fBGLuint\fP \fBend\fP"

.SS "typedef \fBGLint\fP \fBGLint\fP \fBGLsizei\fP \fBGLenum\fP \fBformat\fP"

.SS "typedef unsigned int \fBGLbitfield\fP"

.SS "typedef \fBGLboolean\fP"

.SS "typedef signed char \fBGLbyte\fP"

.SS "typedef double \fBGLclampd\fP"

.SS "typedef float \fBGLclampf\fP"

.SS "typedef double \fBGLdouble\fP"

.SS "typedef \fBvoid\fP* \fBGLeglImageOES\fP"

.SS "typedef \fBGLenum\fP"

.SS "typedef float \fBGLfloat\fP"

.SS "typedef \fBGLint\fP"

.SS "typedef short \fBGLshort\fP"

.SS "typedef int \fBGLsizei\fP"

.SS "typedef unsigned char \fBGLubyte\fP"

.SS "typedef \fBGLuint\fP"

.SS "typedef unsigned short \fBGLushort\fP"

.SS "typedef \fBvoid\fP \fBGLvoid\fP"

.SS "typedef \fBGLuint\fP \fBGLuint\fP \fBGLuint\fP \fBheight\fP"

.SS "typedef \fBGLeglImageOES\fP \fBimage\fP"

.SS "typedef \fBGLint\fP \fBGLint\fP \fBGLint\fP \fBGLint\fP \fBGLsizei\fP \fBGLsizei\fP \fBGLsizei\fP \fBGLenum\fP \fBGLsizei\fP \fBimageSize\fP"

.SS "typedef \fBGLenum\fP \fBGLint\fP \fBvoid\fP * \fBimg\fP"

.SS "typedef \fBGLsizei\fP \fBGLenum\fP const \fBGLvoid\fP * \fBindices\fP"

.SS "typedef \fBGLsizei\fP \fBGLenum\fP \fBinternalformat\fP"

.SS "typedef \fBGLboolean\fP \fBinvert\fP"

.SS "typedef \fBGLint\fP \fBlevel\fP"

.SS "typedef \fBGLenum\fP \fBmodeA\fP"

.SS "typedef \fBGLint\fP \fBGLint\fP \fBGLint\fP \fBGLint\fP \fBGLsizei\fP \fBGLsizei\fP \fBGLsizei\fP \fBGLenum\fP \fBGLenum\fP const \fBGLvoid\fP * \fBpixels\fP"

.SS "typedef \fBGLfloat\fP \fBGLfloat\fP \fBGLfloat\fP \fBq\fP"

.SS "typedef \fBGLfloat\fP \fBGLfloat\fP \fBGLfloat\fP \fBr\fP"

.SS "typedef \fBGLfloat\fP \fBs\fP"

.SS "typedef \fBGLuint\fP \fBstart\fP"

.SS "typedef \fBGLfloat\fP \fBGLfloat\fP \fBt\fP"

.SS "typedef \fBGLint\fP \fBGLint\fP \fBGLint\fP \fBGLint\fP \fBGLsizei\fP \fBGLsizei\fP \fBGLsizei\fP \fBGLenum\fP \fBGLenum\fP \fBtype\fP"

.SS "typedef const \fBGLfloat\fP const \fBGLfloat\fP const \fBGLfloat\fP const \fBGLfloat\fP * \fBv\fP"

.SS "typedef \fBGLuint\fP \fBGLuint\fP \fBwidth\fP"

.SS "typedef \fBGLint\fP \fBGLfloat\fP \fBx\fP"

.SS "typedef \fBGLint\fP \fBGLint\fP \fBxoffset\fP"

.SS "typedef \fBGLuint\fP \fBy\fP"

.SS "typedef \fBGLint\fP \fBGLint\fP \fBGLint\fP \fByoffset\fP"

.SS "typedef \fBGLint\fP \fBGLint\fP \fBGLint\fP \fBGLint\fP \fBzoffset\fP"

.SH "Function Documentation"
.PP 
.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glAccum (\fBGLenum\fP op, \fBGLfloat\fP value)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glActiveTexture (\fBGLenum\fP texture)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glActiveTextureARB (\fBGLenum\fP texture)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glAlphaFunc (\fBGLenum\fP func, \fBGLclampf\fP ref)"

.SS "\fBGLAPI\fP \fBGLboolean\fP \fBGLAPIENTRY\fP glAreTexturesResident (\fBGLsizei\fP n, const \fBGLuint\fP * textures, \fBGLboolean\fP * residences)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glArrayElement (\fBGLint\fP i)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glBegin (\fBGLenum\fP mode)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glBindTexture (\fBGLenum\fP target, \fBGLuint\fP texture)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glBitmap (\fBGLsizei\fP width, \fBGLsizei\fP height, \fBGLfloat\fP xorig, \fBGLfloat\fP yorig, \fBGLfloat\fP xmove, \fBGLfloat\fP ymove, const \fBGLubyte\fP * bitmap)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glBlendColor (\fBGLclampf\fP red, \fBGLclampf\fP green, \fBGLclampf\fP blue, \fBGLclampf\fP alpha)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glBlendEquation (\fBGLenum\fP mode)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glBlendEquationSeparateATI (\fBGLenum\fP modeRGB, \fBGLenum\fP modeA)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glBlendFunc (\fBGLenum\fP sfactor, \fBGLenum\fP dfactor)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glCallList (\fBGLuint\fP list)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glCallLists (\fBGLsizei\fP n, \fBGLenum\fP type, const \fBGLvoid\fP * lists)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glClear (\fBGLbitfield\fP mask)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glClearAccum (\fBGLfloat\fP red, \fBGLfloat\fP green, \fBGLfloat\fP blue, \fBGLfloat\fP alpha)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glClearColor (\fBGLclampf\fP red, \fBGLclampf\fP green, \fBGLclampf\fP blue, \fBGLclampf\fP alpha)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glClearDepth (\fBGLclampd\fP depth)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glClearIndex (\fBGLfloat\fP c)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glClearStencil (\fBGLint\fP s)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glClientActiveTexture (\fBGLenum\fP texture)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glClientActiveTextureARB (\fBGLenum\fP texture)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glClipPlane (\fBGLenum\fP plane, const \fBGLdouble\fP * equation)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glColor3b (\fBGLbyte\fP red, \fBGLbyte\fP green, \fBGLbyte\fP blue)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glColor3bv (const \fBGLbyte\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glColor3d (\fBGLdouble\fP red, \fBGLdouble\fP green, \fBGLdouble\fP blue)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glColor3dv (const \fBGLdouble\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glColor3f (\fBGLfloat\fP red, \fBGLfloat\fP green, \fBGLfloat\fP blue)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glColor3fv (const \fBGLfloat\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glColor3i (\fBGLint\fP red, \fBGLint\fP green, \fBGLint\fP blue)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glColor3iv (const \fBGLint\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glColor3s (\fBGLshort\fP red, \fBGLshort\fP green, \fBGLshort\fP blue)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glColor3sv (const \fBGLshort\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glColor3ub (\fBGLubyte\fP red, \fBGLubyte\fP green, \fBGLubyte\fP blue)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glColor3ubv (const \fBGLubyte\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glColor3ui (\fBGLuint\fP red, \fBGLuint\fP green, \fBGLuint\fP blue)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glColor3uiv (const \fBGLuint\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glColor3us (\fBGLushort\fP red, \fBGLushort\fP green, \fBGLushort\fP blue)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glColor3usv (const \fBGLushort\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glColor4b (\fBGLbyte\fP red, \fBGLbyte\fP green, \fBGLbyte\fP blue, \fBGLbyte\fP alpha)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glColor4bv (const \fBGLbyte\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glColor4d (\fBGLdouble\fP red, \fBGLdouble\fP green, \fBGLdouble\fP blue, \fBGLdouble\fP alpha)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glColor4dv (const \fBGLdouble\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glColor4f (\fBGLfloat\fP red, \fBGLfloat\fP green, \fBGLfloat\fP blue, \fBGLfloat\fP alpha)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glColor4fv (const \fBGLfloat\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glColor4i (\fBGLint\fP red, \fBGLint\fP green, \fBGLint\fP blue, \fBGLint\fP alpha)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glColor4iv (const \fBGLint\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glColor4s (\fBGLshort\fP red, \fBGLshort\fP green, \fBGLshort\fP blue, \fBGLshort\fP alpha)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glColor4sv (const \fBGLshort\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glColor4ub (\fBGLubyte\fP red, \fBGLubyte\fP green, \fBGLubyte\fP blue, \fBGLubyte\fP alpha)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glColor4ubv (const \fBGLubyte\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glColor4ui (\fBGLuint\fP red, \fBGLuint\fP green, \fBGLuint\fP blue, \fBGLuint\fP alpha)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glColor4uiv (const \fBGLuint\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glColor4us (\fBGLushort\fP red, \fBGLushort\fP green, \fBGLushort\fP blue, \fBGLushort\fP alpha)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glColor4usv (const \fBGLushort\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glColorMask (\fBGLboolean\fP red, \fBGLboolean\fP green, \fBGLboolean\fP blue, \fBGLboolean\fP alpha)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glColorMaterial (\fBGLenum\fP face, \fBGLenum\fP mode)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glColorPointer (\fBGLint\fP size, \fBGLenum\fP type, \fBGLsizei\fP stride, const \fBGLvoid\fP * ptr)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glColorSubTable (\fBGLenum\fP target, \fBGLsizei\fP start, \fBGLsizei\fP count, \fBGLenum\fP format, \fBGLenum\fP type, const \fBGLvoid\fP * data)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glColorTable (\fBGLenum\fP target, \fBGLenum\fP internalformat, \fBGLsizei\fP width, \fBGLenum\fP format, \fBGLenum\fP type, const \fBGLvoid\fP * table)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glColorTableParameterfv (\fBGLenum\fP target, \fBGLenum\fP pname, const \fBGLfloat\fP * params)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glColorTableParameteriv (\fBGLenum\fP target, \fBGLenum\fP pname, const \fBGLint\fP * params)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glCompressedTexImage1D (\fBGLenum\fP target, \fBGLint\fP level, \fBGLenum\fP internalformat, \fBGLsizei\fP width, \fBGLint\fP border, \fBGLsizei\fP imageSize, const \fBGLvoid\fP * data)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glCompressedTexImage2D (\fBGLenum\fP target, \fBGLint\fP level, \fBGLenum\fP internalformat, \fBGLsizei\fP width, \fBGLsizei\fP height, \fBGLint\fP border, \fBGLsizei\fP imageSize, const \fBGLvoid\fP * data)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glCompressedTexImage3D (\fBGLenum\fP target, \fBGLint\fP level, \fBGLenum\fP internalformat, \fBGLsizei\fP width, \fBGLsizei\fP height, \fBGLsizei\fP depth, \fBGLint\fP border, \fBGLsizei\fP imageSize, const \fBGLvoid\fP * data)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glCompressedTexSubImage1D (\fBGLenum\fP target, \fBGLint\fP level, \fBGLint\fP xoffset, \fBGLsizei\fP width, \fBGLenum\fP format, \fBGLsizei\fP imageSize, const \fBGLvoid\fP * data)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glCompressedTexSubImage2D (\fBGLenum\fP target, \fBGLint\fP level, \fBGLint\fP xoffset, \fBGLint\fP yoffset, \fBGLsizei\fP width, \fBGLsizei\fP height, \fBGLenum\fP format, \fBGLsizei\fP imageSize, const \fBGLvoid\fP * data)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glCompressedTexSubImage3D (\fBGLenum\fP target, \fBGLint\fP level, \fBGLint\fP xoffset, \fBGLint\fP yoffset, \fBGLint\fP zoffset, \fBGLsizei\fP width, \fBGLsizei\fP height, \fBGLsizei\fP depth, \fBGLenum\fP format, \fBGLsizei\fP imageSize, const \fBGLvoid\fP * data)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glConvolutionFilter1D (\fBGLenum\fP target, \fBGLenum\fP internalformat, \fBGLsizei\fP width, \fBGLenum\fP format, \fBGLenum\fP type, const \fBGLvoid\fP * image)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glConvolutionFilter2D (\fBGLenum\fP target, \fBGLenum\fP internalformat, \fBGLsizei\fP width, \fBGLsizei\fP height, \fBGLenum\fP format, \fBGLenum\fP type, const \fBGLvoid\fP * image)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glConvolutionParameterf (\fBGLenum\fP target, \fBGLenum\fP pname, \fBGLfloat\fP params)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glConvolutionParameterfv (\fBGLenum\fP target, \fBGLenum\fP pname, const \fBGLfloat\fP * params)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glConvolutionParameteri (\fBGLenum\fP target, \fBGLenum\fP pname, \fBGLint\fP params)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glConvolutionParameteriv (\fBGLenum\fP target, \fBGLenum\fP pname, const \fBGLint\fP * params)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glCopyColorSubTable (\fBGLenum\fP target, \fBGLsizei\fP start, \fBGLint\fP x, \fBGLint\fP y, \fBGLsizei\fP width)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glCopyColorTable (\fBGLenum\fP target, \fBGLenum\fP internalformat, \fBGLint\fP x, \fBGLint\fP y, \fBGLsizei\fP width)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glCopyConvolutionFilter1D (\fBGLenum\fP target, \fBGLenum\fP internalformat, \fBGLint\fP x, \fBGLint\fP y, \fBGLsizei\fP width)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glCopyConvolutionFilter2D (\fBGLenum\fP target, \fBGLenum\fP internalformat, \fBGLint\fP x, \fBGLint\fP y, \fBGLsizei\fP width, \fBGLsizei\fP height)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glCopyPixels (\fBGLint\fP x, \fBGLint\fP y, \fBGLsizei\fP width, \fBGLsizei\fP height, \fBGLenum\fP type)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glCopyTexImage1D (\fBGLenum\fP target, \fBGLint\fP level, \fBGLenum\fP internalformat, \fBGLint\fP x, \fBGLint\fP y, \fBGLsizei\fP width, \fBGLint\fP border)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glCopyTexImage2D (\fBGLenum\fP target, \fBGLint\fP level, \fBGLenum\fP internalformat, \fBGLint\fP x, \fBGLint\fP y, \fBGLsizei\fP width, \fBGLsizei\fP height, \fBGLint\fP border)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glCopyTexSubImage1D (\fBGLenum\fP target, \fBGLint\fP level, \fBGLint\fP xoffset, \fBGLint\fP x, \fBGLint\fP y, \fBGLsizei\fP width)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glCopyTexSubImage2D (\fBGLenum\fP target, \fBGLint\fP level, \fBGLint\fP xoffset, \fBGLint\fP yoffset, \fBGLint\fP x, \fBGLint\fP y, \fBGLsizei\fP width, \fBGLsizei\fP height)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glCopyTexSubImage3D (\fBGLenum\fP target, \fBGLint\fP level, \fBGLint\fP xoffset, \fBGLint\fP yoffset, \fBGLint\fP zoffset, \fBGLint\fP x, \fBGLint\fP y, \fBGLsizei\fP width, \fBGLsizei\fP height)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glCullFace (\fBGLenum\fP mode)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glDeleteLists (\fBGLuint\fP list, \fBGLsizei\fP range)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glDeleteTextures (\fBGLsizei\fP n, const \fBGLuint\fP * textures)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glDepthFunc (\fBGLenum\fP func)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glDepthMask (\fBGLboolean\fP flag)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glDepthRange (\fBGLclampd\fP near_val, \fBGLclampd\fP far_val)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glDisable (\fBGLenum\fP cap)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glDisableClientState (\fBGLenum\fP cap)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glDrawArrays (\fBGLenum\fP mode, \fBGLint\fP first, \fBGLsizei\fP count)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glDrawBuffer (\fBGLenum\fP mode)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glDrawElements (\fBGLenum\fP mode, \fBGLsizei\fP count, \fBGLenum\fP type, const \fBGLvoid\fP * indices)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glDrawPixels (\fBGLsizei\fP width, \fBGLsizei\fP height, \fBGLenum\fP format, \fBGLenum\fP type, const \fBGLvoid\fP * pixels)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glDrawRangeElements (\fBGLenum\fP mode, \fBGLuint\fP start, \fBGLuint\fP end, \fBGLsizei\fP count, \fBGLenum\fP type, const \fBGLvoid\fP * indices)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glEdgeFlag (\fBGLboolean\fP flag)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glEdgeFlagPointer (\fBGLsizei\fP stride, const \fBGLvoid\fP * ptr)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glEdgeFlagv (const \fBGLboolean\fP * flag)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glEnable (\fBGLenum\fP cap)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glEnableClientState (\fBGLenum\fP cap)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glEnd (\fBvoid\fP)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glEndList (\fBvoid\fP)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glEvalCoord1d (\fBGLdouble\fP u)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glEvalCoord1dv (const \fBGLdouble\fP * u)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glEvalCoord1f (\fBGLfloat\fP u)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glEvalCoord1fv (const \fBGLfloat\fP * u)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glEvalCoord2d (\fBGLdouble\fP u, \fBGLdouble\fP v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glEvalCoord2dv (const \fBGLdouble\fP * u)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glEvalCoord2f (\fBGLfloat\fP u, \fBGLfloat\fP v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glEvalCoord2fv (const \fBGLfloat\fP * u)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glEvalMesh1 (\fBGLenum\fP mode, \fBGLint\fP i1, \fBGLint\fP i2)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glEvalMesh2 (\fBGLenum\fP mode, \fBGLint\fP i1, \fBGLint\fP i2, \fBGLint\fP j1, \fBGLint\fP j2)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glEvalPoint1 (\fBGLint\fP i)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glEvalPoint2 (\fBGLint\fP i, \fBGLint\fP j)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glFeedbackBuffer (\fBGLsizei\fP size, \fBGLenum\fP type, \fBGLfloat\fP * buffer)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glFinish (\fBvoid\fP)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glFlush (\fBvoid\fP)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glFogf (\fBGLenum\fP pname, \fBGLfloat\fP param)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glFogfv (\fBGLenum\fP pname, const \fBGLfloat\fP * params)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glFogi (\fBGLenum\fP pname, \fBGLint\fP param)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glFogiv (\fBGLenum\fP pname, const \fBGLint\fP * params)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glFrontFace (\fBGLenum\fP mode)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glFrustum (\fBGLdouble\fP left, \fBGLdouble\fP right, \fBGLdouble\fP bottom, \fBGLdouble\fP top, \fBGLdouble\fP near_val, \fBGLdouble\fP far_val)"

.SS "\fBGLAPI\fP \fBGLuint\fP \fBGLAPIENTRY\fP glGenLists (\fBGLsizei\fP range)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glGenTextures (\fBGLsizei\fP n, \fBGLuint\fP * textures)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glGetBooleanv (\fBGLenum\fP pname, \fBGLboolean\fP * params)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glGetClipPlane (\fBGLenum\fP plane, \fBGLdouble\fP * equation)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glGetColorTable (\fBGLenum\fP target, \fBGLenum\fP format, \fBGLenum\fP type, \fBGLvoid\fP * table)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glGetColorTableParameterfv (\fBGLenum\fP target, \fBGLenum\fP pname, \fBGLfloat\fP * params)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glGetColorTableParameteriv (\fBGLenum\fP target, \fBGLenum\fP pname, \fBGLint\fP * params)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glGetCompressedTexImage (\fBGLenum\fP target, \fBGLint\fP lod, \fBGLvoid\fP * img)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glGetConvolutionFilter (\fBGLenum\fP target, \fBGLenum\fP format, \fBGLenum\fP type, \fBGLvoid\fP * image)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glGetConvolutionParameterfv (\fBGLenum\fP target, \fBGLenum\fP pname, \fBGLfloat\fP * params)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glGetConvolutionParameteriv (\fBGLenum\fP target, \fBGLenum\fP pname, \fBGLint\fP * params)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glGetDoublev (\fBGLenum\fP pname, \fBGLdouble\fP * params)"

.SS "\fBGLAPI\fP \fBGLenum\fP \fBGLAPIENTRY\fP glGetError (\fBvoid\fP)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glGetFloatv (\fBGLenum\fP pname, \fBGLfloat\fP * params)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glGetHistogram (\fBGLenum\fP target, \fBGLboolean\fP reset, \fBGLenum\fP format, \fBGLenum\fP type, \fBGLvoid\fP * values)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glGetHistogramParameterfv (\fBGLenum\fP target, \fBGLenum\fP pname, \fBGLfloat\fP * params)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glGetHistogramParameteriv (\fBGLenum\fP target, \fBGLenum\fP pname, \fBGLint\fP * params)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glGetIntegerv (\fBGLenum\fP pname, \fBGLint\fP * params)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glGetLightfv (\fBGLenum\fP light, \fBGLenum\fP pname, \fBGLfloat\fP * params)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glGetLightiv (\fBGLenum\fP light, \fBGLenum\fP pname, \fBGLint\fP * params)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glGetMapdv (\fBGLenum\fP target, \fBGLenum\fP query, \fBGLdouble\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glGetMapfv (\fBGLenum\fP target, \fBGLenum\fP query, \fBGLfloat\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glGetMapiv (\fBGLenum\fP target, \fBGLenum\fP query, \fBGLint\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glGetMaterialfv (\fBGLenum\fP face, \fBGLenum\fP pname, \fBGLfloat\fP * params)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glGetMaterialiv (\fBGLenum\fP face, \fBGLenum\fP pname, \fBGLint\fP * params)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glGetMinmax (\fBGLenum\fP target, \fBGLboolean\fP reset, \fBGLenum\fP format, \fBGLenum\fP types, \fBGLvoid\fP * values)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glGetMinmaxParameterfv (\fBGLenum\fP target, \fBGLenum\fP pname, \fBGLfloat\fP * params)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glGetMinmaxParameteriv (\fBGLenum\fP target, \fBGLenum\fP pname, \fBGLint\fP * params)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glGetPixelMapfv (\fBGLenum\fP map, \fBGLfloat\fP * values)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glGetPixelMapuiv (\fBGLenum\fP map, \fBGLuint\fP * values)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glGetPixelMapusv (\fBGLenum\fP map, \fBGLushort\fP * values)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glGetPointerv (\fBGLenum\fP pname, \fBGLvoid\fP ** params)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glGetPolygonStipple (\fBGLubyte\fP * mask)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glGetSeparableFilter (\fBGLenum\fP target, \fBGLenum\fP format, \fBGLenum\fP type, \fBGLvoid\fP * row, \fBGLvoid\fP * column, \fBGLvoid\fP * span)"

.SS "\fBGLAPI\fP const \fBGLubyte\fP *\fBGLAPIENTRY\fP glGetString (\fBGLenum\fP name)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glGetTexEnvfv (\fBGLenum\fP target, \fBGLenum\fP pname, \fBGLfloat\fP * params)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glGetTexEnviv (\fBGLenum\fP target, \fBGLenum\fP pname, \fBGLint\fP * params)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glGetTexGendv (\fBGLenum\fP coord, \fBGLenum\fP pname, \fBGLdouble\fP * params)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glGetTexGenfv (\fBGLenum\fP coord, \fBGLenum\fP pname, \fBGLfloat\fP * params)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glGetTexGeniv (\fBGLenum\fP coord, \fBGLenum\fP pname, \fBGLint\fP * params)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glGetTexImage (\fBGLenum\fP target, \fBGLint\fP level, \fBGLenum\fP format, \fBGLenum\fP type, \fBGLvoid\fP * pixels)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glGetTexLevelParameterfv (\fBGLenum\fP target, \fBGLint\fP level, \fBGLenum\fP pname, \fBGLfloat\fP * params)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glGetTexLevelParameteriv (\fBGLenum\fP target, \fBGLint\fP level, \fBGLenum\fP pname, \fBGLint\fP * params)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glGetTexParameterfv (\fBGLenum\fP target, \fBGLenum\fP pname, \fBGLfloat\fP * params)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glGetTexParameteriv (\fBGLenum\fP target, \fBGLenum\fP pname, \fBGLint\fP * params)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glHint (\fBGLenum\fP target, \fBGLenum\fP mode)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glHistogram (\fBGLenum\fP target, \fBGLsizei\fP width, \fBGLenum\fP internalformat, \fBGLboolean\fP sink)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glIndexd (\fBGLdouble\fP c)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glIndexdv (const \fBGLdouble\fP * c)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glIndexf (\fBGLfloat\fP c)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glIndexfv (const \fBGLfloat\fP * c)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glIndexi (\fBGLint\fP c)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glIndexiv (const \fBGLint\fP * c)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glIndexMask (\fBGLuint\fP mask)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glIndexPointer (\fBGLenum\fP type, \fBGLsizei\fP stride, const \fBGLvoid\fP * ptr)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glIndexs (\fBGLshort\fP c)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glIndexsv (const \fBGLshort\fP * c)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glIndexub (\fBGLubyte\fP c)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glIndexubv (const \fBGLubyte\fP * c)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glInitNames (\fBvoid\fP)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glInterleavedArrays (\fBGLenum\fP format, \fBGLsizei\fP stride, const \fBGLvoid\fP * pointer)"

.SS "\fBGLAPI\fP \fBGLboolean\fP \fBGLAPIENTRY\fP glIsEnabled (\fBGLenum\fP cap)"

.SS "\fBGLAPI\fP \fBGLboolean\fP \fBGLAPIENTRY\fP glIsList (\fBGLuint\fP list)"

.SS "\fBGLAPI\fP \fBGLboolean\fP \fBGLAPIENTRY\fP glIsTexture (\fBGLuint\fP texture)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glLightf (\fBGLenum\fP light, \fBGLenum\fP pname, \fBGLfloat\fP param)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glLightfv (\fBGLenum\fP light, \fBGLenum\fP pname, const \fBGLfloat\fP * params)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glLighti (\fBGLenum\fP light, \fBGLenum\fP pname, \fBGLint\fP param)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glLightiv (\fBGLenum\fP light, \fBGLenum\fP pname, const \fBGLint\fP * params)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glLightModelf (\fBGLenum\fP pname, \fBGLfloat\fP param)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glLightModelfv (\fBGLenum\fP pname, const \fBGLfloat\fP * params)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glLightModeli (\fBGLenum\fP pname, \fBGLint\fP param)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glLightModeliv (\fBGLenum\fP pname, const \fBGLint\fP * params)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glLineStipple (\fBGLint\fP factor, \fBGLushort\fP pattern)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glLineWidth (\fBGLfloat\fP width)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glListBase (\fBGLuint\fP base)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glLoadIdentity (\fBvoid\fP)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glLoadMatrixd (const \fBGLdouble\fP * m)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glLoadMatrixf (const \fBGLfloat\fP * m)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glLoadName (\fBGLuint\fP name)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glLoadTransposeMatrixd (const \fBGLdouble\fP m[16])"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glLoadTransposeMatrixf (const \fBGLfloat\fP m[16])"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glLogicOp (\fBGLenum\fP opcode)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMap1d (\fBGLenum\fP target, \fBGLdouble\fP u1, \fBGLdouble\fP u2, \fBGLint\fP stride, \fBGLint\fP order, const \fBGLdouble\fP * points)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMap1f (\fBGLenum\fP target, \fBGLfloat\fP u1, \fBGLfloat\fP u2, \fBGLint\fP stride, \fBGLint\fP order, const \fBGLfloat\fP * points)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMap2d (\fBGLenum\fP target, \fBGLdouble\fP u1, \fBGLdouble\fP u2, \fBGLint\fP ustride, \fBGLint\fP uorder, \fBGLdouble\fP v1, \fBGLdouble\fP v2, \fBGLint\fP vstride, \fBGLint\fP vorder, const \fBGLdouble\fP * points)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMap2f (\fBGLenum\fP target, \fBGLfloat\fP u1, \fBGLfloat\fP u2, \fBGLint\fP ustride, \fBGLint\fP uorder, \fBGLfloat\fP v1, \fBGLfloat\fP v2, \fBGLint\fP vstride, \fBGLint\fP vorder, const \fBGLfloat\fP * points)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMapGrid1d (\fBGLint\fP un, \fBGLdouble\fP u1, \fBGLdouble\fP u2)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMapGrid1f (\fBGLint\fP un, \fBGLfloat\fP u1, \fBGLfloat\fP u2)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMapGrid2d (\fBGLint\fP un, \fBGLdouble\fP u1, \fBGLdouble\fP u2, \fBGLint\fP vn, \fBGLdouble\fP v1, \fBGLdouble\fP v2)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMapGrid2f (\fBGLint\fP un, \fBGLfloat\fP u1, \fBGLfloat\fP u2, \fBGLint\fP vn, \fBGLfloat\fP v1, \fBGLfloat\fP v2)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMaterialf (\fBGLenum\fP face, \fBGLenum\fP pname, \fBGLfloat\fP param)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMaterialfv (\fBGLenum\fP face, \fBGLenum\fP pname, const \fBGLfloat\fP * params)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMateriali (\fBGLenum\fP face, \fBGLenum\fP pname, \fBGLint\fP param)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMaterialiv (\fBGLenum\fP face, \fBGLenum\fP pname, const \fBGLint\fP * params)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMatrixMode (\fBGLenum\fP mode)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMinmax (\fBGLenum\fP target, \fBGLenum\fP internalformat, \fBGLboolean\fP sink)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord1d (\fBGLenum\fP target, \fBGLdouble\fP s)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord1dARB (\fBGLenum\fP target, \fBGLdouble\fP s)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord1dv (\fBGLenum\fP target, const \fBGLdouble\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord1dvARB (\fBGLenum\fP target, const \fBGLdouble\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord1f (\fBGLenum\fP target, \fBGLfloat\fP s)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord1fARB (\fBGLenum\fP target, \fBGLfloat\fP s)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord1fv (\fBGLenum\fP target, const \fBGLfloat\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord1fvARB (\fBGLenum\fP target, const \fBGLfloat\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord1i (\fBGLenum\fP target, \fBGLint\fP s)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord1iARB (\fBGLenum\fP target, \fBGLint\fP s)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord1iv (\fBGLenum\fP target, const \fBGLint\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord1ivARB (\fBGLenum\fP target, const \fBGLint\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord1s (\fBGLenum\fP target, \fBGLshort\fP s)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord1sARB (\fBGLenum\fP target, \fBGLshort\fP s)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord1sv (\fBGLenum\fP target, const \fBGLshort\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord1svARB (\fBGLenum\fP target, const \fBGLshort\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord2d (\fBGLenum\fP target, \fBGLdouble\fP s, \fBGLdouble\fP t)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord2dARB (\fBGLenum\fP target, \fBGLdouble\fP s, \fBGLdouble\fP t)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord2dv (\fBGLenum\fP target, const \fBGLdouble\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord2dvARB (\fBGLenum\fP target, const \fBGLdouble\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord2f (\fBGLenum\fP target, \fBGLfloat\fP s, \fBGLfloat\fP t)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord2fARB (\fBGLenum\fP target, \fBGLfloat\fP s, \fBGLfloat\fP t)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord2fv (\fBGLenum\fP target, const \fBGLfloat\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord2fvARB (\fBGLenum\fP target, const \fBGLfloat\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord2i (\fBGLenum\fP target, \fBGLint\fP s, \fBGLint\fP t)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord2iARB (\fBGLenum\fP target, \fBGLint\fP s, \fBGLint\fP t)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord2iv (\fBGLenum\fP target, const \fBGLint\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord2ivARB (\fBGLenum\fP target, const \fBGLint\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord2s (\fBGLenum\fP target, \fBGLshort\fP s, \fBGLshort\fP t)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord2sARB (\fBGLenum\fP target, \fBGLshort\fP s, \fBGLshort\fP t)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord2sv (\fBGLenum\fP target, const \fBGLshort\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord2svARB (\fBGLenum\fP target, const \fBGLshort\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord3d (\fBGLenum\fP target, \fBGLdouble\fP s, \fBGLdouble\fP t, \fBGLdouble\fP r)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord3dARB (\fBGLenum\fP target, \fBGLdouble\fP s, \fBGLdouble\fP t, \fBGLdouble\fP r)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord3dv (\fBGLenum\fP target, const \fBGLdouble\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord3dvARB (\fBGLenum\fP target, const \fBGLdouble\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord3f (\fBGLenum\fP target, \fBGLfloat\fP s, \fBGLfloat\fP t, \fBGLfloat\fP r)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord3fARB (\fBGLenum\fP target, \fBGLfloat\fP s, \fBGLfloat\fP t, \fBGLfloat\fP r)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord3fv (\fBGLenum\fP target, const \fBGLfloat\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord3fvARB (\fBGLenum\fP target, const \fBGLfloat\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord3i (\fBGLenum\fP target, \fBGLint\fP s, \fBGLint\fP t, \fBGLint\fP r)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord3iARB (\fBGLenum\fP target, \fBGLint\fP s, \fBGLint\fP t, \fBGLint\fP r)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord3iv (\fBGLenum\fP target, const \fBGLint\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord3ivARB (\fBGLenum\fP target, const \fBGLint\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord3s (\fBGLenum\fP target, \fBGLshort\fP s, \fBGLshort\fP t, \fBGLshort\fP r)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord3sARB (\fBGLenum\fP target, \fBGLshort\fP s, \fBGLshort\fP t, \fBGLshort\fP r)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord3sv (\fBGLenum\fP target, const \fBGLshort\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord3svARB (\fBGLenum\fP target, const \fBGLshort\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord4d (\fBGLenum\fP target, \fBGLdouble\fP s, \fBGLdouble\fP t, \fBGLdouble\fP r, \fBGLdouble\fP q)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord4dARB (\fBGLenum\fP target, \fBGLdouble\fP s, \fBGLdouble\fP t, \fBGLdouble\fP r, \fBGLdouble\fP q)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord4dv (\fBGLenum\fP target, const \fBGLdouble\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord4dvARB (\fBGLenum\fP target, const \fBGLdouble\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord4f (\fBGLenum\fP target, \fBGLfloat\fP s, \fBGLfloat\fP t, \fBGLfloat\fP r, \fBGLfloat\fP q)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord4fARB (\fBGLenum\fP target, \fBGLfloat\fP s, \fBGLfloat\fP t, \fBGLfloat\fP r, \fBGLfloat\fP q)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord4fv (\fBGLenum\fP target, const \fBGLfloat\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord4fvARB (\fBGLenum\fP target, const \fBGLfloat\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord4i (\fBGLenum\fP target, \fBGLint\fP s, \fBGLint\fP t, \fBGLint\fP r, \fBGLint\fP q)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord4iARB (\fBGLenum\fP target, \fBGLint\fP s, \fBGLint\fP t, \fBGLint\fP r, \fBGLint\fP q)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord4iv (\fBGLenum\fP target, const \fBGLint\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord4ivARB (\fBGLenum\fP target, const \fBGLint\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord4s (\fBGLenum\fP target, \fBGLshort\fP s, \fBGLshort\fP t, \fBGLshort\fP r, \fBGLshort\fP q)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord4sARB (\fBGLenum\fP target, \fBGLshort\fP s, \fBGLshort\fP t, \fBGLshort\fP r, \fBGLshort\fP q)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord4sv (\fBGLenum\fP target, const \fBGLshort\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultiTexCoord4svARB (\fBGLenum\fP target, const \fBGLshort\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultMatrixd (const \fBGLdouble\fP * m)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultMatrixf (const \fBGLfloat\fP * m)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultTransposeMatrixd (const \fBGLdouble\fP m[16])"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glMultTransposeMatrixf (const \fBGLfloat\fP m[16])"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glNewList (\fBGLuint\fP list, \fBGLenum\fP mode)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glNormal3b (\fBGLbyte\fP nx, \fBGLbyte\fP ny, \fBGLbyte\fP nz)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glNormal3bv (const \fBGLbyte\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glNormal3d (\fBGLdouble\fP nx, \fBGLdouble\fP ny, \fBGLdouble\fP nz)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glNormal3dv (const \fBGLdouble\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glNormal3f (\fBGLfloat\fP nx, \fBGLfloat\fP ny, \fBGLfloat\fP nz)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glNormal3fv (const \fBGLfloat\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glNormal3i (\fBGLint\fP nx, \fBGLint\fP ny, \fBGLint\fP nz)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glNormal3iv (const \fBGLint\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glNormal3s (\fBGLshort\fP nx, \fBGLshort\fP ny, \fBGLshort\fP nz)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glNormal3sv (const \fBGLshort\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glNormalPointer (\fBGLenum\fP type, \fBGLsizei\fP stride, const \fBGLvoid\fP * ptr)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glOrtho (\fBGLdouble\fP left, \fBGLdouble\fP right, \fBGLdouble\fP bottom, \fBGLdouble\fP top, \fBGLdouble\fP near_val, \fBGLdouble\fP far_val)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glPassThrough (\fBGLfloat\fP token)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glPixelMapfv (\fBGLenum\fP map, \fBGLsizei\fP mapsize, const \fBGLfloat\fP * values)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glPixelMapuiv (\fBGLenum\fP map, \fBGLsizei\fP mapsize, const \fBGLuint\fP * values)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glPixelMapusv (\fBGLenum\fP map, \fBGLsizei\fP mapsize, const \fBGLushort\fP * values)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glPixelStoref (\fBGLenum\fP pname, \fBGLfloat\fP param)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glPixelStorei (\fBGLenum\fP pname, \fBGLint\fP param)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glPixelTransferf (\fBGLenum\fP pname, \fBGLfloat\fP param)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glPixelTransferi (\fBGLenum\fP pname, \fBGLint\fP param)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glPixelZoom (\fBGLfloat\fP xfactor, \fBGLfloat\fP yfactor)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glPointSize (\fBGLfloat\fP size)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glPolygonMode (\fBGLenum\fP face, \fBGLenum\fP mode)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glPolygonOffset (\fBGLfloat\fP factor, \fBGLfloat\fP units)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glPolygonStipple (const \fBGLubyte\fP * mask)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glPopAttrib (\fBvoid\fP)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glPopClientAttrib (\fBvoid\fP)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glPopMatrix (\fBvoid\fP)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glPopName (\fBvoid\fP)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glPrioritizeTextures (\fBGLsizei\fP n, const \fBGLuint\fP * textures, const \fBGLclampf\fP * priorities)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glPushAttrib (\fBGLbitfield\fP mask)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glPushClientAttrib (\fBGLbitfield\fP mask)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glPushMatrix (\fBvoid\fP)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glPushName (\fBGLuint\fP name)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glRasterPos2d (\fBGLdouble\fP x, \fBGLdouble\fP y)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glRasterPos2dv (const \fBGLdouble\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glRasterPos2f (\fBGLfloat\fP x, \fBGLfloat\fP y)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glRasterPos2fv (const \fBGLfloat\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glRasterPos2i (\fBGLint\fP x, \fBGLint\fP y)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glRasterPos2iv (const \fBGLint\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glRasterPos2s (\fBGLshort\fP x, \fBGLshort\fP y)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glRasterPos2sv (const \fBGLshort\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glRasterPos3d (\fBGLdouble\fP x, \fBGLdouble\fP y, \fBGLdouble\fP z)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glRasterPos3dv (const \fBGLdouble\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glRasterPos3f (\fBGLfloat\fP x, \fBGLfloat\fP y, \fBGLfloat\fP z)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glRasterPos3fv (const \fBGLfloat\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glRasterPos3i (\fBGLint\fP x, \fBGLint\fP y, \fBGLint\fP z)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glRasterPos3iv (const \fBGLint\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glRasterPos3s (\fBGLshort\fP x, \fBGLshort\fP y, \fBGLshort\fP z)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glRasterPos3sv (const \fBGLshort\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glRasterPos4d (\fBGLdouble\fP x, \fBGLdouble\fP y, \fBGLdouble\fP z, \fBGLdouble\fP w)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glRasterPos4dv (const \fBGLdouble\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glRasterPos4f (\fBGLfloat\fP x, \fBGLfloat\fP y, \fBGLfloat\fP z, \fBGLfloat\fP w)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glRasterPos4fv (const \fBGLfloat\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glRasterPos4i (\fBGLint\fP x, \fBGLint\fP y, \fBGLint\fP z, \fBGLint\fP w)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glRasterPos4iv (const \fBGLint\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glRasterPos4s (\fBGLshort\fP x, \fBGLshort\fP y, \fBGLshort\fP z, \fBGLshort\fP w)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glRasterPos4sv (const \fBGLshort\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glReadBuffer (\fBGLenum\fP mode)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glReadPixels (\fBGLint\fP x, \fBGLint\fP y, \fBGLsizei\fP width, \fBGLsizei\fP height, \fBGLenum\fP format, \fBGLenum\fP type, \fBGLvoid\fP * pixels)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glRectd (\fBGLdouble\fP x1, \fBGLdouble\fP y1, \fBGLdouble\fP x2, \fBGLdouble\fP y2)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glRectdv (const \fBGLdouble\fP * v1, const \fBGLdouble\fP * v2)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glRectf (\fBGLfloat\fP x1, \fBGLfloat\fP y1, \fBGLfloat\fP x2, \fBGLfloat\fP y2)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glRectfv (const \fBGLfloat\fP * v1, const \fBGLfloat\fP * v2)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glRecti (\fBGLint\fP x1, \fBGLint\fP y1, \fBGLint\fP x2, \fBGLint\fP y2)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glRectiv (const \fBGLint\fP * v1, const \fBGLint\fP * v2)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glRects (\fBGLshort\fP x1, \fBGLshort\fP y1, \fBGLshort\fP x2, \fBGLshort\fP y2)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glRectsv (const \fBGLshort\fP * v1, const \fBGLshort\fP * v2)"

.SS "\fBGLAPI\fP \fBGLint\fP \fBGLAPIENTRY\fP glRenderMode (\fBGLenum\fP mode)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glResetHistogram (\fBGLenum\fP target)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glResetMinmax (\fBGLenum\fP target)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glRotated (\fBGLdouble\fP angle, \fBGLdouble\fP x, \fBGLdouble\fP y, \fBGLdouble\fP z)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glRotatef (\fBGLfloat\fP angle, \fBGLfloat\fP x, \fBGLfloat\fP y, \fBGLfloat\fP z)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glSampleCoverage (\fBGLclampf\fP value, \fBGLboolean\fP invert)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glScaled (\fBGLdouble\fP x, \fBGLdouble\fP y, \fBGLdouble\fP z)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glScalef (\fBGLfloat\fP x, \fBGLfloat\fP y, \fBGLfloat\fP z)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glScissor (\fBGLint\fP x, \fBGLint\fP y, \fBGLsizei\fP width, \fBGLsizei\fP height)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glSelectBuffer (\fBGLsizei\fP size, \fBGLuint\fP * buffer)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glSeparableFilter2D (\fBGLenum\fP target, \fBGLenum\fP internalformat, \fBGLsizei\fP width, \fBGLsizei\fP height, \fBGLenum\fP format, \fBGLenum\fP type, const \fBGLvoid\fP * row, const \fBGLvoid\fP * column)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glShadeModel (\fBGLenum\fP mode)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glStencilFunc (\fBGLenum\fP func, \fBGLint\fP ref, \fBGLuint\fP mask)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glStencilMask (\fBGLuint\fP mask)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glStencilOp (\fBGLenum\fP fail, \fBGLenum\fP zfail, \fBGLenum\fP zpass)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glTexCoord1d (\fBGLdouble\fP s)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glTexCoord1dv (const \fBGLdouble\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glTexCoord1f (\fBGLfloat\fP s)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glTexCoord1fv (const \fBGLfloat\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glTexCoord1i (\fBGLint\fP s)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glTexCoord1iv (const \fBGLint\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glTexCoord1s (\fBGLshort\fP s)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glTexCoord1sv (const \fBGLshort\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glTexCoord2d (\fBGLdouble\fP s, \fBGLdouble\fP t)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glTexCoord2dv (const \fBGLdouble\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glTexCoord2f (\fBGLfloat\fP s, \fBGLfloat\fP t)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glTexCoord2fv (const \fBGLfloat\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glTexCoord2i (\fBGLint\fP s, \fBGLint\fP t)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glTexCoord2iv (const \fBGLint\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glTexCoord2s (\fBGLshort\fP s, \fBGLshort\fP t)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glTexCoord2sv (const \fBGLshort\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glTexCoord3d (\fBGLdouble\fP s, \fBGLdouble\fP t, \fBGLdouble\fP r)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glTexCoord3dv (const \fBGLdouble\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glTexCoord3f (\fBGLfloat\fP s, \fBGLfloat\fP t, \fBGLfloat\fP r)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glTexCoord3fv (const \fBGLfloat\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glTexCoord3i (\fBGLint\fP s, \fBGLint\fP t, \fBGLint\fP r)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glTexCoord3iv (const \fBGLint\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glTexCoord3s (\fBGLshort\fP s, \fBGLshort\fP t, \fBGLshort\fP r)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glTexCoord3sv (const \fBGLshort\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glTexCoord4d (\fBGLdouble\fP s, \fBGLdouble\fP t, \fBGLdouble\fP r, \fBGLdouble\fP q)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glTexCoord4dv (const \fBGLdouble\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glTexCoord4f (\fBGLfloat\fP s, \fBGLfloat\fP t, \fBGLfloat\fP r, \fBGLfloat\fP q)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glTexCoord4fv (const \fBGLfloat\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glTexCoord4i (\fBGLint\fP s, \fBGLint\fP t, \fBGLint\fP r, \fBGLint\fP q)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glTexCoord4iv (const \fBGLint\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glTexCoord4s (\fBGLshort\fP s, \fBGLshort\fP t, \fBGLshort\fP r, \fBGLshort\fP q)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glTexCoord4sv (const \fBGLshort\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glTexCoordPointer (\fBGLint\fP size, \fBGLenum\fP type, \fBGLsizei\fP stride, const \fBGLvoid\fP * ptr)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glTexEnvf (\fBGLenum\fP target, \fBGLenum\fP pname, \fBGLfloat\fP param)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glTexEnvfv (\fBGLenum\fP target, \fBGLenum\fP pname, const \fBGLfloat\fP * params)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glTexEnvi (\fBGLenum\fP target, \fBGLenum\fP pname, \fBGLint\fP param)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glTexEnviv (\fBGLenum\fP target, \fBGLenum\fP pname, const \fBGLint\fP * params)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glTexGend (\fBGLenum\fP coord, \fBGLenum\fP pname, \fBGLdouble\fP param)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glTexGendv (\fBGLenum\fP coord, \fBGLenum\fP pname, const \fBGLdouble\fP * params)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glTexGenf (\fBGLenum\fP coord, \fBGLenum\fP pname, \fBGLfloat\fP param)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glTexGenfv (\fBGLenum\fP coord, \fBGLenum\fP pname, const \fBGLfloat\fP * params)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glTexGeni (\fBGLenum\fP coord, \fBGLenum\fP pname, \fBGLint\fP param)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glTexGeniv (\fBGLenum\fP coord, \fBGLenum\fP pname, const \fBGLint\fP * params)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glTexImage1D (\fBGLenum\fP target, \fBGLint\fP level, \fBGLint\fP internalFormat, \fBGLsizei\fP width, \fBGLint\fP border, \fBGLenum\fP format, \fBGLenum\fP type, const \fBGLvoid\fP * pixels)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glTexImage2D (\fBGLenum\fP target, \fBGLint\fP level, \fBGLint\fP internalFormat, \fBGLsizei\fP width, \fBGLsizei\fP height, \fBGLint\fP border, \fBGLenum\fP format, \fBGLenum\fP type, const \fBGLvoid\fP * pixels)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glTexImage3D (\fBGLenum\fP target, \fBGLint\fP level, \fBGLint\fP internalFormat, \fBGLsizei\fP width, \fBGLsizei\fP height, \fBGLsizei\fP depth, \fBGLint\fP border, \fBGLenum\fP format, \fBGLenum\fP type, const \fBGLvoid\fP * pixels)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glTexParameterf (\fBGLenum\fP target, \fBGLenum\fP pname, \fBGLfloat\fP param)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glTexParameterfv (\fBGLenum\fP target, \fBGLenum\fP pname, const \fBGLfloat\fP * params)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glTexParameteri (\fBGLenum\fP target, \fBGLenum\fP pname, \fBGLint\fP param)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glTexParameteriv (\fBGLenum\fP target, \fBGLenum\fP pname, const \fBGLint\fP * params)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glTexSubImage1D (\fBGLenum\fP target, \fBGLint\fP level, \fBGLint\fP xoffset, \fBGLsizei\fP width, \fBGLenum\fP format, \fBGLenum\fP type, const \fBGLvoid\fP * pixels)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glTexSubImage2D (\fBGLenum\fP target, \fBGLint\fP level, \fBGLint\fP xoffset, \fBGLint\fP yoffset, \fBGLsizei\fP width, \fBGLsizei\fP height, \fBGLenum\fP format, \fBGLenum\fP type, const \fBGLvoid\fP * pixels)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glTexSubImage3D (\fBGLenum\fP target, \fBGLint\fP level, \fBGLint\fP xoffset, \fBGLint\fP yoffset, \fBGLint\fP zoffset, \fBGLsizei\fP width, \fBGLsizei\fP height, \fBGLsizei\fP depth, \fBGLenum\fP format, \fBGLenum\fP type, const \fBGLvoid\fP * pixels)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glTranslated (\fBGLdouble\fP x, \fBGLdouble\fP y, \fBGLdouble\fP z)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glTranslatef (\fBGLfloat\fP x, \fBGLfloat\fP y, \fBGLfloat\fP z)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glVertex2d (\fBGLdouble\fP x, \fBGLdouble\fP y)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glVertex2dv (const \fBGLdouble\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glVertex2f (\fBGLfloat\fP x, \fBGLfloat\fP y)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glVertex2fv (const \fBGLfloat\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glVertex2i (\fBGLint\fP x, \fBGLint\fP y)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glVertex2iv (const \fBGLint\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glVertex2s (\fBGLshort\fP x, \fBGLshort\fP y)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glVertex2sv (const \fBGLshort\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glVertex3d (\fBGLdouble\fP x, \fBGLdouble\fP y, \fBGLdouble\fP z)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glVertex3dv (const \fBGLdouble\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glVertex3f (\fBGLfloat\fP x, \fBGLfloat\fP y, \fBGLfloat\fP z)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glVertex3fv (const \fBGLfloat\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glVertex3i (\fBGLint\fP x, \fBGLint\fP y, \fBGLint\fP z)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glVertex3iv (const \fBGLint\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glVertex3s (\fBGLshort\fP x, \fBGLshort\fP y, \fBGLshort\fP z)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glVertex3sv (const \fBGLshort\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glVertex4d (\fBGLdouble\fP x, \fBGLdouble\fP y, \fBGLdouble\fP z, \fBGLdouble\fP w)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glVertex4dv (const \fBGLdouble\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glVertex4f (\fBGLfloat\fP x, \fBGLfloat\fP y, \fBGLfloat\fP z, \fBGLfloat\fP w)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glVertex4fv (const \fBGLfloat\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glVertex4i (\fBGLint\fP x, \fBGLint\fP y, \fBGLint\fP z, \fBGLint\fP w)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glVertex4iv (const \fBGLint\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glVertex4s (\fBGLshort\fP x, \fBGLshort\fP y, \fBGLshort\fP z, \fBGLshort\fP w)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glVertex4sv (const \fBGLshort\fP * v)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glVertexPointer (\fBGLint\fP size, \fBGLenum\fP type, \fBGLsizei\fP stride, const \fBGLvoid\fP * ptr)"

.SS "\fBGLAPI\fP \fBvoid\fP \fBGLAPIENTRY\fP glViewport (\fBGLint\fP x, \fBGLint\fP y, \fBGLsizei\fP width, \fBGLsizei\fP height)"

.SS "typedef void (\fBAPIENTRYP\fP PFNGLDRAWRANGEELEMENTSPROC)"

.SH "Author"
.PP 
Generated automatically by Doxygen for RayTracer from the source code\&.
