.TH "D:/RayTracing/include/SDL_hidapi.h" 3 "Mon Jan 24 2022" "Version 1.0" "RayTracer" \" -*- nroff -*-
.ad l
.nh
.SH NAME
D:/RayTracing/include/SDL_hidapi.h
.SH SYNOPSIS
.br
.PP
\fC#include 'SDL_stdinc\&.h'\fP
.br
\fC#include 'begin_code\&.h'\fP
.br
\fC#include 'close_code\&.h'\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBSDL_hid_device_info\fP"
.br
.RI "Information about a connected HID device\&. "
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct SDL_hid_device_ \fBSDL_hid_device\fP"
.br
.ti -1c
.RI "typedef struct \fBSDL_hid_device_info\fP \fBSDL_hid_device_info\fP"
.br
.RI "Information about a connected HID device\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_hid_init\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_hid_exit\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP \fBUint32\fP \fBSDLCALL\fP \fBSDL_hid_device_change_count\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP \fBSDL_hid_device_info\fP *\fBSDLCALL\fP \fBSDL_hid_enumerate\fP (unsigned short vendor_id, unsigned short product_id)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP \fBvoid\fP \fBSDLCALL\fP \fBSDL_hid_free_enumeration\fP (\fBSDL_hid_device_info\fP *devs)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP \fBSDL_hid_device\fP *\fBSDLCALL\fP \fBSDL_hid_open\fP (unsigned short vendor_id, unsigned short product_id, const wchar_t *serial_number)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP \fBSDL_hid_device\fP *\fBSDLCALL\fP \fBSDL_hid_open_path\fP (const char *\fBpath\fP, int bExclusive)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_hid_write\fP (\fBSDL_hid_device\fP *dev, const unsigned char *\fBdata\fP, \fBsize_t\fP \fBlength\fP)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_hid_read_timeout\fP (\fBSDL_hid_device\fP *dev, unsigned char *\fBdata\fP, \fBsize_t\fP \fBlength\fP, int milliseconds)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_hid_read\fP (\fBSDL_hid_device\fP *dev, unsigned char *\fBdata\fP, \fBsize_t\fP \fBlength\fP)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_hid_set_nonblocking\fP (\fBSDL_hid_device\fP *dev, int nonblock)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_hid_send_feature_report\fP (\fBSDL_hid_device\fP *dev, const unsigned char *\fBdata\fP, \fBsize_t\fP \fBlength\fP)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_hid_get_feature_report\fP (\fBSDL_hid_device\fP *dev, unsigned char *\fBdata\fP, \fBsize_t\fP \fBlength\fP)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP \fBvoid\fP \fBSDLCALL\fP \fBSDL_hid_close\fP (\fBSDL_hid_device\fP *dev)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_hid_get_manufacturer_string\fP (\fBSDL_hid_device\fP *dev, wchar_t *\fBstring\fP, \fBsize_t\fP maxlen)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_hid_get_product_string\fP (\fBSDL_hid_device\fP *dev, wchar_t *\fBstring\fP, \fBsize_t\fP maxlen)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_hid_get_serial_number_string\fP (\fBSDL_hid_device\fP *dev, wchar_t *\fBstring\fP, \fBsize_t\fP maxlen)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_hid_get_indexed_string\fP (\fBSDL_hid_device\fP *dev, int string_index, wchar_t *\fBstring\fP, \fBsize_t\fP maxlen)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP \fBvoid\fP \fBSDLCALL\fP \fBSDL_hid_ble_scan\fP (\fBSDL_bool\fP active)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Header file for SDL HIDAPI functions\&.
.PP
This is an adaptation of the original HIDAPI interface by Alan Ott, and includes source code licensed under the following BSD license:
.PP
Copyright (c) 2010, Alan Ott, Signal 11 Software All rights reserved\&.
.PP
Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
.PP
Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer\&. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution\&. Neither the name of Signal 11 Software nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission\&.
.PP
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED\&. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE\&.
.PP
If you would like a version of SDL without this code, you can build SDL with SDL_HIDAPI_DISABLED defined to 1\&. You might want to do this for example on iOS or tvOS to avoid a dependency on the CoreBluetooth framework\&. 
.SH "Typedef Documentation"
.PP 
.SS "typedef struct SDL_hid_device_ \fBSDL_hid_device\fP"
opaque hidapi structure 
.SS "typedef struct \fBSDL_hid_device_info\fP \fBSDL_hid_device_info\fP"

.PP
Information about a connected HID device\&. hidapi info structure 
.SH "Function Documentation"
.PP 
.SS "\fBDECLSPEC\fP \fBvoid\fP \fBSDLCALL\fP SDL_hid_ble_scan (\fBSDL_bool\fP active)"
Start or stop a BLE scan on iOS and tvOS to pair Steam Controllers
.PP
\fBParameters\fP
.RS 4
\fIactive\fP SDL_TRUE to start the scan, SDL_FALSE to stop the scan
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.18\&. 
.RE
.PP

.SS "\fBDECLSPEC\fP \fBvoid\fP \fBSDLCALL\fP SDL_hid_close (\fBSDL_hid_device\fP * dev)"
Close a HID device\&.
.PP
\fBParameters\fP
.RS 4
\fIdev\fP A device handle returned from \fBSDL_hid_open()\fP\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.18\&. 
.RE
.PP

.SS "\fBDECLSPEC\fP \fBUint32\fP \fBSDLCALL\fP SDL_hid_device_change_count (\fBvoid\fP)"
Check to see if devices may have been added or removed\&.
.PP
Enumerating the HID devices is an expensive operation, so you can call this to see if there have been any system device changes since the last call to this function\&. A change in the counter returned doesn't necessarily mean that anything has changed, but you can call \fBSDL_hid_enumerate()\fP to get an updated device list\&.
.PP
Calling this function for the first time may cause a thread or other system resource to be allocated to track device change notifications\&.
.PP
\fBReturns\fP
.RS 4
a change counter that is incremented with each potential device change, or 0 if device change detection isn't available\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.18\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_hid_enumerate\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP \fBSDL_hid_device_info\fP *\fBSDLCALL\fP SDL_hid_enumerate (unsigned short vendor_id, unsigned short product_id)"
Enumerate the HID Devices\&.
.PP
This function returns a linked list of all the HID devices attached to the system which match vendor_id and product_id\&. If \fCvendor_id\fP is set to 0 then any vendor matches\&. If \fCproduct_id\fP is set to 0 then any product matches\&. If \fCvendor_id\fP and \fCproduct_id\fP are both set to 0, then all HID devices will be returned\&.
.PP
\fBParameters\fP
.RS 4
\fIvendor_id\fP The Vendor ID (VID) of the types of device to open\&. 
.br
\fIproduct_id\fP The Product ID (PID) of the types of device to open\&. 
.RE
.PP
\fBReturns\fP
.RS 4
a pointer to a linked list of type \fBSDL_hid_device_info\fP, containing information about the HID devices attached to the system, or NULL in the case of failure\&. Free this linked list by calling \fBSDL_hid_free_enumeration()\fP\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.18\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_hid_device_change_count\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_hid_exit (\fBvoid\fP)"
Finalize the HIDAPI library\&.
.PP
This function frees all of the static data associated with HIDAPI\&. It should be called at the end of execution to avoid memory leaks\&.
.PP
\fBReturns\fP
.RS 4
0 on success and -1 on error\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.18\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_hid_init\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP \fBvoid\fP \fBSDLCALL\fP SDL_hid_free_enumeration (\fBSDL_hid_device_info\fP * devs)"
Free an enumeration Linked List
.PP
This function frees a linked list created by \fBSDL_hid_enumerate()\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIdevs\fP Pointer to a list of struct_device returned from \fBSDL_hid_enumerate()\fP\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.18\&. 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_hid_get_feature_report (\fBSDL_hid_device\fP * dev, unsigned char * data, \fBsize_t\fP length)"
Get a feature report from a HID device\&.
.PP
Set the first byte of \fCdata\fP to the Report ID of the report to be read\&. Make sure to allow space for this extra byte in \fCdata\fP\&. Upon return, the first byte will still contain the Report ID, and the report data will start in data[1]\&.
.PP
\fBParameters\fP
.RS 4
\fIdev\fP A device handle returned from \fBSDL_hid_open()\fP\&. 
.br
\fIdata\fP A buffer to put the read data into, including the Report ID\&. Set the first byte of \fCdata\fP to the Report ID of the report to be read, or set it to zero if your device does not use numbered reports\&. 
.br
\fIlength\fP The number of bytes to read, including an extra byte for the report ID\&. The buffer can be longer than the actual report\&. 
.RE
.PP
\fBReturns\fP
.RS 4
the number of bytes read plus one for the report ID (which is still in the first byte), or -1 on error\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.18\&. 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_hid_get_indexed_string (\fBSDL_hid_device\fP * dev, int string_index, wchar_t * string, \fBsize_t\fP maxlen)"
Get a string from a HID device, based on its string index\&.
.PP
\fBParameters\fP
.RS 4
\fIdev\fP A device handle returned from \fBSDL_hid_open()\fP\&. 
.br
\fIstring_index\fP The index of the string to get\&. 
.br
\fIstring\fP A wide string buffer to put the data into\&. 
.br
\fImaxlen\fP The length of the buffer in multiples of wchar_t\&. 
.RE
.PP
\fBReturns\fP
.RS 4
0 on success and -1 on error\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.18\&. 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_hid_get_manufacturer_string (\fBSDL_hid_device\fP * dev, wchar_t * string, \fBsize_t\fP maxlen)"
Get The Manufacturer String from a HID device\&.
.PP
\fBParameters\fP
.RS 4
\fIdev\fP A device handle returned from \fBSDL_hid_open()\fP\&. 
.br
\fIstring\fP A wide string buffer to put the data into\&. 
.br
\fImaxlen\fP The length of the buffer in multiples of wchar_t\&. 
.RE
.PP
\fBReturns\fP
.RS 4
0 on success and -1 on error\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.18\&. 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_hid_get_product_string (\fBSDL_hid_device\fP * dev, wchar_t * string, \fBsize_t\fP maxlen)"
Get The Product String from a HID device\&.
.PP
\fBParameters\fP
.RS 4
\fIdev\fP A device handle returned from \fBSDL_hid_open()\fP\&. 
.br
\fIstring\fP A wide string buffer to put the data into\&. 
.br
\fImaxlen\fP The length of the buffer in multiples of wchar_t\&. 
.RE
.PP
\fBReturns\fP
.RS 4
0 on success and -1 on error\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.18\&. 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_hid_get_serial_number_string (\fBSDL_hid_device\fP * dev, wchar_t * string, \fBsize_t\fP maxlen)"
Get The Serial Number String from a HID device\&.
.PP
\fBParameters\fP
.RS 4
\fIdev\fP A device handle returned from \fBSDL_hid_open()\fP\&. 
.br
\fIstring\fP A wide string buffer to put the data into\&. 
.br
\fImaxlen\fP The length of the buffer in multiples of wchar_t\&. 
.RE
.PP
\fBReturns\fP
.RS 4
0 on success and -1 on error\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.18\&. 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_hid_init (\fBvoid\fP)"
Initialize the HIDAPI library\&.
.PP
This function initializes the HIDAPI library\&. Calling it is not strictly necessary, as it will be called automatically by \fBSDL_hid_enumerate()\fP and any of the SDL_hid_open_*() functions if it is needed\&. This function should be called at the beginning of execution however, if there is a chance of HIDAPI handles being opened by different threads simultaneously\&.
.PP
Each call to this function should have a matching call to \fBSDL_hid_exit()\fP
.PP
\fBReturns\fP
.RS 4
0 on success and -1 on error\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.18\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_hid_exit\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP \fBSDL_hid_device\fP *\fBSDLCALL\fP SDL_hid_open (unsigned short vendor_id, unsigned short product_id, const wchar_t * serial_number)"
Open a HID device using a Vendor ID (VID), Product ID (PID) and optionally a serial number\&.
.PP
If \fCserial_number\fP is NULL, the first device with the specified VID and PID is opened\&.
.PP
\fBParameters\fP
.RS 4
\fIvendor_id\fP The Vendor ID (VID) of the device to open\&. 
.br
\fIproduct_id\fP The Product ID (PID) of the device to open\&. 
.br
\fIserial_number\fP The Serial Number of the device to open (Optionally NULL)\&. 
.RE
.PP
\fBReturns\fP
.RS 4
a pointer to a SDL_hid_device object on success or NULL on failure\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.18\&. 
.RE
.PP

.SS "\fBDECLSPEC\fP \fBSDL_hid_device\fP *\fBSDLCALL\fP SDL_hid_open_path (const char * path, int bExclusive)"
Open a HID device by its path name\&.
.PP
The path name be determined by calling \fBSDL_hid_enumerate()\fP, or a platform-specific path name can be used (eg: /dev/hidraw0 on Linux)\&.
.PP
\fBParameters\fP
.RS 4
\fIpath\fP The path name of the device to open 
.RE
.PP
\fBReturns\fP
.RS 4
a pointer to a SDL_hid_device object on success or NULL on failure\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.18\&. 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_hid_read (\fBSDL_hid_device\fP * dev, unsigned char * data, \fBsize_t\fP length)"
Read an Input report from a HID device\&.
.PP
Input reports are returned to the host through the INTERRUPT IN endpoint\&. The first byte will contain the Report number if the device uses numbered reports\&.
.PP
\fBParameters\fP
.RS 4
\fIdev\fP A device handle returned from \fBSDL_hid_open()\fP\&. 
.br
\fIdata\fP A buffer to put the read data into\&. 
.br
\fIlength\fP The number of bytes to read\&. For devices with multiple reports, make sure to read an extra byte for the report number\&. 
.RE
.PP
\fBReturns\fP
.RS 4
the actual number of bytes read and -1 on error\&. If no packet was available to be read and the handle is in non-blocking mode, this function returns 0\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.18\&. 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_hid_read_timeout (\fBSDL_hid_device\fP * dev, unsigned char * data, \fBsize_t\fP length, int milliseconds)"
Read an Input report from a HID device with timeout\&.
.PP
Input reports are returned to the host through the INTERRUPT IN endpoint\&. The first byte will contain the Report number if the device uses numbered reports\&.
.PP
\fBParameters\fP
.RS 4
\fIdev\fP A device handle returned from \fBSDL_hid_open()\fP\&. 
.br
\fIdata\fP A buffer to put the read data into\&. 
.br
\fIlength\fP The number of bytes to read\&. For devices with multiple reports, make sure to read an extra byte for the report number\&. 
.br
\fImilliseconds\fP timeout in milliseconds or -1 for blocking wait\&. 
.RE
.PP
\fBReturns\fP
.RS 4
the actual number of bytes read and -1 on error\&. If no packet was available to be read within the timeout period, this function returns 0\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.18\&. 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_hid_send_feature_report (\fBSDL_hid_device\fP * dev, const unsigned char * data, \fBsize_t\fP length)"
Send a Feature report to the device\&.
.PP
Feature reports are sent over the Control endpoint as a Set_Report transfer\&. The first byte of \fCdata\fP must contain the Report ID\&. For devices which only support a single report, this must be set to 0x0\&. The remaining bytes contain the report data\&. Since the Report ID is mandatory, calls to \fBSDL_hid_send_feature_report()\fP will always contain one more byte than the report contains\&. For example, if a hid report is 16 bytes long, 17 bytes must be passed to \fBSDL_hid_send_feature_report()\fP: the Report ID (or 0x0, for devices which do not use numbered reports), followed by the report data (16 bytes)\&. In this example, the length passed in would be 17\&.
.PP
\fBParameters\fP
.RS 4
\fIdev\fP A device handle returned from \fBSDL_hid_open()\fP\&. 
.br
\fIdata\fP The data to send, including the report number as the first byte\&. 
.br
\fIlength\fP The length in bytes of the data to send, including the report number\&. 
.RE
.PP
\fBReturns\fP
.RS 4
the actual number of bytes written and -1 on error\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.18\&. 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_hid_set_nonblocking (\fBSDL_hid_device\fP * dev, int nonblock)"
Set the device handle to be non-blocking\&.
.PP
In non-blocking mode calls to \fBSDL_hid_read()\fP will return immediately with a value of 0 if there is no data to be read\&. In blocking mode, \fBSDL_hid_read()\fP will wait (block) until there is data to read before returning\&.
.PP
Nonblocking can be turned on and off at any time\&.
.PP
\fBParameters\fP
.RS 4
\fIdev\fP A device handle returned from \fBSDL_hid_open()\fP\&. 
.br
\fInonblock\fP enable or not the nonblocking reads - 1 to enable nonblocking - 0 to disable nonblocking\&. 
.RE
.PP
\fBReturns\fP
.RS 4
0 on success and -1 on error\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.18\&. 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_hid_write (\fBSDL_hid_device\fP * dev, const unsigned char * data, \fBsize_t\fP length)"
Write an Output report to a HID device\&.
.PP
The first byte of \fCdata\fP must contain the Report ID\&. For devices which only support a single report, this must be set to 0x0\&. The remaining bytes contain the report data\&. Since the Report ID is mandatory, calls to \fBSDL_hid_write()\fP will always contain one more byte than the report contains\&. For example, if a hid report is 16 bytes long, 17 bytes must be passed to \fBSDL_hid_write()\fP, the Report ID (or 0x0, for devices with a single report), followed by the report data (16 bytes)\&. In this example, the length passed in would be 17\&.
.PP
\fBSDL_hid_write()\fP will send the data on the first OUT endpoint, if one exists\&. If it does not, it will send the data through the Control Endpoint (Endpoint 0)\&.
.PP
\fBParameters\fP
.RS 4
\fIdev\fP A device handle returned from \fBSDL_hid_open()\fP\&. 
.br
\fIdata\fP The data to send, including the report number as the first byte\&. 
.br
\fIlength\fP The length in bytes of the data to send\&. 
.RE
.PP
\fBReturns\fP
.RS 4
the actual number of bytes written and -1 on error\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.18\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for RayTracer from the source code\&.
