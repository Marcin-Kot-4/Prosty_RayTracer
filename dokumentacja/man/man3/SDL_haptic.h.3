.TH "D:/RayTracing/include/SDL_haptic.h" 3 "Mon Jan 24 2022" "Version 1.0" "RayTracer" \" -*- nroff -*-
.ad l
.nh
.SH NAME
D:/RayTracing/include/SDL_haptic.h \- The SDL haptic subsystem allows you to control haptic (force feedback) devices\&.  

.SH SYNOPSIS
.br
.PP
\fC#include 'SDL_stdinc\&.h'\fP
.br
\fC#include 'SDL_error\&.h'\fP
.br
\fC#include 'SDL_joystick\&.h'\fP
.br
\fC#include 'begin_code\&.h'\fP
.br
\fC#include 'close_code\&.h'\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBSDL_HapticDirection\fP"
.br
.RI "Structure that represents a haptic direction\&. "
.ti -1c
.RI "struct \fBSDL_HapticConstant\fP"
.br
.RI "A structure containing a template for a Constant effect\&. "
.ti -1c
.RI "struct \fBSDL_HapticPeriodic\fP"
.br
.RI "A structure containing a template for a Periodic effect\&. "
.ti -1c
.RI "struct \fBSDL_HapticCondition\fP"
.br
.RI "A structure containing a template for a Condition effect\&. "
.ti -1c
.RI "struct \fBSDL_HapticRamp\fP"
.br
.RI "A structure containing a template for a Ramp effect\&. "
.ti -1c
.RI "struct \fBSDL_HapticLeftRight\fP"
.br
.RI "A structure containing a template for a Left/Right effect\&. "
.ti -1c
.RI "struct \fBSDL_HapticCustom\fP"
.br
.RI "A structure containing a template for the \fBSDL_HAPTIC_CUSTOM\fP effect\&. "
.ti -1c
.RI "union \fBSDL_HapticEffect\fP"
.br
.RI "The generic template for any haptic effect\&. "
.in -1c
.SS "Macros"

.PP
.RI "\fBHaptic effects\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSDL_HAPTIC_CONSTANT\fP   (1u<<0)"
.br
.RI "Constant effect supported\&. "
.ti -1c
.RI "#define \fBSDL_HAPTIC_SINE\fP   (1u<<1)"
.br
.RI "Sine wave effect supported\&. "
.ti -1c
.RI "#define \fBSDL_HAPTIC_LEFTRIGHT\fP   (1u<<2)"
.br
.RI "Left/Right effect supported\&. "
.ti -1c
.RI "#define \fBSDL_HAPTIC_TRIANGLE\fP   (1u<<3)"
.br
.RI "Triangle wave effect supported\&. "
.ti -1c
.RI "#define \fBSDL_HAPTIC_SAWTOOTHUP\fP   (1u<<4)"
.br
.RI "Sawtoothup wave effect supported\&. "
.ti -1c
.RI "#define \fBSDL_HAPTIC_SAWTOOTHDOWN\fP   (1u<<5)"
.br
.RI "Sawtoothdown wave effect supported\&. "
.ti -1c
.RI "#define \fBSDL_HAPTIC_RAMP\fP   (1u<<6)"
.br
.RI "Ramp effect supported\&. "
.ti -1c
.RI "#define \fBSDL_HAPTIC_SPRING\fP   (1u<<7)"
.br
.RI "Spring effect supported - uses axes position\&. "
.ti -1c
.RI "#define \fBSDL_HAPTIC_DAMPER\fP   (1u<<8)"
.br
.RI "Damper effect supported - uses axes velocity\&. "
.ti -1c
.RI "#define \fBSDL_HAPTIC_INERTIA\fP   (1u<<9)"
.br
.RI "Inertia effect supported - uses axes acceleration\&. "
.ti -1c
.RI "#define \fBSDL_HAPTIC_FRICTION\fP   (1u<<10)"
.br
.RI "Friction effect supported - uses axes movement\&. "
.ti -1c
.RI "#define \fBSDL_HAPTIC_CUSTOM\fP   (1u<<11)"
.br
.RI "Custom effect is supported\&. "
.ti -1c
.RI "#define \fBSDL_HAPTIC_GAIN\fP   (1u<<12)"
.br
.RI "Device can set global gain\&. "
.ti -1c
.RI "#define \fBSDL_HAPTIC_AUTOCENTER\fP   (1u<<13)"
.br
.RI "Device can set autocenter\&. "
.ti -1c
.RI "#define \fBSDL_HAPTIC_STATUS\fP   (1u<<14)"
.br
.RI "Device can be queried for effect status\&. "
.ti -1c
.RI "#define \fBSDL_HAPTIC_PAUSE\fP   (1u<<15)"
.br
.RI "Device can be paused\&. "
.in -1c
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct _SDL_Haptic \fBSDL_Haptic\fP"
.br
.RI "The haptic structure used to identify an SDL haptic\&. "
.in -1c
.SS "Direction encodings"

.in +1c
.ti -1c
.RI "#define \fBSDL_HAPTIC_POLAR\fP   0"
.br
.RI "Uses polar coordinates for the direction\&. "
.ti -1c
.RI "#define \fBSDL_HAPTIC_CARTESIAN\fP   1"
.br
.RI "Uses cartesian coordinates for the direction\&. "
.ti -1c
.RI "#define \fBSDL_HAPTIC_SPHERICAL\fP   2"
.br
.RI "Uses spherical coordinates for the direction\&. "
.ti -1c
.RI "#define \fBSDL_HAPTIC_STEERING_AXIS\fP   3"
.br
.RI "Use this value to play an effect on the steering wheel axis\&. This provides better compatibility across platforms and devices as SDL will guess the correct axis\&. "
.ti -1c
.RI "#define \fBSDL_HAPTIC_INFINITY\fP   4294967295U"
.br
.RI "Used to play a device an infinite number of times\&. "
.ti -1c
.RI "typedef struct \fBSDL_HapticDirection\fP \fBSDL_HapticDirection\fP"
.br
.RI "Structure that represents a haptic direction\&. "
.ti -1c
.RI "typedef struct \fBSDL_HapticConstant\fP \fBSDL_HapticConstant\fP"
.br
.RI "A structure containing a template for a Constant effect\&. "
.ti -1c
.RI "typedef struct \fBSDL_HapticPeriodic\fP \fBSDL_HapticPeriodic\fP"
.br
.RI "A structure containing a template for a Periodic effect\&. "
.ti -1c
.RI "typedef struct \fBSDL_HapticCondition\fP \fBSDL_HapticCondition\fP"
.br
.RI "A structure containing a template for a Condition effect\&. "
.ti -1c
.RI "typedef struct \fBSDL_HapticRamp\fP \fBSDL_HapticRamp\fP"
.br
.RI "A structure containing a template for a Ramp effect\&. "
.ti -1c
.RI "typedef struct \fBSDL_HapticLeftRight\fP \fBSDL_HapticLeftRight\fP"
.br
.RI "A structure containing a template for a Left/Right effect\&. "
.ti -1c
.RI "typedef struct \fBSDL_HapticCustom\fP \fBSDL_HapticCustom\fP"
.br
.RI "A structure containing a template for the \fBSDL_HAPTIC_CUSTOM\fP effect\&. "
.ti -1c
.RI "typedef union \fBSDL_HapticEffect\fP \fBSDL_HapticEffect\fP"
.br
.RI "The generic template for any haptic effect\&. "
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_NumHaptics\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP const char *\fBSDLCALL\fP \fBSDL_HapticName\fP (int device_index)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP \fBSDL_Haptic\fP *\fBSDLCALL\fP \fBSDL_HapticOpen\fP (int device_index)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_HapticOpened\fP (int device_index)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_HapticIndex\fP (\fBSDL_Haptic\fP *haptic)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_MouseIsHaptic\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP \fBSDL_Haptic\fP *\fBSDLCALL\fP \fBSDL_HapticOpenFromMouse\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_JoystickIsHaptic\fP (\fBSDL_Joystick\fP *joystick)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP \fBSDL_Haptic\fP *\fBSDLCALL\fP \fBSDL_HapticOpenFromJoystick\fP (\fBSDL_Joystick\fP *joystick)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP \fBvoid\fP \fBSDLCALL\fP \fBSDL_HapticClose\fP (\fBSDL_Haptic\fP *haptic)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_HapticNumEffects\fP (\fBSDL_Haptic\fP *haptic)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_HapticNumEffectsPlaying\fP (\fBSDL_Haptic\fP *haptic)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP unsigned int \fBSDLCALL\fP \fBSDL_HapticQuery\fP (\fBSDL_Haptic\fP *haptic)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_HapticNumAxes\fP (\fBSDL_Haptic\fP *haptic)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_HapticEffectSupported\fP (\fBSDL_Haptic\fP *haptic, \fBSDL_HapticEffect\fP *effect)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_HapticNewEffect\fP (\fBSDL_Haptic\fP *haptic, \fBSDL_HapticEffect\fP *effect)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_HapticUpdateEffect\fP (\fBSDL_Haptic\fP *haptic, int effect, \fBSDL_HapticEffect\fP *\fBdata\fP)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_HapticRunEffect\fP (\fBSDL_Haptic\fP *haptic, int effect, \fBUint32\fP iterations)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_HapticStopEffect\fP (\fBSDL_Haptic\fP *haptic, int effect)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP \fBvoid\fP \fBSDLCALL\fP \fBSDL_HapticDestroyEffect\fP (\fBSDL_Haptic\fP *haptic, int effect)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_HapticGetEffectStatus\fP (\fBSDL_Haptic\fP *haptic, int effect)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_HapticSetGain\fP (\fBSDL_Haptic\fP *haptic, int gain)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_HapticSetAutocenter\fP (\fBSDL_Haptic\fP *haptic, int autocenter)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_HapticPause\fP (\fBSDL_Haptic\fP *haptic)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_HapticUnpause\fP (\fBSDL_Haptic\fP *haptic)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_HapticStopAll\fP (\fBSDL_Haptic\fP *haptic)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_HapticRumbleSupported\fP (\fBSDL_Haptic\fP *haptic)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_HapticRumbleInit\fP (\fBSDL_Haptic\fP *haptic)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_HapticRumblePlay\fP (\fBSDL_Haptic\fP *haptic, float strength, \fBUint32\fP \fBlength\fP)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP int \fBSDLCALL\fP \fBSDL_HapticRumbleStop\fP (\fBSDL_Haptic\fP *haptic)"
.br
.in -1c
.SH "Detailed Description"
.PP 
The SDL haptic subsystem allows you to control haptic (force feedback) devices\&. 

The basic usage is as follows:
.IP "\(bu" 2
Initialize the subsystem (\fBSDL_INIT_HAPTIC\fP)\&.
.IP "\(bu" 2
Open a haptic device\&.
.IP "  \(bu" 4
\fBSDL_HapticOpen()\fP to open from index\&.
.IP "  \(bu" 4
\fBSDL_HapticOpenFromJoystick()\fP to open from an existing joystick\&.
.PP

.IP "\(bu" 2
Create an effect (\fBSDL_HapticEffect\fP)\&.
.IP "\(bu" 2
Upload the effect with \fBSDL_HapticNewEffect()\fP\&.
.IP "\(bu" 2
Run the effect with \fBSDL_HapticRunEffect()\fP\&.
.IP "\(bu" 2
(optional) Free the effect with \fBSDL_HapticDestroyEffect()\fP\&.
.IP "\(bu" 2
Close the haptic device with \fBSDL_HapticClose()\fP\&.
.PP
.PP
\fBSimple rumble example:\fP
.RS 4

.PP
.nf
SDL_Haptic *haptic;

// Open the device
haptic = SDL_HapticOpen( 0 );
if (haptic == NULL)
   return -1;

// Initialize simple rumble
if (SDL_HapticRumbleInit( haptic ) != 0)
   return -1;

// Play effect at 50% strength for 2 seconds
if (SDL_HapticRumblePlay( haptic, 0\&.5, 2000 ) != 0)
   return -1;
SDL_Delay( 2000 );

// Clean up
SDL_HapticClose( haptic );

.fi
.PP
.RE
.PP
\fBComplete example:\fP
.RS 4

.PP
.nf
int test_haptic( SDL_Joystick * joystick ) {
   SDL_Haptic *haptic;
   SDL_HapticEffect effect;
   int effect_id;

   // Open the device
   haptic = SDL_HapticOpenFromJoystick( joystick );
   if (haptic == NULL) return -1; // Most likely joystick isn't haptic

   // See if it can do sine waves
   if ((SDL_HapticQuery(haptic) & SDL_HAPTIC_SINE)==0) {
      SDL_HapticClose(haptic); // No sine effect
      return -1;
   }

   // Create the effect
   SDL_memset( &effect, 0, sizeof(SDL_HapticEffect) ); // 0 is safe default
   effect\&.type = SDL_HAPTIC_SINE;
   effect\&.periodic\&.direction\&.type = SDL_HAPTIC_POLAR; // Polar coordinates
   effect\&.periodic\&.direction\&.dir[0] = 18000; // Force comes from south
   effect\&.periodic\&.period = 1000; // 1000 ms
   effect\&.periodic\&.magnitude = 20000; // 20000/32767 strength
   effect\&.periodic\&.length = 5000; // 5 seconds long
   effect\&.periodic\&.attack_length = 1000; // Takes 1 second to get max strength
   effect\&.periodic\&.fade_length = 1000; // Takes 1 second to fade away

   // Upload the effect
   effect_id = SDL_HapticNewEffect( haptic, &effect );

   // Test the effect
   SDL_HapticRunEffect( haptic, effect_id, 1 );
   SDL_Delay( 5000); // Wait for the effect to finish

   // We destroy the effect, although closing the device also does this
   SDL_HapticDestroyEffect( haptic, effect_id );

   // Close the device
   SDL_HapticClose(haptic);

   return 0; // Success
}

.fi
.PP
 
.RE
.PP

.SH "Macro Definition Documentation"
.PP 
.SS "#define SDL_HAPTIC_AUTOCENTER   (1u<<13)"

.PP
Device can set autocenter\&. Device supports setting autocenter\&.
.PP
\fBSee also\fP
.RS 4
\fBSDL_HapticSetAutocenter\fP 
.RE
.PP

.SS "#define SDL_HAPTIC_CARTESIAN   1"

.PP
Uses cartesian coordinates for the direction\&. 
.PP
\fBSee also\fP
.RS 4
\fBSDL_HapticDirection\fP 
.RE
.PP

.SS "#define SDL_HAPTIC_CONSTANT   (1u<<0)"

.PP
Constant effect supported\&. Constant haptic effect\&.
.PP
\fBSee also\fP
.RS 4
\fBSDL_HapticCondition\fP 
.RE
.PP

.SS "#define SDL_HAPTIC_CUSTOM   (1u<<11)"

.PP
Custom effect is supported\&. User defined custom haptic effect\&. 
.SS "#define SDL_HAPTIC_DAMPER   (1u<<8)"

.PP
Damper effect supported - uses axes velocity\&. Condition haptic effect that simulates dampening\&. Effect is based on the axes velocity\&.
.PP
\fBSee also\fP
.RS 4
\fBSDL_HapticCondition\fP 
.RE
.PP

.SS "#define SDL_HAPTIC_FRICTION   (1u<<10)"

.PP
Friction effect supported - uses axes movement\&. Condition haptic effect that simulates friction\&. Effect is based on the axes movement\&.
.PP
\fBSee also\fP
.RS 4
\fBSDL_HapticCondition\fP 
.RE
.PP

.SS "#define SDL_HAPTIC_GAIN   (1u<<12)"

.PP
Device can set global gain\&. Device supports setting the global gain\&.
.PP
\fBSee also\fP
.RS 4
\fBSDL_HapticSetGain\fP 
.RE
.PP

.SS "#define SDL_HAPTIC_INERTIA   (1u<<9)"

.PP
Inertia effect supported - uses axes acceleration\&. Condition haptic effect that simulates inertia\&. Effect is based on the axes acceleration\&.
.PP
\fBSee also\fP
.RS 4
\fBSDL_HapticCondition\fP 
.RE
.PP

.SS "#define SDL_HAPTIC_INFINITY   4294967295U"

.PP
Used to play a device an infinite number of times\&. 
.PP
\fBSee also\fP
.RS 4
\fBSDL_HapticRunEffect\fP 
.RE
.PP

.SS "#define SDL_HAPTIC_LEFTRIGHT   (1u<<2)"

.PP
Left/Right effect supported\&. Haptic effect for direct control over high/low frequency motors\&.
.PP
\fBSee also\fP
.RS 4
\fBSDL_HapticLeftRight\fP 
.RE
.PP
\fBWarning\fP
.RS 4
this value was SDL_HAPTIC_SQUARE right before 2\&.0\&.0 shipped\&. Sorry, we ran out of bits, and this is important for XInput devices\&. 
.RE
.PP

.SS "#define SDL_HAPTIC_PAUSE   (1u<<15)"

.PP
Device can be paused\&. Devices supports being paused\&.
.PP
\fBSee also\fP
.RS 4
\fBSDL_HapticPause\fP 
.PP
\fBSDL_HapticUnpause\fP 
.RE
.PP

.SS "#define SDL_HAPTIC_POLAR   0"

.PP
Uses polar coordinates for the direction\&. 
.PP
\fBSee also\fP
.RS 4
\fBSDL_HapticDirection\fP 
.RE
.PP

.SS "#define SDL_HAPTIC_RAMP   (1u<<6)"

.PP
Ramp effect supported\&. Ramp haptic effect\&.
.PP
\fBSee also\fP
.RS 4
\fBSDL_HapticRamp\fP 
.RE
.PP

.SS "#define SDL_HAPTIC_SAWTOOTHDOWN   (1u<<5)"

.PP
Sawtoothdown wave effect supported\&. Periodic haptic effect that simulates saw tooth down waves\&.
.PP
\fBSee also\fP
.RS 4
\fBSDL_HapticPeriodic\fP 
.RE
.PP

.SS "#define SDL_HAPTIC_SAWTOOTHUP   (1u<<4)"

.PP
Sawtoothup wave effect supported\&. Periodic haptic effect that simulates saw tooth up waves\&.
.PP
\fBSee also\fP
.RS 4
\fBSDL_HapticPeriodic\fP 
.RE
.PP

.SS "#define SDL_HAPTIC_SINE   (1u<<1)"

.PP
Sine wave effect supported\&. Periodic haptic effect that simulates sine waves\&.
.PP
\fBSee also\fP
.RS 4
\fBSDL_HapticPeriodic\fP 
.RE
.PP

.SS "#define SDL_HAPTIC_SPHERICAL   2"

.PP
Uses spherical coordinates for the direction\&. 
.PP
\fBSee also\fP
.RS 4
\fBSDL_HapticDirection\fP 
.RE
.PP

.SS "#define SDL_HAPTIC_SPRING   (1u<<7)"

.PP
Spring effect supported - uses axes position\&. Condition haptic effect that simulates a spring\&. Effect is based on the axes position\&.
.PP
\fBSee also\fP
.RS 4
\fBSDL_HapticCondition\fP 
.RE
.PP

.SS "#define SDL_HAPTIC_STATUS   (1u<<14)"

.PP
Device can be queried for effect status\&. Device supports querying effect status\&.
.PP
\fBSee also\fP
.RS 4
\fBSDL_HapticGetEffectStatus\fP 
.RE
.PP

.SS "#define SDL_HAPTIC_STEERING_AXIS   3"

.PP
Use this value to play an effect on the steering wheel axis\&. This provides better compatibility across platforms and devices as SDL will guess the correct axis\&. 
.PP
\fBSee also\fP
.RS 4
\fBSDL_HapticDirection\fP 
.RE
.PP

.SS "#define SDL_HAPTIC_TRIANGLE   (1u<<3)"

.PP
Triangle wave effect supported\&. Periodic haptic effect that simulates triangular waves\&.
.PP
\fBSee also\fP
.RS 4
\fBSDL_HapticPeriodic\fP 
.RE
.PP

.SH "Typedef Documentation"
.PP 
.SS "\fBSDL_Haptic\fP"

.PP
The haptic structure used to identify an SDL haptic\&. 
.PP
\fBSee also\fP
.RS 4
\fBSDL_HapticOpen\fP 
.PP
\fBSDL_HapticOpenFromJoystick\fP 
.PP
\fBSDL_HapticClose\fP 
.RE
.PP

.SS "typedef struct \fBSDL_HapticCondition\fP \fBSDL_HapticCondition\fP"

.PP
A structure containing a template for a Condition effect\&. The struct handles the following effects:
.IP "\(bu" 2
\fBSDL_HAPTIC_SPRING\fP: Effect based on axes position\&.
.IP "\(bu" 2
\fBSDL_HAPTIC_DAMPER\fP: Effect based on axes velocity\&.
.IP "\(bu" 2
\fBSDL_HAPTIC_INERTIA\fP: Effect based on axes acceleration\&.
.IP "\(bu" 2
\fBSDL_HAPTIC_FRICTION\fP: Effect based on axes movement\&.
.PP
.PP
Direction is handled by condition internals instead of a direction member\&. The condition effect specific members have three parameters\&. The first refers to the X axis, the second refers to the Y axis and the third refers to the Z axis\&. The right terms refer to the positive side of the axis and the left terms refer to the negative side of the axis\&. Please refer to the \fBSDL_HapticDirection\fP diagram for which side is positive and which is negative\&.
.PP
\fBSee also\fP
.RS 4
\fBSDL_HapticDirection\fP 
.PP
\fBSDL_HAPTIC_SPRING\fP 
.PP
\fBSDL_HAPTIC_DAMPER\fP 
.PP
\fBSDL_HAPTIC_INERTIA\fP 
.PP
\fBSDL_HAPTIC_FRICTION\fP 
.PP
\fBSDL_HapticEffect\fP 
.RE
.PP

.SS "typedef struct \fBSDL_HapticConstant\fP \fBSDL_HapticConstant\fP"

.PP
A structure containing a template for a Constant effect\&. This struct is exclusively for the \fBSDL_HAPTIC_CONSTANT\fP effect\&.
.PP
A constant effect applies a constant force in the specified direction to the joystick\&.
.PP
\fBSee also\fP
.RS 4
\fBSDL_HAPTIC_CONSTANT\fP 
.PP
\fBSDL_HapticEffect\fP 
.RE
.PP

.SS "typedef struct \fBSDL_HapticCustom\fP \fBSDL_HapticCustom\fP"

.PP
A structure containing a template for the \fBSDL_HAPTIC_CUSTOM\fP effect\&. This struct is exclusively for the \fBSDL_HAPTIC_CUSTOM\fP effect\&.
.PP
A custom force feedback effect is much like a periodic effect, where the application can define its exact shape\&. You will have to allocate the data yourself\&. Data should consist of channels * samples Uint16 samples\&.
.PP
If channels is one, the effect is rotated using the defined direction\&. Otherwise it uses the samples in data for the different axes\&.
.PP
\fBSee also\fP
.RS 4
\fBSDL_HAPTIC_CUSTOM\fP 
.PP
\fBSDL_HapticEffect\fP 
.RE
.PP

.SS "typedef struct \fBSDL_HapticDirection\fP \fBSDL_HapticDirection\fP"

.PP
Structure that represents a haptic direction\&. This is the direction where the force comes from, instead of the direction in which the force is exerted\&.
.PP
Directions can be specified by:
.IP "\(bu" 2
\fBSDL_HAPTIC_POLAR\fP : Specified by polar coordinates\&.
.IP "\(bu" 2
\fBSDL_HAPTIC_CARTESIAN\fP : Specified by cartesian coordinates\&.
.IP "\(bu" 2
\fBSDL_HAPTIC_SPHERICAL\fP : Specified by spherical coordinates\&.
.PP
.PP
Cardinal directions of the haptic device are relative to the positioning of the device\&. North is considered to be away from the user\&.
.PP
The following diagram represents the cardinal directions: 
.PP
.nf
              \&.--\&.
              |__| \&.-------\&.
              |=\&.| |\&.-----\&.|
              |--| ||     ||
              |  | |'-----'|
              |__|~')_____('
                [ COMPUTER ]


                  North (0,-1)
                      ^
                      |
                      |
(-1,0)  West <----[ HAPTIC ]----> East (1,0)
                      |
                      |
                      v
                   South (0,1)


                   [ USER ]
                     \\|||/
                     (o o)
               ---ooO-(_)-Ooo---
.fi
.PP
.PP
If type is \fBSDL_HAPTIC_POLAR\fP, direction is encoded by hundredths of a degree starting north and turning clockwise\&. \fBSDL_HAPTIC_POLAR\fP only uses the first \fCdir\fP parameter\&. The cardinal directions would be:
.IP "\(bu" 2
North: 0 (0 degrees)
.IP "\(bu" 2
East: 9000 (90 degrees)
.IP "\(bu" 2
South: 18000 (180 degrees)
.IP "\(bu" 2
West: 27000 (270 degrees)
.PP
.PP
If type is \fBSDL_HAPTIC_CARTESIAN\fP, direction is encoded by three positions (X axis, Y axis and Z axis (with 3 axes))\&. \fBSDL_HAPTIC_CARTESIAN\fP uses the first three \fCdir\fP parameters\&. The cardinal directions would be:
.IP "\(bu" 2
North: 0,-1, 0
.IP "\(bu" 2
East: 1, 0, 0
.IP "\(bu" 2
South: 0, 1, 0
.IP "\(bu" 2
West: -1, 0, 0
.PP
.PP
The Z axis represents the height of the effect if supported, otherwise it's unused\&. In cartesian encoding (1, 2) would be the same as (2, 4), you can use any multiple you want, only the direction matters\&.
.PP
If type is \fBSDL_HAPTIC_SPHERICAL\fP, direction is encoded by two rotations\&. The first two \fCdir\fP parameters are used\&. The \fCdir\fP parameters are as follows (all values are in hundredths of degrees):
.IP "\(bu" 2
Degrees from (1, 0) rotated towards (0, 1)\&.
.IP "\(bu" 2
Degrees towards (0, 0, 1) (device needs at least 3 axes)\&.
.PP
.PP
Example of force coming from the south with all encodings (force coming from the south means the user will have to pull the stick to counteract): 
.PP
.nf
SDL_HapticDirection direction;

// Cartesian directions
direction\&.type = SDL_HAPTIC_CARTESIAN; // Using cartesian direction encoding\&.
direction\&.dir[0] = 0; // X position
direction\&.dir[1] = 1; // Y position
// Assuming the device has 2 axes, we don't need to specify third parameter\&.

// Polar directions
direction\&.type = SDL_HAPTIC_POLAR; // We'll be using polar direction encoding\&.
direction\&.dir[0] = 18000; // Polar only uses first parameter

// Spherical coordinates
direction\&.type = SDL_HAPTIC_SPHERICAL; // Spherical encoding
direction\&.dir[0] = 9000; // Since we only have two axes we don't need more parameters\&.

.fi
.PP
.PP
\fBSee also\fP
.RS 4
\fBSDL_HAPTIC_POLAR\fP 
.PP
\fBSDL_HAPTIC_CARTESIAN\fP 
.PP
\fBSDL_HAPTIC_SPHERICAL\fP 
.PP
\fBSDL_HAPTIC_STEERING_AXIS\fP 
.PP
\fBSDL_HapticEffect\fP 
.PP
\fBSDL_HapticNumAxes\fP 
.RE
.PP

.SS "typedef union \fBSDL_HapticEffect\fP \fBSDL_HapticEffect\fP"

.PP
The generic template for any haptic effect\&. All values max at 32767 (0x7FFF)\&. Signed values also can be negative\&. Time values unless specified otherwise are in milliseconds\&.
.PP
You can also pass \fBSDL_HAPTIC_INFINITY\fP to length instead of a 0-32767 value\&. Neither delay, interval, attack_length nor fade_length support \fBSDL_HAPTIC_INFINITY\fP\&. Fade will also not be used since effect never ends\&.
.PP
Additionally, the \fBSDL_HAPTIC_RAMP\fP effect does not support a duration of \fBSDL_HAPTIC_INFINITY\fP\&.
.PP
Button triggers may not be supported on all devices, it is advised to not use them if possible\&. Buttons start at index 1 instead of index 0 like the joystick\&.
.PP
If both attack_length and fade_level are 0, the envelope is not used, otherwise both values are used\&.
.PP
Common parts: 
.PP
.nf
// Replay - All effects have this
Uint32 length;        // Duration of effect (ms)\&.
Uint16 delay;         // Delay before starting effect\&.

// Trigger - All effects have this
Uint16 button;        // Button that triggers effect\&.
Uint16 interval;      // How soon before effect can be triggered again\&.

// Envelope - All effects except condition effects have this
Uint16 attack_length; // Duration of the attack (ms)\&.
Uint16 attack_level;  // Level at the start of the attack\&.
Uint16 fade_length;   // Duration of the fade out (ms)\&.
Uint16 fade_level;    // Level at the end of the fade\&.

.fi
.PP
.PP
Here we have an example of a constant effect evolution in time: 
.PP
.nf
Strength
^
|
|    effect level -->  _________________
|                     /                 \\
|                    /                   \\
|                   /                     \\
|                  /                       \\
| attack_level --> |                        \\
|                  |                        |  <---  fade_level
|
+--------------------------------------------------> Time
                   [--]                 [---]
                   attack_length        fade_length

[------------------][-----------------------]
delay               length

.fi
.PP
.PP
Note either the attack_level or the fade_level may be above the actual effect level\&.
.PP
\fBSee also\fP
.RS 4
\fBSDL_HapticConstant\fP 
.PP
\fBSDL_HapticPeriodic\fP 
.PP
\fBSDL_HapticCondition\fP 
.PP
\fBSDL_HapticRamp\fP 
.PP
\fBSDL_HapticLeftRight\fP 
.PP
\fBSDL_HapticCustom\fP 
.RE
.PP

.SS "typedef struct \fBSDL_HapticLeftRight\fP \fBSDL_HapticLeftRight\fP"

.PP
A structure containing a template for a Left/Right effect\&. This struct is exclusively for the \fBSDL_HAPTIC_LEFTRIGHT\fP effect\&.
.PP
The Left/Right effect is used to explicitly control the large and small motors, commonly found in modern game controllers\&. The small (right) motor is high frequency, and the large (left) motor is low frequency\&.
.PP
\fBSee also\fP
.RS 4
\fBSDL_HAPTIC_LEFTRIGHT\fP 
.PP
\fBSDL_HapticEffect\fP 
.RE
.PP

.SS "typedef struct \fBSDL_HapticPeriodic\fP \fBSDL_HapticPeriodic\fP"

.PP
A structure containing a template for a Periodic effect\&. The struct handles the following effects:
.IP "\(bu" 2
\fBSDL_HAPTIC_SINE\fP
.IP "\(bu" 2
\fBSDL_HAPTIC_LEFTRIGHT\fP
.IP "\(bu" 2
\fBSDL_HAPTIC_TRIANGLE\fP
.IP "\(bu" 2
\fBSDL_HAPTIC_SAWTOOTHUP\fP
.IP "\(bu" 2
\fBSDL_HAPTIC_SAWTOOTHDOWN\fP
.PP
.PP
A periodic effect consists in a wave-shaped effect that repeats itself over time\&. The type determines the shape of the wave and the parameters determine the dimensions of the wave\&.
.PP
Phase is given by hundredth of a degree meaning that giving the phase a value of 9000 will displace it 25% of its period\&. Here are sample values:
.IP "\(bu" 2
0: No phase displacement\&.
.IP "\(bu" 2
9000: Displaced 25% of its period\&.
.IP "\(bu" 2
18000: Displaced 50% of its period\&.
.IP "\(bu" 2
27000: Displaced 75% of its period\&.
.IP "\(bu" 2
36000: Displaced 100% of its period, same as 0, but 0 is preferred\&.
.PP
.PP
Examples: 
.PP
.nf
SDL_HAPTIC_SINE
  __      __      __      __
 /  \\    /  \\    /  \\    /
/    \\__/    \\__/    \\__/

SDL_HAPTIC_SQUARE
 __    __    __    __    __
|  |  |  |  |  |  |  |  |  |
|  |__|  |__|  |__|  |__|  |

SDL_HAPTIC_TRIANGLE
  /\\    /\\    /\\    /\\    /\\
 /  \\  /  \\  /  \\  /  \\  /
/    \\/    \\/    \\/    \\/

SDL_HAPTIC_SAWTOOTHUP
  /|  /|  /|  /|  /|  /|  /|
 / | / | / | / | / | / | / |
/  |/  |/  |/  |/  |/  |/  |

SDL_HAPTIC_SAWTOOTHDOWN
\\  |\\  |\\  |\\  |\\  |\\  |\\  |
 \\ | \\ | \\ | \\ | \\ | \\ | \\ |
  \\|  \\|  \\|  \\|  \\|  \\|  \\|

.fi
.PP
.PP
\fBSee also\fP
.RS 4
\fBSDL_HAPTIC_SINE\fP 
.PP
\fBSDL_HAPTIC_LEFTRIGHT\fP 
.PP
\fBSDL_HAPTIC_TRIANGLE\fP 
.PP
\fBSDL_HAPTIC_SAWTOOTHUP\fP 
.PP
\fBSDL_HAPTIC_SAWTOOTHDOWN\fP 
.PP
\fBSDL_HapticEffect\fP 
.RE
.PP

.SS "typedef struct \fBSDL_HapticRamp\fP \fBSDL_HapticRamp\fP"

.PP
A structure containing a template for a Ramp effect\&. This struct is exclusively for the \fBSDL_HAPTIC_RAMP\fP effect\&.
.PP
The ramp effect starts at start strength and ends at end strength\&. It augments in linear fashion\&. If you use attack and fade with a ramp the effects get added to the ramp effect making the effect become quadratic instead of linear\&.
.PP
\fBSee also\fP
.RS 4
\fBSDL_HAPTIC_RAMP\fP 
.PP
\fBSDL_HapticEffect\fP 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "\fBDECLSPEC\fP \fBvoid\fP \fBSDLCALL\fP SDL_HapticClose (\fBSDL_Haptic\fP * haptic)"
Close a haptic device previously opened with \fBSDL_HapticOpen()\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIhaptic\fP the SDL_Haptic device to close
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_HapticOpen\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP \fBvoid\fP \fBSDLCALL\fP SDL_HapticDestroyEffect (\fBSDL_Haptic\fP * haptic, int effect)"
Destroy a haptic effect on the device\&.
.PP
This will stop the effect if it's running\&. Effects are automatically destroyed when the device is closed\&.
.PP
\fBParameters\fP
.RS 4
\fIhaptic\fP the SDL_Haptic device to destroy the effect on 
.br
\fIeffect\fP the ID of the haptic effect to destroy
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_HapticNewEffect\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_HapticEffectSupported (\fBSDL_Haptic\fP * haptic, \fBSDL_HapticEffect\fP * effect)"
Check to see if an effect is supported by a haptic device\&.
.PP
\fBParameters\fP
.RS 4
\fIhaptic\fP the SDL_Haptic device to query 
.br
\fIeffect\fP the desired effect to query 
.RE
.PP
\fBReturns\fP
.RS 4
SDL_TRUE if effect is supported, SDL_FALSE if it isn't, or a negative error code on failure; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_HapticNewEffect\fP 
.PP
\fBSDL_HapticQuery\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_HapticGetEffectStatus (\fBSDL_Haptic\fP * haptic, int effect)"
Get the status of the current effect on the specified haptic device\&.
.PP
Device must support the SDL_HAPTIC_STATUS feature\&.
.PP
\fBParameters\fP
.RS 4
\fIhaptic\fP the SDL_Haptic device to query for the effect status on 
.br
\fIeffect\fP the ID of the haptic effect to query its status 
.RE
.PP
\fBReturns\fP
.RS 4
0 if it isn't playing, 1 if it is playing, or a negative error code on failure; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_HapticRunEffect\fP 
.PP
\fBSDL_HapticStopEffect\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_HapticIndex (\fBSDL_Haptic\fP * haptic)"
Get the index of a haptic device\&.
.PP
\fBParameters\fP
.RS 4
\fIhaptic\fP the SDL_Haptic device to query 
.RE
.PP
\fBReturns\fP
.RS 4
the index of the specified haptic device or a negative error code on failure; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_HapticOpen\fP 
.PP
\fBSDL_HapticOpened\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP const char *\fBSDLCALL\fP SDL_HapticName (int device_index)"
Get the implementation dependent name of a haptic device\&.
.PP
This can be called before any joysticks are opened\&. If no name can be found, this function returns NULL\&.
.PP
\fBParameters\fP
.RS 4
\fIdevice_index\fP index of the device to query\&. 
.RE
.PP
\fBReturns\fP
.RS 4
the name of the device or NULL on failure; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_NumHaptics\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_HapticNewEffect (\fBSDL_Haptic\fP * haptic, \fBSDL_HapticEffect\fP * effect)"
Create a new haptic effect on a specified device\&.
.PP
\fBParameters\fP
.RS 4
\fIhaptic\fP an SDL_Haptic device to create the effect on 
.br
\fIeffect\fP an \fBSDL_HapticEffect\fP structure containing the properties of the effect to create 
.RE
.PP
\fBReturns\fP
.RS 4
the ID of the effect on success or a negative error code on failure; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_HapticDestroyEffect\fP 
.PP
\fBSDL_HapticRunEffect\fP 
.PP
\fBSDL_HapticUpdateEffect\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_HapticNumAxes (\fBSDL_Haptic\fP * haptic)"
Get the number of haptic axes the device has\&.
.PP
The number of haptic axes might be useful if working with the \fBSDL_HapticDirection\fP effect\&.
.PP
\fBParameters\fP
.RS 4
\fIhaptic\fP the SDL_Haptic device to query 
.RE
.PP
\fBReturns\fP
.RS 4
the number of axes on success or a negative error code on failure; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&. 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_HapticNumEffects (\fBSDL_Haptic\fP * haptic)"
Get the number of effects a haptic device can store\&.
.PP
On some platforms this isn't fully supported, and therefore is an approximation\&. Always check to see if your created effect was actually created and do not rely solely on \fBSDL_HapticNumEffects()\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIhaptic\fP the SDL_Haptic device to query 
.RE
.PP
\fBReturns\fP
.RS 4
the number of effects the haptic device can store or a negative error code on failure; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_HapticNumEffectsPlaying\fP 
.PP
\fBSDL_HapticQuery\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_HapticNumEffectsPlaying (\fBSDL_Haptic\fP * haptic)"
Get the number of effects a haptic device can play at the same time\&.
.PP
This is not supported on all platforms, but will always return a value\&.
.PP
\fBParameters\fP
.RS 4
\fIhaptic\fP the SDL_Haptic device to query maximum playing effects 
.RE
.PP
\fBReturns\fP
.RS 4
the number of effects the haptic device can play at the same time or a negative error code on failure; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_HapticNumEffects\fP 
.PP
\fBSDL_HapticQuery\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP \fBSDL_Haptic\fP *\fBSDLCALL\fP SDL_HapticOpen (int device_index)"
Open a haptic device for use\&.
.PP
The index passed as an argument refers to the N'th haptic device on this system\&.
.PP
When opening a haptic device, its gain will be set to maximum and autocenter will be disabled\&. To modify these values use \fBSDL_HapticSetGain()\fP and \fBSDL_HapticSetAutocenter()\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIdevice_index\fP index of the device to open 
.RE
.PP
\fBReturns\fP
.RS 4
the device identifier or NULL on failure; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_HapticClose\fP 
.PP
\fBSDL_HapticIndex\fP 
.PP
\fBSDL_HapticOpenFromJoystick\fP 
.PP
\fBSDL_HapticOpenFromMouse\fP 
.PP
\fBSDL_HapticPause\fP 
.PP
\fBSDL_HapticSetAutocenter\fP 
.PP
\fBSDL_HapticSetGain\fP 
.PP
\fBSDL_HapticStopAll\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_HapticOpened (int device_index)"
Check if the haptic device at the designated index has been opened\&.
.PP
\fBParameters\fP
.RS 4
\fIdevice_index\fP the index of the device to query 
.RE
.PP
\fBReturns\fP
.RS 4
1 if it has been opened, 0 if it hasn't or on failure; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_HapticIndex\fP 
.PP
\fBSDL_HapticOpen\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP \fBSDL_Haptic\fP *\fBSDLCALL\fP SDL_HapticOpenFromJoystick (\fBSDL_Joystick\fP * joystick)"
Open a haptic device for use from a joystick device\&.
.PP
You must still close the haptic device separately\&. It will not be closed with the joystick\&.
.PP
When opened from a joystick you should first close the haptic device before closing the joystick device\&. If not, on some implementations the haptic device will also get unallocated and you'll be unable to use force feedback on that device\&.
.PP
\fBParameters\fP
.RS 4
\fIjoystick\fP the SDL_Joystick to create a haptic device from 
.RE
.PP
\fBReturns\fP
.RS 4
a valid haptic device identifier on success or NULL on failure; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_HapticClose\fP 
.PP
\fBSDL_HapticOpen\fP 
.PP
\fBSDL_JoystickIsHaptic\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP \fBSDL_Haptic\fP *\fBSDLCALL\fP SDL_HapticOpenFromMouse (\fBvoid\fP)"
Try to open a haptic device from the current mouse\&.
.PP
\fBReturns\fP
.RS 4
the haptic device identifier or NULL on failure; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_HapticOpen\fP 
.PP
\fBSDL_MouseIsHaptic\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_HapticPause (\fBSDL_Haptic\fP * haptic)"
Pause a haptic device\&.
.PP
Device must support the \fCSDL_HAPTIC_PAUSE\fP feature\&. Call \fBSDL_HapticUnpause()\fP to resume playback\&.
.PP
Do not modify the effects nor add new ones while the device is paused\&. That can cause all sorts of weird errors\&.
.PP
\fBParameters\fP
.RS 4
\fIhaptic\fP the SDL_Haptic device to pause 
.RE
.PP
\fBReturns\fP
.RS 4
0 on success or a negative error code on failure; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_HapticUnpause\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP unsigned int \fBSDLCALL\fP SDL_HapticQuery (\fBSDL_Haptic\fP * haptic)"
Get the haptic device's supported features in bitwise manner\&.
.PP
\fBParameters\fP
.RS 4
\fIhaptic\fP the SDL_Haptic device to query 
.RE
.PP
\fBReturns\fP
.RS 4
a list of supported haptic features in bitwise manner (OR'd), or 0 on failure; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_HapticEffectSupported\fP 
.PP
\fBSDL_HapticNumEffects\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_HapticRumbleInit (\fBSDL_Haptic\fP * haptic)"
Initialize a haptic device for simple rumble playback\&.
.PP
\fBParameters\fP
.RS 4
\fIhaptic\fP the haptic device to initialize for simple rumble playback 
.RE
.PP
\fBReturns\fP
.RS 4
0 on success or a negative error code on failure; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_HapticOpen\fP 
.PP
\fBSDL_HapticRumblePlay\fP 
.PP
\fBSDL_HapticRumbleStop\fP 
.PP
\fBSDL_HapticRumbleSupported\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_HapticRumblePlay (\fBSDL_Haptic\fP * haptic, float strength, \fBUint32\fP length)"
Run a simple rumble effect on a haptic device\&.
.PP
\fBParameters\fP
.RS 4
\fIhaptic\fP the haptic device to play the rumble effect on 
.br
\fIstrength\fP strength of the rumble to play as a 0-1 float value 
.br
\fIlength\fP length of the rumble to play in milliseconds 
.RE
.PP
\fBReturns\fP
.RS 4
0 on success or a negative error code on failure; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_HapticRumbleInit\fP 
.PP
\fBSDL_HapticRumbleStop\fP 
.PP
\fBSDL_HapticRumbleSupported\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_HapticRumbleStop (\fBSDL_Haptic\fP * haptic)"
Stop the simple rumble on a haptic device\&.
.PP
\fBParameters\fP
.RS 4
\fIhaptic\fP the haptic device to stop the rumble effect on 
.RE
.PP
\fBReturns\fP
.RS 4
0 on success or a negative error code on failure; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_HapticRumbleInit\fP 
.PP
\fBSDL_HapticRumblePlay\fP 
.PP
\fBSDL_HapticRumbleSupported\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_HapticRumbleSupported (\fBSDL_Haptic\fP * haptic)"
Check whether rumble is supported on a haptic device\&.
.PP
\fBParameters\fP
.RS 4
\fIhaptic\fP haptic device to check for rumble support 
.RE
.PP
\fBReturns\fP
.RS 4
SDL_TRUE if effect is supported, SDL_FALSE if it isn't, or a negative error code on failure; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_HapticRumbleInit\fP 
.PP
\fBSDL_HapticRumblePlay\fP 
.PP
\fBSDL_HapticRumbleStop\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_HapticRunEffect (\fBSDL_Haptic\fP * haptic, int effect, \fBUint32\fP iterations)"
Run the haptic effect on its associated haptic device\&.
.PP
To repeat the effect over and over indefinitely, set \fCiterations\fP to \fCSDL_HAPTIC_INFINITY\fP\&. (Repeats the envelope - attack and fade\&.) To make one instance of the effect last indefinitely (so the effect does not fade), set the effect's \fClength\fP in its structure/union to \fCSDL_HAPTIC_INFINITY\fP instead\&.
.PP
\fBParameters\fP
.RS 4
\fIhaptic\fP the SDL_Haptic device to run the effect on 
.br
\fIeffect\fP the ID of the haptic effect to run 
.br
\fIiterations\fP the number of iterations to run the effect; use \fCSDL_HAPTIC_INFINITY\fP to repeat forever 
.RE
.PP
\fBReturns\fP
.RS 4
0 on success or a negative error code on failure; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_HapticDestroyEffect\fP 
.PP
\fBSDL_HapticGetEffectStatus\fP 
.PP
\fBSDL_HapticStopEffect\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_HapticSetAutocenter (\fBSDL_Haptic\fP * haptic, int autocenter)"
Set the global autocenter of the device\&.
.PP
Autocenter should be between 0 and 100\&. Setting it to 0 will disable autocentering\&.
.PP
Device must support the SDL_HAPTIC_AUTOCENTER feature\&.
.PP
\fBParameters\fP
.RS 4
\fIhaptic\fP the SDL_Haptic device to set autocentering on 
.br
\fIautocenter\fP value to set autocenter to (0-100) 
.RE
.PP
\fBReturns\fP
.RS 4
0 on success or a negative error code on failure; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_HapticQuery\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_HapticSetGain (\fBSDL_Haptic\fP * haptic, int gain)"
Set the global gain of the specified haptic device\&.
.PP
Device must support the SDL_HAPTIC_GAIN feature\&.
.PP
The user may specify the maximum gain by setting the environment variable \fCSDL_HAPTIC_GAIN_MAX\fP which should be between 0 and 100\&. All calls to \fBSDL_HapticSetGain()\fP will scale linearly using \fCSDL_HAPTIC_GAIN_MAX\fP as the maximum\&.
.PP
\fBParameters\fP
.RS 4
\fIhaptic\fP the SDL_Haptic device to set the gain on 
.br
\fIgain\fP value to set the gain to, should be between 0 and 100 (0 - 100) 
.RE
.PP
\fBReturns\fP
.RS 4
0 on success or a negative error code on failure; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_HapticQuery\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_HapticStopAll (\fBSDL_Haptic\fP * haptic)"
Stop all the currently playing effects on a haptic device\&.
.PP
\fBParameters\fP
.RS 4
\fIhaptic\fP the SDL_Haptic device to stop 
.RE
.PP
\fBReturns\fP
.RS 4
0 on success or a negative error code on failure; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&. 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_HapticStopEffect (\fBSDL_Haptic\fP * haptic, int effect)"
Stop the haptic effect on its associated haptic device\&.
.PP
.IP "\(bu" 2
\fBParameters\fP
.RS 4
\fIhaptic\fP the SDL_Haptic device to stop the effect on 
.br
\fIeffect\fP the ID of the haptic effect to stop 
.RE
.PP
\fBReturns\fP
.RS 4
0 on success or a negative error code on failure; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_HapticDestroyEffect\fP 
.PP
\fBSDL_HapticRunEffect\fP 
.RE
.PP

.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_HapticUnpause (\fBSDL_Haptic\fP * haptic)"
Unpause a haptic device\&.
.PP
Call to unpause after \fBSDL_HapticPause()\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIhaptic\fP the SDL_Haptic device to unpause 
.RE
.PP
\fBReturns\fP
.RS 4
0 on success or a negative error code on failure; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_HapticPause\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_HapticUpdateEffect (\fBSDL_Haptic\fP * haptic, int effect, \fBSDL_HapticEffect\fP * data)"
Update the properties of an effect\&.
.PP
Can be used dynamically, although behavior when dynamically changing direction may be strange\&. Specifically the effect may re-upload itself and start playing from the start\&. You also cannot change the type either when running \fBSDL_HapticUpdateEffect()\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIhaptic\fP the SDL_Haptic device that has the effect 
.br
\fIeffect\fP the identifier of the effect to update 
.br
\fIdata\fP an \fBSDL_HapticEffect\fP structure containing the new effect properties to use 
.RE
.PP
\fBReturns\fP
.RS 4
0 on success or a negative error code on failure; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_HapticDestroyEffect\fP 
.PP
\fBSDL_HapticNewEffect\fP 
.PP
\fBSDL_HapticRunEffect\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_JoystickIsHaptic (\fBSDL_Joystick\fP * joystick)"
Query if a joystick has haptic features\&.
.PP
\fBParameters\fP
.RS 4
\fIjoystick\fP the SDL_Joystick to test for haptic capabilities 
.RE
.PP
\fBReturns\fP
.RS 4
SDL_TRUE if the joystick is haptic, SDL_FALSE if it isn't, or a negative error code on failure; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_HapticOpenFromJoystick\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_MouseIsHaptic (\fBvoid\fP)"
Query whether or not the current mouse has haptic capabilities\&.
.PP
\fBReturns\fP
.RS 4
SDL_TRUE if the mouse is haptic or SDL_FALSE if it isn't\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_HapticOpenFromMouse\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP int \fBSDLCALL\fP SDL_NumHaptics (\fBvoid\fP)"
Count the number of haptic devices attached to the system\&.
.PP
\fBReturns\fP
.RS 4
the number of haptic devices detected on the system or a negative error code on failure; call \fBSDL_GetError()\fP for more information\&.
.RE
.PP
\fBSince\fP
.RS 4
This function is available since SDL 2\&.0\&.0\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBSDL_HapticName\fP 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for RayTracer from the source code\&.
