<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_annotated" xml:lang="en-US">
<title>Class List</title>
Here are the classes, structs, unions and interfaces with brief descriptions:<link linkend="_class_r_t_1_1_camera">RT::Camera</link><link linkend="_class_c_app">CApp</link><link linkend="_class_r_t_1_1_texture_1_1_checker">RT::Texture::Checker</link><link linkend="_class_r_t_1_1_cone">RT::Cone</link><link linkend="_class_r_t_1_1_cylinder">RT::Cylinder</link><link linkend="_class_r_t_1_1_texture_1_1_flat">RT::Texture::Flat</link><link linkend="_class_r_t_1_1_g_tform">RT::GTform</link><link linkend="_class_image">Image</link><link linkend="_class_r_t_1_1_texture_1_1_image">RT::Texture::Image</link><link linkend="_class_r_t_1_1_light_base">RT::LightBase</link><link linkend="_class_r_t_1_1_material_base">RT::MaterialBase</link><link linkend="_class_r_t_1_1_object_base">RT::ObjectBase</link><link linkend="_class_r_t_1_1_obj_plane">RT::ObjPlane</link><link linkend="_class_r_t_1_1_obj_sphere">RT::ObjSphere</link><link linkend="_class_r_t_1_1_point_light">RT::PointLight</link><link linkend="_classqb_matrix2">qbMatrix2&lt; T &gt;</link><link linkend="_classqb_vector">qbVector&lt; T &gt;</link><link linkend="_class_r_t_1_1_ray">RT::Ray</link><link linkend="_class_r_t_1_1_scene">RT::Scene</link><link linkend="_struct_s_d_l___assert_data">SDL_AssertData</link><link linkend="_struct_s_d_l__atomic__t">SDL_atomic_t</link>
<para>A type representing an atomic integer value. It is a struct so people don&apos;t accidentally use numeric operations on it </para>
<link linkend="_struct_s_d_l___audio_c_v_t">SDL_AudioCVT</link>
<para>A structure to hold a set of audio conversion filters and buffers </para>
<link linkend="_struct_s_d_l___audio_device_event">SDL_AudioDeviceEvent</link>
<para>Audio device event structure (event.adevice.*) </para>
<link linkend="_struct_s_d_l___audio_spec">SDL_AudioSpec</link><link linkend="_struct_s_d_l___color">SDL_Color</link><link linkend="_struct_s_d_l___common_event">SDL_CommonEvent</link>
<para>Fields shared by every event </para>
<link linkend="_struct_s_d_l___controller_axis_event">SDL_ControllerAxisEvent</link>
<para>Game controller axis motion event structure (event.caxis.*) </para>
<link linkend="_struct_s_d_l___controller_button_event">SDL_ControllerButtonEvent</link>
<para>Game controller button event structure (event.cbutton.*) </para>
<link linkend="_struct_s_d_l___controller_device_event">SDL_ControllerDeviceEvent</link>
<para>Controller device event structure (event.cdevice.*) </para>
<link linkend="_struct_s_d_l___controller_sensor_event">SDL_ControllerSensorEvent</link>
<para>Game controller sensor event structure (event.csensor.*) </para>
<link linkend="_struct_s_d_l___controller_touchpad_event">SDL_ControllerTouchpadEvent</link>
<para>Game controller touchpad event structure (event.ctouchpad.*) </para>
<link linkend="_struct_s_d_l___display_event">SDL_DisplayEvent</link>
<para>Display state change event data (event.display.*) </para>
<link linkend="_struct_s_d_l___display_mode">SDL_DisplayMode</link>
<para>The structure that defines a display mode </para>
<link linkend="_struct_s_d_l___dollar_gesture_event">SDL_DollarGestureEvent</link>
<para>Dollar Gesture Event (event.dgesture.*) </para>
<link linkend="_struct_s_d_l___drop_event">SDL_DropEvent</link>
<para>An event used to request a file open by the system (event.drop.*) This event is enabled by default, you can disable it with <link linkend="__s_d_l__events_8h_1afb772893e1c46f186fa39a4defe76df3">SDL_EventState()</link> </para>
<link linkend="_union_s_d_l___event">SDL_Event</link>
<para>General event structure </para>
<link linkend="_struct_s_d_l___finger">SDL_Finger</link><link linkend="_struct_s_d_l___f_point">SDL_FPoint</link><link linkend="_struct_s_d_l___f_rect">SDL_FRect</link><link linkend="_struct_s_d_l___game_controller_button_bind">SDL_GameControllerButtonBind</link><link linkend="_struct_s_d_l___haptic_condition">SDL_HapticCondition</link>
<para>A structure containing a template for a Condition effect </para>
<link linkend="_struct_s_d_l___haptic_constant">SDL_HapticConstant</link>
<para>A structure containing a template for a Constant effect </para>
<link linkend="_struct_s_d_l___haptic_custom">SDL_HapticCustom</link>
<para>A structure containing a template for the <link linkend="__s_d_l__haptic_8h_1a8a18c4de1076ac9bebd718329d16db29">SDL_HAPTIC_CUSTOM</link> effect </para>
<link linkend="_struct_s_d_l___haptic_direction">SDL_HapticDirection</link>
<para>Structure that represents a haptic direction </para>
<link linkend="_union_s_d_l___haptic_effect">SDL_HapticEffect</link>
<para>The generic template for any haptic effect </para>
<link linkend="_struct_s_d_l___haptic_left_right">SDL_HapticLeftRight</link>
<para>A structure containing a template for a Left/Right effect </para>
<link linkend="_struct_s_d_l___haptic_periodic">SDL_HapticPeriodic</link>
<para>A structure containing a template for a Periodic effect </para>
<link linkend="_struct_s_d_l___haptic_ramp">SDL_HapticRamp</link>
<para>A structure containing a template for a Ramp effect </para>
<link linkend="_struct_s_d_l__hid__device__info">SDL_hid_device_info</link>
<para>Information about a connected HID device </para>
<link linkend="_struct_s_d_l___joy_axis_event">SDL_JoyAxisEvent</link>
<para>Joystick axis motion event structure (event.jaxis.*) </para>
<link linkend="_struct_s_d_l___joy_ball_event">SDL_JoyBallEvent</link>
<para>Joystick trackball motion event structure (event.jball.*) </para>
<link linkend="_struct_s_d_l___joy_button_event">SDL_JoyButtonEvent</link>
<para>Joystick button event structure (event.jbutton.*) </para>
<link linkend="_struct_s_d_l___joy_device_event">SDL_JoyDeviceEvent</link>
<para>Joystick device event structure (event.jdevice.*) </para>
<link linkend="_struct_s_d_l___joy_hat_event">SDL_JoyHatEvent</link>
<para>Joystick hat position change event structure (event.jhat.*) </para>
<link linkend="_struct_s_d_l___joystick_g_u_i_d">SDL_JoystickGUID</link><link linkend="_struct_s_d_l___keyboard_event">SDL_KeyboardEvent</link>
<para>Keyboard button event structure (event.key.*) </para>
<link linkend="_struct_s_d_l___keysym">SDL_Keysym</link>
<para>The SDL keysym structure, used in key events </para>
<link linkend="_struct_s_d_l___locale">SDL_Locale</link><link linkend="_struct_s_d_l___message_box_button_data">SDL_MessageBoxButtonData</link><link linkend="_struct_s_d_l___message_box_color">SDL_MessageBoxColor</link><link linkend="_struct_s_d_l___message_box_color_scheme">SDL_MessageBoxColorScheme</link><link linkend="_struct_s_d_l___message_box_data">SDL_MessageBoxData</link><link linkend="_struct_s_d_l___mouse_button_event">SDL_MouseButtonEvent</link>
<para>Mouse button event structure (event.button.*) </para>
<link linkend="_struct_s_d_l___mouse_motion_event">SDL_MouseMotionEvent</link>
<para>Mouse motion event structure (event.motion.*) </para>
<link linkend="_struct_s_d_l___mouse_wheel_event">SDL_MouseWheelEvent</link>
<para>Mouse wheel event structure (event.wheel.*) </para>
<link linkend="_struct_s_d_l___multi_gesture_event">SDL_MultiGestureEvent</link>
<para>Multiple Finger Gesture Event (event.mgesture.*) </para>
<link linkend="_struct_s_d_l___o_s_event">SDL_OSEvent</link>
<para>OS Specific event </para>
<link linkend="_struct_s_d_l___palette">SDL_Palette</link><link linkend="_struct_s_d_l___pixel_format">SDL_PixelFormat</link><link linkend="_struct_s_d_l___point">SDL_Point</link><link linkend="_struct_s_d_l___quit_event">SDL_QuitEvent</link>
<para>The &quot;quit requested&quot; event </para>
<link linkend="_struct_s_d_l___rect">SDL_Rect</link><link linkend="_struct_s_d_l___renderer_info">SDL_RendererInfo</link><link linkend="_struct_s_d_l___r_wops">SDL_RWops</link><link linkend="_struct_s_d_l___sensor_event">SDL_SensorEvent</link>
<para>Sensor event structure (event.sensor.*) </para>
<link linkend="_struct_s_d_l___surface">SDL_Surface</link>
<para>A collection of pixels used in software blitting </para>
<link linkend="_struct_s_d_l___sys_w_m_event">SDL_SysWMEvent</link>
<para>A video driver dependent system event (event.syswm.*) This event is disabled by default, you can enable it with <link linkend="__s_d_l__events_8h_1afb772893e1c46f186fa39a4defe76df3">SDL_EventState()</link> </para>
<link linkend="_struct_s_d_l___sys_w_minfo">SDL_SysWMinfo</link><link linkend="_struct_s_d_l___sys_w_mmsg">SDL_SysWMmsg</link><link linkend="_struct_s_d_l___text_editing_event">SDL_TextEditingEvent</link>
<para>Keyboard text editing event structure (event.edit.*) </para>
<link linkend="_struct_s_d_l___text_input_event">SDL_TextInputEvent</link>
<para>Keyboard text input event structure (event.text.*) </para>
<link linkend="_struct_s_d_l___touch_finger_event">SDL_TouchFingerEvent</link>
<para>Touch finger event structure (event.tfinger.*) </para>
<link linkend="_struct_s_d_l___user_event">SDL_UserEvent</link>
<para>A user-defined event type (event.user.*) </para>
<link linkend="_struct_s_d_l__version">SDL_version</link><link linkend="_struct_s_d_l___vertex">SDL_Vertex</link><link linkend="_struct_s_d_l___window_event">SDL_WindowEvent</link>
<para>Window state change event data (event.window.*) </para>
<link linkend="_struct_s_d_l___window_shape_mode">SDL_WindowShapeMode</link>
<para>A struct that tags the <link linkend="_union_s_d_l___window_shape_params">SDL_WindowShapeParams</link> union with an enum describing the type of its contents </para>
<link linkend="_union_s_d_l___window_shape_params">SDL_WindowShapeParams</link>
<para>A union containing parameters for shaped windows </para>
<link linkend="_struct_s_d_l_test___common_state">SDLTest_CommonState</link><link linkend="_struct_s_d_l_test___crc32_context">SDLTest_Crc32Context</link><link linkend="_struct_s_d_l_test___md5_context">SDLTest_Md5Context</link><link linkend="_struct_s_d_l_test___random_context">SDLTest_RandomContext</link><link linkend="_struct_s_d_l_test___surface_image__s">SDLTest_SurfaceImage_s</link><link linkend="_struct_s_d_l_test___test_case_reference">SDLTest_TestCaseReference</link><link linkend="_struct_s_d_l_test___test_suite_reference">SDLTest_TestSuiteReference</link><link linkend="_class_r_t_1_1_simple_material">RT::SimpleMaterial</link><link linkend="_class_r_t_1_1_simple_refractive">RT::SimpleRefractive</link><link linkend="_class_r_t_1_1_texture_1_1_texture_base">RT::Texture::TextureBase</link></section>
