<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__s_d_l__assert_8h_source" xml:lang="en-US">
<title>SDL_assert.h</title>
<indexterm><primary>D:/RayTracing/include/SDL_assert.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">/*</emphasis>
2 <emphasis role="comment">&#32;&#32;Simple&#32;DirectMedia&#32;Layer</emphasis>
3 <emphasis role="comment">&#32;&#32;Copyright&#32;(C)&#32;1997-2022&#32;Sam&#32;Lantinga&#32;&lt;slouken@libsdl.org&gt;</emphasis>
4 <emphasis role="comment"></emphasis>
5 <emphasis role="comment">&#32;&#32;This&#32;software&#32;is&#32;provided&#32;&apos;as-is&apos;,&#32;without&#32;any&#32;express&#32;or&#32;implied</emphasis>
6 <emphasis role="comment">&#32;&#32;warranty.&#32;&#32;In&#32;no&#32;event&#32;will&#32;the&#32;authors&#32;be&#32;held&#32;liable&#32;for&#32;any&#32;damages</emphasis>
7 <emphasis role="comment">&#32;&#32;arising&#32;from&#32;the&#32;use&#32;of&#32;this&#32;software.</emphasis>
8 <emphasis role="comment"></emphasis>
9 <emphasis role="comment">&#32;&#32;Permission&#32;is&#32;granted&#32;to&#32;anyone&#32;to&#32;use&#32;this&#32;software&#32;for&#32;any&#32;purpose,</emphasis>
10 <emphasis role="comment">&#32;&#32;including&#32;commercial&#32;applications,&#32;and&#32;to&#32;alter&#32;it&#32;and&#32;redistribute&#32;it</emphasis>
11 <emphasis role="comment">&#32;&#32;freely,&#32;subject&#32;to&#32;the&#32;following&#32;restrictions:</emphasis>
12 <emphasis role="comment"></emphasis>
13 <emphasis role="comment">&#32;&#32;1.&#32;The&#32;origin&#32;of&#32;this&#32;software&#32;must&#32;not&#32;be&#32;misrepresented;&#32;you&#32;must&#32;not</emphasis>
14 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;claim&#32;that&#32;you&#32;wrote&#32;the&#32;original&#32;software.&#32;If&#32;you&#32;use&#32;this&#32;software</emphasis>
15 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;in&#32;a&#32;product,&#32;an&#32;acknowledgment&#32;in&#32;the&#32;product&#32;documentation&#32;would&#32;be</emphasis>
16 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;appreciated&#32;but&#32;is&#32;not&#32;required.</emphasis>
17 <emphasis role="comment">&#32;&#32;2.&#32;Altered&#32;source&#32;versions&#32;must&#32;be&#32;plainly&#32;marked&#32;as&#32;such,&#32;and&#32;must&#32;not&#32;be</emphasis>
18 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;misrepresented&#32;as&#32;being&#32;the&#32;original&#32;software.</emphasis>
19 <emphasis role="comment">&#32;&#32;3.&#32;This&#32;notice&#32;may&#32;not&#32;be&#32;removed&#32;or&#32;altered&#32;from&#32;any&#32;source&#32;distribution.</emphasis>
20 <emphasis role="comment">*/</emphasis>
21 
22 <emphasis role="preprocessor">#ifndef&#32;SDL_assert_h_</emphasis>
23 <emphasis role="preprocessor">#define&#32;SDL_assert_h_</emphasis>
24 
25 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__s_d_l__config_8h">SDL_config.h</link>&quot;</emphasis>
26 
27 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_begin__code_8h">begin_code.h</link>&quot;</emphasis>
28 <emphasis role="comment">/*&#32;Set&#32;up&#32;for&#32;C&#32;function&#32;definitions,&#32;even&#32;when&#32;using&#32;C++&#32;*/</emphasis>
29 <emphasis role="preprocessor">#ifdef&#32;__cplusplus</emphasis>
30 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="stringliteral">&quot;C&quot;</emphasis>&#32;{
31 <emphasis role="preprocessor">#endif</emphasis>
32 
33 <emphasis role="preprocessor">#ifndef&#32;SDL_ASSERT_LEVEL</emphasis>
34 <emphasis role="preprocessor">#ifdef&#32;SDL_DEFAULT_ASSERT_LEVEL</emphasis>
35 <emphasis role="preprocessor">#define&#32;SDL_ASSERT_LEVEL&#32;SDL_DEFAULT_ASSERT_LEVEL</emphasis>
36 <emphasis role="preprocessor">#elif&#32;defined(_DEBUG)&#32;||&#32;defined(DEBUG)&#32;||&#32;\</emphasis>
37 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;(defined(__GNUC__)&#32;&amp;&amp;&#32;!defined(__OPTIMIZE__))</emphasis>
38 <emphasis role="preprocessor">#define&#32;SDL_ASSERT_LEVEL&#32;2</emphasis>
39 <emphasis role="preprocessor">#else</emphasis>
40 <emphasis role="preprocessor">#define&#32;SDL_ASSERT_LEVEL&#32;1</emphasis>
41 <emphasis role="preprocessor">#endif</emphasis>
42 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;SDL_ASSERT_LEVEL&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
43 
44 <emphasis role="comment">/*</emphasis>
45 <emphasis role="comment">These&#32;are&#32;macros&#32;and&#32;not&#32;first&#32;class&#32;functions&#32;so&#32;that&#32;the&#32;debugger&#32;breaks</emphasis>
46 <emphasis role="comment">on&#32;the&#32;assertion&#32;line&#32;and&#32;not&#32;in&#32;some&#32;random&#32;guts&#32;of&#32;SDL,&#32;and&#32;so&#32;each</emphasis>
47 <emphasis role="comment">assert&#32;can&#32;have&#32;unique&#32;static&#32;variables&#32;associated&#32;with&#32;it.</emphasis>
48 <emphasis role="comment">*/</emphasis>
49 
50 <emphasis role="preprocessor">#if&#32;defined(_MSC_VER)</emphasis>
51 <emphasis role="comment">/*&#32;Don&apos;t&#32;include&#32;intrin.h&#32;here&#32;because&#32;it&#32;contains&#32;C++&#32;code&#32;*/</emphasis>
52 &#32;&#32;&#32;&#32;<emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;__cdecl&#32;__debugbreak(<emphasis role="keywordtype">void</emphasis>);
53 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;SDL_TriggerBreakpoint()&#32;__debugbreak()</emphasis>
54 <emphasis role="preprocessor">#elif&#32;(&#32;(!defined(__NACL__))&#32;&amp;&amp;&#32;((defined(__GNUC__)&#32;||&#32;defined(__clang__))&#32;&amp;&amp;&#32;(defined(__i386__)&#32;||&#32;defined(__x86_64__)))&#32;)</emphasis>
55 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;SDL_TriggerBreakpoint()&#32;__asm__&#32;__volatile__&#32;(&#32;&quot;int&#32;$3\n\t&quot;</emphasis>&#32;)
56 <emphasis role="preprocessor">#elif&#32;(&#32;defined(__APPLE__)&#32;&amp;&amp;&#32;(defined(__arm64__)&#32;||&#32;defined(__aarch64__))&#32;)&#32;&#32;</emphasis><emphasis role="comment">/*&#32;this&#32;might&#32;work&#32;on&#32;other&#32;ARM&#32;targets,&#32;but&#32;this&#32;is&#32;a&#32;known&#32;quantity...&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
57 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;SDL_TriggerBreakpoint()&#32;__asm__&#32;__volatile__&#32;(&#32;&quot;brk&#32;#22\n\t&quot;</emphasis>&#32;)
58 <emphasis role="preprocessor">#elif&#32;defined(__APPLE__)&#32;&amp;&amp;&#32;defined(__arm__)</emphasis>
59 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;SDL_TriggerBreakpoint()&#32;__asm__&#32;__volatile__&#32;(&#32;&quot;bkpt&#32;#22\n\t&quot;</emphasis>&#32;)
60 <emphasis role="preprocessor">#elif&#32;defined(__386__)&#32;&amp;&amp;&#32;defined(__WATCOMC__)</emphasis>
61 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;SDL_TriggerBreakpoint()&#32;{&#32;_asm&#32;{&#32;int&#32;0x03&#32;}&#32;}</emphasis>
62 <emphasis role="preprocessor">#elif&#32;defined(HAVE_SIGNAL_H)&#32;&amp;&amp;&#32;!defined(__WATCOMC__)</emphasis>
63 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;signal.h&gt;</emphasis>
64 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;SDL_TriggerBreakpoint()&#32;raise(SIGTRAP)</emphasis>
65 <emphasis role="preprocessor">#else</emphasis>
66 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;How&#32;do&#32;we&#32;trigger&#32;breakpoints&#32;on&#32;this&#32;platform?&#32;*/</emphasis>
67 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;SDL_TriggerBreakpoint()</emphasis>
68 <emphasis role="preprocessor">#endif</emphasis>
69 
70 <emphasis role="preprocessor">#if&#32;defined(__STDC_VERSION__)&#32;&amp;&amp;&#32;(__STDC_VERSION__&#32;&gt;=&#32;199901L)&#32;</emphasis><emphasis role="comment">/*&#32;C99&#32;supports&#32;__func__&#32;as&#32;a&#32;standard.&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
71 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;SDL_FUNCTION&#32;__func__</emphasis>
72 <emphasis role="preprocessor">#elif&#32;((__GNUC__&#32;&gt;=&#32;2)&#32;||&#32;defined(_MSC_VER)&#32;||&#32;defined&#32;(__WATCOMC__))</emphasis>
73 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;SDL_FUNCTION&#32;__FUNCTION__</emphasis>
74 <emphasis role="preprocessor">#else</emphasis>
75 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;SDL_FUNCTION&#32;&quot;???&quot;</emphasis>
76 <emphasis role="preprocessor">#endif</emphasis>
77 <emphasis role="preprocessor">#define&#32;SDL_FILE&#32;&#32;&#32;&#32;__FILE__</emphasis>
78 <emphasis role="preprocessor">#define&#32;SDL_LINE&#32;&#32;&#32;&#32;__LINE__</emphasis>
79 
80 <emphasis role="comment">/*</emphasis>
81 <emphasis role="comment">sizeof&#32;(x)&#32;makes&#32;the&#32;compiler&#32;still&#32;parse&#32;the&#32;expression&#32;even&#32;without</emphasis>
82 <emphasis role="comment">assertions&#32;enabled,&#32;so&#32;the&#32;code&#32;is&#32;always&#32;checked&#32;at&#32;compile&#32;time,&#32;but</emphasis>
83 <emphasis role="comment">doesn&apos;t&#32;actually&#32;generate&#32;code&#32;for&#32;it,&#32;so&#32;there&#32;are&#32;no&#32;side&#32;effects&#32;or</emphasis>
84 <emphasis role="comment">expensive&#32;checks&#32;at&#32;run&#32;time,&#32;just&#32;the&#32;constant&#32;size&#32;of&#32;what&#32;x&#32;WOULD&#32;be,</emphasis>
85 <emphasis role="comment">which&#32;presumably&#32;gets&#32;optimized&#32;out&#32;as&#32;unused.</emphasis>
86 <emphasis role="comment">This&#32;also&#32;solves&#32;the&#32;problem&#32;of...</emphasis>
87 <emphasis role="comment"></emphasis>
88 <emphasis role="comment">&#32;&#32;&#32;&#32;int&#32;somevalue&#32;=&#32;blah();</emphasis>
89 <emphasis role="comment">&#32;&#32;&#32;&#32;SDL_assert(somevalue&#32;==&#32;1);</emphasis>
90 <emphasis role="comment"></emphasis>
91 <emphasis role="comment">...which&#32;would&#32;cause&#32;compiles&#32;to&#32;complain&#32;that&#32;somevalue&#32;is&#32;unused&#32;if&#32;we</emphasis>
92 <emphasis role="comment">disable&#32;assertions.</emphasis>
93 <emphasis role="comment">*/</emphasis>
94 
95 <emphasis role="comment">/*&#32;&quot;while&#32;(0,0)&quot;&#32;fools&#32;Microsoft&apos;s&#32;compiler&apos;s&#32;/W4&#32;warning&#32;level&#32;into&#32;thinking</emphasis>
96 <emphasis role="comment">&#32;&#32;&#32;&#32;this&#32;condition&#32;isn&apos;t&#32;constant.&#32;And&#32;looks&#32;like&#32;an&#32;owl&apos;s&#32;face!&#32;*/</emphasis>
97 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER&#32;&#32;</emphasis><emphasis role="comment">/*&#32;stupid&#32;/W4&#32;warnings.&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
98 <emphasis role="preprocessor">#define&#32;SDL_NULL_WHILE_LOOP_CONDITION&#32;(0,0)</emphasis>
99 <emphasis role="preprocessor">#else</emphasis>
100 <emphasis role="preprocessor">#define&#32;SDL_NULL_WHILE_LOOP_CONDITION&#32;(0)</emphasis>
101 <emphasis role="preprocessor">#endif</emphasis>
102 
103 <emphasis role="preprocessor">#define&#32;SDL_disabled_assert(condition)&#32;\</emphasis>
104 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;do&#32;{&#32;(void)&#32;sizeof&#32;((condition));&#32;}&#32;while&#32;(SDL_NULL_WHILE_LOOP_CONDITION)</emphasis>
105 
106 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">enum</emphasis>
107 {
108 &#32;&#32;&#32;&#32;<link linkend="__s_d_l__assert_8h_1a06d6a46a43cc7b34764c37398573ef1aa0ccce3254f1d981283e0792cd70437df">SDL_ASSERTION_RETRY</link>,&#32;&#32;
109 &#32;&#32;&#32;&#32;<link linkend="__s_d_l__assert_8h_1a06d6a46a43cc7b34764c37398573ef1aace6f6a41a6b303e220828fbe25b5d2a6">SDL_ASSERTION_BREAK</link>,&#32;&#32;
110 &#32;&#32;&#32;&#32;<link linkend="__s_d_l__assert_8h_1a06d6a46a43cc7b34764c37398573ef1aa4cf9444bddf799c7638bbcc9c542799c">SDL_ASSERTION_ABORT</link>,&#32;&#32;
111 &#32;&#32;&#32;&#32;<link linkend="__s_d_l__assert_8h_1a06d6a46a43cc7b34764c37398573ef1aa76eace7638278c093e24d78a91d6d772">SDL_ASSERTION_IGNORE</link>,&#32;&#32;
112 &#32;&#32;&#32;&#32;<link linkend="__s_d_l__assert_8h_1a06d6a46a43cc7b34764c37398573ef1aaf8d1af4dc16f160217acadf2b8585fea">SDL_ASSERTION_ALWAYS_IGNORE</link>&#32;&#32;
113 }&#32;<link linkend="__s_d_l__assert_8h_1a06d6a46a43cc7b34764c37398573ef1a">SDL_AssertState</link>;
114 
115 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_s_d_l___assert_data">SDL_AssertData</link>
116 {
117 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_s_d_l___assert_data_1a825e1c7772fe24afad33d0afc42cf04c">always_ignore</link>;
118 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_s_d_l___assert_data_1a230bbcc2d115aab04cf817773e08eb5b">trigger_count</link>;
119 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="_struct_s_d_l___assert_data_1aec6d372462fa8c94a9d04c1168cd38c9">condition</link>;
120 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="_struct_s_d_l___assert_data_1acf27f593e6a436386d2cbcf826cf1ef7">filename</link>;
121 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_s_d_l___assert_data_1ad026d8573970d2402230d5fa3c550b0f">linenum</link>;
122 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="_struct_s_d_l___assert_data_1a4913c57d4affb813feea82fc5f48a25c">function</link>;
123 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_s_d_l___assert_data">SDL_AssertData</link>&#32;*<link linkend="_struct_s_d_l___assert_data_1a2081dcf06dce4df497e423bccddfc099">next</link>;
124 }&#32;<link linkend="__s_d_l__assert_8h_1afc62064b31b91c078b2960270e29801e">SDL_AssertData</link>;
125 
126 <emphasis role="preprocessor">#if&#32;(SDL_ASSERT_LEVEL&#32;&gt;&#32;0)</emphasis>
127 
128 <emphasis role="comment">/*&#32;Never&#32;call&#32;this&#32;directly.&#32;Use&#32;the&#32;SDL_assert*&#32;macros.&#32;*/</emphasis>
129 <emphasis role="keyword">extern</emphasis>&#32;<link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link>&#32;<link linkend="__s_d_l__assert_8h_1a06d6a46a43cc7b34764c37398573ef1a">SDL_AssertState</link>&#32;<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link>&#32;<link linkend="__s_d_l__assert_8h_1a01ef51d076f7e9c3839fff4161a16550">SDL_ReportAssertion</link>(<link linkend="_struct_s_d_l___assert_data">SDL_AssertData</link>&#32;*,
130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*,
131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*,&#32;<emphasis role="keywordtype">int</emphasis>)
132 <emphasis role="preprocessor">#if&#32;defined(__clang__)</emphasis>
133 <emphasis role="preprocessor">#if&#32;__has_feature(attribute_analyzer_noreturn)</emphasis>
134 <emphasis role="comment">/*&#32;this&#32;tells&#32;Clang&apos;s&#32;static&#32;analysis&#32;that&#32;we&apos;re&#32;a&#32;custom&#32;assert&#32;function,</emphasis>
135 <emphasis role="comment">&#32;&#32;&#32;and&#32;that&#32;the&#32;analyzer&#32;should&#32;assume&#32;the&#32;condition&#32;was&#32;always&#32;true&#32;past&#32;this</emphasis>
136 <emphasis role="comment">&#32;&#32;&#32;SDL_assert&#32;test.&#32;*/</emphasis>
137 &#32;&#32;&#32;__attribute__((analyzer_noreturn))
138 <emphasis role="preprocessor">#endif</emphasis>
139 <emphasis role="preprocessor">#endif</emphasis>
140 ;
141 
142 <emphasis role="comment">/*&#32;the&#32;do&#32;{}&#32;while(0)&#32;avoids&#32;dangling&#32;else&#32;problems:</emphasis>
143 <emphasis role="comment">&#32;&#32;&#32;&#32;if&#32;(x)&#32;SDL_assert(y);&#32;else&#32;blah();</emphasis>
144 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;...&#32;without&#32;the&#32;do/while,&#32;the&#32;&quot;else&quot;&#32;could&#32;attach&#32;to&#32;this&#32;macro&apos;s&#32;&quot;if&quot;.</emphasis>
145 <emphasis role="comment">&#32;&#32;&#32;We&#32;try&#32;to&#32;handle&#32;just&#32;the&#32;minimum&#32;we&#32;need&#32;here&#32;in&#32;a&#32;macro...the&#32;loop,</emphasis>
146 <emphasis role="comment">&#32;&#32;&#32;the&#32;static&#32;vars,&#32;and&#32;break&#32;points.&#32;The&#32;heavy&#32;lifting&#32;is&#32;handled&#32;in</emphasis>
147 <emphasis role="comment">&#32;&#32;&#32;SDL_ReportAssertion(),&#32;in&#32;SDL_assert.c.</emphasis>
148 <emphasis role="comment">*/</emphasis>
149 <emphasis role="preprocessor">#define&#32;SDL_enabled_assert(condition)&#32;\</emphasis>
150 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;do&#32;{&#32;\</emphasis>
151 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;while&#32;(&#32;!(condition)&#32;)&#32;{&#32;\</emphasis>
152 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static&#32;struct&#32;SDL_AssertData&#32;sdl_assert_data&#32;=&#32;{&#32;\</emphasis>
153 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,&#32;0,&#32;#condition,&#32;0,&#32;0,&#32;0,&#32;0&#32;\</emphasis>
154 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};&#32;\</emphasis>
155 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;SDL_AssertState&#32;sdl_assert_state&#32;=&#32;SDL_ReportAssertion(&amp;sdl_assert_data,&#32;SDL_FUNCTION,&#32;SDL_FILE,&#32;SDL_LINE);&#32;\</emphasis>
156 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(sdl_assert_state&#32;==&#32;SDL_ASSERTION_RETRY)&#32;{&#32;\</emphasis>
157 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;continue;&#32;</emphasis><emphasis role="comment">/*&#32;go&#32;again.&#32;*/</emphasis><emphasis role="preprocessor">&#32;\</emphasis>
158 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;else&#32;if&#32;(sdl_assert_state&#32;==&#32;SDL_ASSERTION_BREAK)&#32;{&#32;\</emphasis>
159 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SDL_TriggerBreakpoint();&#32;\</emphasis>
160 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;\</emphasis>
161 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;break;&#32;</emphasis><emphasis role="comment">/*&#32;not&#32;retrying.&#32;*/</emphasis><emphasis role="preprocessor">&#32;\</emphasis>
162 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;\</emphasis>
163 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}&#32;while&#32;(SDL_NULL_WHILE_LOOP_CONDITION)</emphasis>
164 
165 <emphasis role="preprocessor">#endif&#32;&#32;</emphasis><emphasis role="comment">/*&#32;enabled&#32;assertions&#32;support&#32;code&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
166 
167 <emphasis role="comment">/*&#32;Enable&#32;various&#32;levels&#32;of&#32;assertions.&#32;*/</emphasis>
168 <emphasis role="preprocessor">#if&#32;SDL_ASSERT_LEVEL&#32;==&#32;0&#32;&#32;&#32;</emphasis><emphasis role="comment">/*&#32;assertions&#32;disabled&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
169 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;SDL_assert(condition)&#32;SDL_disabled_assert(condition)</emphasis>
170 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;SDL_assert_release(condition)&#32;SDL_disabled_assert(condition)</emphasis>
171 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;SDL_assert_paranoid(condition)&#32;SDL_disabled_assert(condition)</emphasis>
172 <emphasis role="preprocessor">#elif&#32;SDL_ASSERT_LEVEL&#32;==&#32;1&#32;&#32;</emphasis><emphasis role="comment">/*&#32;release&#32;settings.&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
173 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;SDL_assert(condition)&#32;SDL_disabled_assert(condition)</emphasis>
174 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;SDL_assert_release(condition)&#32;SDL_enabled_assert(condition)</emphasis>
175 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;SDL_assert_paranoid(condition)&#32;SDL_disabled_assert(condition)</emphasis>
176 <emphasis role="preprocessor">#elif&#32;SDL_ASSERT_LEVEL&#32;==&#32;2&#32;&#32;</emphasis><emphasis role="comment">/*&#32;normal&#32;settings.&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
177 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;SDL_assert(condition)&#32;SDL_enabled_assert(condition)</emphasis>
178 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;SDL_assert_release(condition)&#32;SDL_enabled_assert(condition)</emphasis>
179 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;SDL_assert_paranoid(condition)&#32;SDL_disabled_assert(condition)</emphasis>
180 <emphasis role="preprocessor">#elif&#32;SDL_ASSERT_LEVEL&#32;==&#32;3&#32;&#32;</emphasis><emphasis role="comment">/*&#32;paranoid&#32;settings.&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
181 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;SDL_assert(condition)&#32;SDL_enabled_assert(condition)</emphasis>
182 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;SDL_assert_release(condition)&#32;SDL_enabled_assert(condition)</emphasis>
183 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;SDL_assert_paranoid(condition)&#32;SDL_enabled_assert(condition)</emphasis>
184 <emphasis role="preprocessor">#else</emphasis>
185 <emphasis role="preprocessor">#&#32;&#32;&#32;error&#32;Unknown&#32;assertion&#32;level.</emphasis>
186 <emphasis role="preprocessor">#endif</emphasis>
187 
188 <emphasis role="comment">/*&#32;this&#32;assertion&#32;is&#32;never&#32;disabled&#32;at&#32;any&#32;level.&#32;*/</emphasis>
189 <emphasis role="preprocessor">#define&#32;SDL_assert_always(condition)&#32;SDL_enabled_assert(condition)</emphasis>
190 
191 
200 <emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__s_d_l__assert_8h_1a06d6a46a43cc7b34764c37398573ef1a">SDL_AssertState</link>&#32;(<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link>&#32;*<link linkend="__s_d_l__assert_8h_1aa63dc5ca0d954add6893512583b08071">SDL_AssertionHandler</link>)(
201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_s_d_l___assert_data">SDL_AssertData</link>*&#32;<link linkend="__s_d_l__opengl_8h_1a2e335d56e2846b0fea47eed068b2d34a">data</link>,&#32;<emphasis role="keywordtype">void</emphasis>*&#32;userdata);
202 
224 <emphasis role="keyword">extern</emphasis>&#32;<link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link>&#32;<link linkend="__s_d_l__assert_8h_1a12dc8edd25f52f3add69369b2978e689">SDL_SetAssertionHandler</link>(
225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__s_d_l__assert_8h_1aa63dc5ca0d954add6893512583b08071">SDL_AssertionHandler</link>&#32;handler,
226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*userdata);
227 
243 <emphasis role="keyword">extern</emphasis>&#32;<link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link>&#32;<link linkend="__s_d_l__assert_8h_1aa63dc5ca0d954add6893512583b08071">SDL_AssertionHandler</link>&#32;<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link>&#32;<link linkend="__s_d_l__assert_8h_1a34dc4d9332bcdc32b3a0baa3fc2966bc">SDL_GetDefaultAssertionHandler</link>(<emphasis role="keywordtype">void</emphasis>);
244 
266 <emphasis role="keyword">extern</emphasis>&#32;<link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link>&#32;<link linkend="__s_d_l__assert_8h_1aa63dc5ca0d954add6893512583b08071">SDL_AssertionHandler</link>&#32;<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link>&#32;<link linkend="__s_d_l__assert_8h_1a61c95d5aa8a1bd701e829b0842e04f07">SDL_GetAssertionHandler</link>(<emphasis role="keywordtype">void</emphasis>&#32;**puserdata);
267 
294 <emphasis role="keyword">extern</emphasis>&#32;<link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link>&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_s_d_l___assert_data">SDL_AssertData</link>&#32;*&#32;<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link>&#32;<link linkend="__s_d_l__assert_8h_1a59366c845267d9d6c8f214e096f7b45c">SDL_GetAssertionReport</link>(<emphasis role="keywordtype">void</emphasis>);
295 
308 <emphasis role="keyword">extern</emphasis>&#32;<link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link>&#32;<link linkend="__s_d_l__assert_8h_1abdbad45c4ede1953c784a7b312349a32">SDL_ResetAssertionReport</link>(<emphasis role="keywordtype">void</emphasis>);
309 
310 
311 <emphasis role="comment">/*&#32;these&#32;had&#32;wrong&#32;naming&#32;conventions&#32;until&#32;2.0.4.&#32;Please&#32;update&#32;your&#32;app!&#32;*/</emphasis>
312 <emphasis role="preprocessor">#define&#32;SDL_assert_state&#32;SDL_AssertState</emphasis>
313 <emphasis role="preprocessor">#define&#32;SDL_assert_data&#32;SDL_AssertData</emphasis>
314 
315 
316 <emphasis role="comment">/*&#32;Ends&#32;C&#32;function&#32;definitions&#32;when&#32;using&#32;C++&#32;*/</emphasis>
317 <emphasis role="preprocessor">#ifdef&#32;__cplusplus</emphasis>
318 }
319 <emphasis role="preprocessor">#endif</emphasis>
320 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_close__code_8h">close_code.h</link>&quot;</emphasis>
321 
322 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;SDL_assert_h_&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
323 
324 <emphasis role="comment">/*&#32;vi:&#32;set&#32;ts=4&#32;sw=4&#32;expandtab:&#32;*/</emphasis>
</programlisting></section>
