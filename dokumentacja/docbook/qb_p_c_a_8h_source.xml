<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_qb_p_c_a_8h_source" xml:lang="en-US">
<title>qbPCA.h</title>
<indexterm><primary>D:/RayTracing/RayTrace/qbLinAlg/qbPCA.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;qbLinAlg&#32;linear&#32;algebra&#32;library.</emphasis>
2 <emphasis role="comment">//&#32;Copyright&#32;(c)&#32;2021&#32;Michael&#32;Bennett</emphasis>
3 <emphasis role="comment">//&#32;MIT&#32;license</emphasis>
4 
5 <emphasis role="preprocessor">#ifndef&#32;QBPCA_H</emphasis>
6 <emphasis role="preprocessor">#define&#32;QBPCA_H</emphasis>
7 
8 <emphasis role="preprocessor">#include&#32;&lt;stdexcept&gt;</emphasis>
9 <emphasis role="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
10 <emphasis role="preprocessor">#include&#32;&lt;iomanip&gt;</emphasis>
11 <emphasis role="preprocessor">#include&#32;&lt;math.h&gt;</emphasis>
12 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
13 <emphasis role="preprocessor">#include&#32;&lt;algorithm&gt;</emphasis>
14 
15 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_qb_matrix_8h">qbMatrix.h</link>&quot;</emphasis>
16 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_qb_vector_8h">qbVector.h</link>&quot;</emphasis>
17 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_qb_e_i_g_8h">qbEIG.h</link>&quot;</emphasis>
18 
19 <emphasis role="comment">//&#32;Define&#32;error&#32;codes.</emphasis>
20 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_qb_p_c_a_8h_1a89d6ef3ada78889d41961ce39a19b714">QBPCA_MATRIXNOTSQUARE</link>&#32;=&#32;-1;
21 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_qb_p_c_a_8h_1a02940f783282efeef7d7b823be4ebb61">QBPCA_MATRIXNOTSYMMETRIC</link>&#32;=&#32;-2;
22 
23 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespaceqb_p_c_a">qbPCA</link>
24 {
25 
26 <emphasis role="comment">//&#32;Function&#32;to&#32;compute&#32;the&#32;column&#32;means.</emphasis>
27 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
28 std::vector&lt;T&gt;&#32;<link linkend="_namespaceqb_p_c_a_1ade6a2d48ed6e5d5bbd7db9dc515fbfa2">ComputeColumnMeans</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classqb_matrix2">qbMatrix2&lt;T&gt;</link>&#32;&amp;inputData)
29 {
30 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Determine&#32;the&#32;size&#32;of&#32;the&#32;input&#32;data.</emphasis>
31 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;numRows&#32;=&#32;inputData.<link linkend="_classqb_matrix2_1a1626b647c5268a9e64f4651bcc4b8c6e">GetNumRows</link>();
32 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;numCols&#32;=&#32;inputData.<link linkend="_classqb_matrix2_1ab20362d8fc58a4b8da0910f94c3de2c3">GetNumCols</link>();
33 &#32;&#32;&#32;&#32;
34 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Create&#32;a&#32;vector&#32;for&#32;output.</emphasis>
35 &#32;&#32;&#32;&#32;std::vector&lt;T&gt;&#32;output;&#32;&#32;
36 &#32;&#32;&#32;&#32;
37 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Loop&#32;through&#32;and&#32;compute&#32;means.</emphasis>
38 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;j=0;&#32;j&lt;numCols;&#32;++j)
39 &#32;&#32;&#32;&#32;{
40 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;cumulativeSum&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(0.0);
41 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i=0;&#32;i&lt;numRows;&#32;++i)
42 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cumulativeSum&#32;+=&#32;inputData.<link linkend="_classqb_matrix2_1a62ddf209105dffe6133461b273a7309f">GetElement</link>(i,j);
43 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
44 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output.push_back(cumulativeSum&#32;/&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(numRows));
45 &#32;&#32;&#32;&#32;}
46 &#32;&#32;&#32;&#32;
47 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;output;
48 }
49 
50 <emphasis role="comment">//&#32;Function&#32;to&#32;subtract&#32;the&#32;column&#32;means.</emphasis>
51 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
52 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespaceqb_p_c_a_1a5a22357f0fe78194175135e2adc1045e">SubtractColumnMeans</link>(<link linkend="_classqb_matrix2">qbMatrix2&lt;T&gt;</link>&#32;&amp;inputData,&#32;std::vector&lt;T&gt;&#32;&amp;columnMeans)
53 {
54 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Determine&#32;the&#32;size&#32;of&#32;the&#32;input&#32;data.</emphasis>
55 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;numRows&#32;=&#32;inputData.<link linkend="_classqb_matrix2_1a1626b647c5268a9e64f4651bcc4b8c6e">GetNumRows</link>();
56 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;numCols&#32;=&#32;inputData.<link linkend="_classqb_matrix2_1ab20362d8fc58a4b8da0910f94c3de2c3">GetNumCols</link>();
57 &#32;&#32;&#32;&#32;
58 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Loop&#32;through&#32;and&#32;subtract&#32;the&#32;means.</emphasis>
59 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;j=0;&#32;j&lt;numCols;&#32;++j)
60 &#32;&#32;&#32;&#32;{
61 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i=0;&#32;i&lt;numRows;&#32;++i)
62 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inputData.<link linkend="_classqb_matrix2_1a1c6693503483942d5a619a0cf470e8b5">SetElement</link>(i,j,&#32;inputData.<link linkend="_classqb_matrix2_1a62ddf209105dffe6133461b273a7309f">GetElement</link>(i,j)&#32;-&#32;columnMeans.at(j));
63 &#32;&#32;&#32;&#32;}&#32;&#32;&#32;
64 }
65 
66 <emphasis role="comment">//&#32;Function&#32;to&#32;compute&#32;the&#32;covaraince&#32;matrix.</emphasis>
67 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
68 <link linkend="_classqb_matrix2">qbMatrix2&lt;T&gt;</link>&#32;<link linkend="_namespaceqb_p_c_a_1a393fa03dff91c84ac6c53aa8bd4141b7">ComputeCovariance</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classqb_matrix2">qbMatrix2&lt;T&gt;</link>&#32;&amp;X)
69 {
70 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Compute&#32;the&#32;covariance&#32;matrix.</emphasis>
71 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Note&#32;that&#32;here&#32;we&#32;use&#32;X&apos;X,&#32;rather&#32;than&#32;XX&apos;&#32;as&#32;is&#32;the&#32;usual&#32;case.</emphasis>
72 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;This&#32;is&#32;because&#32;we&#32;are&#32;requiring&#32;our&#32;data&#32;to&#32;be&#32;arranged&#32;with&#32;one&#32;</emphasis>
73 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;column&#32;(p)&#32;for&#32;each&#32;variable,&#32;with&#32;one&#32;row&#32;(k)&#32;for&#32;each&#32;observation.&#32;If</emphasis>
74 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;we&#32;computed&#32;XX&apos;,&#32;the&#32;result&#32;would&#32;be&#32;a&#32;[k&#32;x&#32;k]&#32;matrix.&#32;The&#32;covariance</emphasis>
75 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;matrix&#32;should&#32;be&#32;[p&#32;x&#32;p],&#32;so&#32;we&#32;need&#32;to&#32;transpose,&#32;hence&#32;the&#32;use&#32;of</emphasis>
76 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;X&apos;X.&#32;*/</emphasis>
77 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;numRows&#32;=&#32;X.<link linkend="_classqb_matrix2_1a1626b647c5268a9e64f4651bcc4b8c6e">GetNumRows</link>();
78 &#32;&#32;&#32;&#32;<link linkend="_classqb_matrix2">qbMatrix2&lt;T&gt;</link>&#32;covX&#32;=&#32;(<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(1.0)&#32;/&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(numRows&#32;-&#32;1))&#32;*&#32;(X.<link linkend="_classqb_matrix2_1a6235a35daf5fa20a9ebc7ed91d8a94a3">Transpose</link>()&#32;*&#32;X);
79 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;covX;
80 }
81 
82 <emphasis role="comment">//&#32;Function&#32;to&#32;compute&#32;the&#32;eigenvectors&#32;of&#32;the&#32;covariance&#32;matrix.</emphasis>
83 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
84 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_namespaceqb_p_c_a_1aa00b5e4dee58ccfa5ce763a873b96c2f">ComputeEigenvectors</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classqb_matrix2">qbMatrix2&lt;T&gt;</link>&#32;&amp;covarianceMatrix,&#32;<link linkend="_classqb_matrix2">qbMatrix2&lt;T&gt;</link>&#32;&amp;eigenvectors)
85 {
86 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Copy&#32;the&#32;input&#32;matrix.</emphasis>
87 &#32;&#32;&#32;&#32;<link linkend="_classqb_matrix2">qbMatrix2&lt;T&gt;</link>&#32;X&#32;=&#32;covarianceMatrix;
88 
89 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;covariance&#32;matrix&#32;must&#32;be&#32;square&#32;and&#32;symmetric.</emphasis>
90 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!X.<link linkend="_classqb_matrix2_1ae3e42b917e3127cab56b7a48faff25c3">IsSquare</link>())
91 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_qb_p_c_a_8h_1a89d6ef3ada78889d41961ce39a19b714">QBPCA_MATRIXNOTSQUARE</link>;
92 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
93 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Verify&#32;that&#32;the&#32;matrix&#32;is&#32;symmetric.</emphasis>
94 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!X.<link linkend="_classqb_matrix2_1a38c5e541fec532600806ac4fd8afecb2">IsSymmetric</link>())
95 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_qb_p_c_a_8h_1a02940f783282efeef7d7b823be4ebb61">QBPCA_MATRIXNOTSYMMETRIC</link>;
96 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
97 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Compute&#32;the&#32;eignvalues.</emphasis>
98 &#32;&#32;&#32;&#32;std::vector&lt;T&gt;&#32;eigenValues;
99 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;returnStatus&#32;=&#32;<link linkend="_qb_e_i_g_8h_1a9212bbed3a221741a725494e8c7367d1">qbEigQR</link>(X,&#32;eigenValues);
100 
101 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Sort&#32;the&#32;eigenvalues.</emphasis>
102 &#32;&#32;&#32;&#32;std::sort(eigenValues.begin(),&#32;eigenValues.end());
103 &#32;&#32;&#32;&#32;std::reverse(eigenValues.begin(),&#32;eigenValues.end());
104 
105 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Compute&#32;the&#32;eigenvector&#32;for&#32;each&#32;eigenvalue.</emphasis>
106 &#32;&#32;&#32;&#32;<link linkend="_classqb_vector">qbVector&lt;T&gt;</link>&#32;eV(X.<link linkend="_classqb_matrix2_1ab20362d8fc58a4b8da0910f94c3de2c3">GetNumCols</link>());
107 &#32;&#32;&#32;&#32;<link linkend="_classqb_matrix2">qbMatrix2&lt;T&gt;</link>&#32;eVM(X.<link linkend="_classqb_matrix2_1a1626b647c5268a9e64f4651bcc4b8c6e">GetNumRows</link>(),&#32;X.<link linkend="_classqb_matrix2_1ab20362d8fc58a4b8da0910f94c3de2c3">GetNumCols</link>());
108 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;j=0;&#32;j&lt;eigenValues.size();&#32;++j)
109 &#32;&#32;&#32;&#32;{
110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;eig&#32;=&#32;eigenValues.at(j);
111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;returnStatus2&#32;=&#32;qbInvPIt&lt;T&gt;(X,&#32;eig,&#32;eV);
112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i=0;&#32;i&lt;eV.<link linkend="_classqb_vector_1a4b1f24a8ae47ef9019109c23c56fc9c4">GetNumDims</link>();&#32;++i)
113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;eVM.<link linkend="_classqb_matrix2_1a1c6693503483942d5a619a0cf470e8b5">SetElement</link>(i,&#32;j,&#32;eV.<link linkend="_classqb_vector_1adadd6ca87273a15f57a5e1d6ae15583b">GetElement</link>(i));
114 &#32;&#32;&#32;&#32;}
115 &#32;&#32;&#32;&#32;
116 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Return&#32;the&#32;eigenvectors.</emphasis>
117 &#32;&#32;&#32;&#32;eigenvectors&#32;=&#32;eVM;
118 
119 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Return&#32;the&#32;final&#32;return&#32;status.&#32;&#32;</emphasis>
120 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;returnStatus;
121 }
122 
123 <emphasis role="comment">/*&#32;Function&#32;to&#32;compute&#32;the&#32;principal&#32;components&#32;of&#32;the&#32;supplied&#32;data.&#32;*/</emphasis>
124 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
125 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_namespaceqb_p_c_a_1aa99d4f272173791d49b268a9dd151fc6">qbPCA</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classqb_matrix2">qbMatrix2&lt;T&gt;</link>&#32;&amp;inputData,&#32;<link linkend="_classqb_matrix2">qbMatrix2&lt;T&gt;</link>&#32;&amp;outputComponents)
126 {
127 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Make&#32;a&#32;copy&#32;of&#32;the&#32;input&#32;matrix.</emphasis>
128 &#32;&#32;&#32;&#32;<link linkend="_classqb_matrix2">qbMatrix2&lt;T&gt;</link>&#32;X&#32;=&#32;inputData;
129 &#32;&#32;&#32;&#32;
130 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Compute&#32;the&#32;mean&#32;of&#32;each&#32;column&#32;of&#32;X.</emphasis>
131 &#32;&#32;&#32;&#32;std::vector&lt;T&gt;&#32;columnMeans&#32;=&#32;<link linkend="_namespaceqb_p_c_a_1ade6a2d48ed6e5d5bbd7db9dc515fbfa2">ComputeColumnMeans</link>(X);
132 &#32;&#32;&#32;&#32;
133 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Subtract&#32;the&#32;column&#32;means&#32;from&#32;the&#32;data.</emphasis>
134 &#32;&#32;&#32;&#32;SubtractColumnMeans&lt;T&gt;(X,&#32;columnMeans);
135 &#32;&#32;&#32;&#32;
136 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Compute&#32;the&#32;covariance&#32;matrix.</emphasis>
137 &#32;&#32;&#32;&#32;<link linkend="_classqb_matrix2">qbMatrix2&lt;T&gt;</link>&#32;covX&#32;=&#32;<link linkend="_namespaceqb_p_c_a_1a393fa03dff91c84ac6c53aa8bd4141b7">ComputeCovariance</link>(X);
138 &#32;&#32;&#32;&#32;
139 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Compute&#32;the&#32;eigenvectors.</emphasis>
140 &#32;&#32;&#32;&#32;<link linkend="_classqb_matrix2">qbMatrix2&lt;T&gt;</link>&#32;eigenvectors;
141 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;returnStatus&#32;=&#32;<link linkend="_namespaceqb_p_c_a_1aa00b5e4dee58ccfa5ce763a873b96c2f">ComputeEigenvectors</link>(covX,&#32;eigenvectors);
142 &#32;&#32;&#32;&#32;
143 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Return&#32;the&#32;output.</emphasis>
144 &#32;&#32;&#32;&#32;outputComponents&#32;=&#32;eigenvectors;
145 &#32;&#32;&#32;&#32;
146 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;returnStatus;
147 }
148 
149 }
150 
151 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
