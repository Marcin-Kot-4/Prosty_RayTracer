<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__s_d_l__test__fuzzer_8h" xml:lang="en-US">
<title>D:/RayTracing/include/SDL_test_fuzzer.h File Reference</title>
<indexterm><primary>D:/RayTracing/include/SDL_test_fuzzer.h</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &quot;begin_code.h&quot;
#include &quot;close_code.h&quot;
</programlisting><simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="__s_d_l__test__fuzzer_8h_1a623db129ea615326bed457ebb9703c1e">SDLTest_FuzzerInit</link> (<link linkend="__s_d_l__stdinc_8h_1ac006cf2bd55a42a9cc8ae9f123aa7e13">Uint64</link> execKey)</para>
</listitem>
            <listitem><para><link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> <link linkend="__s_d_l__test__fuzzer_8h_1ac8dedcebddb993c4a5c86fb914133289">SDLTest_RandomUint8</link> (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link>)</para>
</listitem>
            <listitem><para><link linkend="__s_d_l__stdinc_8h_1a5fc98623306a32e69eaab63e89e1d138">Sint8</link> <link linkend="__s_d_l__test__fuzzer_8h_1ac4988f65c0b1e921ac6a498ba9b9150a">SDLTest_RandomSint8</link> (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link>)</para>
</listitem>
            <listitem><para><link linkend="__s_d_l__stdinc_8h_1a31fcc0a076c9068668173ee26d33e42b">Uint16</link> <link linkend="__s_d_l__test__fuzzer_8h_1a3eceb16e97b4c4c5143904c36ba3a3d5">SDLTest_RandomUint16</link> (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link>)</para>
</listitem>
            <listitem><para><link linkend="__s_d_l__stdinc_8h_1a9d0257032c0e146ab6121bf0122712f5">Sint16</link> <link linkend="__s_d_l__test__fuzzer_8h_1aaf6c560d87e5c01b638b9072a85369aa">SDLTest_RandomSint16</link> (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link>)</para>
</listitem>
            <listitem><para><link linkend="__s_d_l__stdinc_8h_1a7a90b941db9d4582e9ad7abb9940ff7e">Sint32</link> <link linkend="__s_d_l__test__fuzzer_8h_1a26976cb8f4e44aec5e83c90b900e7ae0">SDLTest_RandomSint32</link> (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link>)</para>
</listitem>
            <listitem><para><link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> <link linkend="__s_d_l__test__fuzzer_8h_1a853884a6887973eb5072f7a6be20f51e">SDLTest_RandomUint32</link> (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link>)</para>
</listitem>
            <listitem><para><link linkend="__s_d_l__stdinc_8h_1ac006cf2bd55a42a9cc8ae9f123aa7e13">Uint64</link> <link linkend="__s_d_l__test__fuzzer_8h_1a3c9b42462ea1d24552306004338f7d32">SDLTest_RandomUint64</link> (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link>)</para>
</listitem>
            <listitem><para><link linkend="__s_d_l__stdinc_8h_1a2c1a61d5c466bb74680be0a8cc1b455d">Sint64</link> <link linkend="__s_d_l__test__fuzzer_8h_1ab503ec55dfd34e9c491f83bfff374bdb">SDLTest_RandomSint64</link> (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link>)</para>
</listitem>
            <listitem><para>float <link linkend="__s_d_l__test__fuzzer_8h_1a2f9e47894c17386a36793504fc11de85">SDLTest_RandomUnitFloat</link> (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link>)</para>
</listitem>
            <listitem><para>double <link linkend="__s_d_l__test__fuzzer_8h_1a9f3159422e964a51f17243ce86b6eef6">SDLTest_RandomUnitDouble</link> (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link>)</para>
</listitem>
            <listitem><para>float <link linkend="__s_d_l__test__fuzzer_8h_1a65a242a0a22e7cbea6e9081567fdd056">SDLTest_RandomFloat</link> (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link>)</para>
</listitem>
            <listitem><para>double <link linkend="__s_d_l__test__fuzzer_8h_1a31167fd1a3b922f62896210dbe30c32c">SDLTest_RandomDouble</link> (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link>)</para>
</listitem>
            <listitem><para><link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> <link linkend="__s_d_l__test__fuzzer_8h_1a129a58a37dc23847b8257569bf56d16f">SDLTest_RandomUint8BoundaryValue</link> (<link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> boundary1, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> boundary2, <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> validDomain)</para>
</listitem>
            <listitem><para><link linkend="__s_d_l__stdinc_8h_1a31fcc0a076c9068668173ee26d33e42b">Uint16</link> <link linkend="__s_d_l__test__fuzzer_8h_1a3710dba14db764872949252f558429ba">SDLTest_RandomUint16BoundaryValue</link> (<link linkend="__s_d_l__stdinc_8h_1a31fcc0a076c9068668173ee26d33e42b">Uint16</link> boundary1, <link linkend="__s_d_l__stdinc_8h_1a31fcc0a076c9068668173ee26d33e42b">Uint16</link> boundary2, <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> validDomain)</para>
</listitem>
            <listitem><para><link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> <link linkend="__s_d_l__test__fuzzer_8h_1a9e718145eaf96f611cd67fc530473e3a">SDLTest_RandomUint32BoundaryValue</link> (<link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> boundary1, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> boundary2, <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> validDomain)</para>
</listitem>
            <listitem><para><link linkend="__s_d_l__stdinc_8h_1ac006cf2bd55a42a9cc8ae9f123aa7e13">Uint64</link> <link linkend="__s_d_l__test__fuzzer_8h_1abc660d9b04554c8c2717325224b88b6a">SDLTest_RandomUint64BoundaryValue</link> (<link linkend="__s_d_l__stdinc_8h_1ac006cf2bd55a42a9cc8ae9f123aa7e13">Uint64</link> boundary1, <link linkend="__s_d_l__stdinc_8h_1ac006cf2bd55a42a9cc8ae9f123aa7e13">Uint64</link> boundary2, <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> validDomain)</para>
</listitem>
            <listitem><para><link linkend="__s_d_l__stdinc_8h_1a5fc98623306a32e69eaab63e89e1d138">Sint8</link> <link linkend="__s_d_l__test__fuzzer_8h_1a09ec06adf1ca58afa5283be6b4f5fdfc">SDLTest_RandomSint8BoundaryValue</link> (<link linkend="__s_d_l__stdinc_8h_1a5fc98623306a32e69eaab63e89e1d138">Sint8</link> boundary1, <link linkend="__s_d_l__stdinc_8h_1a5fc98623306a32e69eaab63e89e1d138">Sint8</link> boundary2, <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> validDomain)</para>
</listitem>
            <listitem><para><link linkend="__s_d_l__stdinc_8h_1a9d0257032c0e146ab6121bf0122712f5">Sint16</link> <link linkend="__s_d_l__test__fuzzer_8h_1ae11fb12560b1a9180b1645d6ca1c6af6">SDLTest_RandomSint16BoundaryValue</link> (<link linkend="__s_d_l__stdinc_8h_1a9d0257032c0e146ab6121bf0122712f5">Sint16</link> boundary1, <link linkend="__s_d_l__stdinc_8h_1a9d0257032c0e146ab6121bf0122712f5">Sint16</link> boundary2, <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> validDomain)</para>
</listitem>
            <listitem><para><link linkend="__s_d_l__stdinc_8h_1a7a90b941db9d4582e9ad7abb9940ff7e">Sint32</link> <link linkend="__s_d_l__test__fuzzer_8h_1ab17fbfddfa253bb3d64412000488fc07">SDLTest_RandomSint32BoundaryValue</link> (<link linkend="__s_d_l__stdinc_8h_1a7a90b941db9d4582e9ad7abb9940ff7e">Sint32</link> boundary1, <link linkend="__s_d_l__stdinc_8h_1a7a90b941db9d4582e9ad7abb9940ff7e">Sint32</link> boundary2, <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> validDomain)</para>
</listitem>
            <listitem><para><link linkend="__s_d_l__stdinc_8h_1a2c1a61d5c466bb74680be0a8cc1b455d">Sint64</link> <link linkend="__s_d_l__test__fuzzer_8h_1a0b6a8004aba7d72595f80540fa0b6727">SDLTest_RandomSint64BoundaryValue</link> (<link linkend="__s_d_l__stdinc_8h_1a2c1a61d5c466bb74680be0a8cc1b455d">Sint64</link> boundary1, <link linkend="__s_d_l__stdinc_8h_1a2c1a61d5c466bb74680be0a8cc1b455d">Sint64</link> boundary2, <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> validDomain)</para>
</listitem>
            <listitem><para><link linkend="__s_d_l__stdinc_8h_1a7a90b941db9d4582e9ad7abb9940ff7e">Sint32</link> <link linkend="__s_d_l__test__fuzzer_8h_1a5c81f42e213ad1608cf5f29669eb8521">SDLTest_RandomIntegerInRange</link> (<link linkend="__s_d_l__stdinc_8h_1a7a90b941db9d4582e9ad7abb9940ff7e">Sint32</link> min, <link linkend="__s_d_l__stdinc_8h_1a7a90b941db9d4582e9ad7abb9940ff7e">Sint32</link> max)</para>
</listitem>
            <listitem><para>char * <link linkend="__s_d_l__test__fuzzer_8h_1af897306a58db0f68e053fc28cc28e078">SDLTest_RandomAsciiString</link> (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link>)</para>
</listitem>
            <listitem><para>char * <link linkend="__s_d_l__test__fuzzer_8h_1ab945d938652f887b7389afabc5442588">SDLTest_RandomAsciiStringWithMaximumLength</link> (int <link linkend="__s_d_l__opengl__glext_8h_1a5c0738fe9fcce8c6b2d54e2a3b951a97">maxLength</link>)</para>
</listitem>
            <listitem><para>char * <link linkend="__s_d_l__test__fuzzer_8h_1aa0c9c462a0cb9bbfe49e38b53821e341">SDLTest_RandomAsciiStringOfSize</link> (int <link linkend="__s_d_l__opengl__glext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>)</para>
</listitem>
            <listitem><para>int <link linkend="__s_d_l__test__fuzzer_8h_1a2a0e63a6e02a55141edbdfa53b201c9b">SDLTest_GetFuzzerInvocationCount</link> (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link>)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Include file for SDL test framework.</para>

<para>This code is a part of the SDL2_test library, not the main SDL library.</para>

<para>Note: The fuzzer implementation uses a static instance of random context internally which makes it thread-UNsafe. </para>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="__s_d_l__test__fuzzer_8h_1a623db129ea615326bed457ebb9703c1e"/><section>
    <title>SDLTest_FuzzerInit()</title>
<indexterm><primary>SDLTest_FuzzerInit</primary><secondary>SDL_test_fuzzer.h</secondary></indexterm>
<indexterm><primary>SDL_test_fuzzer.h</primary><secondary>SDLTest_FuzzerInit</secondary></indexterm>
<para><computeroutput><link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> SDLTest_FuzzerInit (<link linkend="__s_d_l__stdinc_8h_1ac006cf2bd55a42a9cc8ae9f123aa7e13">Uint64</link> execKey)</computeroutput></para>
<para>Initializes the fuzzer for a test</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>execKey</entry><entry>
<para>Execution &quot;Key&quot; that initializes the random number generator uniquely for the test. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="__s_d_l__test__fuzzer_8h_1a2a0e63a6e02a55141edbdfa53b201c9b"/><section>
    <title>SDLTest_GetFuzzerInvocationCount()</title>
<indexterm><primary>SDLTest_GetFuzzerInvocationCount</primary><secondary>SDL_test_fuzzer.h</secondary></indexterm>
<indexterm><primary>SDL_test_fuzzer.h</primary><secondary>SDLTest_GetFuzzerInvocationCount</secondary></indexterm>
<para><computeroutput>int SDLTest_GetFuzzerInvocationCount (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> )</computeroutput></para>
<para>Get the invocation count for the fuzzer since last ...FuzzerInit.</para>

<para><formalpara><title>Returns</title>

<para>the invocation count. </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__test__fuzzer_8h_1af897306a58db0f68e053fc28cc28e078"/><section>
    <title>SDLTest_RandomAsciiString()</title>
<indexterm><primary>SDLTest_RandomAsciiString</primary><secondary>SDL_test_fuzzer.h</secondary></indexterm>
<indexterm><primary>SDL_test_fuzzer.h</primary><secondary>SDLTest_RandomAsciiString</secondary></indexterm>
<para><computeroutput>char * SDLTest_RandomAsciiString (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> )</computeroutput></para>
<para>Generates random null-terminated string. The minimum length for the string is 1 character, maximum length for the string is 255 characters and it can contain ASCII characters from 32 to 126.</para>

<para>Note: Returned string needs to be deallocated.</para>

<para><formalpara><title>Returns</title>

<para>a newly allocated random string; or NULL if length was invalid or string could not be allocated. </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__test__fuzzer_8h_1aa0c9c462a0cb9bbfe49e38b53821e341"/><section>
    <title>SDLTest_RandomAsciiStringOfSize()</title>
<indexterm><primary>SDLTest_RandomAsciiStringOfSize</primary><secondary>SDL_test_fuzzer.h</secondary></indexterm>
<indexterm><primary>SDL_test_fuzzer.h</primary><secondary>SDLTest_RandomAsciiStringOfSize</secondary></indexterm>
<para><computeroutput>char * SDLTest_RandomAsciiStringOfSize (int size)</computeroutput></para>
<para>Generates random null-terminated string. The length for the string is defined by the size parameter. String can contain ASCII characters from 32 to 126.</para>

<para>Note: Returned string needs to be deallocated.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>size</entry><entry>
<para>The length of the generated string</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>a newly allocated random string; or NULL if size was invalid or string could not be allocated. </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__test__fuzzer_8h_1ab945d938652f887b7389afabc5442588"/><section>
    <title>SDLTest_RandomAsciiStringWithMaximumLength()</title>
<indexterm><primary>SDLTest_RandomAsciiStringWithMaximumLength</primary><secondary>SDL_test_fuzzer.h</secondary></indexterm>
<indexterm><primary>SDL_test_fuzzer.h</primary><secondary>SDLTest_RandomAsciiStringWithMaximumLength</secondary></indexterm>
<para><computeroutput>char * SDLTest_RandomAsciiStringWithMaximumLength (int maxLength)</computeroutput></para>
<para>Generates random null-terminated string. The maximum length for the string is defined by the maxLength parameter. String can contain ASCII characters from 32 to 126.</para>

<para>Note: Returned string needs to be deallocated.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>maxLength</entry><entry>
<para>The maximum length of the generated string.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>a newly allocated random string; or NULL if maxLength was invalid or string could not be allocated. </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__test__fuzzer_8h_1a31167fd1a3b922f62896210dbe30c32c"/><section>
    <title>SDLTest_RandomDouble()</title>
<indexterm><primary>SDLTest_RandomDouble</primary><secondary>SDL_test_fuzzer.h</secondary></indexterm>
<indexterm><primary>SDL_test_fuzzer.h</primary><secondary>SDLTest_RandomDouble</secondary></indexterm>
<para><computeroutput>double SDLTest_RandomDouble (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> )</computeroutput></para>
<para><formalpara><title>Returns</title>

<para>a random double. </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__test__fuzzer_8h_1a65a242a0a22e7cbea6e9081567fdd056"/><section>
    <title>SDLTest_RandomFloat()</title>
<indexterm><primary>SDLTest_RandomFloat</primary><secondary>SDL_test_fuzzer.h</secondary></indexterm>
<indexterm><primary>SDL_test_fuzzer.h</primary><secondary>SDLTest_RandomFloat</secondary></indexterm>
<para><computeroutput>float SDLTest_RandomFloat (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> )</computeroutput></para>
<para><formalpara><title>Returns</title>

<para>a random float. </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__test__fuzzer_8h_1a5c81f42e213ad1608cf5f29669eb8521"/><section>
    <title>SDLTest_RandomIntegerInRange()</title>
<indexterm><primary>SDLTest_RandomIntegerInRange</primary><secondary>SDL_test_fuzzer.h</secondary></indexterm>
<indexterm><primary>SDL_test_fuzzer.h</primary><secondary>SDLTest_RandomIntegerInRange</secondary></indexterm>
<para><computeroutput><link linkend="__s_d_l__stdinc_8h_1a7a90b941db9d4582e9ad7abb9940ff7e">Sint32</link> SDLTest_RandomIntegerInRange (<link linkend="__s_d_l__stdinc_8h_1a7a90b941db9d4582e9ad7abb9940ff7e">Sint32</link> min, <link linkend="__s_d_l__stdinc_8h_1a7a90b941db9d4582e9ad7abb9940ff7e">Sint32</link> max)</computeroutput></para>
<para>Returns integer in range [min, max] (inclusive). Min and max values can be negative values. If Max in smaller than min, then the values are swapped. Min and max are the same value, that value will be returned.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>min</entry><entry>
<para>Minimum inclusive value of returned random number </para>
</entry>
                            </row>
                            <row>
<entry>max</entry><entry>
<para>Maximum inclusive value of returned random number</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>a generated random integer in range </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__test__fuzzer_8h_1aaf6c560d87e5c01b638b9072a85369aa"/><section>
    <title>SDLTest_RandomSint16()</title>
<indexterm><primary>SDLTest_RandomSint16</primary><secondary>SDL_test_fuzzer.h</secondary></indexterm>
<indexterm><primary>SDL_test_fuzzer.h</primary><secondary>SDLTest_RandomSint16</secondary></indexterm>
<para><computeroutput><link linkend="__s_d_l__stdinc_8h_1a9d0257032c0e146ab6121bf0122712f5">Sint16</link> SDLTest_RandomSint16 (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> )</computeroutput></para>
<para>Returns a random Sint16</para>

<para><formalpara><title>Returns</title>

<para>a generated signed integer </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__test__fuzzer_8h_1ae11fb12560b1a9180b1645d6ca1c6af6"/><section>
    <title>SDLTest_RandomSint16BoundaryValue()</title>
<indexterm><primary>SDLTest_RandomSint16BoundaryValue</primary><secondary>SDL_test_fuzzer.h</secondary></indexterm>
<indexterm><primary>SDL_test_fuzzer.h</primary><secondary>SDLTest_RandomSint16BoundaryValue</secondary></indexterm>
<para><computeroutput><link linkend="__s_d_l__stdinc_8h_1a9d0257032c0e146ab6121bf0122712f5">Sint16</link> SDLTest_RandomSint16BoundaryValue (<link linkend="__s_d_l__stdinc_8h_1a9d0257032c0e146ab6121bf0122712f5">Sint16</link> boundary1, <link linkend="__s_d_l__stdinc_8h_1a9d0257032c0e146ab6121bf0122712f5">Sint16</link> boundary2, <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> validDomain)</computeroutput></para>
<para>Returns a random boundary value for Sint16 within the given boundaries. Boundaries are inclusive, see the usage examples below. If validDomain is true, the function will only return valid boundaries, otherwise non-valid boundaries are also possible. If boundary1 &gt; boundary2, the values are swapped</para>

<para>Usage examples: RandomSint16BoundaryValue(-10, 20, SDL_TRUE) returns -11, -10, 19 or 20 RandomSint16BoundaryValue(-100, -10, SDL_FALSE) returns -101 or -9 RandomSint16BoundaryValue(SINT16_MIN, 99, SDL_FALSE) returns 100 RandomSint16BoundaryValue(SINT16_MIN, SINT16_MAX, SDL_FALSE) returns SINT16_MIN (== error value) with error set</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>boundary1</entry><entry>
<para>Lower boundary limit </para>
</entry>
                            </row>
                            <row>
<entry>boundary2</entry><entry>
<para>Upper boundary limit </para>
</entry>
                            </row>
                            <row>
<entry>validDomain</entry><entry>
<para>Should the generated boundary be valid (=within the bounds) or not?</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>a random boundary value for the given range and domain or SINT16_MIN with error set </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__test__fuzzer_8h_1a26976cb8f4e44aec5e83c90b900e7ae0"/><section>
    <title>SDLTest_RandomSint32()</title>
<indexterm><primary>SDLTest_RandomSint32</primary><secondary>SDL_test_fuzzer.h</secondary></indexterm>
<indexterm><primary>SDL_test_fuzzer.h</primary><secondary>SDLTest_RandomSint32</secondary></indexterm>
<para><computeroutput><link linkend="__s_d_l__stdinc_8h_1a7a90b941db9d4582e9ad7abb9940ff7e">Sint32</link> SDLTest_RandomSint32 (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> )</computeroutput></para>
<para>Returns a random integer</para>

<para><formalpara><title>Returns</title>

<para>a generated integer </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__test__fuzzer_8h_1ab17fbfddfa253bb3d64412000488fc07"/><section>
    <title>SDLTest_RandomSint32BoundaryValue()</title>
<indexterm><primary>SDLTest_RandomSint32BoundaryValue</primary><secondary>SDL_test_fuzzer.h</secondary></indexterm>
<indexterm><primary>SDL_test_fuzzer.h</primary><secondary>SDLTest_RandomSint32BoundaryValue</secondary></indexterm>
<para><computeroutput><link linkend="__s_d_l__stdinc_8h_1a7a90b941db9d4582e9ad7abb9940ff7e">Sint32</link> SDLTest_RandomSint32BoundaryValue (<link linkend="__s_d_l__stdinc_8h_1a7a90b941db9d4582e9ad7abb9940ff7e">Sint32</link> boundary1, <link linkend="__s_d_l__stdinc_8h_1a7a90b941db9d4582e9ad7abb9940ff7e">Sint32</link> boundary2, <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> validDomain)</computeroutput></para>
<para>Returns a random boundary value for Sint32 within the given boundaries. Boundaries are inclusive, see the usage examples below. If validDomain is true, the function will only return valid boundaries, otherwise non-valid boundaries are also possible. If boundary1 &gt; boundary2, the values are swapped</para>

<para>Usage examples: RandomSint32BoundaryValue(-10, 20, SDL_TRUE) returns -11, -10, 19 or 20 RandomSint32BoundaryValue(-100, -10, SDL_FALSE) returns -101 or -9 RandomSint32BoundaryValue(SINT32_MIN, 99, SDL_FALSE) returns 100 RandomSint32BoundaryValue(SINT32_MIN, SINT32_MAX, SDL_FALSE) returns SINT32_MIN (== error value)</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>boundary1</entry><entry>
<para>Lower boundary limit </para>
</entry>
                            </row>
                            <row>
<entry>boundary2</entry><entry>
<para>Upper boundary limit </para>
</entry>
                            </row>
                            <row>
<entry>validDomain</entry><entry>
<para>Should the generated boundary be valid (=within the bounds) or not?</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>a random boundary value for the given range and domain or SINT32_MIN with error set </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__test__fuzzer_8h_1ab503ec55dfd34e9c491f83bfff374bdb"/><section>
    <title>SDLTest_RandomSint64()</title>
<indexterm><primary>SDLTest_RandomSint64</primary><secondary>SDL_test_fuzzer.h</secondary></indexterm>
<indexterm><primary>SDL_test_fuzzer.h</primary><secondary>SDLTest_RandomSint64</secondary></indexterm>
<para><computeroutput><link linkend="__s_d_l__stdinc_8h_1a2c1a61d5c466bb74680be0a8cc1b455d">Sint64</link> SDLTest_RandomSint64 (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> )</computeroutput></para>
<para>Returns random Sint64.</para>

<para><formalpara><title>Returns</title>

<para>a generated signed integer </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__test__fuzzer_8h_1a0b6a8004aba7d72595f80540fa0b6727"/><section>
    <title>SDLTest_RandomSint64BoundaryValue()</title>
<indexterm><primary>SDLTest_RandomSint64BoundaryValue</primary><secondary>SDL_test_fuzzer.h</secondary></indexterm>
<indexterm><primary>SDL_test_fuzzer.h</primary><secondary>SDLTest_RandomSint64BoundaryValue</secondary></indexterm>
<para><computeroutput><link linkend="__s_d_l__stdinc_8h_1a2c1a61d5c466bb74680be0a8cc1b455d">Sint64</link> SDLTest_RandomSint64BoundaryValue (<link linkend="__s_d_l__stdinc_8h_1a2c1a61d5c466bb74680be0a8cc1b455d">Sint64</link> boundary1, <link linkend="__s_d_l__stdinc_8h_1a2c1a61d5c466bb74680be0a8cc1b455d">Sint64</link> boundary2, <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> validDomain)</computeroutput></para>
<para>Returns a random boundary value for Sint64 within the given boundaries. Boundaries are inclusive, see the usage examples below. If validDomain is true, the function will only return valid boundaries, otherwise non-valid boundaries are also possible. If boundary1 &gt; boundary2, the values are swapped</para>

<para>Usage examples: RandomSint64BoundaryValue(-10, 20, SDL_TRUE) returns -11, -10, 19 or 20 RandomSint64BoundaryValue(-100, -10, SDL_FALSE) returns -101 or -9 RandomSint64BoundaryValue(SINT64_MIN, 99, SDL_FALSE) returns 100 RandomSint64BoundaryValue(SINT64_MIN, SINT64_MAX, SDL_FALSE) returns SINT64_MIN (== error value) and error set</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>boundary1</entry><entry>
<para>Lower boundary limit </para>
</entry>
                            </row>
                            <row>
<entry>boundary2</entry><entry>
<para>Upper boundary limit </para>
</entry>
                            </row>
                            <row>
<entry>validDomain</entry><entry>
<para>Should the generated boundary be valid (=within the bounds) or not?</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>a random boundary value for the given range and domain or SINT64_MIN with error set </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__test__fuzzer_8h_1ac4988f65c0b1e921ac6a498ba9b9150a"/><section>
    <title>SDLTest_RandomSint8()</title>
<indexterm><primary>SDLTest_RandomSint8</primary><secondary>SDL_test_fuzzer.h</secondary></indexterm>
<indexterm><primary>SDL_test_fuzzer.h</primary><secondary>SDLTest_RandomSint8</secondary></indexterm>
<para><computeroutput><link linkend="__s_d_l__stdinc_8h_1a5fc98623306a32e69eaab63e89e1d138">Sint8</link> SDLTest_RandomSint8 (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> )</computeroutput></para>
<para>Returns a random Sint8</para>

<para><formalpara><title>Returns</title>

<para>a generated signed integer </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__test__fuzzer_8h_1a09ec06adf1ca58afa5283be6b4f5fdfc"/><section>
    <title>SDLTest_RandomSint8BoundaryValue()</title>
<indexterm><primary>SDLTest_RandomSint8BoundaryValue</primary><secondary>SDL_test_fuzzer.h</secondary></indexterm>
<indexterm><primary>SDL_test_fuzzer.h</primary><secondary>SDLTest_RandomSint8BoundaryValue</secondary></indexterm>
<para><computeroutput><link linkend="__s_d_l__stdinc_8h_1a5fc98623306a32e69eaab63e89e1d138">Sint8</link> SDLTest_RandomSint8BoundaryValue (<link linkend="__s_d_l__stdinc_8h_1a5fc98623306a32e69eaab63e89e1d138">Sint8</link> boundary1, <link linkend="__s_d_l__stdinc_8h_1a5fc98623306a32e69eaab63e89e1d138">Sint8</link> boundary2, <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> validDomain)</computeroutput></para>
<para>Returns a random boundary value for Sint8 within the given boundaries. Boundaries are inclusive, see the usage examples below. If validDomain is true, the function will only return valid boundaries, otherwise non-valid boundaries are also possible. If boundary1 &gt; boundary2, the values are swapped</para>

<para>Usage examples: RandomSint8BoundaryValue(-10, 20, SDL_TRUE) returns -11, -10, 19 or 20 RandomSint8BoundaryValue(-100, -10, SDL_FALSE) returns -101 or -9 RandomSint8BoundaryValue(SINT8_MIN, 99, SDL_FALSE) returns 100 RandomSint8BoundaryValue(SINT8_MIN, SINT8_MAX, SDL_FALSE) returns SINT8_MIN (== error value) with error set</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>boundary1</entry><entry>
<para>Lower boundary limit </para>
</entry>
                            </row>
                            <row>
<entry>boundary2</entry><entry>
<para>Upper boundary limit </para>
</entry>
                            </row>
                            <row>
<entry>validDomain</entry><entry>
<para>Should the generated boundary be valid (=within the bounds) or not?</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>a random boundary value for the given range and domain or SINT8_MIN with error set </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__test__fuzzer_8h_1a3eceb16e97b4c4c5143904c36ba3a3d5"/><section>
    <title>SDLTest_RandomUint16()</title>
<indexterm><primary>SDLTest_RandomUint16</primary><secondary>SDL_test_fuzzer.h</secondary></indexterm>
<indexterm><primary>SDL_test_fuzzer.h</primary><secondary>SDLTest_RandomUint16</secondary></indexterm>
<para><computeroutput><link linkend="__s_d_l__stdinc_8h_1a31fcc0a076c9068668173ee26d33e42b">Uint16</link> SDLTest_RandomUint16 (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> )</computeroutput></para>
<para>Returns a random Uint16</para>

<para><formalpara><title>Returns</title>

<para>a generated integer </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__test__fuzzer_8h_1a3710dba14db764872949252f558429ba"/><section>
    <title>SDLTest_RandomUint16BoundaryValue()</title>
<indexterm><primary>SDLTest_RandomUint16BoundaryValue</primary><secondary>SDL_test_fuzzer.h</secondary></indexterm>
<indexterm><primary>SDL_test_fuzzer.h</primary><secondary>SDLTest_RandomUint16BoundaryValue</secondary></indexterm>
<para><computeroutput><link linkend="__s_d_l__stdinc_8h_1a31fcc0a076c9068668173ee26d33e42b">Uint16</link> SDLTest_RandomUint16BoundaryValue (<link linkend="__s_d_l__stdinc_8h_1a31fcc0a076c9068668173ee26d33e42b">Uint16</link> boundary1, <link linkend="__s_d_l__stdinc_8h_1a31fcc0a076c9068668173ee26d33e42b">Uint16</link> boundary2, <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> validDomain)</computeroutput></para>
<para>Returns a random boundary value for Uint16 within the given boundaries. Boundaries are inclusive, see the usage examples below. If validDomain is true, the function will only return valid boundaries, otherwise non-valid boundaries are also possible. If boundary1 &gt; boundary2, the values are swapped</para>

<para>Usage examples: RandomUint16BoundaryValue(10, 20, SDL_TRUE) returns 10, 11, 19 or 20 RandomUint16BoundaryValue(1, 20, SDL_FALSE) returns 0 or 21 RandomUint16BoundaryValue(0, 99, SDL_FALSE) returns 100 RandomUint16BoundaryValue(0, 0xFFFF, SDL_FALSE) returns 0 (error set)</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>boundary1</entry><entry>
<para>Lower boundary limit </para>
</entry>
                            </row>
                            <row>
<entry>boundary2</entry><entry>
<para>Upper boundary limit </para>
</entry>
                            </row>
                            <row>
<entry>validDomain</entry><entry>
<para>Should the generated boundary be valid (=within the bounds) or not?</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>a random boundary value for the given range and domain or 0 with error set </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__test__fuzzer_8h_1a853884a6887973eb5072f7a6be20f51e"/><section>
    <title>SDLTest_RandomUint32()</title>
<indexterm><primary>SDLTest_RandomUint32</primary><secondary>SDL_test_fuzzer.h</secondary></indexterm>
<indexterm><primary>SDL_test_fuzzer.h</primary><secondary>SDLTest_RandomUint32</secondary></indexterm>
<para><computeroutput><link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> SDLTest_RandomUint32 (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> )</computeroutput></para>
<para>Returns a random positive integer</para>

<para><formalpara><title>Returns</title>

<para>a generated integer </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__test__fuzzer_8h_1a9e718145eaf96f611cd67fc530473e3a"/><section>
    <title>SDLTest_RandomUint32BoundaryValue()</title>
<indexterm><primary>SDLTest_RandomUint32BoundaryValue</primary><secondary>SDL_test_fuzzer.h</secondary></indexterm>
<indexterm><primary>SDL_test_fuzzer.h</primary><secondary>SDLTest_RandomUint32BoundaryValue</secondary></indexterm>
<para><computeroutput><link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> SDLTest_RandomUint32BoundaryValue (<link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> boundary1, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> boundary2, <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> validDomain)</computeroutput></para>
<para>Returns a random boundary value for Uint32 within the given boundaries. Boundaries are inclusive, see the usage examples below. If validDomain is true, the function will only return valid boundaries, otherwise non-valid boundaries are also possible. If boundary1 &gt; boundary2, the values are swapped</para>

<para>Usage examples: RandomUint32BoundaryValue(10, 20, SDL_TRUE) returns 10, 11, 19 or 20 RandomUint32BoundaryValue(1, 20, SDL_FALSE) returns 0 or 21 RandomUint32BoundaryValue(0, 99, SDL_FALSE) returns 100 RandomUint32BoundaryValue(0, 0xFFFFFFFF, SDL_FALSE) returns 0 (with error set)</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>boundary1</entry><entry>
<para>Lower boundary limit </para>
</entry>
                            </row>
                            <row>
<entry>boundary2</entry><entry>
<para>Upper boundary limit </para>
</entry>
                            </row>
                            <row>
<entry>validDomain</entry><entry>
<para>Should the generated boundary be valid (=within the bounds) or not?</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>a random boundary value for the given range and domain or 0 with error set </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__test__fuzzer_8h_1a3c9b42462ea1d24552306004338f7d32"/><section>
    <title>SDLTest_RandomUint64()</title>
<indexterm><primary>SDLTest_RandomUint64</primary><secondary>SDL_test_fuzzer.h</secondary></indexterm>
<indexterm><primary>SDL_test_fuzzer.h</primary><secondary>SDLTest_RandomUint64</secondary></indexterm>
<para><computeroutput><link linkend="__s_d_l__stdinc_8h_1ac006cf2bd55a42a9cc8ae9f123aa7e13">Uint64</link> SDLTest_RandomUint64 (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> )</computeroutput></para>
<para>Returns random Uint64.</para>

<para><formalpara><title>Returns</title>

<para>a generated integer </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__test__fuzzer_8h_1abc660d9b04554c8c2717325224b88b6a"/><section>
    <title>SDLTest_RandomUint64BoundaryValue()</title>
<indexterm><primary>SDLTest_RandomUint64BoundaryValue</primary><secondary>SDL_test_fuzzer.h</secondary></indexterm>
<indexterm><primary>SDL_test_fuzzer.h</primary><secondary>SDLTest_RandomUint64BoundaryValue</secondary></indexterm>
<para><computeroutput><link linkend="__s_d_l__stdinc_8h_1ac006cf2bd55a42a9cc8ae9f123aa7e13">Uint64</link> SDLTest_RandomUint64BoundaryValue (<link linkend="__s_d_l__stdinc_8h_1ac006cf2bd55a42a9cc8ae9f123aa7e13">Uint64</link> boundary1, <link linkend="__s_d_l__stdinc_8h_1ac006cf2bd55a42a9cc8ae9f123aa7e13">Uint64</link> boundary2, <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> validDomain)</computeroutput></para>
<para>Returns a random boundary value for Uint64 within the given boundaries. Boundaries are inclusive, see the usage examples below. If validDomain is true, the function will only return valid boundaries, otherwise non-valid boundaries are also possible. If boundary1 &gt; boundary2, the values are swapped</para>

<para>Usage examples: RandomUint64BoundaryValue(10, 20, SDL_TRUE) returns 10, 11, 19 or 20 RandomUint64BoundaryValue(1, 20, SDL_FALSE) returns 0 or 21 RandomUint64BoundaryValue(0, 99, SDL_FALSE) returns 100 RandomUint64BoundaryValue(0, 0xFFFFFFFFFFFFFFFF, SDL_FALSE) returns 0 (with error set)</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>boundary1</entry><entry>
<para>Lower boundary limit </para>
</entry>
                            </row>
                            <row>
<entry>boundary2</entry><entry>
<para>Upper boundary limit </para>
</entry>
                            </row>
                            <row>
<entry>validDomain</entry><entry>
<para>Should the generated boundary be valid (=within the bounds) or not?</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>a random boundary value for the given range and domain or 0 with error set </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__test__fuzzer_8h_1ac8dedcebddb993c4a5c86fb914133289"/><section>
    <title>SDLTest_RandomUint8()</title>
<indexterm><primary>SDLTest_RandomUint8</primary><secondary>SDL_test_fuzzer.h</secondary></indexterm>
<indexterm><primary>SDL_test_fuzzer.h</primary><secondary>SDLTest_RandomUint8</secondary></indexterm>
<para><computeroutput><link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> SDLTest_RandomUint8 (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> )</computeroutput></para>
<para>Returns a random Uint8</para>

<para><formalpara><title>Returns</title>

<para>a generated integer </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__test__fuzzer_8h_1a129a58a37dc23847b8257569bf56d16f"/><section>
    <title>SDLTest_RandomUint8BoundaryValue()</title>
<indexterm><primary>SDLTest_RandomUint8BoundaryValue</primary><secondary>SDL_test_fuzzer.h</secondary></indexterm>
<indexterm><primary>SDL_test_fuzzer.h</primary><secondary>SDLTest_RandomUint8BoundaryValue</secondary></indexterm>
<para><computeroutput><link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> SDLTest_RandomUint8BoundaryValue (<link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> boundary1, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> boundary2, <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> validDomain)</computeroutput></para>
<para>Returns a random boundary value for Uint8 within the given boundaries. Boundaries are inclusive, see the usage examples below. If validDomain is true, the function will only return valid boundaries, otherwise non-valid boundaries are also possible. If boundary1 &gt; boundary2, the values are swapped</para>

<para>Usage examples: RandomUint8BoundaryValue(10, 20, SDL_TRUE) returns 10, 11, 19 or 20 RandomUint8BoundaryValue(1, 20, SDL_FALSE) returns 0 or 21 RandomUint8BoundaryValue(0, 99, SDL_FALSE) returns 100 RandomUint8BoundaryValue(0, 255, SDL_FALSE) returns 0 (error set)</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>boundary1</entry><entry>
<para>Lower boundary limit </para>
</entry>
                            </row>
                            <row>
<entry>boundary2</entry><entry>
<para>Upper boundary limit </para>
</entry>
                            </row>
                            <row>
<entry>validDomain</entry><entry>
<para>Should the generated boundary be valid (=within the bounds) or not?</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>a random boundary value for the given range and domain or 0 with error set </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__test__fuzzer_8h_1a9f3159422e964a51f17243ce86b6eef6"/><section>
    <title>SDLTest_RandomUnitDouble()</title>
<indexterm><primary>SDLTest_RandomUnitDouble</primary><secondary>SDL_test_fuzzer.h</secondary></indexterm>
<indexterm><primary>SDL_test_fuzzer.h</primary><secondary>SDLTest_RandomUnitDouble</secondary></indexterm>
<para><computeroutput>double SDLTest_RandomUnitDouble (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> )</computeroutput></para>
<para><formalpara><title>Returns</title>

<para>a random double in range [0.0 - 1.0] </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__test__fuzzer_8h_1a2f9e47894c17386a36793504fc11de85"/><section>
    <title>SDLTest_RandomUnitFloat()</title>
<indexterm><primary>SDLTest_RandomUnitFloat</primary><secondary>SDL_test_fuzzer.h</secondary></indexterm>
<indexterm><primary>SDL_test_fuzzer.h</primary><secondary>SDLTest_RandomUnitFloat</secondary></indexterm>
<para><computeroutput>float SDLTest_RandomUnitFloat (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> )</computeroutput></para>
<para><formalpara><title>Returns</title>

<para>a random float in range [0.0 - 1.0] </para>
</formalpara>
</para>
</section>
</section>
</section>
