<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__s_d_l__filesystem_8h" xml:lang="en-US">
<title>D:/RayTracing/include/SDL_filesystem.h File Reference</title>
<indexterm><primary>D:/RayTracing/include/SDL_filesystem.h</primary></indexterm>
<para>

<para>Include file for filesystem SDL API functions. </para>
 
</para>
<programlisting linenumbering="unnumbered">#include &quot;SDL_stdinc.h&quot;
#include &quot;begin_code.h&quot;
#include &quot;close_code.h&quot;
</programlisting><simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> char *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__filesystem_8h_1af4bb772b30931388d2efcbfe30bf99e9">SDL_GetBasePath</link> (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> char *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__filesystem_8h_1afc753a599c8dac949ec3a07a6a3db74e">SDL_GetPrefPath</link> (const char *org, const char *app)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Include file for filesystem SDL API functions. </para>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="__s_d_l__filesystem_8h_1af4bb772b30931388d2efcbfe30bf99e9"/><section>
    <title>SDL_GetBasePath()</title>
<indexterm><primary>SDL_GetBasePath</primary><secondary>SDL_filesystem.h</secondary></indexterm>
<indexterm><primary>SDL_filesystem.h</primary><secondary>SDL_GetBasePath</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> char *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetBasePath (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> )</computeroutput></para>
<para>Get the directory where the application was run from.</para>

<para>This is not necessarily a fast call, so you should call this once near startup and save the string if you need it.</para>

<para><emphasis role="bold">Mac OS X and iOS Specific Functionality</emphasis>: If the application is in a &quot;.app&quot; bundle, this function returns the Resource directory (e.g. MyApp.app/Contents/Resources/). This behaviour can be overridden by adding a property to the Info.plist file. Adding a string key with the name SDL_FILESYSTEM_BASE_DIR_TYPE with a supported value will change the behaviour.</para>

<para>Supported values for the SDL_FILESYSTEM_BASE_DIR_TYPE property (Given an application in /Applications/SDLApp/MyApp.app):</para>

<para><itemizedlist>
<listitem>
<para><computeroutput>resource</computeroutput>: bundle resource directory (the default). For example: <computeroutput>/Applications/SDLApp/MyApp.app/Contents/Resources</computeroutput></para>
</listitem><listitem>
<para><computeroutput>bundle</computeroutput>: the Bundle directory. For example: <computeroutput>/Applications/SDLApp/MyApp.app/</computeroutput></para>
</listitem><listitem>
<para><computeroutput>parent</computeroutput>: the containing directory of the bundle. For example: <computeroutput>/Applications/SDLApp/</computeroutput></para>
</listitem></itemizedlist>
</para>

<para>The returned path is guaranteed to end with a path separator (&apos;\&apos; on Windows, &apos;/&apos; on most other platforms).</para>

<para>The pointer returned is owned by the caller. Please call <link linkend="__s_d_l__stdinc_8h_1a0e4ade894d550ada1fa19dc2d46e88b8">SDL_free()</link> on the pointer when done with it.</para>

<para><formalpara><title>Returns</title>

<para>an absolute path in UTF-8 encoding to the application data directory. NULL will be returned on error or when the platform doesn&apos;t implement this functionality, call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.1.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__filesystem_8h_1afc753a599c8dac949ec3a07a6a3db74e">SDL_GetPrefPath</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__filesystem_8h_1afc753a599c8dac949ec3a07a6a3db74e"/><section>
    <title>SDL_GetPrefPath()</title>
<indexterm><primary>SDL_GetPrefPath</primary><secondary>SDL_filesystem.h</secondary></indexterm>
<indexterm><primary>SDL_filesystem.h</primary><secondary>SDL_GetPrefPath</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> char *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetPrefPath (const char * org, const char * app)</computeroutput></para>
<para>Get the user-and-app-specific path where files can be written.</para>

<para>Get the &quot;pref dir&quot;. This is meant to be where users can write personal files (preferences and save games, etc) that are specific to your application. This directory is unique per user, per application.</para>

<para>This function will decide the appropriate location in the native filesystem, create the directory if necessary, and return a string of the absolute path to the directory in UTF-8 encoding.</para>

<para>On Windows, the string might look like:</para>

<para><computeroutput>C:\\Users\\bob\\AppData\\Roaming\\My Company\\My Program Name\\</computeroutput></para>

<para>On Linux, the string might look like&quot;

&lt;tt&gt;/home/bob/.local/share/My Program Name/&lt;/tt&gt;

On Mac OS X, the string might look like:

&lt;tt&gt;/Users/bob/Library/Application Support/My Program Name/&lt;/tt&gt;

You should assume the path returned by this function is the only safe place
to write files (and that SDL_GetBasePath(), while it might be writable, or
even the parent of the returned path, isn&apos;t where you should be writing
things).

Both the org and app strings may become part of a directory name, so please
follow these rules:

- Try to use the same org string (&lt;em&gt;including case-sensitivity&lt;/em&gt;) for all
  your applications that use this function.
- Always use a unique app string for each one, and make sure it never
  changes for an app once you&apos;ve decided on it.
- Unicode characters are legal, as long as it&apos;s UTF-8 encoded, but...
- ...only use letters, numbers, and spaces. Avoid punctuation like &quot;Game Name 2: Bad Guy&apos;s Revenge!&quot; ... &quot;Game Name 2&quot; is sufficient.</para>

<para>The returned path is guaranteed to end with a path separator (&apos;\&apos; on Windows, &apos;/&apos; on most other platforms).</para>

<para>The pointer returned is owned by the caller. Please call <link linkend="__s_d_l__stdinc_8h_1a0e4ade894d550ada1fa19dc2d46e88b8">SDL_free()</link> on the pointer when done with it.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>org</entry><entry>
<para>the name of your organization </para>
</entry>
                            </row>
                            <row>
<entry>app</entry><entry>
<para>the name of your application </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>a UTF-8 string of the user directory in platform-dependent notation. NULL if there&apos;s a problem (creating directory failed, etc.).</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.1.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__filesystem_8h_1af4bb772b30931388d2efcbfe30bf99e9">SDL_GetBasePath</link> </para>
</formalpara>
</para>
</section>
</section>
</section>
