<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__s_d_l__render_8h" xml:lang="en-US">
<title>D:/RayTracing/include/SDL_render.h File Reference</title>
<indexterm><primary>D:/RayTracing/include/SDL_render.h</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &quot;SDL_stdinc.h&quot;
#include &quot;SDL_rect.h&quot;
#include &quot;SDL_video.h&quot;
#include &quot;begin_code.h&quot;
#include &quot;close_code.h&quot;
</programlisting><simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_struct_s_d_l___renderer_info">SDL_RendererInfo</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_s_d_l___vertex">SDL_Vertex</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Typedefs    </title>
        <itemizedlist>
            <listitem><para>typedef struct <link linkend="_struct_s_d_l___renderer_info">SDL_RendererInfo</link> <link linkend="__s_d_l__render_8h_1a0e001c8e25de272084c29c6431a80811">SDL_RendererInfo</link></para>
</listitem>
            <listitem><para>typedef struct <link linkend="_struct_s_d_l___vertex">SDL_Vertex</link> <link linkend="__s_d_l__render_8h_1a2bd7b3f09dc5b728d6f2e34762bac869">SDL_Vertex</link></para>
</listitem>
            <listitem><para>typedef struct <link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> <link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link></para>
</listitem>
            <listitem><para>typedef struct <link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> <link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Enumerations    </title>
        <itemizedlist>
            <listitem><para>enum <link linkend="__s_d_l__render_8h_1a3a6e51bbee5fd3f8ee0c9f7504ae4130">SDL_RendererFlags</link> { <link linkend="__s_d_l__render_8h_1a3a6e51bbee5fd3f8ee0c9f7504ae4130a02efc6cb7656c03d7a7d0164aced7e84">SDL_RENDERER_SOFTWARE</link> = 0x00000001
, <link linkend="__s_d_l__render_8h_1a3a6e51bbee5fd3f8ee0c9f7504ae4130a1268ba2faaf6d9c7c7b71fc550f4248a">SDL_RENDERER_ACCELERATED</link> = 0x00000002
, <link linkend="__s_d_l__render_8h_1a3a6e51bbee5fd3f8ee0c9f7504ae4130a12abcfe685ff444f0fc727db981a0c83">SDL_RENDERER_PRESENTVSYNC</link> = 0x00000004
, <link linkend="__s_d_l__render_8h_1a3a6e51bbee5fd3f8ee0c9f7504ae4130a77aa48df9c4f56f0b1c66c406da3ab81">SDL_RENDERER_TARGETTEXTURE</link> = 0x00000008
 }</para>
</listitem>
            <listitem><para>enum <link linkend="__s_d_l__render_8h_1a7cee9cc7b0b54027860fde346ea26c71">SDL_ScaleMode</link> { <link linkend="__s_d_l__render_8h_1a7cee9cc7b0b54027860fde346ea26c71af7de2943791eb2a873139506d40a305d">SDL_ScaleModeNearest</link>
, <link linkend="__s_d_l__render_8h_1a7cee9cc7b0b54027860fde346ea26c71a9558b9559ab5d26ac398bb18cc731365">SDL_ScaleModeLinear</link>
, <link linkend="__s_d_l__render_8h_1a7cee9cc7b0b54027860fde346ea26c71adaae98d92cef330646363f08cdef6f9e">SDL_ScaleModeBest</link>
 }</para>
</listitem>
            <listitem><para>enum <link linkend="__s_d_l__render_8h_1a6b8417d7af279e8a0d4a51233da99bc9">SDL_TextureAccess</link> { <link linkend="__s_d_l__render_8h_1a6b8417d7af279e8a0d4a51233da99bc9a07c9015fe5cf4e0737d2836acdf00a34">SDL_TEXTUREACCESS_STATIC</link>
, <link linkend="__s_d_l__render_8h_1a6b8417d7af279e8a0d4a51233da99bc9a19a4751f16e6b411aeb9c835d6c061b4">SDL_TEXTUREACCESS_STREAMING</link>
, <link linkend="__s_d_l__render_8h_1a6b8417d7af279e8a0d4a51233da99bc9a52249f41ca2ec4971ec96ee395868a9a">SDL_TEXTUREACCESS_TARGET</link>
 }</para>
</listitem>
            <listitem><para>enum <link linkend="__s_d_l__render_8h_1a8d8aacd15cb2cb24e61ae1905e7a5ab5">SDL_TextureModulate</link> { <link linkend="__s_d_l__render_8h_1a8d8aacd15cb2cb24e61ae1905e7a5ab5a3c1a49753bd4e0a8cfa7c64ed5a4b0df">SDL_TEXTUREMODULATE_NONE</link> = 0x00000000
, <link linkend="__s_d_l__render_8h_1a8d8aacd15cb2cb24e61ae1905e7a5ab5a5a9d122094526405306483d856caa21e">SDL_TEXTUREMODULATE_COLOR</link> = 0x00000001
, <link linkend="__s_d_l__render_8h_1a8d8aacd15cb2cb24e61ae1905e7a5ab5a431abaf1e024cd43df94a967ba1e836f">SDL_TEXTUREMODULATE_ALPHA</link> = 0x00000002
 }</para>
</listitem>
            <listitem><para>enum <link linkend="__s_d_l__render_8h_1a6280e56838e0e684caa0869c7c973c12">SDL_RendererFlip</link> { <link linkend="__s_d_l__render_8h_1a6280e56838e0e684caa0869c7c973c12a580b026a6ad4e3493677ad47f3bd939a">SDL_FLIP_NONE</link> = 0x00000000
, <link linkend="__s_d_l__render_8h_1a6280e56838e0e684caa0869c7c973c12acfc2af6936e75fa246c98d316425c0ce">SDL_FLIP_HORIZONTAL</link> = 0x00000001
, <link linkend="__s_d_l__render_8h_1a6280e56838e0e684caa0869c7c973c12a27ec807eec1d9adffced6a70cd85ef01">SDL_FLIP_VERTICAL</link> = 0x00000002
 }</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1a4dd8a7e6e6f0948541a1ff6b2ecff192">SDL_GetNumRenderDrivers</link> (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1aa9a7e1ca629863212c2c1b17112f65bd">SDL_GetRenderDriverInfo</link> (int <link linkend="__s_d_l__opengl__glext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>, <link linkend="_struct_s_d_l___renderer_info">SDL_RendererInfo</link> *info)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1ac3aa070e5cda5bab246621f7efc9f143">SDL_CreateWindowAndRenderer</link> (int <link linkend="__s_d_l__opengl_8h_1a9a82cf3caff84cabc4598e2619faac17">width</link>, int <link linkend="__s_d_l__opengl_8h_1aa352f2804b9902ac30769c00dde75d5f">height</link>, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> window_flags, <link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> **window, <link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> **renderer)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1a4acc54236013e4ef625dcc362cc8b7d5">SDL_CreateRenderer</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window, int <link linkend="__s_d_l__opengl__glext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> <link linkend="__s_d_l__opengl__glext_8h_1ac7ba7d3cce3d19ca020e056b37231289">flags</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1aeb5644ee43c35ed27e54e312a1cd954b">SDL_CreateSoftwareRenderer</link> (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> *surface)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1a6c60ba0582abbdf342e1d305e3c52362">SDL_GetRenderer</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1afdc8a35ce033f5111843ac9518dc47a4">SDL_GetRendererInfo</link> (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *renderer, <link linkend="_struct_s_d_l___renderer_info">SDL_RendererInfo</link> *info)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1abfc0c9a50d9d1870ab7d271b7a73d8ab">SDL_GetRendererOutputSize</link> (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *renderer, int *<link linkend="__s_d_l__opengl__glext_8h_1a6ee8f168a7ab6785a9bb57c6715dad99">w</link>, int *<link linkend="__s_d_l__opengl__glext_8h_1afa0fb1b5e976920c0abeff2dca3ed774">h</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1a7995b80913eedffe824a5bf1e81e80ed">SDL_CreateTexture</link> (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *renderer, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> <link linkend="__s_d_l__audio_8h_1a71a65ffd977afe9c3fef116a5bc9ee27">format</link>, int <link linkend="__s_d_l__opengl__glext_8h_1a9fb81ef401f3cb865f7b2f1bb059f7d7">access</link>, int <link linkend="__s_d_l__opengl__glext_8h_1a6ee8f168a7ab6785a9bb57c6715dad99">w</link>, int <link linkend="__s_d_l__opengl__glext_8h_1afa0fb1b5e976920c0abeff2dca3ed774">h</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1a5c0f3b4f6fdb462e4292cd45e72719fb">SDL_CreateTextureFromSurface</link> (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *renderer, <link linkend="_struct_s_d_l___surface">SDL_Surface</link> *surface)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1aade777757bfc3b98bf3ef742b1d8a052">SDL_QueryTexture</link> (<link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> *<link linkend="__s_d_l__opengl__glext_8h_1a8f486379aef534669f4f06f515e7ce6c">texture</link>, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> *<link linkend="__s_d_l__audio_8h_1a71a65ffd977afe9c3fef116a5bc9ee27">format</link>, int *<link linkend="__s_d_l__opengl__glext_8h_1a9fb81ef401f3cb865f7b2f1bb059f7d7">access</link>, int *<link linkend="__s_d_l__opengl__glext_8h_1a6ee8f168a7ab6785a9bb57c6715dad99">w</link>, int *<link linkend="__s_d_l__opengl__glext_8h_1afa0fb1b5e976920c0abeff2dca3ed774">h</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1a348399db33c03a7882cef0c6e6c1756f">SDL_SetTextureColorMod</link> (<link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> *<link linkend="__s_d_l__opengl__glext_8h_1a8f486379aef534669f4f06f515e7ce6c">texture</link>, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> <link linkend="__s_d_l__opengl_8h_1a42ce7cdc612e53abee15043f80220d97">r</link>, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> <link linkend="__s_d_l__opengl__glext_8h_1acaceb3a655ff28b75259860bcb868f9f">g</link>, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> <link linkend="__s_d_l__opengl__glext_8h_1a0f71581a41fd2264c8944126dabbd010">b</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1aa70e4ce3a875399d4291dca23e687b11">SDL_GetTextureColorMod</link> (<link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> *<link linkend="__s_d_l__opengl__glext_8h_1a8f486379aef534669f4f06f515e7ce6c">texture</link>, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> *<link linkend="__s_d_l__opengl_8h_1a42ce7cdc612e53abee15043f80220d97">r</link>, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> *<link linkend="__s_d_l__opengl__glext_8h_1acaceb3a655ff28b75259860bcb868f9f">g</link>, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> *<link linkend="__s_d_l__opengl__glext_8h_1a0f71581a41fd2264c8944126dabbd010">b</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1a1cc3302a4c7fb3b37e8fd5263a80758b">SDL_SetTextureAlphaMod</link> (<link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> *<link linkend="__s_d_l__opengl__glext_8h_1a8f486379aef534669f4f06f515e7ce6c">texture</link>, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> <link linkend="__s_d_l__opengl__glext_8h_1ac03904b1f7e359bb2acf10a755e97c5a">alpha</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1a4d9a9e945ec95f30e5c48ce305de33ad">SDL_GetTextureAlphaMod</link> (<link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> *<link linkend="__s_d_l__opengl__glext_8h_1a8f486379aef534669f4f06f515e7ce6c">texture</link>, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> *<link linkend="__s_d_l__opengl__glext_8h_1ac03904b1f7e359bb2acf10a755e97c5a">alpha</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1af8b9cb77ca18f76c18f39d29ed960de8">SDL_SetTextureBlendMode</link> (<link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> *<link linkend="__s_d_l__opengl__glext_8h_1a8f486379aef534669f4f06f515e7ce6c">texture</link>, <link linkend="__s_d_l__blendmode_8h_1a850d3c67a878fd6698a1c8dbb1eabf1e">SDL_BlendMode</link> blendMode)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1a2595ee57e6f3a4882f3ae4062ca420c4">SDL_GetTextureBlendMode</link> (<link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> *<link linkend="__s_d_l__opengl__glext_8h_1a8f486379aef534669f4f06f515e7ce6c">texture</link>, <link linkend="__s_d_l__blendmode_8h_1a850d3c67a878fd6698a1c8dbb1eabf1e">SDL_BlendMode</link> *blendMode)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1aac58837d42510e6e0472538dbcbc2ffe">SDL_SetTextureScaleMode</link> (<link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> *<link linkend="__s_d_l__opengl__glext_8h_1a8f486379aef534669f4f06f515e7ce6c">texture</link>, <link linkend="__s_d_l__render_8h_1a7cee9cc7b0b54027860fde346ea26c71">SDL_ScaleMode</link> scaleMode)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1a51603afa1350164679baad97b77fb3b5">SDL_GetTextureScaleMode</link> (<link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> *<link linkend="__s_d_l__opengl__glext_8h_1a8f486379aef534669f4f06f515e7ce6c">texture</link>, <link linkend="__s_d_l__render_8h_1a7cee9cc7b0b54027860fde346ea26c71">SDL_ScaleMode</link> *scaleMode)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1a969ee973fd8f686777f151aa2d9275bc">SDL_SetTextureUserData</link> (<link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> *<link linkend="__s_d_l__opengl__glext_8h_1a8f486379aef534669f4f06f515e7ce6c">texture</link>, <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> *userdata)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1a6601680fa2e4a7c2c46d503392fc1afc">SDL_GetTextureUserData</link> (<link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> *<link linkend="__s_d_l__opengl__glext_8h_1a8f486379aef534669f4f06f515e7ce6c">texture</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1a7aab41a7058997590095e5568d065c11">SDL_UpdateTexture</link> (<link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> *<link linkend="__s_d_l__opengl__glext_8h_1a8f486379aef534669f4f06f515e7ce6c">texture</link>, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> *rect, const <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> *<link linkend="__s_d_l__opengl_8h_1ada7ad693ea2e311b8103f4693fc35f80">pixels</link>, int pitch)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1aad2bf04e82a6fb8df44c0b6791321cb5">SDL_UpdateYUVTexture</link> (<link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> *<link linkend="__s_d_l__opengl__glext_8h_1a8f486379aef534669f4f06f515e7ce6c">texture</link>, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> *rect, const <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> *Yplane, int Ypitch, const <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> *Uplane, int Upitch, const <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> *Vplane, int Vpitch)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1ab911a179c321d62e7659b8111f457723">SDL_UpdateNVTexture</link> (<link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> *<link linkend="__s_d_l__opengl__glext_8h_1a8f486379aef534669f4f06f515e7ce6c">texture</link>, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> *rect, const <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> *Yplane, int Ypitch, const <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> *UVplane, int UVpitch)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1af64adcd12e4e9d41d48031fd3da7b913">SDL_LockTexture</link> (<link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> *<link linkend="__s_d_l__opengl__glext_8h_1a8f486379aef534669f4f06f515e7ce6c">texture</link>, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> *rect, <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> **<link linkend="__s_d_l__opengl_8h_1ada7ad693ea2e311b8103f4693fc35f80">pixels</link>, int *pitch)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1af1f12f5baf50ec8c86235dd4528a4e0c">SDL_LockTextureToSurface</link> (<link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> *<link linkend="__s_d_l__opengl__glext_8h_1a8f486379aef534669f4f06f515e7ce6c">texture</link>, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> *rect, <link linkend="_struct_s_d_l___surface">SDL_Surface</link> **surface)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1a7fc9db6cde77fc9c95a4f65bc7d30073">SDL_UnlockTexture</link> (<link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> *<link linkend="__s_d_l__opengl__glext_8h_1a8f486379aef534669f4f06f515e7ce6c">texture</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1a126c5e0fb7abb3aa1bbfe60ac0102857">SDL_RenderTargetSupported</link> (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *renderer)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1a2479163b0f2909cc50cef7af3c279000">SDL_SetRenderTarget</link> (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *renderer, <link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> *<link linkend="__s_d_l__opengl__glext_8h_1a8f486379aef534669f4f06f515e7ce6c">texture</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1a130a89bac84d075c44c3e9814238a658">SDL_GetRenderTarget</link> (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *renderer)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1ad0596fd507c9bf9f8f9594cd9064860c">SDL_RenderSetLogicalSize</link> (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *renderer, int <link linkend="__s_d_l__opengl__glext_8h_1a6ee8f168a7ab6785a9bb57c6715dad99">w</link>, int <link linkend="__s_d_l__opengl__glext_8h_1afa0fb1b5e976920c0abeff2dca3ed774">h</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1aa566ba52ac01bd13f6fdfcdfc3af217f">SDL_RenderGetLogicalSize</link> (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *renderer, int *<link linkend="__s_d_l__opengl__glext_8h_1a6ee8f168a7ab6785a9bb57c6715dad99">w</link>, int *<link linkend="__s_d_l__opengl__glext_8h_1afa0fb1b5e976920c0abeff2dca3ed774">h</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1a62c3f8273280e5795075d2921d4ea30f">SDL_RenderSetIntegerScale</link> (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *renderer, <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> <link linkend="__s_d_l__opengl__glext_8h_1ab0b5c7de20095d30091485d2c60a3dd5">enable</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1a435c61d9f048550388198478e8fdeaa0">SDL_RenderGetIntegerScale</link> (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *renderer)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1a27bad6dceb9d5e08d41506260dfc1c71">SDL_RenderSetViewport</link> (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *renderer, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> *rect)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1a60a7a6cb31b64f9f13c923fe44ba4d6f">SDL_RenderGetViewport</link> (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *renderer, <link linkend="_struct_s_d_l___rect">SDL_Rect</link> *rect)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1a2788c24590fd26bcf0d5be2ffcb85c04">SDL_RenderSetClipRect</link> (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *renderer, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> *rect)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1af91e64e2b473a5eb7e93caf253fb760c">SDL_RenderGetClipRect</link> (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *renderer, <link linkend="_struct_s_d_l___rect">SDL_Rect</link> *rect)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1ab8125c772a65956fbb259389b6563523">SDL_RenderIsClipEnabled</link> (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *renderer)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1aa52b062e271226c5ec8cdb8aa6dc69eb">SDL_RenderSetScale</link> (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *renderer, float scaleX, float scaleY)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1a0271c4a8d32cacaff54de9aa7b5a797d">SDL_RenderGetScale</link> (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *renderer, float *scaleX, float *scaleY)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1aa4497fd1ab833b5b6badd2a086603b19">SDL_RenderWindowToLogical</link> (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *renderer, int windowX, int windowY, float *logicalX, float *logicalY)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1ae0a927b5b2d8c797dfa06e4226a5c840">SDL_RenderLogicalToWindow</link> (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *renderer, float logicalX, float logicalY, int *windowX, int *windowY)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1aa26234da40f87f4b16d715564242a341">SDL_SetRenderDrawColor</link> (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *renderer, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> <link linkend="__s_d_l__opengl_8h_1a42ce7cdc612e53abee15043f80220d97">r</link>, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> <link linkend="__s_d_l__opengl__glext_8h_1acaceb3a655ff28b75259860bcb868f9f">g</link>, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> <link linkend="__s_d_l__opengl__glext_8h_1a0f71581a41fd2264c8944126dabbd010">b</link>, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> <link linkend="__s_d_l__opengl__glext_8h_1a3309789fc188587d666cda5ece79cf82">a</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1a1b8e6544c3fc23ddd9b0f0bfb14cef39">SDL_GetRenderDrawColor</link> (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *renderer, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> *<link linkend="__s_d_l__opengl_8h_1a42ce7cdc612e53abee15043f80220d97">r</link>, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> *<link linkend="__s_d_l__opengl__glext_8h_1acaceb3a655ff28b75259860bcb868f9f">g</link>, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> *<link linkend="__s_d_l__opengl__glext_8h_1a0f71581a41fd2264c8944126dabbd010">b</link>, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> *<link linkend="__s_d_l__opengl__glext_8h_1a3309789fc188587d666cda5ece79cf82">a</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1a37e6e440b995756c9cc8a20fe3ca2385">SDL_SetRenderDrawBlendMode</link> (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *renderer, <link linkend="__s_d_l__blendmode_8h_1a850d3c67a878fd6698a1c8dbb1eabf1e">SDL_BlendMode</link> blendMode)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1a384109767532e9703652233571a0d3cf">SDL_GetRenderDrawBlendMode</link> (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *renderer, <link linkend="__s_d_l__blendmode_8h_1a850d3c67a878fd6698a1c8dbb1eabf1e">SDL_BlendMode</link> *blendMode)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1a473b4abbb29c60e98876eb68ad850f79">SDL_RenderClear</link> (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *renderer)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1ab576a09c91675dbd8dba9d05dd2fc0bc">SDL_RenderDrawPoint</link> (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *renderer, int <link linkend="__s_d_l__opengl_8h_1ad0e63d0edcdbd3d79554076bf309fd47">x</link>, int <link linkend="__s_d_l__opengl_8h_1a1675d9d7bb68e1657ff028643b4037e3">y</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1a8ff1a991e7a2599cfc9ea43dfa920d0b">SDL_RenderDrawPoints</link> (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *renderer, const <link linkend="_struct_s_d_l___point">SDL_Point</link> *<link linkend="__s_d_l__opengl__glext_8h_1a0c0cc65d03e264ad2c5262927b620d3f">points</link>, int <link linkend="__s_d_l__opengl_8h_1a619bc20e8198de3bd3f3d7fc34de66b2">count</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1a6d50e252f15e0c6c14639bdd343285fd">SDL_RenderDrawLine</link> (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *renderer, int <link linkend="__s_d_l__opengl__glext_8h_1a49825216c96caaeb09237b36651181c5">x1</link>, int <link linkend="__s_d_l__opengl__glext_8h_1a3af6c78fcdfccea028a5878bc747ef39">y1</link>, int <link linkend="__s_d_l__opengl__glext_8h_1a7b907a03236685c534d89d604cff23c8">x2</link>, int <link linkend="__s_d_l__opengl__glext_8h_1a2be1135ed68e8d80fa9e130c7814f8c2">y2</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1a556f150677bb965448b7b361bceb7a76">SDL_RenderDrawLines</link> (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *renderer, const <link linkend="_struct_s_d_l___point">SDL_Point</link> *<link linkend="__s_d_l__opengl__glext_8h_1a0c0cc65d03e264ad2c5262927b620d3f">points</link>, int <link linkend="__s_d_l__opengl_8h_1a619bc20e8198de3bd3f3d7fc34de66b2">count</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1ab2a89b5a0c25adb6abdb9aeff28f177c">SDL_RenderDrawRect</link> (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *renderer, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> *rect)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1ae56460fe1b478a55916650e695145cbf">SDL_RenderDrawRects</link> (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *renderer, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> *rects, int <link linkend="__s_d_l__opengl_8h_1a619bc20e8198de3bd3f3d7fc34de66b2">count</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1a3b5098c1944441034d2c5cff419f93cc">SDL_RenderFillRect</link> (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *renderer, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> *rect)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1a987fe30e64168702f1dfa6407fbe8bec">SDL_RenderFillRects</link> (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *renderer, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> *rects, int <link linkend="__s_d_l__opengl_8h_1a619bc20e8198de3bd3f3d7fc34de66b2">count</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1a4b6c2353384c7b7128fd5960b24f2ae6">SDL_RenderCopy</link> (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *renderer, <link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> *<link linkend="__s_d_l__opengl__glext_8h_1a8f486379aef534669f4f06f515e7ce6c">texture</link>, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> *srcrect, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> *dstrect)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1ac2c665c1ce910413272a004cdb52e28e">SDL_RenderCopyEx</link> (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *renderer, <link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> *<link linkend="__s_d_l__opengl__glext_8h_1a8f486379aef534669f4f06f515e7ce6c">texture</link>, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> *srcrect, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> *dstrect, const double <link linkend="__s_d_l__opengl__glext_8h_1a9e06c1f76a20fed54ca742cd25cb02c4">angle</link>, const <link linkend="_struct_s_d_l___point">SDL_Point</link> *center, const <link linkend="__s_d_l__render_8h_1a6280e56838e0e684caa0869c7c973c12">SDL_RendererFlip</link> flip)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1aa62bd2597d5a7650e7ad666c2a15e688">SDL_RenderDrawPointF</link> (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *renderer, float <link linkend="__s_d_l__opengl_8h_1ad0e63d0edcdbd3d79554076bf309fd47">x</link>, float <link linkend="__s_d_l__opengl_8h_1a1675d9d7bb68e1657ff028643b4037e3">y</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1a94cef2f19a261a175e3a748dd95bec69">SDL_RenderDrawPointsF</link> (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *renderer, const <link linkend="_struct_s_d_l___f_point">SDL_FPoint</link> *<link linkend="__s_d_l__opengl__glext_8h_1a0c0cc65d03e264ad2c5262927b620d3f">points</link>, int <link linkend="__s_d_l__opengl_8h_1a619bc20e8198de3bd3f3d7fc34de66b2">count</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1a05ad434757513f4b98de29aaee8f70e3">SDL_RenderDrawLineF</link> (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *renderer, float <link linkend="__s_d_l__opengl__glext_8h_1a49825216c96caaeb09237b36651181c5">x1</link>, float <link linkend="__s_d_l__opengl__glext_8h_1a3af6c78fcdfccea028a5878bc747ef39">y1</link>, float <link linkend="__s_d_l__opengl__glext_8h_1a7b907a03236685c534d89d604cff23c8">x2</link>, float <link linkend="__s_d_l__opengl__glext_8h_1a2be1135ed68e8d80fa9e130c7814f8c2">y2</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1a60727a3df49c84428e486cc067107406">SDL_RenderDrawLinesF</link> (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *renderer, const <link linkend="_struct_s_d_l___f_point">SDL_FPoint</link> *<link linkend="__s_d_l__opengl__glext_8h_1a0c0cc65d03e264ad2c5262927b620d3f">points</link>, int <link linkend="__s_d_l__opengl_8h_1a619bc20e8198de3bd3f3d7fc34de66b2">count</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1ae6ca4e63fe1189d44a42eb831c4f9dc2">SDL_RenderDrawRectF</link> (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *renderer, const <link linkend="_struct_s_d_l___f_rect">SDL_FRect</link> *rect)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1ac0be470fecfd02a348d017ef4dcac2e5">SDL_RenderDrawRectsF</link> (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *renderer, const <link linkend="_struct_s_d_l___f_rect">SDL_FRect</link> *rects, int <link linkend="__s_d_l__opengl_8h_1a619bc20e8198de3bd3f3d7fc34de66b2">count</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1afc08075c669fffd2ab7808ffedad3edc">SDL_RenderFillRectF</link> (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *renderer, const <link linkend="_struct_s_d_l___f_rect">SDL_FRect</link> *rect)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1a599b48b93c5f6e55f7c12c766205f8a1">SDL_RenderFillRectsF</link> (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *renderer, const <link linkend="_struct_s_d_l___f_rect">SDL_FRect</link> *rects, int <link linkend="__s_d_l__opengl_8h_1a619bc20e8198de3bd3f3d7fc34de66b2">count</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1a4514e3254853776f9c5202d8808e5354">SDL_RenderCopyF</link> (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *renderer, <link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> *<link linkend="__s_d_l__opengl__glext_8h_1a8f486379aef534669f4f06f515e7ce6c">texture</link>, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> *srcrect, const <link linkend="_struct_s_d_l___f_rect">SDL_FRect</link> *dstrect)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1ac7f9810c9b14afb97cd9b0bbc68ac73d">SDL_RenderCopyExF</link> (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *renderer, <link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> *<link linkend="__s_d_l__opengl__glext_8h_1a8f486379aef534669f4f06f515e7ce6c">texture</link>, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> *srcrect, const <link linkend="_struct_s_d_l___f_rect">SDL_FRect</link> *dstrect, const double <link linkend="__s_d_l__opengl__glext_8h_1a9e06c1f76a20fed54ca742cd25cb02c4">angle</link>, const <link linkend="_struct_s_d_l___f_point">SDL_FPoint</link> *center, const <link linkend="__s_d_l__render_8h_1a6280e56838e0e684caa0869c7c973c12">SDL_RendererFlip</link> flip)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1a7b2ac666852256d171a50e3af815a910">SDL_RenderGeometry</link> (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *renderer, <link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> *<link linkend="__s_d_l__opengl__glext_8h_1a8f486379aef534669f4f06f515e7ce6c">texture</link>, const <link linkend="_struct_s_d_l___vertex">SDL_Vertex</link> *vertices, int num_vertices, const int *<link linkend="__s_d_l__opengl_8h_1adbd1b09d60fa0a569e6873aa161d44c7">indices</link>, int num_indices)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1a7b20020e712422db59f9e76be9abc04f">SDL_RenderGeometryRaw</link> (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *renderer, <link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> *<link linkend="__s_d_l__opengl__glext_8h_1a8f486379aef534669f4f06f515e7ce6c">texture</link>, const float *xy, int xy_stride, const <link linkend="_struct_s_d_l___color">SDL_Color</link> *<link linkend="__s_d_l__opengl__glext_8h_1a3ea846f998d64f079b86052b6c4193a8">color</link>, int color_stride, const float *uv, int uv_stride, int num_vertices, const <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> *<link linkend="__s_d_l__opengl_8h_1adbd1b09d60fa0a569e6873aa161d44c7">indices</link>, int num_indices, int size_indices)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1a6aa7797b165275f1bdd76c3188a784f9">SDL_RenderReadPixels</link> (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *renderer, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> *rect, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> <link linkend="__s_d_l__audio_8h_1a71a65ffd977afe9c3fef116a5bc9ee27">format</link>, <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> *<link linkend="__s_d_l__opengl_8h_1ada7ad693ea2e311b8103f4693fc35f80">pixels</link>, int pitch)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1a48fa9d24395f3610746988ecca2aae86">SDL_RenderPresent</link> (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *renderer)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1a078c0a925e24542d356a02183a306be6">SDL_DestroyTexture</link> (<link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> *<link linkend="__s_d_l__opengl__glext_8h_1a8f486379aef534669f4f06f515e7ce6c">texture</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1ab1f096742fa9c882c3f1555ee62c4ac2">SDL_DestroyRenderer</link> (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *renderer)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1a1b874552e4d5dcfa069256e49c6c2ae4">SDL_RenderFlush</link> (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *renderer)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1a00a25a5b53d11a363aa8dac1120cd274">SDL_GL_BindTexture</link> (<link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> *<link linkend="__s_d_l__opengl__glext_8h_1a8f486379aef534669f4f06f515e7ce6c">texture</link>, float *texw, float *texh)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1aaf7df600fe205822dea3a9e56f6c78ad">SDL_GL_UnbindTexture</link> (<link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> *<link linkend="__s_d_l__opengl__glext_8h_1a8f486379aef534669f4f06f515e7ce6c">texture</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1a40ee6191edf8a60c9cb1adc00a10aefb">SDL_RenderGetMetalLayer</link> (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *renderer)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1a17c520ab4254564e2dddff455ecf9eb8">SDL_RenderGetMetalCommandEncoder</link> (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *renderer)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__render_8h_1afe68207df287bda5b85a4bb84e720522">SDL_RenderSetVSync</link> (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *renderer, int vsync)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Header file for SDL 2D rendering functions.</para>

<para>This API supports the following features:<itemizedlist>
<listitem>
<para>single pixel points</para>
</listitem><listitem>
<para>single pixel lines</para>
</listitem><listitem>
<para>filled rectangles</para>
</listitem><listitem>
<para>texture images</para>
</listitem></itemizedlist>
</para>

<para>The primitives may be drawn in opaque, blended, or additive modes.</para>

<para>The texture images may be drawn in opaque, blended, or additive modes. They can have an additional color tint or alpha modulation applied to them, and may also be stretched with linear interpolation.</para>

<para>This API is designed to accelerate simple 2D operations. You may want more functionality such as polygons and particle effects and in that case you should use SDL&apos;s OpenGL/Direct3D support or one of the many good 3D engines.</para>

<para>These functions must be called from the main thread. See this bug for details: <link xlink:href="http://bugzilla.libsdl.org/show_bug.cgi?id=1995">http://bugzilla.libsdl.org/show_bug.cgi?id=1995</link> </para>
</section>
<section>
<title>Typedef Documentation</title>
<anchor xml:id="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4"/><section>
    <title>SDL_Renderer</title>
<indexterm><primary>SDL_Renderer</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_Renderer</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> <link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link></computeroutput></para></section>
<anchor xml:id="__s_d_l__render_8h_1a0e001c8e25de272084c29c6431a80811"/><section>
    <title>SDL_RendererInfo</title>
<indexterm><primary>SDL_RendererInfo</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_RendererInfo</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_struct_s_d_l___renderer_info">SDL_RendererInfo</link> <link linkend="_struct_s_d_l___renderer_info">SDL_RendererInfo</link></computeroutput></para>
<para>Information on the capabilities of a render driver or context. </para>
</section>
<anchor xml:id="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5"/><section>
    <title>SDL_Texture</title>
<indexterm><primary>SDL_Texture</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_Texture</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> <link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link></computeroutput></para></section>
<anchor xml:id="__s_d_l__render_8h_1a2bd7b3f09dc5b728d6f2e34762bac869"/><section>
    <title>SDL_Vertex</title>
<indexterm><primary>SDL_Vertex</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_Vertex</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_struct_s_d_l___vertex">SDL_Vertex</link> <link linkend="_struct_s_d_l___vertex">SDL_Vertex</link></computeroutput></para>
<para>Vertex structure </para>
</section>
</section>
<section>
<title>Enumeration Type Documentation</title>
<anchor xml:id="__s_d_l__render_8h_1a3a6e51bbee5fd3f8ee0c9f7504ae4130"/><section>
    <title>SDL_RendererFlags</title>
<indexterm><primary>SDL_RendererFlags</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_RendererFlags</secondary></indexterm>
<para><computeroutput>enum <link linkend="__s_d_l__render_8h_1a3a6e51bbee5fd3f8ee0c9f7504ae4130">SDL_RendererFlags</link></computeroutput></para>
<para>Flags used when creating a rendering context </para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>SDL_RENDERER_SOFTWARE</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_RENDERER_SOFTWARE</secondary></indexterm>
<anchor xml:id="__s_d_l__render_8h_1a3a6e51bbee5fd3f8ee0c9f7504ae4130a02efc6cb7656c03d7a7d0164aced7e84"/>SDL_RENDERER_SOFTWARE</entry><entry>
<para>The renderer is a software fallback </para>
</entry></row><row><entry><indexterm><primary>SDL_RENDERER_ACCELERATED</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_RENDERER_ACCELERATED</secondary></indexterm>
<anchor xml:id="__s_d_l__render_8h_1a3a6e51bbee5fd3f8ee0c9f7504ae4130a1268ba2faaf6d9c7c7b71fc550f4248a"/>SDL_RENDERER_ACCELERATED</entry><entry>
<para>The renderer uses hardware acceleration </para>
</entry></row><row><entry><indexterm><primary>SDL_RENDERER_PRESENTVSYNC</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_RENDERER_PRESENTVSYNC</secondary></indexterm>
<anchor xml:id="__s_d_l__render_8h_1a3a6e51bbee5fd3f8ee0c9f7504ae4130a12abcfe685ff444f0fc727db981a0c83"/>SDL_RENDERER_PRESENTVSYNC</entry><entry>
<para>Present is synchronized with the refresh rate </para>
</entry></row><row><entry><indexterm><primary>SDL_RENDERER_TARGETTEXTURE</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_RENDERER_TARGETTEXTURE</secondary></indexterm>
<anchor xml:id="__s_d_l__render_8h_1a3a6e51bbee5fd3f8ee0c9f7504ae4130a77aa48df9c4f56f0b1c66c406da3ab81"/>SDL_RENDERER_TARGETTEXTURE</entry><entry>
<para>The renderer supports rendering to texture </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
</section>
<anchor xml:id="__s_d_l__render_8h_1a6280e56838e0e684caa0869c7c973c12"/><section>
    <title>SDL_RendererFlip</title>
<indexterm><primary>SDL_RendererFlip</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_RendererFlip</secondary></indexterm>
<para><computeroutput>enum <link linkend="__s_d_l__render_8h_1a6280e56838e0e684caa0869c7c973c12">SDL_RendererFlip</link></computeroutput></para>
<para>Flip constants for SDL_RenderCopyEx </para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>SDL_FLIP_NONE</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_FLIP_NONE</secondary></indexterm>
<anchor xml:id="__s_d_l__render_8h_1a6280e56838e0e684caa0869c7c973c12a580b026a6ad4e3493677ad47f3bd939a"/>SDL_FLIP_NONE</entry><entry>
<para>Do not flip </para>
</entry></row><row><entry><indexterm><primary>SDL_FLIP_HORIZONTAL</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_FLIP_HORIZONTAL</secondary></indexterm>
<anchor xml:id="__s_d_l__render_8h_1a6280e56838e0e684caa0869c7c973c12acfc2af6936e75fa246c98d316425c0ce"/>SDL_FLIP_HORIZONTAL</entry><entry>
<para>flip horizontally </para>
</entry></row><row><entry><indexterm><primary>SDL_FLIP_VERTICAL</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_FLIP_VERTICAL</secondary></indexterm>
<anchor xml:id="__s_d_l__render_8h_1a6280e56838e0e684caa0869c7c973c12a27ec807eec1d9adffced6a70cd85ef01"/>SDL_FLIP_VERTICAL</entry><entry>
<para>flip vertically </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
</section>
<anchor xml:id="__s_d_l__render_8h_1a7cee9cc7b0b54027860fde346ea26c71"/><section>
    <title>SDL_ScaleMode</title>
<indexterm><primary>SDL_ScaleMode</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_ScaleMode</secondary></indexterm>
<para><computeroutput>enum <link linkend="__s_d_l__render_8h_1a7cee9cc7b0b54027860fde346ea26c71">SDL_ScaleMode</link></computeroutput></para>
<para>The scaling mode for a texture. </para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>SDL_ScaleModeNearest</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_ScaleModeNearest</secondary></indexterm>
<anchor xml:id="__s_d_l__render_8h_1a7cee9cc7b0b54027860fde346ea26c71af7de2943791eb2a873139506d40a305d"/>SDL_ScaleModeNearest</entry><entry>
<para>nearest pixel sampling </para>
</entry></row><row><entry><indexterm><primary>SDL_ScaleModeLinear</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_ScaleModeLinear</secondary></indexterm>
<anchor xml:id="__s_d_l__render_8h_1a7cee9cc7b0b54027860fde346ea26c71a9558b9559ab5d26ac398bb18cc731365"/>SDL_ScaleModeLinear</entry><entry>
<para>linear filtering </para>
</entry></row><row><entry><indexterm><primary>SDL_ScaleModeBest</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_ScaleModeBest</secondary></indexterm>
<anchor xml:id="__s_d_l__render_8h_1a7cee9cc7b0b54027860fde346ea26c71adaae98d92cef330646363f08cdef6f9e"/>SDL_ScaleModeBest</entry><entry>
<para>anisotropic filtering </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
</section>
<anchor xml:id="__s_d_l__render_8h_1a6b8417d7af279e8a0d4a51233da99bc9"/><section>
    <title>SDL_TextureAccess</title>
<indexterm><primary>SDL_TextureAccess</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_TextureAccess</secondary></indexterm>
<para><computeroutput>enum <link linkend="__s_d_l__render_8h_1a6b8417d7af279e8a0d4a51233da99bc9">SDL_TextureAccess</link></computeroutput></para>
<para>The access pattern allowed for a texture. </para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>SDL_TEXTUREACCESS_STATIC</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_TEXTUREACCESS_STATIC</secondary></indexterm>
<anchor xml:id="__s_d_l__render_8h_1a6b8417d7af279e8a0d4a51233da99bc9a07c9015fe5cf4e0737d2836acdf00a34"/>SDL_TEXTUREACCESS_STATIC</entry><entry>
<para>Changes rarely, not lockable </para>
</entry></row><row><entry><indexterm><primary>SDL_TEXTUREACCESS_STREAMING</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_TEXTUREACCESS_STREAMING</secondary></indexterm>
<anchor xml:id="__s_d_l__render_8h_1a6b8417d7af279e8a0d4a51233da99bc9a19a4751f16e6b411aeb9c835d6c061b4"/>SDL_TEXTUREACCESS_STREAMING</entry><entry>
<para>Changes frequently, lockable </para>
</entry></row><row><entry><indexterm><primary>SDL_TEXTUREACCESS_TARGET</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_TEXTUREACCESS_TARGET</secondary></indexterm>
<anchor xml:id="__s_d_l__render_8h_1a6b8417d7af279e8a0d4a51233da99bc9a52249f41ca2ec4971ec96ee395868a9a"/>SDL_TEXTUREACCESS_TARGET</entry><entry>
<para>Texture can be used as a render target </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
</section>
<anchor xml:id="__s_d_l__render_8h_1a8d8aacd15cb2cb24e61ae1905e7a5ab5"/><section>
    <title>SDL_TextureModulate</title>
<indexterm><primary>SDL_TextureModulate</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_TextureModulate</secondary></indexterm>
<para><computeroutput>enum <link linkend="__s_d_l__render_8h_1a8d8aacd15cb2cb24e61ae1905e7a5ab5">SDL_TextureModulate</link></computeroutput></para>
<para>The texture channel modulation used in <link linkend="__s_d_l__render_8h_1a4b6c2353384c7b7128fd5960b24f2ae6">SDL_RenderCopy()</link>. </para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>SDL_TEXTUREMODULATE_NONE</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_TEXTUREMODULATE_NONE</secondary></indexterm>
<anchor xml:id="__s_d_l__render_8h_1a8d8aacd15cb2cb24e61ae1905e7a5ab5a3c1a49753bd4e0a8cfa7c64ed5a4b0df"/>SDL_TEXTUREMODULATE_NONE</entry><entry>
<para>No modulation </para>
</entry></row><row><entry><indexterm><primary>SDL_TEXTUREMODULATE_COLOR</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_TEXTUREMODULATE_COLOR</secondary></indexterm>
<anchor xml:id="__s_d_l__render_8h_1a8d8aacd15cb2cb24e61ae1905e7a5ab5a5a9d122094526405306483d856caa21e"/>SDL_TEXTUREMODULATE_COLOR</entry><entry>
<para>srcC = srcC * color </para>
</entry></row><row><entry><indexterm><primary>SDL_TEXTUREMODULATE_ALPHA</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_TEXTUREMODULATE_ALPHA</secondary></indexterm>
<anchor xml:id="__s_d_l__render_8h_1a8d8aacd15cb2cb24e61ae1905e7a5ab5a431abaf1e024cd43df94a967ba1e836f"/>SDL_TEXTUREMODULATE_ALPHA</entry><entry>
<para>srcA = srcA * alpha </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="__s_d_l__render_8h_1a4acc54236013e4ef625dcc362cc8b7d5"/><section>
    <title>SDL_CreateRenderer()</title>
<indexterm><primary>SDL_CreateRenderer</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_CreateRenderer</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_CreateRenderer (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window, int index, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> flags)</computeroutput></para>
<para>Create a 2D rendering context for a window.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>the window where rendering is displayed </para>
</entry>
                            </row>
                            <row>
<entry>index</entry><entry>
<para>the index of the rendering driver to initialize, or -1 to initialize the first one supporting the requested flags </para>
</entry>
                            </row>
                            <row>
<entry>flags</entry><entry>
<para>0, or one or more SDL_RendererFlags OR&apos;d together </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>a valid rendering context or NULL if there was an error; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1aeb5644ee43c35ed27e54e312a1cd954b">SDL_CreateSoftwareRenderer</link> </para>

<para><link linkend="__s_d_l__render_8h_1ab1f096742fa9c882c3f1555ee62c4ac2">SDL_DestroyRenderer</link> </para>

<para><link linkend="__s_d_l__render_8h_1a4dd8a7e6e6f0948541a1ff6b2ecff192">SDL_GetNumRenderDrivers</link> </para>

<para><link linkend="__s_d_l__render_8h_1afdc8a35ce033f5111843ac9518dc47a4">SDL_GetRendererInfo</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1aeb5644ee43c35ed27e54e312a1cd954b"/><section>
    <title>SDL_CreateSoftwareRenderer()</title>
<indexterm><primary>SDL_CreateSoftwareRenderer</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_CreateSoftwareRenderer</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_CreateSoftwareRenderer (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> * surface)</computeroutput></para>
<para>Create a 2D software rendering context for a surface.</para>

<para>Two other API which can be used to create SDL_Renderer: <link linkend="__s_d_l__render_8h_1a4acc54236013e4ef625dcc362cc8b7d5">SDL_CreateRenderer()</link> and <link linkend="__s_d_l__render_8h_1ac3aa070e5cda5bab246621f7efc9f143">SDL_CreateWindowAndRenderer()</link>. These can <emphasis>also</emphasis> create a software renderer, but they are intended to be used with an SDL_Window as the final destination and not an <link linkend="_struct_s_d_l___surface">SDL_Surface</link>.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>surface</entry><entry>
<para>the <link linkend="_struct_s_d_l___surface">SDL_Surface</link> structure representing the surface where rendering is done </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>a valid rendering context or NULL if there was an error; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1a4acc54236013e4ef625dcc362cc8b7d5">SDL_CreateRenderer</link> </para>

<para>SDL_CreateWindowRenderer </para>

<para><link linkend="__s_d_l__render_8h_1ab1f096742fa9c882c3f1555ee62c4ac2">SDL_DestroyRenderer</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1a7995b80913eedffe824a5bf1e81e80ed"/><section>
    <title>SDL_CreateTexture()</title>
<indexterm><primary>SDL_CreateTexture</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_CreateTexture</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_CreateTexture (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> * renderer, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> format, int access, int w, int h)</computeroutput></para>
<para>Create a texture for a rendering context.</para>

<para>You can set the texture scaling method by setting <computeroutput>SDL_HINT_RENDER_SCALE_QUALITY</computeroutput> before creating the texture.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>renderer</entry><entry>
<para>the rendering context </para>
</entry>
                            </row>
                            <row>
<entry>format</entry><entry>
<para>one of the enumerated values in SDL_PixelFormatEnum </para>
</entry>
                            </row>
                            <row>
<entry>access</entry><entry>
<para>one of the enumerated values in SDL_TextureAccess </para>
</entry>
                            </row>
                            <row>
<entry>w</entry><entry>
<para>the width of the texture in pixels </para>
</entry>
                            </row>
                            <row>
<entry>h</entry><entry>
<para>the height of the texture in pixels </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>a pointer to the created texture or NULL if no rendering context was active, the format was unsupported, or the width or height were out of range; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1a5c0f3b4f6fdb462e4292cd45e72719fb">SDL_CreateTextureFromSurface</link> </para>

<para><link linkend="__s_d_l__render_8h_1a078c0a925e24542d356a02183a306be6">SDL_DestroyTexture</link> </para>

<para><link linkend="__s_d_l__render_8h_1aade777757bfc3b98bf3ef742b1d8a052">SDL_QueryTexture</link> </para>

<para><link linkend="__s_d_l__render_8h_1a7aab41a7058997590095e5568d065c11">SDL_UpdateTexture</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1a5c0f3b4f6fdb462e4292cd45e72719fb"/><section>
    <title>SDL_CreateTextureFromSurface()</title>
<indexterm><primary>SDL_CreateTextureFromSurface</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_CreateTextureFromSurface</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_CreateTextureFromSurface (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> * renderer, <link linkend="_struct_s_d_l___surface">SDL_Surface</link> * surface)</computeroutput></para>
<para>Create a texture from an existing surface.</para>

<para>The surface is not modified or freed by this function.</para>

<para>The SDL_TextureAccess hint for the created texture is <computeroutput>SDL_TEXTUREACCESS_STATIC</computeroutput>.</para>

<para>The pixel format of the created texture may be different from the pixel format of the surface. Use <link linkend="__s_d_l__render_8h_1aade777757bfc3b98bf3ef742b1d8a052">SDL_QueryTexture()</link> to query the pixel format of the texture.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>renderer</entry><entry>
<para>the rendering context </para>
</entry>
                            </row>
                            <row>
<entry>surface</entry><entry>
<para>the <link linkend="_struct_s_d_l___surface">SDL_Surface</link> structure containing pixel data used to fill the texture </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>the created texture or NULL on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1a7995b80913eedffe824a5bf1e81e80ed">SDL_CreateTexture</link> </para>

<para><link linkend="__s_d_l__render_8h_1a078c0a925e24542d356a02183a306be6">SDL_DestroyTexture</link> </para>

<para><link linkend="__s_d_l__render_8h_1aade777757bfc3b98bf3ef742b1d8a052">SDL_QueryTexture</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1ac3aa070e5cda5bab246621f7efc9f143"/><section>
    <title>SDL_CreateWindowAndRenderer()</title>
<indexterm><primary>SDL_CreateWindowAndRenderer</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_CreateWindowAndRenderer</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_CreateWindowAndRenderer (int width, int height, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> window_flags, <link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> ** window, <link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> ** renderer)</computeroutput></para>
<para>Create a window and default renderer.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>width</entry><entry>
<para>the width of the window </para>
</entry>
                            </row>
                            <row>
<entry>height</entry><entry>
<para>the height of the window </para>
</entry>
                            </row>
                            <row>
<entry>window_flags</entry><entry>
<para>the flags used to create the window (see <link linkend="__s_d_l__video_8h_1a841edb930dc7cb2c1ec64f831d3abba6">SDL_CreateWindow()</link>) </para>
</entry>
                            </row>
                            <row>
<entry>window</entry><entry>
<para>a pointer filled with the window, or NULL on error </para>
</entry>
                            </row>
                            <row>
<entry>renderer</entry><entry>
<para>a pointer filled with the renderer, or NULL on error </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success, or -1 on error; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1a4acc54236013e4ef625dcc362cc8b7d5">SDL_CreateRenderer</link> </para>

<para><link linkend="__s_d_l__video_8h_1a841edb930dc7cb2c1ec64f831d3abba6">SDL_CreateWindow</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1ab1f096742fa9c882c3f1555ee62c4ac2"/><section>
    <title>SDL_DestroyRenderer()</title>
<indexterm><primary>SDL_DestroyRenderer</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_DestroyRenderer</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_DestroyRenderer (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> * renderer)</computeroutput></para>
<para>Destroy the rendering context for a window and free associated textures.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>renderer</entry><entry>
<para>the rendering context</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1a4acc54236013e4ef625dcc362cc8b7d5">SDL_CreateRenderer</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1a078c0a925e24542d356a02183a306be6"/><section>
    <title>SDL_DestroyTexture()</title>
<indexterm><primary>SDL_DestroyTexture</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_DestroyTexture</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_DestroyTexture (<link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> * texture)</computeroutput></para>
<para>Destroy the specified texture.</para>

<para>Passing NULL or an otherwise invalid texture will set the SDL error message to &quot;Invalid texture&quot;.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>texture</entry><entry>
<para>the texture to destroy</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1a7995b80913eedffe824a5bf1e81e80ed">SDL_CreateTexture</link> </para>

<para><link linkend="__s_d_l__render_8h_1a5c0f3b4f6fdb462e4292cd45e72719fb">SDL_CreateTextureFromSurface</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1a4dd8a7e6e6f0948541a1ff6b2ecff192"/><section>
    <title>SDL_GetNumRenderDrivers()</title>
<indexterm><primary>SDL_GetNumRenderDrivers</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_GetNumRenderDrivers</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetNumRenderDrivers (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> )</computeroutput></para>
<para>Get the number of 2D rendering drivers available for the current display.</para>

<para>A render driver is a set of code that handles rendering and texture management on a particular display. Normally there is only one, but some drivers may have several available with different capabilities.</para>

<para>There may be none if SDL was compiled without render support.</para>

<para><formalpara><title>Returns</title>

<para>a number &gt;= 0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1a4acc54236013e4ef625dcc362cc8b7d5">SDL_CreateRenderer</link> </para>

<para><link linkend="__s_d_l__render_8h_1aa9a7e1ca629863212c2c1b17112f65bd">SDL_GetRenderDriverInfo</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1a384109767532e9703652233571a0d3cf"/><section>
    <title>SDL_GetRenderDrawBlendMode()</title>
<indexterm><primary>SDL_GetRenderDrawBlendMode</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_GetRenderDrawBlendMode</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetRenderDrawBlendMode (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> * renderer, <link linkend="__s_d_l__blendmode_8h_1a850d3c67a878fd6698a1c8dbb1eabf1e">SDL_BlendMode</link> * blendMode)</computeroutput></para>
<para>Get the blend mode used for drawing operations.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>renderer</entry><entry>
<para>the rendering context </para>
</entry>
                            </row>
                            <row>
<entry>blendMode</entry><entry>
<para>a pointer filled in with the current SDL_BlendMode </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1a37e6e440b995756c9cc8a20fe3ca2385">SDL_SetRenderDrawBlendMode</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1a1b8e6544c3fc23ddd9b0f0bfb14cef39"/><section>
    <title>SDL_GetRenderDrawColor()</title>
<indexterm><primary>SDL_GetRenderDrawColor</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_GetRenderDrawColor</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetRenderDrawColor (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> * renderer, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> * r, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> * g, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> * b, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> * a)</computeroutput></para>
<para>Get the color used for drawing operations (Rect, Line and Clear).</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>renderer</entry><entry>
<para>the rendering context </para>
</entry>
                            </row>
                            <row>
<entry>r</entry><entry>
<para>a pointer filled in with the red value used to draw on the rendering target </para>
</entry>
                            </row>
                            <row>
<entry>g</entry><entry>
<para>a pointer filled in with the green value used to draw on the rendering target </para>
</entry>
                            </row>
                            <row>
<entry>b</entry><entry>
<para>a pointer filled in with the blue value used to draw on the rendering target </para>
</entry>
                            </row>
                            <row>
<entry>a</entry><entry>
<para>a pointer filled in with the alpha value used to draw on the rendering target; usually <computeroutput>SDL_ALPHA_OPAQUE</computeroutput> (255) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1aa26234da40f87f4b16d715564242a341">SDL_SetRenderDrawColor</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1aa9a7e1ca629863212c2c1b17112f65bd"/><section>
    <title>SDL_GetRenderDriverInfo()</title>
<indexterm><primary>SDL_GetRenderDriverInfo</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_GetRenderDriverInfo</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetRenderDriverInfo (int index, <link linkend="_struct_s_d_l___renderer_info">SDL_RendererInfo</link> * info)</computeroutput></para>
<para>Get info about a specific 2D rendering driver for the current display.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>index</entry><entry>
<para>the index of the driver to query information about </para>
</entry>
                            </row>
                            <row>
<entry>info</entry><entry>
<para>an <link linkend="_struct_s_d_l___renderer_info">SDL_RendererInfo</link> structure to be filled with information on the rendering driver </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1a4acc54236013e4ef625dcc362cc8b7d5">SDL_CreateRenderer</link> </para>

<para><link linkend="__s_d_l__render_8h_1a4dd8a7e6e6f0948541a1ff6b2ecff192">SDL_GetNumRenderDrivers</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1a6c60ba0582abbdf342e1d305e3c52362"/><section>
    <title>SDL_GetRenderer()</title>
<indexterm><primary>SDL_GetRenderer</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_GetRenderer</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetRenderer (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window)</computeroutput></para>
<para>Get the renderer associated with a window.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>the window to query </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>the rendering context on success or NULL on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1a4acc54236013e4ef625dcc362cc8b7d5">SDL_CreateRenderer</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1afdc8a35ce033f5111843ac9518dc47a4"/><section>
    <title>SDL_GetRendererInfo()</title>
<indexterm><primary>SDL_GetRendererInfo</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_GetRendererInfo</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetRendererInfo (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> * renderer, <link linkend="_struct_s_d_l___renderer_info">SDL_RendererInfo</link> * info)</computeroutput></para>
<para>Get information about a rendering context.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>renderer</entry><entry>
<para>the rendering context </para>
</entry>
                            </row>
                            <row>
<entry>info</entry><entry>
<para>an <link linkend="_struct_s_d_l___renderer_info">SDL_RendererInfo</link> structure filled with information about the current renderer </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1a4acc54236013e4ef625dcc362cc8b7d5">SDL_CreateRenderer</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1abfc0c9a50d9d1870ab7d271b7a73d8ab"/><section>
    <title>SDL_GetRendererOutputSize()</title>
<indexterm><primary>SDL_GetRendererOutputSize</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_GetRendererOutputSize</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetRendererOutputSize (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> * renderer, int * w, int * h)</computeroutput></para>
<para>Get the output size in pixels of a rendering context.</para>

<para>Due to high-dpi displays, you might end up with a rendering context that has more pixels than the window that contains it, so use this instead of <link linkend="__s_d_l__video_8h_1a5cbfffcfec91c22a7ca95fd1d5163db5">SDL_GetWindowSize()</link> to decide how much drawing area you have.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>renderer</entry><entry>
<para>the rendering context </para>
</entry>
                            </row>
                            <row>
<entry>w</entry><entry>
<para>an int filled with the width </para>
</entry>
                            </row>
                            <row>
<entry>h</entry><entry>
<para>an int filled with the height </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1a6c60ba0582abbdf342e1d305e3c52362">SDL_GetRenderer</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1a130a89bac84d075c44c3e9814238a658"/><section>
    <title>SDL_GetRenderTarget()</title>
<indexterm><primary>SDL_GetRenderTarget</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_GetRenderTarget</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetRenderTarget (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> * renderer)</computeroutput></para>
<para>Get the current render target.</para>

<para>The default render target is the window for which the renderer was created, and is reported a NULL here.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>renderer</entry><entry>
<para>the rendering context </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>the current render target or NULL for the default render target.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1a2479163b0f2909cc50cef7af3c279000">SDL_SetRenderTarget</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1a4d9a9e945ec95f30e5c48ce305de33ad"/><section>
    <title>SDL_GetTextureAlphaMod()</title>
<indexterm><primary>SDL_GetTextureAlphaMod</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_GetTextureAlphaMod</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetTextureAlphaMod (<link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> * texture, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> * alpha)</computeroutput></para>
<para>Get the additional alpha value multiplied into render copy operations.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>texture</entry><entry>
<para>the texture to query </para>
</entry>
                            </row>
                            <row>
<entry>alpha</entry><entry>
<para>a pointer filled in with the current alpha value </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1aa70e4ce3a875399d4291dca23e687b11">SDL_GetTextureColorMod</link> </para>

<para><link linkend="__s_d_l__render_8h_1a1cc3302a4c7fb3b37e8fd5263a80758b">SDL_SetTextureAlphaMod</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1a2595ee57e6f3a4882f3ae4062ca420c4"/><section>
    <title>SDL_GetTextureBlendMode()</title>
<indexterm><primary>SDL_GetTextureBlendMode</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_GetTextureBlendMode</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetTextureBlendMode (<link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> * texture, <link linkend="__s_d_l__blendmode_8h_1a850d3c67a878fd6698a1c8dbb1eabf1e">SDL_BlendMode</link> * blendMode)</computeroutput></para>
<para>Get the blend mode used for texture copy operations.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>texture</entry><entry>
<para>the texture to query </para>
</entry>
                            </row>
                            <row>
<entry>blendMode</entry><entry>
<para>a pointer filled in with the current SDL_BlendMode </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1af8b9cb77ca18f76c18f39d29ed960de8">SDL_SetTextureBlendMode</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1aa70e4ce3a875399d4291dca23e687b11"/><section>
    <title>SDL_GetTextureColorMod()</title>
<indexterm><primary>SDL_GetTextureColorMod</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_GetTextureColorMod</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetTextureColorMod (<link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> * texture, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> * r, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> * g, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> * b)</computeroutput></para>
<para>Get the additional color value multiplied into render copy operations.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>texture</entry><entry>
<para>the texture to query </para>
</entry>
                            </row>
                            <row>
<entry>r</entry><entry>
<para>a pointer filled in with the current red color value </para>
</entry>
                            </row>
                            <row>
<entry>g</entry><entry>
<para>a pointer filled in with the current green color value </para>
</entry>
                            </row>
                            <row>
<entry>b</entry><entry>
<para>a pointer filled in with the current blue color value </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1a4d9a9e945ec95f30e5c48ce305de33ad">SDL_GetTextureAlphaMod</link> </para>

<para><link linkend="__s_d_l__render_8h_1a348399db33c03a7882cef0c6e6c1756f">SDL_SetTextureColorMod</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1a51603afa1350164679baad97b77fb3b5"/><section>
    <title>SDL_GetTextureScaleMode()</title>
<indexterm><primary>SDL_GetTextureScaleMode</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_GetTextureScaleMode</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetTextureScaleMode (<link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> * texture, <link linkend="__s_d_l__render_8h_1a7cee9cc7b0b54027860fde346ea26c71">SDL_ScaleMode</link> * scaleMode)</computeroutput></para>
<para>Get the scale mode used for texture scale operations.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>texture</entry><entry>
<para>the texture to query. </para>
</entry>
                            </row>
                            <row>
<entry>scaleMode</entry><entry>
<para>a pointer filled in with the current scale mode. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success, or -1 if the texture is not valid.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.12.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1aac58837d42510e6e0472538dbcbc2ffe">SDL_SetTextureScaleMode</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1a6601680fa2e4a7c2c46d503392fc1afc"/><section>
    <title>SDL_GetTextureUserData()</title>
<indexterm><primary>SDL_GetTextureUserData</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_GetTextureUserData</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetTextureUserData (<link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> * texture)</computeroutput></para>
<para>Get the user-specified pointer associated with a texture</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>texture</entry><entry>
<para>the texture to query. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>the pointer associated with the texture, or NULL if the texture is not valid.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.18.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1a969ee973fd8f686777f151aa2d9275bc">SDL_SetTextureUserData</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1a00a25a5b53d11a363aa8dac1120cd274"/><section>
    <title>SDL_GL_BindTexture()</title>
<indexterm><primary>SDL_GL_BindTexture</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_GL_BindTexture</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GL_BindTexture (<link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> * texture, float * texw, float * texh)</computeroutput></para>
<para>Bind an OpenGL/ES/ES2 texture to the current context.</para>

<para>This is for use with OpenGL instructions when rendering OpenGL primitives directly.</para>

<para>If not NULL, <computeroutput>texw</computeroutput> and <computeroutput>texh</computeroutput> will be filled with the width and height values suitable for the provided texture. In most cases, both will be 1.0, however, on systems that support the GL_ARB_texture_rectangle extension, these values will actually be the pixel width and height used to create the texture, so this factor needs to be taken into account when providing texture coordinates to OpenGL.</para>

<para>You need a renderer to create an SDL_Texture, therefore you can only use this function with an implicit OpenGL context from <link linkend="__s_d_l__render_8h_1a4acc54236013e4ef625dcc362cc8b7d5">SDL_CreateRenderer()</link>, not with your own OpenGL context. If you need control over your OpenGL context, you need to write your own texture-loading methods.</para>

<para>Also note that SDL may upload RGB textures as BGR (or vice-versa), and re-order the color channels in the shaders phase, so the uploaded texture may have swapped color channels.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>texture</entry><entry>
<para>the texture to bind to the current OpenGL/ES/ES2 context </para>
</entry>
                            </row>
                            <row>
<entry>texw</entry><entry>
<para>a pointer to a float value which will be filled with the texture width or NULL if you don&apos;t need that value </para>
</entry>
                            </row>
                            <row>
<entry>texh</entry><entry>
<para>a pointer to a float value which will be filled with the texture height or NULL if you don&apos;t need that value </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success, or -1 if the operation is not supported; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a5a2ad98e8920f8069bf89eb3f9bbc377">SDL_GL_MakeCurrent</link> </para>

<para><link linkend="__s_d_l__render_8h_1aaf7df600fe205822dea3a9e56f6c78ad">SDL_GL_UnbindTexture</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1aaf7df600fe205822dea3a9e56f6c78ad"/><section>
    <title>SDL_GL_UnbindTexture()</title>
<indexterm><primary>SDL_GL_UnbindTexture</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_GL_UnbindTexture</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GL_UnbindTexture (<link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> * texture)</computeroutput></para>
<para>Unbind an OpenGL/ES/ES2 texture from the current context.</para>

<para>See <link linkend="__s_d_l__render_8h_1a00a25a5b53d11a363aa8dac1120cd274">SDL_GL_BindTexture()</link> for examples on how to use these functions</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>texture</entry><entry>
<para>the texture to unbind from the current OpenGL/ES/ES2 context </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success, or -1 if the operation is not supported</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1a00a25a5b53d11a363aa8dac1120cd274">SDL_GL_BindTexture</link> </para>

<para><link linkend="__s_d_l__video_8h_1a5a2ad98e8920f8069bf89eb3f9bbc377">SDL_GL_MakeCurrent</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1af64adcd12e4e9d41d48031fd3da7b913"/><section>
    <title>SDL_LockTexture()</title>
<indexterm><primary>SDL_LockTexture</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_LockTexture</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_LockTexture (<link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> * texture, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> * rect, <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> ** pixels, int * pitch)</computeroutput></para>
<para>Lock a portion of the texture for <emphasis role="bold">write-only</emphasis> pixel access.</para>

<para>As an optimization, the pixels made available for editing don&apos;t necessarily contain the old texture data. This is a write-only operation, and if you need to keep a copy of the texture data you should do that at the application level.</para>

<para>You must use <link linkend="__s_d_l__render_8h_1a7fc9db6cde77fc9c95a4f65bc7d30073">SDL_UnlockTexture()</link> to unlock the pixels and apply any changes.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>texture</entry><entry>
<para>the texture to lock for access, which was created with <computeroutput>SDL_TEXTUREACCESS_STREAMING</computeroutput> </para>
</entry>
                            </row>
                            <row>
<entry>rect</entry><entry>
<para>an <link linkend="_struct_s_d_l___rect">SDL_Rect</link> structure representing the area to lock for access; NULL to lock the entire texture </para>
</entry>
                            </row>
                            <row>
<entry>pixels</entry><entry>
<para>this is filled in with a pointer to the locked pixels, appropriately offset by the locked area </para>
</entry>
                            </row>
                            <row>
<entry>pitch</entry><entry>
<para>this is filled in with the pitch of the locked pixels; the pitch is the length of one row in bytes </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code if the texture is not valid or was not created with <computeroutput>SDL_TEXTUREACCESS_STREAMING</computeroutput>; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1a7fc9db6cde77fc9c95a4f65bc7d30073">SDL_UnlockTexture</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1af1f12f5baf50ec8c86235dd4528a4e0c"/><section>
    <title>SDL_LockTextureToSurface()</title>
<indexterm><primary>SDL_LockTextureToSurface</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_LockTextureToSurface</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_LockTextureToSurface (<link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> * texture, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> * rect, <link linkend="_struct_s_d_l___surface">SDL_Surface</link> ** surface)</computeroutput></para>
<para>Lock a portion of the texture for <emphasis role="bold">write-only</emphasis> pixel access, and expose it as a SDL surface.</para>

<para>Besides providing an <link linkend="_struct_s_d_l___surface">SDL_Surface</link> instead of raw pixel data, this function operates like SDL_LockTexture.</para>

<para>As an optimization, the pixels made available for editing don&apos;t necessarily contain the old texture data. This is a write-only operation, and if you need to keep a copy of the texture data you should do that at the application level.</para>

<para>You must use <link linkend="__s_d_l__render_8h_1a7fc9db6cde77fc9c95a4f65bc7d30073">SDL_UnlockTexture()</link> to unlock the pixels and apply any changes.</para>

<para>The returned surface is freed internally after calling <link linkend="__s_d_l__render_8h_1a7fc9db6cde77fc9c95a4f65bc7d30073">SDL_UnlockTexture()</link> or <link linkend="__s_d_l__render_8h_1a078c0a925e24542d356a02183a306be6">SDL_DestroyTexture()</link>. The caller should not free it.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>texture</entry><entry>
<para>the texture to lock for access, which was created with <computeroutput>SDL_TEXTUREACCESS_STREAMING</computeroutput> </para>
</entry>
                            </row>
                            <row>
<entry>rect</entry><entry>
<para>a pointer to the rectangle to lock for access. If the rect is NULL, the entire texture will be locked </para>
</entry>
                            </row>
                            <row>
<entry>surface</entry><entry>
<para>this is filled in with an SDL surface representing the locked area </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success, or -1 if the texture is not valid or was not created with <computeroutput>SDL_TEXTUREACCESS_STREAMING</computeroutput></para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.12.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1af64adcd12e4e9d41d48031fd3da7b913">SDL_LockTexture</link> </para>

<para><link linkend="__s_d_l__render_8h_1a7fc9db6cde77fc9c95a4f65bc7d30073">SDL_UnlockTexture</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1aade777757bfc3b98bf3ef742b1d8a052"/><section>
    <title>SDL_QueryTexture()</title>
<indexterm><primary>SDL_QueryTexture</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_QueryTexture</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_QueryTexture (<link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> * texture, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> * format, int * access, int * w, int * h)</computeroutput></para>
<para>Query the attributes of a texture.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>texture</entry><entry>
<para>the texture to query </para>
</entry>
                            </row>
                            <row>
<entry>format</entry><entry>
<para>a pointer filled in with the raw format of the texture; the actual format may differ, but pixel transfers will use this format (one of the SDL_PixelFormatEnum values) </para>
</entry>
                            </row>
                            <row>
<entry>access</entry><entry>
<para>a pointer filled in with the actual access to the texture (one of the SDL_TextureAccess values) </para>
</entry>
                            </row>
                            <row>
<entry>w</entry><entry>
<para>a pointer filled in with the width of the texture in pixels </para>
</entry>
                            </row>
                            <row>
<entry>h</entry><entry>
<para>a pointer filled in with the height of the texture in pixels </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1a7995b80913eedffe824a5bf1e81e80ed">SDL_CreateTexture</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1a473b4abbb29c60e98876eb68ad850f79"/><section>
    <title>SDL_RenderClear()</title>
<indexterm><primary>SDL_RenderClear</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_RenderClear</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_RenderClear (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> * renderer)</computeroutput></para>
<para>Clear the current rendering target with the drawing color.</para>

<para>This function clears the entire rendering target, ignoring the viewport and the clip rectangle.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>renderer</entry><entry>
<para>the rendering context </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1aa26234da40f87f4b16d715564242a341">SDL_SetRenderDrawColor</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1a4b6c2353384c7b7128fd5960b24f2ae6"/><section>
    <title>SDL_RenderCopy()</title>
<indexterm><primary>SDL_RenderCopy</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_RenderCopy</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_RenderCopy (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> * renderer, <link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> * texture, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> * srcrect, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> * dstrect)</computeroutput></para>
<para>Copy a portion of the texture to the current rendering target.</para>

<para>The texture is blended with the destination based on its blend mode set with <link linkend="__s_d_l__render_8h_1af8b9cb77ca18f76c18f39d29ed960de8">SDL_SetTextureBlendMode()</link>.</para>

<para>The texture color is affected based on its color modulation set by <link linkend="__s_d_l__render_8h_1a348399db33c03a7882cef0c6e6c1756f">SDL_SetTextureColorMod()</link>.</para>

<para>The texture alpha is affected based on its alpha modulation set by <link linkend="__s_d_l__render_8h_1a1cc3302a4c7fb3b37e8fd5263a80758b">SDL_SetTextureAlphaMod()</link>.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>renderer</entry><entry>
<para>the rendering context </para>
</entry>
                            </row>
                            <row>
<entry>texture</entry><entry>
<para>the source texture </para>
</entry>
                            </row>
                            <row>
<entry>srcrect</entry><entry>
<para>the source <link linkend="_struct_s_d_l___rect">SDL_Rect</link> structure or NULL for the entire texture </para>
</entry>
                            </row>
                            <row>
<entry>dstrect</entry><entry>
<para>the destination <link linkend="_struct_s_d_l___rect">SDL_Rect</link> structure or NULL for the entire rendering target; the texture will be stretched to fill the given rectangle </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1ac2c665c1ce910413272a004cdb52e28e">SDL_RenderCopyEx</link> </para>

<para><link linkend="__s_d_l__render_8h_1a1cc3302a4c7fb3b37e8fd5263a80758b">SDL_SetTextureAlphaMod</link> </para>

<para><link linkend="__s_d_l__render_8h_1af8b9cb77ca18f76c18f39d29ed960de8">SDL_SetTextureBlendMode</link> </para>

<para><link linkend="__s_d_l__render_8h_1a348399db33c03a7882cef0c6e6c1756f">SDL_SetTextureColorMod</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1ac2c665c1ce910413272a004cdb52e28e"/><section>
    <title>SDL_RenderCopyEx()</title>
<indexterm><primary>SDL_RenderCopyEx</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_RenderCopyEx</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_RenderCopyEx (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> * renderer, <link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> * texture, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> * srcrect, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> * dstrect, const double angle, const <link linkend="_struct_s_d_l___point">SDL_Point</link> * center, const <link linkend="__s_d_l__render_8h_1a6280e56838e0e684caa0869c7c973c12">SDL_RendererFlip</link> flip)</computeroutput></para>
<para>Copy a portion of the texture to the current rendering, with optional rotation and flipping.</para>

<para>Copy a portion of the texture to the current rendering target, optionally rotating it by angle around the given center and also flipping it top-bottom and/or left-right.</para>

<para>The texture is blended with the destination based on its blend mode set with <link linkend="__s_d_l__render_8h_1af8b9cb77ca18f76c18f39d29ed960de8">SDL_SetTextureBlendMode()</link>.</para>

<para>The texture color is affected based on its color modulation set by <link linkend="__s_d_l__render_8h_1a348399db33c03a7882cef0c6e6c1756f">SDL_SetTextureColorMod()</link>.</para>

<para>The texture alpha is affected based on its alpha modulation set by <link linkend="__s_d_l__render_8h_1a1cc3302a4c7fb3b37e8fd5263a80758b">SDL_SetTextureAlphaMod()</link>.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>renderer</entry><entry>
<para>the rendering context </para>
</entry>
                            </row>
                            <row>
<entry>texture</entry><entry>
<para>the source texture </para>
</entry>
                            </row>
                            <row>
<entry>srcrect</entry><entry>
<para>the source <link linkend="_struct_s_d_l___rect">SDL_Rect</link> structure or NULL for the entire texture </para>
</entry>
                            </row>
                            <row>
<entry>dstrect</entry><entry>
<para>the destination <link linkend="_struct_s_d_l___rect">SDL_Rect</link> structure or NULL for the entire rendering target </para>
</entry>
                            </row>
                            <row>
<entry>angle</entry><entry>
<para>an angle in degrees that indicates the rotation that will be applied to dstrect, rotating it in a clockwise direction </para>
</entry>
                            </row>
                            <row>
<entry>center</entry><entry>
<para>a pointer to a point indicating the point around which dstrect will be rotated (if NULL, rotation will be done around <computeroutput>dstrect.w / 2</computeroutput>, <computeroutput>dstrect.h / 2</computeroutput>) </para>
</entry>
                            </row>
                            <row>
<entry>flip</entry><entry>
<para>a SDL_RendererFlip value stating which flipping actions should be performed on the texture </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1a4b6c2353384c7b7128fd5960b24f2ae6">SDL_RenderCopy</link> </para>

<para><link linkend="__s_d_l__render_8h_1a1cc3302a4c7fb3b37e8fd5263a80758b">SDL_SetTextureAlphaMod</link> </para>

<para><link linkend="__s_d_l__render_8h_1af8b9cb77ca18f76c18f39d29ed960de8">SDL_SetTextureBlendMode</link> </para>

<para><link linkend="__s_d_l__render_8h_1a348399db33c03a7882cef0c6e6c1756f">SDL_SetTextureColorMod</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1ac7f9810c9b14afb97cd9b0bbc68ac73d"/><section>
    <title>SDL_RenderCopyExF()</title>
<indexterm><primary>SDL_RenderCopyExF</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_RenderCopyExF</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_RenderCopyExF (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> * renderer, <link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> * texture, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> * srcrect, const <link linkend="_struct_s_d_l___f_rect">SDL_FRect</link> * dstrect, const double angle, const <link linkend="_struct_s_d_l___f_point">SDL_FPoint</link> * center, const <link linkend="__s_d_l__render_8h_1a6280e56838e0e684caa0869c7c973c12">SDL_RendererFlip</link> flip)</computeroutput></para>
<para>Copy a portion of the source texture to the current rendering target, with rotation and flipping, at subpixel precision.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>renderer</entry><entry>
<para>The renderer which should copy parts of a texture. </para>
</entry>
                            </row>
                            <row>
<entry>texture</entry><entry>
<para>The source texture. </para>
</entry>
                            </row>
                            <row>
<entry>srcrect</entry><entry>
<para>A pointer to the source rectangle, or NULL for the entire texture. </para>
</entry>
                            </row>
                            <row>
<entry>dstrect</entry><entry>
<para>A pointer to the destination rectangle, or NULL for the entire rendering target. </para>
</entry>
                            </row>
                            <row>
<entry>angle</entry><entry>
<para>An angle in degrees that indicates the rotation that will be applied to dstrect, rotating it in a clockwise direction </para>
</entry>
                            </row>
                            <row>
<entry>center</entry><entry>
<para>A pointer to a point indicating the point around which dstrect will be rotated (if NULL, rotation will be done around dstrect.w/2, dstrect.h/2). </para>
</entry>
                            </row>
                            <row>
<entry>flip</entry><entry>
<para>An SDL_RendererFlip value stating which flipping actions should be performed on the texture </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success, or -1 on error</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.10. </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1a4514e3254853776f9c5202d8808e5354"/><section>
    <title>SDL_RenderCopyF()</title>
<indexterm><primary>SDL_RenderCopyF</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_RenderCopyF</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_RenderCopyF (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> * renderer, <link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> * texture, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> * srcrect, const <link linkend="_struct_s_d_l___f_rect">SDL_FRect</link> * dstrect)</computeroutput></para>
<para>Copy a portion of the texture to the current rendering target at subpixel precision.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>renderer</entry><entry>
<para>The renderer which should copy parts of a texture. </para>
</entry>
                            </row>
                            <row>
<entry>texture</entry><entry>
<para>The source texture. </para>
</entry>
                            </row>
                            <row>
<entry>srcrect</entry><entry>
<para>A pointer to the source rectangle, or NULL for the entire texture. </para>
</entry>
                            </row>
                            <row>
<entry>dstrect</entry><entry>
<para>A pointer to the destination rectangle, or NULL for the entire rendering target. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success, or -1 on error</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.10. </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1a6d50e252f15e0c6c14639bdd343285fd"/><section>
    <title>SDL_RenderDrawLine()</title>
<indexterm><primary>SDL_RenderDrawLine</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_RenderDrawLine</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_RenderDrawLine (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> * renderer, int x1, int y1, int x2, int y2)</computeroutput></para>
<para>Draw a line on the current rendering target.</para>

<para><link linkend="__s_d_l__render_8h_1a6d50e252f15e0c6c14639bdd343285fd">SDL_RenderDrawLine()</link> draws the line to include both end points. If you want to draw multiple, connecting lines use <link linkend="__s_d_l__render_8h_1a556f150677bb965448b7b361bceb7a76">SDL_RenderDrawLines()</link> instead.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>renderer</entry><entry>
<para>the rendering context </para>
</entry>
                            </row>
                            <row>
<entry>x1</entry><entry>
<para>the x coordinate of the start point </para>
</entry>
                            </row>
                            <row>
<entry>y1</entry><entry>
<para>the y coordinate of the start point </para>
</entry>
                            </row>
                            <row>
<entry>x2</entry><entry>
<para>the x coordinate of the end point </para>
</entry>
                            </row>
                            <row>
<entry>y2</entry><entry>
<para>the y coordinate of the end point </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1a556f150677bb965448b7b361bceb7a76">SDL_RenderDrawLines</link> </para>

<para><link linkend="__s_d_l__render_8h_1ab576a09c91675dbd8dba9d05dd2fc0bc">SDL_RenderDrawPoint</link> </para>

<para><link linkend="__s_d_l__render_8h_1a8ff1a991e7a2599cfc9ea43dfa920d0b">SDL_RenderDrawPoints</link> </para>

<para><link linkend="__s_d_l__render_8h_1ab2a89b5a0c25adb6abdb9aeff28f177c">SDL_RenderDrawRect</link> </para>

<para><link linkend="__s_d_l__render_8h_1ae56460fe1b478a55916650e695145cbf">SDL_RenderDrawRects</link> </para>

<para><link linkend="__s_d_l__render_8h_1a3b5098c1944441034d2c5cff419f93cc">SDL_RenderFillRect</link> </para>

<para><link linkend="__s_d_l__render_8h_1a987fe30e64168702f1dfa6407fbe8bec">SDL_RenderFillRects</link> </para>

<para><link linkend="__s_d_l__render_8h_1a48fa9d24395f3610746988ecca2aae86">SDL_RenderPresent</link> </para>

<para><link linkend="__s_d_l__render_8h_1a37e6e440b995756c9cc8a20fe3ca2385">SDL_SetRenderDrawBlendMode</link> </para>

<para><link linkend="__s_d_l__render_8h_1aa26234da40f87f4b16d715564242a341">SDL_SetRenderDrawColor</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1a05ad434757513f4b98de29aaee8f70e3"/><section>
    <title>SDL_RenderDrawLineF()</title>
<indexterm><primary>SDL_RenderDrawLineF</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_RenderDrawLineF</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_RenderDrawLineF (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> * renderer, float x1, float y1, float x2, float y2)</computeroutput></para>
<para>Draw a line on the current rendering target at subpixel precision.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>renderer</entry><entry>
<para>The renderer which should draw a line. </para>
</entry>
                            </row>
                            <row>
<entry>x1</entry><entry>
<para>The x coordinate of the start point. </para>
</entry>
                            </row>
                            <row>
<entry>y1</entry><entry>
<para>The y coordinate of the start point. </para>
</entry>
                            </row>
                            <row>
<entry>x2</entry><entry>
<para>The x coordinate of the end point. </para>
</entry>
                            </row>
                            <row>
<entry>y2</entry><entry>
<para>The y coordinate of the end point. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success, or -1 on error</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.10. </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1a556f150677bb965448b7b361bceb7a76"/><section>
    <title>SDL_RenderDrawLines()</title>
<indexterm><primary>SDL_RenderDrawLines</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_RenderDrawLines</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_RenderDrawLines (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> * renderer, const <link linkend="_struct_s_d_l___point">SDL_Point</link> * points, int count)</computeroutput></para>
<para>Draw a series of connected lines on the current rendering target.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>renderer</entry><entry>
<para>the rendering context </para>
</entry>
                            </row>
                            <row>
<entry>points</entry><entry>
<para>an array of <link linkend="_struct_s_d_l___point">SDL_Point</link> structures representing points along the lines </para>
</entry>
                            </row>
                            <row>
<entry>count</entry><entry>
<para>the number of points, drawing count-1 lines </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1a6d50e252f15e0c6c14639bdd343285fd">SDL_RenderDrawLine</link> </para>

<para><link linkend="__s_d_l__render_8h_1ab576a09c91675dbd8dba9d05dd2fc0bc">SDL_RenderDrawPoint</link> </para>

<para><link linkend="__s_d_l__render_8h_1a8ff1a991e7a2599cfc9ea43dfa920d0b">SDL_RenderDrawPoints</link> </para>

<para><link linkend="__s_d_l__render_8h_1ab2a89b5a0c25adb6abdb9aeff28f177c">SDL_RenderDrawRect</link> </para>

<para><link linkend="__s_d_l__render_8h_1ae56460fe1b478a55916650e695145cbf">SDL_RenderDrawRects</link> </para>

<para><link linkend="__s_d_l__render_8h_1a3b5098c1944441034d2c5cff419f93cc">SDL_RenderFillRect</link> </para>

<para><link linkend="__s_d_l__render_8h_1a987fe30e64168702f1dfa6407fbe8bec">SDL_RenderFillRects</link> </para>

<para><link linkend="__s_d_l__render_8h_1a48fa9d24395f3610746988ecca2aae86">SDL_RenderPresent</link> </para>

<para><link linkend="__s_d_l__render_8h_1a37e6e440b995756c9cc8a20fe3ca2385">SDL_SetRenderDrawBlendMode</link> </para>

<para><link linkend="__s_d_l__render_8h_1aa26234da40f87f4b16d715564242a341">SDL_SetRenderDrawColor</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1a60727a3df49c84428e486cc067107406"/><section>
    <title>SDL_RenderDrawLinesF()</title>
<indexterm><primary>SDL_RenderDrawLinesF</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_RenderDrawLinesF</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_RenderDrawLinesF (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> * renderer, const <link linkend="_struct_s_d_l___f_point">SDL_FPoint</link> * points, int count)</computeroutput></para>
<para>Draw a series of connected lines on the current rendering target at subpixel precision.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>renderer</entry><entry>
<para>The renderer which should draw multiple lines. </para>
</entry>
                            </row>
                            <row>
<entry>points</entry><entry>
<para>The points along the lines </para>
</entry>
                            </row>
                            <row>
<entry>count</entry><entry>
<para>The number of points, drawing count-1 lines </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success, or -1 on error</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.10. </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1ab576a09c91675dbd8dba9d05dd2fc0bc"/><section>
    <title>SDL_RenderDrawPoint()</title>
<indexterm><primary>SDL_RenderDrawPoint</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_RenderDrawPoint</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_RenderDrawPoint (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> * renderer, int x, int y)</computeroutput></para>
<para>Draw a point on the current rendering target.</para>

<para><link linkend="__s_d_l__render_8h_1ab576a09c91675dbd8dba9d05dd2fc0bc">SDL_RenderDrawPoint()</link> draws a single point. If you want to draw multiple, use <link linkend="__s_d_l__render_8h_1a8ff1a991e7a2599cfc9ea43dfa920d0b">SDL_RenderDrawPoints()</link> instead.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>renderer</entry><entry>
<para>the rendering context </para>
</entry>
                            </row>
                            <row>
<entry>x</entry><entry>
<para>the x coordinate of the point </para>
</entry>
                            </row>
                            <row>
<entry>y</entry><entry>
<para>the y coordinate of the point </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1a6d50e252f15e0c6c14639bdd343285fd">SDL_RenderDrawLine</link> </para>

<para><link linkend="__s_d_l__render_8h_1a556f150677bb965448b7b361bceb7a76">SDL_RenderDrawLines</link> </para>

<para><link linkend="__s_d_l__render_8h_1a8ff1a991e7a2599cfc9ea43dfa920d0b">SDL_RenderDrawPoints</link> </para>

<para><link linkend="__s_d_l__render_8h_1ab2a89b5a0c25adb6abdb9aeff28f177c">SDL_RenderDrawRect</link> </para>

<para><link linkend="__s_d_l__render_8h_1ae56460fe1b478a55916650e695145cbf">SDL_RenderDrawRects</link> </para>

<para><link linkend="__s_d_l__render_8h_1a3b5098c1944441034d2c5cff419f93cc">SDL_RenderFillRect</link> </para>

<para><link linkend="__s_d_l__render_8h_1a987fe30e64168702f1dfa6407fbe8bec">SDL_RenderFillRects</link> </para>

<para><link linkend="__s_d_l__render_8h_1a48fa9d24395f3610746988ecca2aae86">SDL_RenderPresent</link> </para>

<para><link linkend="__s_d_l__render_8h_1a37e6e440b995756c9cc8a20fe3ca2385">SDL_SetRenderDrawBlendMode</link> </para>

<para><link linkend="__s_d_l__render_8h_1aa26234da40f87f4b16d715564242a341">SDL_SetRenderDrawColor</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1aa62bd2597d5a7650e7ad666c2a15e688"/><section>
    <title>SDL_RenderDrawPointF()</title>
<indexterm><primary>SDL_RenderDrawPointF</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_RenderDrawPointF</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_RenderDrawPointF (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> * renderer, float x, float y)</computeroutput></para>
<para>Draw a point on the current rendering target at subpixel precision.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>renderer</entry><entry>
<para>The renderer which should draw a point. </para>
</entry>
                            </row>
                            <row>
<entry>x</entry><entry>
<para>The x coordinate of the point. </para>
</entry>
                            </row>
                            <row>
<entry>y</entry><entry>
<para>The y coordinate of the point. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success, or -1 on error</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.10. </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1a8ff1a991e7a2599cfc9ea43dfa920d0b"/><section>
    <title>SDL_RenderDrawPoints()</title>
<indexterm><primary>SDL_RenderDrawPoints</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_RenderDrawPoints</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_RenderDrawPoints (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> * renderer, const <link linkend="_struct_s_d_l___point">SDL_Point</link> * points, int count)</computeroutput></para>
<para>Draw multiple points on the current rendering target.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>renderer</entry><entry>
<para>the rendering context </para>
</entry>
                            </row>
                            <row>
<entry>points</entry><entry>
<para>an array of <link linkend="_struct_s_d_l___point">SDL_Point</link> structures that represent the points to draw </para>
</entry>
                            </row>
                            <row>
<entry>count</entry><entry>
<para>the number of points to draw </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1a6d50e252f15e0c6c14639bdd343285fd">SDL_RenderDrawLine</link> </para>

<para><link linkend="__s_d_l__render_8h_1a556f150677bb965448b7b361bceb7a76">SDL_RenderDrawLines</link> </para>

<para><link linkend="__s_d_l__render_8h_1ab576a09c91675dbd8dba9d05dd2fc0bc">SDL_RenderDrawPoint</link> </para>

<para><link linkend="__s_d_l__render_8h_1ab2a89b5a0c25adb6abdb9aeff28f177c">SDL_RenderDrawRect</link> </para>

<para><link linkend="__s_d_l__render_8h_1ae56460fe1b478a55916650e695145cbf">SDL_RenderDrawRects</link> </para>

<para><link linkend="__s_d_l__render_8h_1a3b5098c1944441034d2c5cff419f93cc">SDL_RenderFillRect</link> </para>

<para><link linkend="__s_d_l__render_8h_1a987fe30e64168702f1dfa6407fbe8bec">SDL_RenderFillRects</link> </para>

<para><link linkend="__s_d_l__render_8h_1a48fa9d24395f3610746988ecca2aae86">SDL_RenderPresent</link> </para>

<para><link linkend="__s_d_l__render_8h_1a37e6e440b995756c9cc8a20fe3ca2385">SDL_SetRenderDrawBlendMode</link> </para>

<para><link linkend="__s_d_l__render_8h_1aa26234da40f87f4b16d715564242a341">SDL_SetRenderDrawColor</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1a94cef2f19a261a175e3a748dd95bec69"/><section>
    <title>SDL_RenderDrawPointsF()</title>
<indexterm><primary>SDL_RenderDrawPointsF</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_RenderDrawPointsF</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_RenderDrawPointsF (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> * renderer, const <link linkend="_struct_s_d_l___f_point">SDL_FPoint</link> * points, int count)</computeroutput></para>
<para>Draw multiple points on the current rendering target at subpixel precision.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>renderer</entry><entry>
<para>The renderer which should draw multiple points. </para>
</entry>
                            </row>
                            <row>
<entry>points</entry><entry>
<para>The points to draw </para>
</entry>
                            </row>
                            <row>
<entry>count</entry><entry>
<para>The number of points to draw </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success, or -1 on error</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.10. </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1ab2a89b5a0c25adb6abdb9aeff28f177c"/><section>
    <title>SDL_RenderDrawRect()</title>
<indexterm><primary>SDL_RenderDrawRect</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_RenderDrawRect</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_RenderDrawRect (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> * renderer, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> * rect)</computeroutput></para>
<para>Draw a rectangle on the current rendering target.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>renderer</entry><entry>
<para>the rendering context </para>
</entry>
                            </row>
                            <row>
<entry>rect</entry><entry>
<para>an <link linkend="_struct_s_d_l___rect">SDL_Rect</link> structure representing the rectangle to draw, or NULL to outline the entire rendering target </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1a6d50e252f15e0c6c14639bdd343285fd">SDL_RenderDrawLine</link> </para>

<para><link linkend="__s_d_l__render_8h_1a556f150677bb965448b7b361bceb7a76">SDL_RenderDrawLines</link> </para>

<para><link linkend="__s_d_l__render_8h_1ab576a09c91675dbd8dba9d05dd2fc0bc">SDL_RenderDrawPoint</link> </para>

<para><link linkend="__s_d_l__render_8h_1a8ff1a991e7a2599cfc9ea43dfa920d0b">SDL_RenderDrawPoints</link> </para>

<para><link linkend="__s_d_l__render_8h_1ae56460fe1b478a55916650e695145cbf">SDL_RenderDrawRects</link> </para>

<para><link linkend="__s_d_l__render_8h_1a3b5098c1944441034d2c5cff419f93cc">SDL_RenderFillRect</link> </para>

<para><link linkend="__s_d_l__render_8h_1a987fe30e64168702f1dfa6407fbe8bec">SDL_RenderFillRects</link> </para>

<para><link linkend="__s_d_l__render_8h_1a48fa9d24395f3610746988ecca2aae86">SDL_RenderPresent</link> </para>

<para><link linkend="__s_d_l__render_8h_1a37e6e440b995756c9cc8a20fe3ca2385">SDL_SetRenderDrawBlendMode</link> </para>

<para><link linkend="__s_d_l__render_8h_1aa26234da40f87f4b16d715564242a341">SDL_SetRenderDrawColor</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1ae6ca4e63fe1189d44a42eb831c4f9dc2"/><section>
    <title>SDL_RenderDrawRectF()</title>
<indexterm><primary>SDL_RenderDrawRectF</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_RenderDrawRectF</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_RenderDrawRectF (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> * renderer, const <link linkend="_struct_s_d_l___f_rect">SDL_FRect</link> * rect)</computeroutput></para>
<para>Draw a rectangle on the current rendering target at subpixel precision.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>renderer</entry><entry>
<para>The renderer which should draw a rectangle. </para>
</entry>
                            </row>
                            <row>
<entry>rect</entry><entry>
<para>A pointer to the destination rectangle, or NULL to outline the entire rendering target. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success, or -1 on error</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.10. </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1ae56460fe1b478a55916650e695145cbf"/><section>
    <title>SDL_RenderDrawRects()</title>
<indexterm><primary>SDL_RenderDrawRects</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_RenderDrawRects</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_RenderDrawRects (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> * renderer, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> * rects, int count)</computeroutput></para>
<para>Draw some number of rectangles on the current rendering target.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>renderer</entry><entry>
<para>the rendering context </para>
</entry>
                            </row>
                            <row>
<entry>rects</entry><entry>
<para>an array of <link linkend="_struct_s_d_l___rect">SDL_Rect</link> structures representing the rectangles to be drawn </para>
</entry>
                            </row>
                            <row>
<entry>count</entry><entry>
<para>the number of rectangles </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1a6d50e252f15e0c6c14639bdd343285fd">SDL_RenderDrawLine</link> </para>

<para><link linkend="__s_d_l__render_8h_1a556f150677bb965448b7b361bceb7a76">SDL_RenderDrawLines</link> </para>

<para><link linkend="__s_d_l__render_8h_1ab576a09c91675dbd8dba9d05dd2fc0bc">SDL_RenderDrawPoint</link> </para>

<para><link linkend="__s_d_l__render_8h_1a8ff1a991e7a2599cfc9ea43dfa920d0b">SDL_RenderDrawPoints</link> </para>

<para><link linkend="__s_d_l__render_8h_1ab2a89b5a0c25adb6abdb9aeff28f177c">SDL_RenderDrawRect</link> </para>

<para><link linkend="__s_d_l__render_8h_1a3b5098c1944441034d2c5cff419f93cc">SDL_RenderFillRect</link> </para>

<para><link linkend="__s_d_l__render_8h_1a987fe30e64168702f1dfa6407fbe8bec">SDL_RenderFillRects</link> </para>

<para><link linkend="__s_d_l__render_8h_1a48fa9d24395f3610746988ecca2aae86">SDL_RenderPresent</link> </para>

<para><link linkend="__s_d_l__render_8h_1a37e6e440b995756c9cc8a20fe3ca2385">SDL_SetRenderDrawBlendMode</link> </para>

<para><link linkend="__s_d_l__render_8h_1aa26234da40f87f4b16d715564242a341">SDL_SetRenderDrawColor</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1ac0be470fecfd02a348d017ef4dcac2e5"/><section>
    <title>SDL_RenderDrawRectsF()</title>
<indexterm><primary>SDL_RenderDrawRectsF</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_RenderDrawRectsF</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_RenderDrawRectsF (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> * renderer, const <link linkend="_struct_s_d_l___f_rect">SDL_FRect</link> * rects, int count)</computeroutput></para>
<para>Draw some number of rectangles on the current rendering target at subpixel precision.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>renderer</entry><entry>
<para>The renderer which should draw multiple rectangles. </para>
</entry>
                            </row>
                            <row>
<entry>rects</entry><entry>
<para>A pointer to an array of destination rectangles. </para>
</entry>
                            </row>
                            <row>
<entry>count</entry><entry>
<para>The number of rectangles. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success, or -1 on error</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.10. </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1a3b5098c1944441034d2c5cff419f93cc"/><section>
    <title>SDL_RenderFillRect()</title>
<indexterm><primary>SDL_RenderFillRect</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_RenderFillRect</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_RenderFillRect (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> * renderer, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> * rect)</computeroutput></para>
<para>Fill a rectangle on the current rendering target with the drawing color.</para>

<para>The current drawing color is set by <link linkend="__s_d_l__render_8h_1aa26234da40f87f4b16d715564242a341">SDL_SetRenderDrawColor()</link>, and the color&apos;s alpha value is ignored unless blending is enabled with the appropriate call to <link linkend="__s_d_l__render_8h_1a37e6e440b995756c9cc8a20fe3ca2385">SDL_SetRenderDrawBlendMode()</link>.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>renderer</entry><entry>
<para>the rendering context </para>
</entry>
                            </row>
                            <row>
<entry>rect</entry><entry>
<para>the <link linkend="_struct_s_d_l___rect">SDL_Rect</link> structure representing the rectangle to fill, or NULL for the entire rendering target </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1a6d50e252f15e0c6c14639bdd343285fd">SDL_RenderDrawLine</link> </para>

<para><link linkend="__s_d_l__render_8h_1a556f150677bb965448b7b361bceb7a76">SDL_RenderDrawLines</link> </para>

<para><link linkend="__s_d_l__render_8h_1ab576a09c91675dbd8dba9d05dd2fc0bc">SDL_RenderDrawPoint</link> </para>

<para><link linkend="__s_d_l__render_8h_1a8ff1a991e7a2599cfc9ea43dfa920d0b">SDL_RenderDrawPoints</link> </para>

<para><link linkend="__s_d_l__render_8h_1ab2a89b5a0c25adb6abdb9aeff28f177c">SDL_RenderDrawRect</link> </para>

<para><link linkend="__s_d_l__render_8h_1ae56460fe1b478a55916650e695145cbf">SDL_RenderDrawRects</link> </para>

<para><link linkend="__s_d_l__render_8h_1a987fe30e64168702f1dfa6407fbe8bec">SDL_RenderFillRects</link> </para>

<para><link linkend="__s_d_l__render_8h_1a48fa9d24395f3610746988ecca2aae86">SDL_RenderPresent</link> </para>

<para><link linkend="__s_d_l__render_8h_1a37e6e440b995756c9cc8a20fe3ca2385">SDL_SetRenderDrawBlendMode</link> </para>

<para><link linkend="__s_d_l__render_8h_1aa26234da40f87f4b16d715564242a341">SDL_SetRenderDrawColor</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1afc08075c669fffd2ab7808ffedad3edc"/><section>
    <title>SDL_RenderFillRectF()</title>
<indexterm><primary>SDL_RenderFillRectF</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_RenderFillRectF</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_RenderFillRectF (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> * renderer, const <link linkend="_struct_s_d_l___f_rect">SDL_FRect</link> * rect)</computeroutput></para>
<para>Fill a rectangle on the current rendering target with the drawing color at subpixel precision.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>renderer</entry><entry>
<para>The renderer which should fill a rectangle. </para>
</entry>
                            </row>
                            <row>
<entry>rect</entry><entry>
<para>A pointer to the destination rectangle, or NULL for the entire rendering target. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success, or -1 on error</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.10. </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1a987fe30e64168702f1dfa6407fbe8bec"/><section>
    <title>SDL_RenderFillRects()</title>
<indexterm><primary>SDL_RenderFillRects</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_RenderFillRects</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_RenderFillRects (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> * renderer, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> * rects, int count)</computeroutput></para>
<para>Fill some number of rectangles on the current rendering target with the drawing color.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>renderer</entry><entry>
<para>the rendering context </para>
</entry>
                            </row>
                            <row>
<entry>rects</entry><entry>
<para>an array of <link linkend="_struct_s_d_l___rect">SDL_Rect</link> structures representing the rectangles to be filled </para>
</entry>
                            </row>
                            <row>
<entry>count</entry><entry>
<para>the number of rectangles </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1a6d50e252f15e0c6c14639bdd343285fd">SDL_RenderDrawLine</link> </para>

<para><link linkend="__s_d_l__render_8h_1a556f150677bb965448b7b361bceb7a76">SDL_RenderDrawLines</link> </para>

<para><link linkend="__s_d_l__render_8h_1ab576a09c91675dbd8dba9d05dd2fc0bc">SDL_RenderDrawPoint</link> </para>

<para><link linkend="__s_d_l__render_8h_1a8ff1a991e7a2599cfc9ea43dfa920d0b">SDL_RenderDrawPoints</link> </para>

<para><link linkend="__s_d_l__render_8h_1ab2a89b5a0c25adb6abdb9aeff28f177c">SDL_RenderDrawRect</link> </para>

<para><link linkend="__s_d_l__render_8h_1ae56460fe1b478a55916650e695145cbf">SDL_RenderDrawRects</link> </para>

<para><link linkend="__s_d_l__render_8h_1a3b5098c1944441034d2c5cff419f93cc">SDL_RenderFillRect</link> </para>

<para><link linkend="__s_d_l__render_8h_1a48fa9d24395f3610746988ecca2aae86">SDL_RenderPresent</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1a599b48b93c5f6e55f7c12c766205f8a1"/><section>
    <title>SDL_RenderFillRectsF()</title>
<indexterm><primary>SDL_RenderFillRectsF</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_RenderFillRectsF</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_RenderFillRectsF (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> * renderer, const <link linkend="_struct_s_d_l___f_rect">SDL_FRect</link> * rects, int count)</computeroutput></para>
<para>Fill some number of rectangles on the current rendering target with the drawing color at subpixel precision.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>renderer</entry><entry>
<para>The renderer which should fill multiple rectangles. </para>
</entry>
                            </row>
                            <row>
<entry>rects</entry><entry>
<para>A pointer to an array of destination rectangles. </para>
</entry>
                            </row>
                            <row>
<entry>count</entry><entry>
<para>The number of rectangles. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success, or -1 on error</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.10. </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1a1b874552e4d5dcfa069256e49c6c2ae4"/><section>
    <title>SDL_RenderFlush()</title>
<indexterm><primary>SDL_RenderFlush</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_RenderFlush</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_RenderFlush (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> * renderer)</computeroutput></para>
<para>Force the rendering context to flush any pending commands to the underlying rendering API.</para>

<para>You do not need to (and in fact, shouldn&apos;t) call this function unless you are planning to call into OpenGL/Direct3D/Metal/whatever directly in addition to using an SDL_Renderer.</para>

<para>This is for a very-specific case: if you are using SDL&apos;s render API, you asked for a specific renderer backend (OpenGL, Direct3D, etc), you set SDL_HINT_RENDER_BATCHING to &quot;1&quot;, and you plan to make OpenGL/D3D/whatever calls in addition to SDL render API calls. If all of this applies, you should call <link linkend="__s_d_l__render_8h_1a1b874552e4d5dcfa069256e49c6c2ae4">SDL_RenderFlush()</link> between calls to SDL&apos;s render API and the low-level API you&apos;re using in cooperation.</para>

<para>In all other cases, you can ignore this function. This is only here to get maximum performance out of a specific situation. In all other cases, SDL will do the right thing, perhaps at a performance loss.</para>

<para>This function is first available in SDL 2.0.10, and is not needed in 2.0.9 and earlier, as earlier versions did not queue rendering commands at all, instead flushing them to the OS immediately.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>renderer</entry><entry>
<para>the rendering context </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.10. </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1a7b2ac666852256d171a50e3af815a910"/><section>
    <title>SDL_RenderGeometry()</title>
<indexterm><primary>SDL_RenderGeometry</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_RenderGeometry</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_RenderGeometry (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> * renderer, <link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> * texture, const <link linkend="_struct_s_d_l___vertex">SDL_Vertex</link> * vertices, int num_vertices, const int * indices, int num_indices)</computeroutput></para>
<para>Render a list of triangles, optionally using a texture and indices into the vertex array Color and alpha modulation is done per vertex (SDL_SetTextureColorMod and SDL_SetTextureAlphaMod are ignored).</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>texture</entry><entry>
<para>(optional) The SDL texture to use. </para>
</entry>
                            </row>
                            <row>
<entry>vertices</entry><entry>
<para>Vertices. </para>
</entry>
                            </row>
                            <row>
<entry>num_vertices</entry><entry>
<para>Number of vertices. </para>
</entry>
                            </row>
                            <row>
<entry>indices</entry><entry>
<para>(optional) An array of integer indices into the &apos;vertices&apos; array, if NULL all vertices will be rendered in sequential order. </para>
</entry>
                            </row>
                            <row>
<entry>num_indices</entry><entry>
<para>Number of indices. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success, or -1 if the operation is not supported</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.18.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1a7b20020e712422db59f9e76be9abc04f">SDL_RenderGeometryRaw</link> </para>

<para><link linkend="_struct_s_d_l___vertex">SDL_Vertex</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1a7b20020e712422db59f9e76be9abc04f"/><section>
    <title>SDL_RenderGeometryRaw()</title>
<indexterm><primary>SDL_RenderGeometryRaw</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_RenderGeometryRaw</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_RenderGeometryRaw (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> * renderer, <link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> * texture, const float * xy, int xy_stride, const <link linkend="_struct_s_d_l___color">SDL_Color</link> * color, int color_stride, const float * uv, int uv_stride, int num_vertices, const <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> * indices, int num_indices, int size_indices)</computeroutput></para>
<para>Render a list of triangles, optionally using a texture and indices into the vertex arrays Color and alpha modulation is done per vertex (SDL_SetTextureColorMod and SDL_SetTextureAlphaMod are ignored).</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>texture</entry><entry>
<para>(optional) The SDL texture to use. </para>
</entry>
                            </row>
                            <row>
<entry>xy</entry><entry>
<para>Vertex positions </para>
</entry>
                            </row>
                            <row>
<entry>xy_stride</entry><entry>
<para>Byte size to move from one element to the next element </para>
</entry>
                            </row>
                            <row>
<entry>color</entry><entry>
<para>Vertex colors (as <link linkend="_struct_s_d_l___color">SDL_Color</link>) </para>
</entry>
                            </row>
                            <row>
<entry>color_stride</entry><entry>
<para>Byte size to move from one element to the next element </para>
</entry>
                            </row>
                            <row>
<entry>uv</entry><entry>
<para>Vertex normalized texture coordinates </para>
</entry>
                            </row>
                            <row>
<entry>uv_stride</entry><entry>
<para>Byte size to move from one element to the next element </para>
</entry>
                            </row>
                            <row>
<entry>num_vertices</entry><entry>
<para>Number of vertices. </para>
</entry>
                            </row>
                            <row>
<entry>indices</entry><entry>
<para>(optional) An array of indices into the &apos;vertices&apos; arrays, if NULL all vertices will be rendered in sequential order. </para>
</entry>
                            </row>
                            <row>
<entry>num_indices</entry><entry>
<para>Number of indices. </para>
</entry>
                            </row>
                            <row>
<entry>size_indices</entry><entry>
<para>Index size: 1 (byte), 2 (short), 4 (int) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success, or -1 if the operation is not supported</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.18.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1a7b2ac666852256d171a50e3af815a910">SDL_RenderGeometry</link> </para>

<para><link linkend="_struct_s_d_l___vertex">SDL_Vertex</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1af91e64e2b473a5eb7e93caf253fb760c"/><section>
    <title>SDL_RenderGetClipRect()</title>
<indexterm><primary>SDL_RenderGetClipRect</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_RenderGetClipRect</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_RenderGetClipRect (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> * renderer, <link linkend="_struct_s_d_l___rect">SDL_Rect</link> * rect)</computeroutput></para>
<para>Get the clip rectangle for the current target.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>renderer</entry><entry>
<para>the rendering context from which clip rectangle should be queried </para>
</entry>
                            </row>
                            <row>
<entry>rect</entry><entry>
<para>an <link linkend="_struct_s_d_l___rect">SDL_Rect</link> structure filled in with the current clipping area or an empty rectangle if clipping is disabled</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1ab8125c772a65956fbb259389b6563523">SDL_RenderIsClipEnabled</link> </para>

<para><link linkend="__s_d_l__render_8h_1a2788c24590fd26bcf0d5be2ffcb85c04">SDL_RenderSetClipRect</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1a435c61d9f048550388198478e8fdeaa0"/><section>
    <title>SDL_RenderGetIntegerScale()</title>
<indexterm><primary>SDL_RenderGetIntegerScale</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_RenderGetIntegerScale</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_RenderGetIntegerScale (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> * renderer)</computeroutput></para>
<para>Get whether integer scales are forced for resolution-independent rendering.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>renderer</entry><entry>
<para>the renderer from which integer scaling should be queried </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>SDL_TRUE if integer scales are forced or SDL_FALSE if not and on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.5.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1a62c3f8273280e5795075d2921d4ea30f">SDL_RenderSetIntegerScale</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1aa566ba52ac01bd13f6fdfcdfc3af217f"/><section>
    <title>SDL_RenderGetLogicalSize()</title>
<indexterm><primary>SDL_RenderGetLogicalSize</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_RenderGetLogicalSize</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_RenderGetLogicalSize (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> * renderer, int * w, int * h)</computeroutput></para>
<para>Get device independent resolution for rendering.</para>

<para>This may return 0 for <computeroutput>w</computeroutput> and <computeroutput>h</computeroutput> if the SDL_Renderer has never had its logical size set by <link linkend="__s_d_l__render_8h_1ad0596fd507c9bf9f8f9594cd9064860c">SDL_RenderSetLogicalSize()</link> and never had a render target set.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>renderer</entry><entry>
<para>a rendering context </para>
</entry>
                            </row>
                            <row>
<entry>w</entry><entry>
<para>an int to be filled with the width </para>
</entry>
                            </row>
                            <row>
<entry>h</entry><entry>
<para>an int to be filled with the height</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1ad0596fd507c9bf9f8f9594cd9064860c">SDL_RenderSetLogicalSize</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1a17c520ab4254564e2dddff455ecf9eb8"/><section>
    <title>SDL_RenderGetMetalCommandEncoder()</title>
<indexterm><primary>SDL_RenderGetMetalCommandEncoder</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_RenderGetMetalCommandEncoder</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_RenderGetMetalCommandEncoder (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> * renderer)</computeroutput></para>
<para>Get the Metal command encoder for the current frame</para>

<para>This function returns <computeroutput>void *</computeroutput>, so SDL doesn&apos;t have to include Metal&apos;s headers, but it can be safely cast to an <computeroutput>id&lt;MTLRenderCommandEncoder&gt;</computeroutput>.</para>

<para>Note that as of SDL 2.0.18, this will return NULL if Metal refuses to give SDL a drawable to render to, which might happen if the window is hidden/minimized/offscreen. This doesn&apos;t apply to command encoders for render targets, just the window&apos;s backbacker. Check your return values!</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>renderer</entry><entry>
<para>The renderer to query </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>an <computeroutput>id&lt;MTLRenderCommandEncoder&gt;</computeroutput> on success, or NULL if the renderer isn&apos;t a Metal renderer or there was an error.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.8.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1a40ee6191edf8a60c9cb1adc00a10aefb">SDL_RenderGetMetalLayer</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1a40ee6191edf8a60c9cb1adc00a10aefb"/><section>
    <title>SDL_RenderGetMetalLayer()</title>
<indexterm><primary>SDL_RenderGetMetalLayer</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_RenderGetMetalLayer</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_RenderGetMetalLayer (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> * renderer)</computeroutput></para>
<para>Get the CAMetalLayer associated with the given Metal renderer.</para>

<para>This function returns <computeroutput>void *</computeroutput>, so SDL doesn&apos;t have to include Metal&apos;s headers, but it can be safely cast to a <computeroutput>CAMetalLayer *</computeroutput>.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>renderer</entry><entry>
<para>The renderer to query </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>a <computeroutput>CAMetalLayer *</computeroutput> on success, or NULL if the renderer isn&apos;t a Metal renderer</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.8.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1a17c520ab4254564e2dddff455ecf9eb8">SDL_RenderGetMetalCommandEncoder</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1a0271c4a8d32cacaff54de9aa7b5a797d"/><section>
    <title>SDL_RenderGetScale()</title>
<indexterm><primary>SDL_RenderGetScale</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_RenderGetScale</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_RenderGetScale (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> * renderer, float * scaleX, float * scaleY)</computeroutput></para>
<para>Get the drawing scale for the current target.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>renderer</entry><entry>
<para>the renderer from which drawing scale should be queried </para>
</entry>
                            </row>
                            <row>
<entry>scaleX</entry><entry>
<para>a pointer filled in with the horizontal scaling factor </para>
</entry>
                            </row>
                            <row>
<entry>scaleY</entry><entry>
<para>a pointer filled in with the vertical scaling factor</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1aa52b062e271226c5ec8cdb8aa6dc69eb">SDL_RenderSetScale</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1a60a7a6cb31b64f9f13c923fe44ba4d6f"/><section>
    <title>SDL_RenderGetViewport()</title>
<indexterm><primary>SDL_RenderGetViewport</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_RenderGetViewport</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_RenderGetViewport (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> * renderer, <link linkend="_struct_s_d_l___rect">SDL_Rect</link> * rect)</computeroutput></para>
<para>Get the drawing area for the current target.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>renderer</entry><entry>
<para>the rendering context </para>
</entry>
                            </row>
                            <row>
<entry>rect</entry><entry>
<para>an <link linkend="_struct_s_d_l___rect">SDL_Rect</link> structure filled in with the current drawing area</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1a27bad6dceb9d5e08d41506260dfc1c71">SDL_RenderSetViewport</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1ab8125c772a65956fbb259389b6563523"/><section>
    <title>SDL_RenderIsClipEnabled()</title>
<indexterm><primary>SDL_RenderIsClipEnabled</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_RenderIsClipEnabled</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_RenderIsClipEnabled (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> * renderer)</computeroutput></para>
<para>Get whether clipping is enabled on the given renderer.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>renderer</entry><entry>
<para>the renderer from which clip state should be queried </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>SDL_TRUE if clipping is enabled or SDL_FALSE if not; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.4.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1af91e64e2b473a5eb7e93caf253fb760c">SDL_RenderGetClipRect</link> </para>

<para><link linkend="__s_d_l__render_8h_1a2788c24590fd26bcf0d5be2ffcb85c04">SDL_RenderSetClipRect</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1ae0a927b5b2d8c797dfa06e4226a5c840"/><section>
    <title>SDL_RenderLogicalToWindow()</title>
<indexterm><primary>SDL_RenderLogicalToWindow</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_RenderLogicalToWindow</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_RenderLogicalToWindow (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> * renderer, float logicalX, float logicalY, int * windowX, int * windowY)</computeroutput></para>
<para>Get real coordinates of point in window when given logical coordinates of point in renderer. Logical coordinates will differ from real coordinates when render is scaled and logical renderer size set</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>renderer</entry><entry>
<para>the renderer from which the window coordinates should be calculated </para>
</entry>
                            </row>
                            <row>
<entry>logicalX</entry><entry>
<para>the logical x coordinate </para>
</entry>
                            </row>
                            <row>
<entry>logicalY</entry><entry>
<para>the logical y coordinate </para>
</entry>
                            </row>
                            <row>
<entry>windowX</entry><entry>
<para>the pointer filled with the real X coordinate in the window </para>
</entry>
                            </row>
                            <row>
<entry>windowY</entry><entry>
<para>the pointer filled with the real Y coordinate in the window</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.18.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1a0271c4a8d32cacaff54de9aa7b5a797d">SDL_RenderGetScale</link> </para>

<para><link linkend="__s_d_l__render_8h_1aa52b062e271226c5ec8cdb8aa6dc69eb">SDL_RenderSetScale</link> </para>

<para><link linkend="__s_d_l__render_8h_1aa566ba52ac01bd13f6fdfcdfc3af217f">SDL_RenderGetLogicalSize</link> </para>

<para><link linkend="__s_d_l__render_8h_1ad0596fd507c9bf9f8f9594cd9064860c">SDL_RenderSetLogicalSize</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1a48fa9d24395f3610746988ecca2aae86"/><section>
    <title>SDL_RenderPresent()</title>
<indexterm><primary>SDL_RenderPresent</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_RenderPresent</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_RenderPresent (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> * renderer)</computeroutput></para>
<para>Update the screen with any rendering performed since the previous call.</para>

<para>SDL&apos;s rendering functions operate on a backbuffer; that is, calling a rendering function such as <link linkend="__s_d_l__render_8h_1a6d50e252f15e0c6c14639bdd343285fd">SDL_RenderDrawLine()</link> does not directly put a line on the screen, but rather updates the backbuffer. As such, you compose your entire scene and <emphasis>present</emphasis> the composed backbuffer to the screen as a complete picture.</para>

<para>Therefore, when using SDL&apos;s rendering API, one does all drawing intended for the frame, and then calls this function once per frame to present the final drawing to the user.</para>

<para>The backbuffer should be considered invalidated after each present; do not assume that previous contents will exist between frames. You are strongly encouraged to call <link linkend="__s_d_l__render_8h_1a473b4abbb29c60e98876eb68ad850f79">SDL_RenderClear()</link> to initialize the backbuffer before starting each new frame&apos;s drawing, even if you plan to overwrite every pixel.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>renderer</entry><entry>
<para>the rendering context</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1a473b4abbb29c60e98876eb68ad850f79">SDL_RenderClear</link> </para>

<para><link linkend="__s_d_l__render_8h_1a6d50e252f15e0c6c14639bdd343285fd">SDL_RenderDrawLine</link> </para>

<para><link linkend="__s_d_l__render_8h_1a556f150677bb965448b7b361bceb7a76">SDL_RenderDrawLines</link> </para>

<para><link linkend="__s_d_l__render_8h_1ab576a09c91675dbd8dba9d05dd2fc0bc">SDL_RenderDrawPoint</link> </para>

<para><link linkend="__s_d_l__render_8h_1a8ff1a991e7a2599cfc9ea43dfa920d0b">SDL_RenderDrawPoints</link> </para>

<para><link linkend="__s_d_l__render_8h_1ab2a89b5a0c25adb6abdb9aeff28f177c">SDL_RenderDrawRect</link> </para>

<para><link linkend="__s_d_l__render_8h_1ae56460fe1b478a55916650e695145cbf">SDL_RenderDrawRects</link> </para>

<para><link linkend="__s_d_l__render_8h_1a3b5098c1944441034d2c5cff419f93cc">SDL_RenderFillRect</link> </para>

<para><link linkend="__s_d_l__render_8h_1a987fe30e64168702f1dfa6407fbe8bec">SDL_RenderFillRects</link> </para>

<para><link linkend="__s_d_l__render_8h_1a37e6e440b995756c9cc8a20fe3ca2385">SDL_SetRenderDrawBlendMode</link> </para>

<para><link linkend="__s_d_l__render_8h_1aa26234da40f87f4b16d715564242a341">SDL_SetRenderDrawColor</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1a6aa7797b165275f1bdd76c3188a784f9"/><section>
    <title>SDL_RenderReadPixels()</title>
<indexterm><primary>SDL_RenderReadPixels</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_RenderReadPixels</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_RenderReadPixels (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> * renderer, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> * rect, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> format, <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> * pixels, int pitch)</computeroutput></para>
<para>Read pixels from the current rendering target to an array of pixels.</para>

<para><emphasis role="bold">WARNING</emphasis>: This is a very slow operation, and should not be used frequently.</para>

<para><computeroutput>pitch</computeroutput> specifies the number of bytes between rows in the destination <computeroutput>pixels</computeroutput> data. This allows you to write to a subrectangle or have padded rows in the destination. Generally, <computeroutput>pitch</computeroutput> should equal the number of pixels per row in the <computeroutput>pixels</computeroutput> data times the number of bytes per pixel, but it might contain additional padding (for example, 24bit RGB Windows Bitmap data pads all rows to multiples of 4 bytes).</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>renderer</entry><entry>
<para>the rendering context </para>
</entry>
                            </row>
                            <row>
<entry>rect</entry><entry>
<para>an <link linkend="_struct_s_d_l___rect">SDL_Rect</link> structure representing the area to read, or NULL for the entire render target </para>
</entry>
                            </row>
                            <row>
<entry>format</entry><entry>
<para>an SDL_PixelFormatEnum value of the desired format of the pixel data, or 0 to use the format of the rendering target </para>
</entry>
                            </row>
                            <row>
<entry>pixels</entry><entry>
<para>a pointer to the pixel data to copy into </para>
</entry>
                            </row>
                            <row>
<entry>pitch</entry><entry>
<para>the pitch of the <computeroutput>pixels</computeroutput> parameter </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0. </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1a2788c24590fd26bcf0d5be2ffcb85c04"/><section>
    <title>SDL_RenderSetClipRect()</title>
<indexterm><primary>SDL_RenderSetClipRect</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_RenderSetClipRect</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_RenderSetClipRect (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> * renderer, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> * rect)</computeroutput></para>
<para>Set the clip rectangle for rendering on the specified target.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>renderer</entry><entry>
<para>the rendering context for which clip rectangle should be set </para>
</entry>
                            </row>
                            <row>
<entry>rect</entry><entry>
<para>an <link linkend="_struct_s_d_l___rect">SDL_Rect</link> structure representing the clip area, relative to the viewport, or NULL to disable clipping </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1af91e64e2b473a5eb7e93caf253fb760c">SDL_RenderGetClipRect</link> </para>

<para><link linkend="__s_d_l__render_8h_1ab8125c772a65956fbb259389b6563523">SDL_RenderIsClipEnabled</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1a62c3f8273280e5795075d2921d4ea30f"/><section>
    <title>SDL_RenderSetIntegerScale()</title>
<indexterm><primary>SDL_RenderSetIntegerScale</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_RenderSetIntegerScale</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_RenderSetIntegerScale (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> * renderer, <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> enable)</computeroutput></para>
<para>Set whether to force integer scales for resolution-independent rendering.</para>

<para>This function restricts the logical viewport to integer values - that is, when a resolution is between two multiples of a logical size, the viewport size is rounded down to the lower multiple.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>renderer</entry><entry>
<para>the renderer for which integer scaling should be set </para>
</entry>
                            </row>
                            <row>
<entry>enable</entry><entry>
<para>enable or disable the integer scaling for rendering </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.5.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1a435c61d9f048550388198478e8fdeaa0">SDL_RenderGetIntegerScale</link> </para>

<para><link linkend="__s_d_l__render_8h_1ad0596fd507c9bf9f8f9594cd9064860c">SDL_RenderSetLogicalSize</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1ad0596fd507c9bf9f8f9594cd9064860c"/><section>
    <title>SDL_RenderSetLogicalSize()</title>
<indexterm><primary>SDL_RenderSetLogicalSize</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_RenderSetLogicalSize</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_RenderSetLogicalSize (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> * renderer, int w, int h)</computeroutput></para>
<para>Set a device independent resolution for rendering.</para>

<para>This function uses the viewport and scaling functionality to allow a fixed logical resolution for rendering, regardless of the actual output resolution. If the actual output resolution doesn&apos;t have the same aspect ratio the output rendering will be centered within the output display.</para>

<para>If the output display is a window, mouse and touch events in the window will be filtered and scaled so they seem to arrive within the logical resolution. The SDL_HINT_MOUSE_RELATIVE_SCALING hint controls whether relative motion events are also scaled.</para>

<para>If this function results in scaling or subpixel drawing by the rendering backend, it will be handled using the appropriate quality hints.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>renderer</entry><entry>
<para>the renderer for which resolution should be set </para>
</entry>
                            </row>
                            <row>
<entry>w</entry><entry>
<para>the width of the logical resolution </para>
</entry>
                            </row>
                            <row>
<entry>h</entry><entry>
<para>the height of the logical resolution </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1aa566ba52ac01bd13f6fdfcdfc3af217f">SDL_RenderGetLogicalSize</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1aa52b062e271226c5ec8cdb8aa6dc69eb"/><section>
    <title>SDL_RenderSetScale()</title>
<indexterm><primary>SDL_RenderSetScale</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_RenderSetScale</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_RenderSetScale (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> * renderer, float scaleX, float scaleY)</computeroutput></para>
<para>Set the drawing scale for rendering on the current target.</para>

<para>The drawing coordinates are scaled by the x/y scaling factors before they are used by the renderer. This allows resolution independent drawing with a single coordinate system.</para>

<para>If this results in scaling or subpixel drawing by the rendering backend, it will be handled using the appropriate quality hints. For best results use integer scaling factors.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>renderer</entry><entry>
<para>a rendering context </para>
</entry>
                            </row>
                            <row>
<entry>scaleX</entry><entry>
<para>the horizontal scaling factor </para>
</entry>
                            </row>
                            <row>
<entry>scaleY</entry><entry>
<para>the vertical scaling factor </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1a0271c4a8d32cacaff54de9aa7b5a797d">SDL_RenderGetScale</link> </para>

<para><link linkend="__s_d_l__render_8h_1ad0596fd507c9bf9f8f9594cd9064860c">SDL_RenderSetLogicalSize</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1a27bad6dceb9d5e08d41506260dfc1c71"/><section>
    <title>SDL_RenderSetViewport()</title>
<indexterm><primary>SDL_RenderSetViewport</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_RenderSetViewport</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_RenderSetViewport (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> * renderer, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> * rect)</computeroutput></para>
<para>Set the drawing area for rendering on the current target.</para>

<para>When the window is resized, the viewport is reset to fill the entire new window size.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>renderer</entry><entry>
<para>the rendering context </para>
</entry>
                            </row>
                            <row>
<entry>rect</entry><entry>
<para>the <link linkend="_struct_s_d_l___rect">SDL_Rect</link> structure representing the drawing area, or NULL to set the viewport to the entire target </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1a60a7a6cb31b64f9f13c923fe44ba4d6f">SDL_RenderGetViewport</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1afe68207df287bda5b85a4bb84e720522"/><section>
    <title>SDL_RenderSetVSync()</title>
<indexterm><primary>SDL_RenderSetVSync</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_RenderSetVSync</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_RenderSetVSync (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> * renderer, int vsync)</computeroutput></para>
<para>Toggle VSync of the given renderer.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>renderer</entry><entry>
<para>The renderer to toggle </para>
</entry>
                            </row>
                            <row>
<entry>vsync</entry><entry>
<para>1 for on, 0 for off. All other values are reserved </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>a 0 int on success, or non-zero on failure</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.18. </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1a126c5e0fb7abb3aa1bbfe60ac0102857"/><section>
    <title>SDL_RenderTargetSupported()</title>
<indexterm><primary>SDL_RenderTargetSupported</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_RenderTargetSupported</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_RenderTargetSupported (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> * renderer)</computeroutput></para>
<para>Determine whether a renderer supports the use of render targets.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>renderer</entry><entry>
<para>the renderer that will be checked </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>SDL_TRUE if supported or SDL_FALSE if not.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1a2479163b0f2909cc50cef7af3c279000">SDL_SetRenderTarget</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1aa4497fd1ab833b5b6badd2a086603b19"/><section>
    <title>SDL_RenderWindowToLogical()</title>
<indexterm><primary>SDL_RenderWindowToLogical</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_RenderWindowToLogical</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_RenderWindowToLogical (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> * renderer, int windowX, int windowY, float * logicalX, float * logicalY)</computeroutput></para>
<para>Get logical coordinates of point in renderer when given real coordinates of point in window.</para>

<para>Logical coordinates will differ from real coordinates when render is scaled and logical renderer size set</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>renderer</entry><entry>
<para>the renderer from which the logical coordinates should be calcualted </para>
</entry>
                            </row>
                            <row>
<entry>windowX</entry><entry>
<para>the real X coordinate in the window </para>
</entry>
                            </row>
                            <row>
<entry>windowY</entry><entry>
<para>the real Y coordinate in the window </para>
</entry>
                            </row>
                            <row>
<entry>logicalX</entry><entry>
<para>the pointer filled with the logical x coordinate </para>
</entry>
                            </row>
                            <row>
<entry>logicalY</entry><entry>
<para>the pointer filled with the logical y coordinate</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.18.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1a0271c4a8d32cacaff54de9aa7b5a797d">SDL_RenderGetScale</link> </para>

<para><link linkend="__s_d_l__render_8h_1aa52b062e271226c5ec8cdb8aa6dc69eb">SDL_RenderSetScale</link> </para>

<para><link linkend="__s_d_l__render_8h_1aa566ba52ac01bd13f6fdfcdfc3af217f">SDL_RenderGetLogicalSize</link> </para>

<para><link linkend="__s_d_l__render_8h_1ad0596fd507c9bf9f8f9594cd9064860c">SDL_RenderSetLogicalSize</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1a37e6e440b995756c9cc8a20fe3ca2385"/><section>
    <title>SDL_SetRenderDrawBlendMode()</title>
<indexterm><primary>SDL_SetRenderDrawBlendMode</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_SetRenderDrawBlendMode</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_SetRenderDrawBlendMode (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> * renderer, <link linkend="__s_d_l__blendmode_8h_1a850d3c67a878fd6698a1c8dbb1eabf1e">SDL_BlendMode</link> blendMode)</computeroutput></para>
<para>Set the blend mode used for drawing operations (Fill and Line).</para>

<para>If the blend mode is not supported, the closest supported mode is chosen.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>renderer</entry><entry>
<para>the rendering context </para>
</entry>
                            </row>
                            <row>
<entry>blendMode</entry><entry>
<para>the SDL_BlendMode to use for blending </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1a384109767532e9703652233571a0d3cf">SDL_GetRenderDrawBlendMode</link> </para>

<para><link linkend="__s_d_l__render_8h_1a6d50e252f15e0c6c14639bdd343285fd">SDL_RenderDrawLine</link> </para>

<para><link linkend="__s_d_l__render_8h_1a556f150677bb965448b7b361bceb7a76">SDL_RenderDrawLines</link> </para>

<para><link linkend="__s_d_l__render_8h_1ab576a09c91675dbd8dba9d05dd2fc0bc">SDL_RenderDrawPoint</link> </para>

<para><link linkend="__s_d_l__render_8h_1a8ff1a991e7a2599cfc9ea43dfa920d0b">SDL_RenderDrawPoints</link> </para>

<para><link linkend="__s_d_l__render_8h_1ab2a89b5a0c25adb6abdb9aeff28f177c">SDL_RenderDrawRect</link> </para>

<para><link linkend="__s_d_l__render_8h_1ae56460fe1b478a55916650e695145cbf">SDL_RenderDrawRects</link> </para>

<para><link linkend="__s_d_l__render_8h_1a3b5098c1944441034d2c5cff419f93cc">SDL_RenderFillRect</link> </para>

<para><link linkend="__s_d_l__render_8h_1a987fe30e64168702f1dfa6407fbe8bec">SDL_RenderFillRects</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1aa26234da40f87f4b16d715564242a341"/><section>
    <title>SDL_SetRenderDrawColor()</title>
<indexterm><primary>SDL_SetRenderDrawColor</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_SetRenderDrawColor</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_SetRenderDrawColor (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> * renderer, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> r, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> g, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> b, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> a)</computeroutput></para>
<para>Set the color used for drawing operations (Rect, Line and Clear).</para>

<para>Set the color for drawing or filling rectangles, lines, and points, and for <link linkend="__s_d_l__render_8h_1a473b4abbb29c60e98876eb68ad850f79">SDL_RenderClear()</link>.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>renderer</entry><entry>
<para>the rendering context </para>
</entry>
                            </row>
                            <row>
<entry>r</entry><entry>
<para>the red value used to draw on the rendering target </para>
</entry>
                            </row>
                            <row>
<entry>g</entry><entry>
<para>the green value used to draw on the rendering target </para>
</entry>
                            </row>
                            <row>
<entry>b</entry><entry>
<para>the blue value used to draw on the rendering target </para>
</entry>
                            </row>
                            <row>
<entry>a</entry><entry>
<para>the alpha value used to draw on the rendering target; usually <computeroutput>SDL_ALPHA_OPAQUE</computeroutput> (255). Use SDL_SetRenderDrawBlendMode to specify how the alpha channel is used </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1a1b8e6544c3fc23ddd9b0f0bfb14cef39">SDL_GetRenderDrawColor</link> </para>

<para><link linkend="__s_d_l__render_8h_1a473b4abbb29c60e98876eb68ad850f79">SDL_RenderClear</link> </para>

<para><link linkend="__s_d_l__render_8h_1a6d50e252f15e0c6c14639bdd343285fd">SDL_RenderDrawLine</link> </para>

<para><link linkend="__s_d_l__render_8h_1a556f150677bb965448b7b361bceb7a76">SDL_RenderDrawLines</link> </para>

<para><link linkend="__s_d_l__render_8h_1ab576a09c91675dbd8dba9d05dd2fc0bc">SDL_RenderDrawPoint</link> </para>

<para><link linkend="__s_d_l__render_8h_1a8ff1a991e7a2599cfc9ea43dfa920d0b">SDL_RenderDrawPoints</link> </para>

<para><link linkend="__s_d_l__render_8h_1ab2a89b5a0c25adb6abdb9aeff28f177c">SDL_RenderDrawRect</link> </para>

<para><link linkend="__s_d_l__render_8h_1ae56460fe1b478a55916650e695145cbf">SDL_RenderDrawRects</link> </para>

<para><link linkend="__s_d_l__render_8h_1a3b5098c1944441034d2c5cff419f93cc">SDL_RenderFillRect</link> </para>

<para><link linkend="__s_d_l__render_8h_1a987fe30e64168702f1dfa6407fbe8bec">SDL_RenderFillRects</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1a2479163b0f2909cc50cef7af3c279000"/><section>
    <title>SDL_SetRenderTarget()</title>
<indexterm><primary>SDL_SetRenderTarget</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_SetRenderTarget</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_SetRenderTarget (<link linkend="__s_d_l__render_8h_1aaf0bf7d020754fc614fe06552ea4d5d4">SDL_Renderer</link> * renderer, <link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> * texture)</computeroutput></para>
<para>Set a texture as the current rendering target.</para>

<para>Before using this function, you should check the <computeroutput>SDL_RENDERER_TARGETTEXTURE</computeroutput> bit in the flags of <link linkend="_struct_s_d_l___renderer_info">SDL_RendererInfo</link> to see if render targets are supported.</para>

<para>The default render target is the window for which the renderer was created. To stop rendering to a texture and render to the window again, call this function with a NULL <computeroutput>texture</computeroutput>.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>renderer</entry><entry>
<para>the rendering context </para>
</entry>
                            </row>
                            <row>
<entry>texture</entry><entry>
<para>the targeted texture, which must be created with the <computeroutput>SDL_TEXTUREACCESS_TARGET</computeroutput> flag, or NULL to render to the window instead of a texture. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1a130a89bac84d075c44c3e9814238a658">SDL_GetRenderTarget</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1a1cc3302a4c7fb3b37e8fd5263a80758b"/><section>
    <title>SDL_SetTextureAlphaMod()</title>
<indexterm><primary>SDL_SetTextureAlphaMod</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_SetTextureAlphaMod</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_SetTextureAlphaMod (<link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> * texture, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> alpha)</computeroutput></para>
<para>Set an additional alpha value multiplied into render copy operations.</para>

<para>When this texture is rendered, during the copy operation the source alpha value is modulated by this alpha value according to the following formula:</para>

<para><computeroutput>srcA = srcA * (alpha / 255)</computeroutput></para>

<para>Alpha modulation is not always supported by the renderer; it will return -1 if alpha modulation is not supported.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>texture</entry><entry>
<para>the texture to update </para>
</entry>
                            </row>
                            <row>
<entry>alpha</entry><entry>
<para>the source alpha value multiplied into copy operations </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1a4d9a9e945ec95f30e5c48ce305de33ad">SDL_GetTextureAlphaMod</link> </para>

<para><link linkend="__s_d_l__render_8h_1a348399db33c03a7882cef0c6e6c1756f">SDL_SetTextureColorMod</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1af8b9cb77ca18f76c18f39d29ed960de8"/><section>
    <title>SDL_SetTextureBlendMode()</title>
<indexterm><primary>SDL_SetTextureBlendMode</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_SetTextureBlendMode</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_SetTextureBlendMode (<link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> * texture, <link linkend="__s_d_l__blendmode_8h_1a850d3c67a878fd6698a1c8dbb1eabf1e">SDL_BlendMode</link> blendMode)</computeroutput></para>
<para>Set the blend mode for a texture, used by <link linkend="__s_d_l__render_8h_1a4b6c2353384c7b7128fd5960b24f2ae6">SDL_RenderCopy()</link>.</para>

<para>If the blend mode is not supported, the closest supported mode is chosen and this function returns -1.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>texture</entry><entry>
<para>the texture to update </para>
</entry>
                            </row>
                            <row>
<entry>blendMode</entry><entry>
<para>the SDL_BlendMode to use for texture blending </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1a2595ee57e6f3a4882f3ae4062ca420c4">SDL_GetTextureBlendMode</link> </para>

<para><link linkend="__s_d_l__render_8h_1a4b6c2353384c7b7128fd5960b24f2ae6">SDL_RenderCopy</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1a348399db33c03a7882cef0c6e6c1756f"/><section>
    <title>SDL_SetTextureColorMod()</title>
<indexterm><primary>SDL_SetTextureColorMod</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_SetTextureColorMod</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_SetTextureColorMod (<link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> * texture, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> r, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> g, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> b)</computeroutput></para>
<para>Set an additional color value multiplied into render copy operations.</para>

<para>When this texture is rendered, during the copy operation each source color channel is modulated by the appropriate color value according to the following formula:</para>

<para><computeroutput>srcC = srcC * (color / 255)</computeroutput></para>

<para>Color modulation is not always supported by the renderer; it will return -1 if color modulation is not supported.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>texture</entry><entry>
<para>the texture to update </para>
</entry>
                            </row>
                            <row>
<entry>r</entry><entry>
<para>the red color value multiplied into copy operations </para>
</entry>
                            </row>
                            <row>
<entry>g</entry><entry>
<para>the green color value multiplied into copy operations </para>
</entry>
                            </row>
                            <row>
<entry>b</entry><entry>
<para>the blue color value multiplied into copy operations </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1aa70e4ce3a875399d4291dca23e687b11">SDL_GetTextureColorMod</link> </para>

<para><link linkend="__s_d_l__render_8h_1a1cc3302a4c7fb3b37e8fd5263a80758b">SDL_SetTextureAlphaMod</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1aac58837d42510e6e0472538dbcbc2ffe"/><section>
    <title>SDL_SetTextureScaleMode()</title>
<indexterm><primary>SDL_SetTextureScaleMode</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_SetTextureScaleMode</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_SetTextureScaleMode (<link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> * texture, <link linkend="__s_d_l__render_8h_1a7cee9cc7b0b54027860fde346ea26c71">SDL_ScaleMode</link> scaleMode)</computeroutput></para>
<para>Set the scale mode used for texture scale operations.</para>

<para>If the scale mode is not supported, the closest supported mode is chosen.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>texture</entry><entry>
<para>The texture to update. </para>
</entry>
                            </row>
                            <row>
<entry>scaleMode</entry><entry>
<para>the SDL_ScaleMode to use for texture scaling. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success, or -1 if the texture is not valid.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.12.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1a51603afa1350164679baad97b77fb3b5">SDL_GetTextureScaleMode</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1a969ee973fd8f686777f151aa2d9275bc"/><section>
    <title>SDL_SetTextureUserData()</title>
<indexterm><primary>SDL_SetTextureUserData</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_SetTextureUserData</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_SetTextureUserData (<link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> * texture, <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> * userdata)</computeroutput></para>
<para>Associate a user-specified pointer with a texture.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>texture</entry><entry>
<para>the texture to update. </para>
</entry>
                            </row>
                            <row>
<entry>userdata</entry><entry>
<para>the pointer to associate with the texture. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success, or -1 if the texture is not valid.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.18.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1a6601680fa2e4a7c2c46d503392fc1afc">SDL_GetTextureUserData</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1a7fc9db6cde77fc9c95a4f65bc7d30073"/><section>
    <title>SDL_UnlockTexture()</title>
<indexterm><primary>SDL_UnlockTexture</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_UnlockTexture</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_UnlockTexture (<link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> * texture)</computeroutput></para>
<para>Unlock a texture, uploading the changes to video memory, if needed.</para>

<para><emphasis role="bold">Warning</emphasis>: Please note that <link linkend="__s_d_l__render_8h_1af64adcd12e4e9d41d48031fd3da7b913">SDL_LockTexture()</link> is intended to be write-only; it will not guarantee the previous contents of the texture will be provided. You must fully initialize any area of a texture that you lock before unlocking it, as the pixels might otherwise be uninitialized memory.</para>

<para>Which is to say: locking and immediately unlocking a texture can result in corrupted textures, depending on the renderer in use.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>texture</entry><entry>
<para>a texture locked by <link linkend="__s_d_l__render_8h_1af64adcd12e4e9d41d48031fd3da7b913">SDL_LockTexture()</link></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1af64adcd12e4e9d41d48031fd3da7b913">SDL_LockTexture</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1ab911a179c321d62e7659b8111f457723"/><section>
    <title>SDL_UpdateNVTexture()</title>
<indexterm><primary>SDL_UpdateNVTexture</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_UpdateNVTexture</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_UpdateNVTexture (<link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> * texture, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> * rect, const <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> * Yplane, int Ypitch, const <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> * UVplane, int UVpitch)</computeroutput></para>
<para>Update a rectangle within a planar NV12 or NV21 texture with new pixels.</para>

<para>You can use <link linkend="__s_d_l__render_8h_1a7aab41a7058997590095e5568d065c11">SDL_UpdateTexture()</link> as long as your pixel data is a contiguous block of NV12/21 planes in the proper order, but this function is available if your pixel data is not contiguous.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>texture</entry><entry>
<para>the texture to update </para>
</entry>
                            </row>
                            <row>
<entry>rect</entry><entry>
<para>a pointer to the rectangle of pixels to update, or NULL to update the entire texture. </para>
</entry>
                            </row>
                            <row>
<entry>Yplane</entry><entry>
<para>the raw pixel data for the Y plane. </para>
</entry>
                            </row>
                            <row>
<entry>Ypitch</entry><entry>
<para>the number of bytes between rows of pixel data for the Y plane. </para>
</entry>
                            </row>
                            <row>
<entry>UVplane</entry><entry>
<para>the raw pixel data for the UV plane. </para>
</entry>
                            </row>
                            <row>
<entry>UVpitch</entry><entry>
<para>the number of bytes between rows of pixel data for the UV plane. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success, or -1 if the texture is not valid.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.16. </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1a7aab41a7058997590095e5568d065c11"/><section>
    <title>SDL_UpdateTexture()</title>
<indexterm><primary>SDL_UpdateTexture</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_UpdateTexture</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_UpdateTexture (<link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> * texture, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> * rect, const <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> * pixels, int pitch)</computeroutput></para>
<para>Update the given texture rectangle with new pixel data.</para>

<para>The pixel data must be in the pixel format of the texture. Use <link linkend="__s_d_l__render_8h_1aade777757bfc3b98bf3ef742b1d8a052">SDL_QueryTexture()</link> to query the pixel format of the texture.</para>

<para>This is a fairly slow function, intended for use with static textures that do not change often.</para>

<para>If the texture is intended to be updated often, it is preferred to create the texture as streaming and use the locking functions referenced below. While this function will work with streaming textures, for optimization reasons you may not get the pixels back if you lock the texture afterward.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>texture</entry><entry>
<para>the texture to update </para>
</entry>
                            </row>
                            <row>
<entry>rect</entry><entry>
<para>an <link linkend="_struct_s_d_l___rect">SDL_Rect</link> structure representing the area to update, or NULL to update the entire texture </para>
</entry>
                            </row>
                            <row>
<entry>pixels</entry><entry>
<para>the raw pixel data in the format of the texture </para>
</entry>
                            </row>
                            <row>
<entry>pitch</entry><entry>
<para>the number of bytes in a row of pixel data, including padding between lines </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1a7995b80913eedffe824a5bf1e81e80ed">SDL_CreateTexture</link> </para>

<para><link linkend="__s_d_l__render_8h_1af64adcd12e4e9d41d48031fd3da7b913">SDL_LockTexture</link> </para>

<para><link linkend="__s_d_l__render_8h_1a7fc9db6cde77fc9c95a4f65bc7d30073">SDL_UnlockTexture</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__render_8h_1aad2bf04e82a6fb8df44c0b6791321cb5"/><section>
    <title>SDL_UpdateYUVTexture()</title>
<indexterm><primary>SDL_UpdateYUVTexture</primary><secondary>SDL_render.h</secondary></indexterm>
<indexterm><primary>SDL_render.h</primary><secondary>SDL_UpdateYUVTexture</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_UpdateYUVTexture (<link linkend="__s_d_l__render_8h_1a17850d7f1f5de457727cb3cf66b3a7f5">SDL_Texture</link> * texture, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> * rect, const <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> * Yplane, int Ypitch, const <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> * Uplane, int Upitch, const <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> * Vplane, int Vpitch)</computeroutput></para>
<para>Update a rectangle within a planar YV12 or IYUV texture with new pixel data.</para>

<para>You can use <link linkend="__s_d_l__render_8h_1a7aab41a7058997590095e5568d065c11">SDL_UpdateTexture()</link> as long as your pixel data is a contiguous block of Y and U/V planes in the proper order, but this function is available if your pixel data is not contiguous.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>texture</entry><entry>
<para>the texture to update </para>
</entry>
                            </row>
                            <row>
<entry>rect</entry><entry>
<para>a pointer to the rectangle of pixels to update, or NULL to update the entire texture </para>
</entry>
                            </row>
                            <row>
<entry>Yplane</entry><entry>
<para>the raw pixel data for the Y plane </para>
</entry>
                            </row>
                            <row>
<entry>Ypitch</entry><entry>
<para>the number of bytes between rows of pixel data for the Y plane </para>
</entry>
                            </row>
                            <row>
<entry>Uplane</entry><entry>
<para>the raw pixel data for the U plane </para>
</entry>
                            </row>
                            <row>
<entry>Upitch</entry><entry>
<para>the number of bytes between rows of pixel data for the U plane </para>
</entry>
                            </row>
                            <row>
<entry>Vplane</entry><entry>
<para>the raw pixel data for the V plane </para>
</entry>
                            </row>
                            <row>
<entry>Vpitch</entry><entry>
<para>the number of bytes between rows of pixel data for the V plane </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or -1 if the texture is not valid; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.1.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__render_8h_1a7aab41a7058997590095e5568d065c11">SDL_UpdateTexture</link> </para>
</formalpara>
</para>
</section>
</section>
</section>
