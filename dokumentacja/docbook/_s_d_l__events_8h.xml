<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__s_d_l__events_8h" xml:lang="en-US">
<title>D:/RayTracing/include/SDL_events.h File Reference</title>
<indexterm><primary>D:/RayTracing/include/SDL_events.h</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &quot;SDL_stdinc.h&quot;
#include &quot;SDL_error.h&quot;
#include &quot;SDL_video.h&quot;
#include &quot;SDL_keyboard.h&quot;
#include &quot;SDL_mouse.h&quot;
#include &quot;SDL_joystick.h&quot;
#include &quot;SDL_gamecontroller.h&quot;
#include &quot;SDL_quit.h&quot;
#include &quot;SDL_gesture.h&quot;
#include &quot;SDL_touch.h&quot;
#include &quot;begin_code.h&quot;
#include &quot;close_code.h&quot;
</programlisting><simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_struct_s_d_l___common_event">SDL_CommonEvent</link></para>

<para>Fields shared by every event. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct_s_d_l___display_event">SDL_DisplayEvent</link></para>

<para>Display state change event data (event.display.*) </para>
</listitem>
            <listitem><para>struct <link linkend="_struct_s_d_l___window_event">SDL_WindowEvent</link></para>

<para>Window state change event data (event.window.*) </para>
</listitem>
            <listitem><para>struct <link linkend="_struct_s_d_l___keyboard_event">SDL_KeyboardEvent</link></para>

<para>Keyboard button event structure (event.key.*) </para>
</listitem>
            <listitem><para>struct <link linkend="_struct_s_d_l___text_editing_event">SDL_TextEditingEvent</link></para>

<para>Keyboard text editing event structure (event.edit.*) </para>
</listitem>
            <listitem><para>struct <link linkend="_struct_s_d_l___text_input_event">SDL_TextInputEvent</link></para>

<para>Keyboard text input event structure (event.text.*) </para>
</listitem>
            <listitem><para>struct <link linkend="_struct_s_d_l___mouse_motion_event">SDL_MouseMotionEvent</link></para>

<para>Mouse motion event structure (event.motion.*) </para>
</listitem>
            <listitem><para>struct <link linkend="_struct_s_d_l___mouse_button_event">SDL_MouseButtonEvent</link></para>

<para>Mouse button event structure (event.button.*) </para>
</listitem>
            <listitem><para>struct <link linkend="_struct_s_d_l___mouse_wheel_event">SDL_MouseWheelEvent</link></para>

<para>Mouse wheel event structure (event.wheel.*) </para>
</listitem>
            <listitem><para>struct <link linkend="_struct_s_d_l___joy_axis_event">SDL_JoyAxisEvent</link></para>

<para>Joystick axis motion event structure (event.jaxis.*) </para>
</listitem>
            <listitem><para>struct <link linkend="_struct_s_d_l___joy_ball_event">SDL_JoyBallEvent</link></para>

<para>Joystick trackball motion event structure (event.jball.*) </para>
</listitem>
            <listitem><para>struct <link linkend="_struct_s_d_l___joy_hat_event">SDL_JoyHatEvent</link></para>

<para>Joystick hat position change event structure (event.jhat.*) </para>
</listitem>
            <listitem><para>struct <link linkend="_struct_s_d_l___joy_button_event">SDL_JoyButtonEvent</link></para>

<para>Joystick button event structure (event.jbutton.*) </para>
</listitem>
            <listitem><para>struct <link linkend="_struct_s_d_l___joy_device_event">SDL_JoyDeviceEvent</link></para>

<para>Joystick device event structure (event.jdevice.*) </para>
</listitem>
            <listitem><para>struct <link linkend="_struct_s_d_l___controller_axis_event">SDL_ControllerAxisEvent</link></para>

<para>Game controller axis motion event structure (event.caxis.*) </para>
</listitem>
            <listitem><para>struct <link linkend="_struct_s_d_l___controller_button_event">SDL_ControllerButtonEvent</link></para>

<para>Game controller button event structure (event.cbutton.*) </para>
</listitem>
            <listitem><para>struct <link linkend="_struct_s_d_l___controller_device_event">SDL_ControllerDeviceEvent</link></para>

<para>Controller device event structure (event.cdevice.*) </para>
</listitem>
            <listitem><para>struct <link linkend="_struct_s_d_l___controller_touchpad_event">SDL_ControllerTouchpadEvent</link></para>

<para>Game controller touchpad event structure (event.ctouchpad.*) </para>
</listitem>
            <listitem><para>struct <link linkend="_struct_s_d_l___controller_sensor_event">SDL_ControllerSensorEvent</link></para>

<para>Game controller sensor event structure (event.csensor.*) </para>
</listitem>
            <listitem><para>struct <link linkend="_struct_s_d_l___audio_device_event">SDL_AudioDeviceEvent</link></para>

<para>Audio device event structure (event.adevice.*) </para>
</listitem>
            <listitem><para>struct <link linkend="_struct_s_d_l___touch_finger_event">SDL_TouchFingerEvent</link></para>

<para>Touch finger event structure (event.tfinger.*) </para>
</listitem>
            <listitem><para>struct <link linkend="_struct_s_d_l___multi_gesture_event">SDL_MultiGestureEvent</link></para>

<para>Multiple Finger Gesture Event (event.mgesture.*) </para>
</listitem>
            <listitem><para>struct <link linkend="_struct_s_d_l___dollar_gesture_event">SDL_DollarGestureEvent</link></para>

<para>Dollar Gesture Event (event.dgesture.*) </para>
</listitem>
            <listitem><para>struct <link linkend="_struct_s_d_l___drop_event">SDL_DropEvent</link></para>

<para>An event used to request a file open by the system (event.drop.*) This event is enabled by default, you can disable it with <link linkend="__s_d_l__events_8h_1afb772893e1c46f186fa39a4defe76df3">SDL_EventState()</link>. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct_s_d_l___sensor_event">SDL_SensorEvent</link></para>

<para>Sensor event structure (event.sensor.*) </para>
</listitem>
            <listitem><para>struct <link linkend="_struct_s_d_l___quit_event">SDL_QuitEvent</link></para>

<para>The &quot;quit requested&quot; event. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct_s_d_l___o_s_event">SDL_OSEvent</link></para>

<para>OS Specific event. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct_s_d_l___user_event">SDL_UserEvent</link></para>

<para>A user-defined event type (event.user.*) </para>
</listitem>
            <listitem><para>struct <link linkend="_struct_s_d_l___sys_w_m_event">SDL_SysWMEvent</link></para>

<para>A video driver dependent system event (event.syswm.*) This event is disabled by default, you can enable it with <link linkend="__s_d_l__events_8h_1afb772893e1c46f186fa39a4defe76df3">SDL_EventState()</link> </para>
</listitem>
            <listitem><para>union <link linkend="_union_s_d_l___event">SDL_Event</link></para>

<para>General event structure. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#define <link linkend="__s_d_l__events_8h_1ad680a069f9fcab80de91b3eefdf29c3c">SDL_RELEASED</link>   0</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__events_8h_1aee81bbffbc8489bdea8fecd1232c4bd1">SDL_PRESSED</link>   1</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__events_8h_1a2399de7b94f0570b853f5da9c5db7e82">SDL_TEXTEDITINGEVENT_TEXT_SIZE</link>   (32)</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__events_8h_1a43822437fd5e89c1da1841a813cad4aa">SDL_TEXTINPUTEVENT_TEXT_SIZE</link>   (32)</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__events_8h_1a56cee6a1344dd6d33598af982fa9607f">SDL_QUERY</link>   -1</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__events_8h_1af1ff071ae5e1576d6de5663d68391ac5">SDL_IGNORE</link>   0</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__events_8h_1a8190e7249139292b676f0cfcaf7d590a">SDL_DISABLE</link>   0</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__events_8h_1ae8ffaa5d3d65f4dd75dcf1563e1cc8a9">SDL_ENABLE</link>   1</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__events_8h_1a733b4d1d521281545a5a34d799f8a2a1">SDL_GetEventState</link>(<link linkend="__s_d_l__opengl_8h_1ad5ddf6fca7b585646515660e810e0188">type</link>)   <link linkend="__s_d_l__events_8h_1afb772893e1c46f186fa39a4defe76df3">SDL_EventState</link>(<link linkend="__s_d_l__opengl_8h_1ad5ddf6fca7b585646515660e810e0188">type</link>, <link linkend="__s_d_l__events_8h_1a56cee6a1344dd6d33598af982fa9607f">SDL_QUERY</link>)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Typedefs    </title>
        <itemizedlist>
            <listitem><para>typedef struct <link linkend="_struct_s_d_l___common_event">SDL_CommonEvent</link> <link linkend="__s_d_l__events_8h_1a737d360b5df89c7c8a13a8fefb0aa321">SDL_CommonEvent</link></para>

<para>Fields shared by every event. </para>
</listitem>
            <listitem><para>typedef struct <link linkend="_struct_s_d_l___display_event">SDL_DisplayEvent</link> <link linkend="__s_d_l__events_8h_1a4d37917cad4c24f3d886a064102b666b">SDL_DisplayEvent</link></para>

<para>Display state change event data (event.display.*) </para>
</listitem>
            <listitem><para>typedef struct <link linkend="_struct_s_d_l___window_event">SDL_WindowEvent</link> <link linkend="__s_d_l__events_8h_1aa19383df47bc131f64ea1adc49d3530b">SDL_WindowEvent</link></para>

<para>Window state change event data (event.window.*) </para>
</listitem>
            <listitem><para>typedef struct <link linkend="_struct_s_d_l___keyboard_event">SDL_KeyboardEvent</link> <link linkend="__s_d_l__events_8h_1a0ac4af376ea5f04b1c099923b17aabcc">SDL_KeyboardEvent</link></para>

<para>Keyboard button event structure (event.key.*) </para>
</listitem>
            <listitem><para>typedef struct <link linkend="_struct_s_d_l___text_editing_event">SDL_TextEditingEvent</link> <link linkend="__s_d_l__events_8h_1a5cc9a3eec4f311d076f2f9e29eca9c3a">SDL_TextEditingEvent</link></para>

<para>Keyboard text editing event structure (event.edit.*) </para>
</listitem>
            <listitem><para>typedef struct <link linkend="_struct_s_d_l___text_input_event">SDL_TextInputEvent</link> <link linkend="__s_d_l__events_8h_1a078aa3712873c5ec13e17c42f9f394a0">SDL_TextInputEvent</link></para>

<para>Keyboard text input event structure (event.text.*) </para>
</listitem>
            <listitem><para>typedef struct <link linkend="_struct_s_d_l___mouse_motion_event">SDL_MouseMotionEvent</link> <link linkend="__s_d_l__events_8h_1a47fa051bc75e8216caa65d1d3358b7ae">SDL_MouseMotionEvent</link></para>

<para>Mouse motion event structure (event.motion.*) </para>
</listitem>
            <listitem><para>typedef struct <link linkend="_struct_s_d_l___mouse_button_event">SDL_MouseButtonEvent</link> <link linkend="__s_d_l__events_8h_1a07c8c7d7bde4b2d43e6647a595754d36">SDL_MouseButtonEvent</link></para>

<para>Mouse button event structure (event.button.*) </para>
</listitem>
            <listitem><para>typedef struct <link linkend="_struct_s_d_l___mouse_wheel_event">SDL_MouseWheelEvent</link> <link linkend="__s_d_l__events_8h_1a14c0794d5e8d6768fde5e4bb8bb6dea5">SDL_MouseWheelEvent</link></para>

<para>Mouse wheel event structure (event.wheel.*) </para>
</listitem>
            <listitem><para>typedef struct <link linkend="_struct_s_d_l___joy_axis_event">SDL_JoyAxisEvent</link> <link linkend="__s_d_l__events_8h_1abf2328076a9820b8f2f906392680153c">SDL_JoyAxisEvent</link></para>

<para>Joystick axis motion event structure (event.jaxis.*) </para>
</listitem>
            <listitem><para>typedef struct <link linkend="_struct_s_d_l___joy_ball_event">SDL_JoyBallEvent</link> <link linkend="__s_d_l__events_8h_1ab4f00b9e50d6256932b1d2e42a1d8768">SDL_JoyBallEvent</link></para>

<para>Joystick trackball motion event structure (event.jball.*) </para>
</listitem>
            <listitem><para>typedef struct <link linkend="_struct_s_d_l___joy_hat_event">SDL_JoyHatEvent</link> <link linkend="__s_d_l__events_8h_1acc126973445bf3de581f5b21fcdd9f34">SDL_JoyHatEvent</link></para>

<para>Joystick hat position change event structure (event.jhat.*) </para>
</listitem>
            <listitem><para>typedef struct <link linkend="_struct_s_d_l___joy_button_event">SDL_JoyButtonEvent</link> <link linkend="__s_d_l__events_8h_1ac5a4678f070c2c2820a184dd8d2dc3fe">SDL_JoyButtonEvent</link></para>

<para>Joystick button event structure (event.jbutton.*) </para>
</listitem>
            <listitem><para>typedef struct <link linkend="_struct_s_d_l___joy_device_event">SDL_JoyDeviceEvent</link> <link linkend="__s_d_l__events_8h_1a823e4ba13b863419abc37c82445749c1">SDL_JoyDeviceEvent</link></para>

<para>Joystick device event structure (event.jdevice.*) </para>
</listitem>
            <listitem><para>typedef struct <link linkend="_struct_s_d_l___controller_axis_event">SDL_ControllerAxisEvent</link> <link linkend="__s_d_l__events_8h_1a9b12bc8c4cfa09f0c385b583f15bbf3f">SDL_ControllerAxisEvent</link></para>

<para>Game controller axis motion event structure (event.caxis.*) </para>
</listitem>
            <listitem><para>typedef struct <link linkend="_struct_s_d_l___controller_button_event">SDL_ControllerButtonEvent</link> <link linkend="__s_d_l__events_8h_1a04d2d1528e21ae733a88f0895cf2a11f">SDL_ControllerButtonEvent</link></para>

<para>Game controller button event structure (event.cbutton.*) </para>
</listitem>
            <listitem><para>typedef struct <link linkend="_struct_s_d_l___controller_device_event">SDL_ControllerDeviceEvent</link> <link linkend="__s_d_l__events_8h_1a9e9263b2b62bec155b03edc2e9480857">SDL_ControllerDeviceEvent</link></para>

<para>Controller device event structure (event.cdevice.*) </para>
</listitem>
            <listitem><para>typedef struct <link linkend="_struct_s_d_l___controller_touchpad_event">SDL_ControllerTouchpadEvent</link> <link linkend="__s_d_l__events_8h_1a13d736c13be4ec8764c0edaa30e3356f">SDL_ControllerTouchpadEvent</link></para>

<para>Game controller touchpad event structure (event.ctouchpad.*) </para>
</listitem>
            <listitem><para>typedef struct <link linkend="_struct_s_d_l___controller_sensor_event">SDL_ControllerSensorEvent</link> <link linkend="__s_d_l__events_8h_1a62f889a8116b32e07411a799bb99c467">SDL_ControllerSensorEvent</link></para>

<para>Game controller sensor event structure (event.csensor.*) </para>
</listitem>
            <listitem><para>typedef struct <link linkend="_struct_s_d_l___audio_device_event">SDL_AudioDeviceEvent</link> <link linkend="__s_d_l__events_8h_1a64524ac8fed2cb0cadafa09560dff210">SDL_AudioDeviceEvent</link></para>

<para>Audio device event structure (event.adevice.*) </para>
</listitem>
            <listitem><para>typedef struct <link linkend="_struct_s_d_l___touch_finger_event">SDL_TouchFingerEvent</link> <link linkend="__s_d_l__events_8h_1a7147e3df7940e4e43a997dc99e0611eb">SDL_TouchFingerEvent</link></para>

<para>Touch finger event structure (event.tfinger.*) </para>
</listitem>
            <listitem><para>typedef struct <link linkend="_struct_s_d_l___multi_gesture_event">SDL_MultiGestureEvent</link> <link linkend="__s_d_l__events_8h_1ab6e6d25815e6d1b48a2777b2bddf695c">SDL_MultiGestureEvent</link></para>

<para>Multiple Finger Gesture Event (event.mgesture.*) </para>
</listitem>
            <listitem><para>typedef struct <link linkend="_struct_s_d_l___dollar_gesture_event">SDL_DollarGestureEvent</link> <link linkend="__s_d_l__events_8h_1adf06d9167ed17ff913e20ef7cdacba34">SDL_DollarGestureEvent</link></para>

<para>Dollar Gesture Event (event.dgesture.*) </para>
</listitem>
            <listitem><para>typedef struct <link linkend="_struct_s_d_l___drop_event">SDL_DropEvent</link> <link linkend="__s_d_l__events_8h_1a4c88d1d54b64b3f2b5c7a18984614f85">SDL_DropEvent</link></para>

<para>An event used to request a file open by the system (event.drop.*) This event is enabled by default, you can disable it with <link linkend="__s_d_l__events_8h_1afb772893e1c46f186fa39a4defe76df3">SDL_EventState()</link>. </para>
</listitem>
            <listitem><para>typedef struct <link linkend="_struct_s_d_l___sensor_event">SDL_SensorEvent</link> <link linkend="__s_d_l__events_8h_1a05670281251b800e3b450f21680e1ea6">SDL_SensorEvent</link></para>

<para>Sensor event structure (event.sensor.*) </para>
</listitem>
            <listitem><para>typedef struct <link linkend="_struct_s_d_l___quit_event">SDL_QuitEvent</link> <link linkend="__s_d_l__events_8h_1a276c50ba90bfed63c8c3129551c65a43">SDL_QuitEvent</link></para>

<para>The &quot;quit requested&quot; event. </para>
</listitem>
            <listitem><para>typedef struct <link linkend="_struct_s_d_l___o_s_event">SDL_OSEvent</link> <link linkend="__s_d_l__events_8h_1a38f7a582f0cd969b24f26dce745cedfe">SDL_OSEvent</link></para>

<para>OS Specific event. </para>
</listitem>
            <listitem><para>typedef struct <link linkend="_struct_s_d_l___user_event">SDL_UserEvent</link> <link linkend="__s_d_l__events_8h_1a8103cd8a0899ff3fb8648dc5a47a8a82">SDL_UserEvent</link></para>

<para>A user-defined event type (event.user.*) </para>
</listitem>
            <listitem><para>typedef struct <link linkend="_struct_s_d_l___sys_w_mmsg">SDL_SysWMmsg</link> <link linkend="__s_d_l__events_8h_1a1ebcb2014aeef8b8c2cfdd66c91ce3c8">SDL_SysWMmsg</link></para>
</listitem>
            <listitem><para>typedef struct <link linkend="_struct_s_d_l___sys_w_m_event">SDL_SysWMEvent</link> <link linkend="__s_d_l__events_8h_1af028372f0833c630b96a1472899a0369">SDL_SysWMEvent</link></para>

<para>A video driver dependent system event (event.syswm.*) This event is disabled by default, you can enable it with <link linkend="__s_d_l__events_8h_1afb772893e1c46f186fa39a4defe76df3">SDL_EventState()</link> </para>
</listitem>
            <listitem><para>typedef union <link linkend="_union_s_d_l___event">SDL_Event</link> <link linkend="__s_d_l__events_8h_1a33fcc6aa445cb781bfca881e39e5333e">SDL_Event</link></para>

<para>General event structure. </para>
</listitem>
            <listitem><para>typedef int(<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> * <link linkend="__s_d_l__events_8h_1a8f371e5b06361baa576bdb1289595d95">SDL_EventFilter</link>) (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> *userdata, <link linkend="_union_s_d_l___event">SDL_Event</link> *<link linkend="__s_d_l__opengl__glext_8h_1a03b04a5a978bad576866339075de01f6">event</link>)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Enumerations    </title>
        <itemizedlist>
            <listitem><para>enum <link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fcca">SDL_EventType</link> { 
<link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaafd64b483c47e93576b91bf5b227d04c2">SDL_FIRSTEVENT</link> = 0
, <link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa31acc5fdafc86ebe2c1f5c3cae48d603">SDL_QUIT</link> = 0x100
, <link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaac9c2c9870db9d109959ae68ec64cf67e">SDL_APP_TERMINATING</link>
, <link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa32bc310f9370245fa086e42c69d76c40">SDL_APP_LOWMEMORY</link>
, 
<link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaaa0c6280f19f3c307fd2e0c7b1d5f5461">SDL_APP_WILLENTERBACKGROUND</link>
, <link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaab2a804d0e9d91a604f4a03e49f5ab7c1">SDL_APP_DIDENTERBACKGROUND</link>
, <link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa406151c433bc968c46591bde396c987f">SDL_APP_WILLENTERFOREGROUND</link>
, <link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa964e90265b0910f3a52619cc460699d7">SDL_APP_DIDENTERFOREGROUND</link>
, 
<link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa758ba7218366518e82ffe0e0f4a5e691">SDL_LOCALECHANGED</link>
, <link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa825818ce6265316146d7288601fd5974">SDL_DISPLAYEVENT</link> = 0x150
, <link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa5ff4e41f0d8b5def11cfe6a69ec0b698">SDL_WINDOWEVENT</link> = 0x200
, <link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa73749d735a18ce6ef17a09ee70d5dbe7">SDL_SYSWMEVENT</link>
, 
<link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaacaf8cfd53c985cdbf6a90c811d51a1fc">SDL_KEYDOWN</link> = 0x300
, <link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaadefb8866b9d28be21c2c33c35cc66c4b">SDL_KEYUP</link>
, <link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa1b80c465df69c0b6d06f026ce7a230e3">SDL_TEXTEDITING</link>
, <link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa4fa2570088f6b9cbd109ae91b511368f">SDL_TEXTINPUT</link>
, 
<link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaacd473484a07dfdc628c4a02fbf9f83c9">SDL_KEYMAPCHANGED</link>
, <link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa04c436ef80fef38fb77a89e0e9124c30">SDL_MOUSEMOTION</link> = 0x400
, <link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa9267166e1536dfa8b0daa98c0afa9052">SDL_MOUSEBUTTONDOWN</link>
, <link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa4ab85278398d29b9e50f500aad2b952b">SDL_MOUSEBUTTONUP</link>
, 
<link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa63135c2e0aea2286f05066f3c0bc5c4e">SDL_MOUSEWHEEL</link>
, <link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaaf0803b3f8a12de3d85f81ebd7b514cd1">SDL_JOYAXISMOTION</link> = 0x600
, <link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa78f859489cfd565c305c7f6f9d5b25c1">SDL_JOYBALLMOTION</link>
, <link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaafba4080bfbad335e520097b2024f0dff">SDL_JOYHATMOTION</link>
, 
<link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa386ac978bc145a45883fe0adab70710b">SDL_JOYBUTTONDOWN</link>
, <link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa76f91c81110f012e3a47cbbc0449e3c3">SDL_JOYBUTTONUP</link>
, <link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa0500c4e830a1822e6d0a90294c3f1393">SDL_JOYDEVICEADDED</link>
, <link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa4e2d7a1067dc56abeee393d46309ecd0">SDL_JOYDEVICEREMOVED</link>
, 
<link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaaca6330126f4126f6a45454fa046c25f3">SDL_CONTROLLERAXISMOTION</link> = 0x650
, <link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaaafe044d5f92ac9608ded473218569474">SDL_CONTROLLERBUTTONDOWN</link>
, <link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa8cb5a10b1ae0e185ef69a321d3d2d1be">SDL_CONTROLLERBUTTONUP</link>
, <link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa9642de478348da1aba4fb5791e8c5314">SDL_CONTROLLERDEVICEADDED</link>
, 
<link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaae00ac6995dfb7b92bfae68b9f47ae07a">SDL_CONTROLLERDEVICEREMOVED</link>
, <link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaaeca87c7b5bb21915d444298449a78ee6">SDL_CONTROLLERDEVICEREMAPPED</link>
, <link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa156ec1564f07159355de8137bdab406d">SDL_CONTROLLERTOUCHPADDOWN</link>
, <link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa6652ad594ff8306ded63b2e16a0d507f">SDL_CONTROLLERTOUCHPADMOTION</link>
, 
<link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaae94c3ab09ae94c2b83c386eae4e56810">SDL_CONTROLLERTOUCHPADUP</link>
, <link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaafa7a5589ea54330547713f4c80b4437e">SDL_CONTROLLERSENSORUPDATE</link>
, <link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaaa712d1fa8bb69f6042e24a31e835a9ec">SDL_FINGERDOWN</link> = 0x700
, <link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa8266a108a628cc698c5172e72c1fc1e6">SDL_FINGERUP</link>
, 
<link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa1862d7d009ade2c79b2f1fe4a30c9dd2">SDL_FINGERMOTION</link>
, <link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaaac5b40f77c7e1eba688d536d465989c6">SDL_DOLLARGESTURE</link> = 0x800
, <link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa9ce9b2a0e8fd0e130d8ac8499704a277">SDL_DOLLARRECORD</link>
, <link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaaa225e29d8bf6e619dda824c81826c929">SDL_MULTIGESTURE</link>
, 
<link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa6ba1fed7d9fec95993eeb74abd96f64a">SDL_CLIPBOARDUPDATE</link> = 0x900
, <link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaad9238862d7aeaebff88be6453ee0fbab">SDL_DROPFILE</link> = 0x1000
, <link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa1d97f901333e40b0ccc4dff1a319213f">SDL_DROPTEXT</link>
, <link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa0809886c132aaf734fff6f2abf466912">SDL_DROPBEGIN</link>
, 
<link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaaa83e80a89d5c4ff14889d07dddc402ef">SDL_DROPCOMPLETE</link>
, <link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaadb3154654baf003910e75d74b507a82b">SDL_AUDIODEVICEADDED</link> = 0x1100
, <link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaad56f8934fe24ee4c0cd9329e3c57c0c2">SDL_AUDIODEVICEREMOVED</link>
, <link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa1536ed6dfb1cdb20da84b7e2c602c022">SDL_SENSORUPDATE</link> = 0x1200
, 
<link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaae8971f362076f4844d953ea57702108a">SDL_RENDER_TARGETS_RESET</link> = 0x2000
, <link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa88e4a52a73047416133b179ba0fd7db0">SDL_RENDER_DEVICE_RESET</link>
, <link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa3f831e6423f957738190a8c5e180124a">SDL_POLLSENTINEL</link> = 0x7F00
, <link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa4364c23f54802309e83fdb9b1c07c719">SDL_USEREVENT</link> = 0x8000
, 
<link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaaffeac40a4ff366717c0ebc74118ea2ae">SDL_LASTEVENT</link> = 0xFFFF
 }</para>
</listitem>
            <listitem><para>enum <link linkend="__s_d_l__events_8h_1a8fdf1485b0419bb77b89e745267dc179">SDL_eventaction</link> { <link linkend="__s_d_l__events_8h_1a8fdf1485b0419bb77b89e745267dc179a3cfcf139ec3d85b9ed46931b3ee5542f">SDL_ADDEVENT</link>
, <link linkend="__s_d_l__events_8h_1a8fdf1485b0419bb77b89e745267dc179a75469beff07bfd6aa7fa4f54674ce34d">SDL_PEEKEVENT</link>
, <link linkend="__s_d_l__events_8h_1a8fdf1485b0419bb77b89e745267dc179ae5f9b281fd90b9a836b50bfa5c520333">SDL_GETEVENT</link>
 }</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="__s_d_l__events_8h_1a358109832ab4b458758f71e0a474b67c">SDL_COMPILE_TIME_ASSERT</link> (<link linkend="_union_s_d_l___event">SDL_Event</link>, sizeof(<link linkend="_union_s_d_l___event">SDL_Event</link>)==sizeof(((<link linkend="_union_s_d_l___event">SDL_Event</link> *) <link linkend="_begin__code_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>) -&gt;padding))</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__events_8h_1aa15403d1c8fc341cd9cf750e27a66d19">SDL_PumpEvents</link> (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__events_8h_1a83618a672f963892ddd0eef74a402e75">SDL_PeepEvents</link> (<link linkend="_union_s_d_l___event">SDL_Event</link> *events, int numevents, <link linkend="__s_d_l__events_8h_1a8fdf1485b0419bb77b89e745267dc179">SDL_eventaction</link> action, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> minType, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> maxType)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__events_8h_1ac424563975b92f98c6175543e8f41012">SDL_HasEvent</link> (<link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> <link linkend="__s_d_l__opengl_8h_1ad5ddf6fca7b585646515660e810e0188">type</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__events_8h_1a74336e7d6e86f06171814eccbc1e2157">SDL_HasEvents</link> (<link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> minType, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> maxType)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__events_8h_1a4225727df385885e999784f416410cc9">SDL_FlushEvent</link> (<link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> <link linkend="__s_d_l__opengl_8h_1ad5ddf6fca7b585646515660e810e0188">type</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__events_8h_1aa0e3ec5d83d38af1dfea722d4b741f3e">SDL_FlushEvents</link> (<link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> minType, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> maxType)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__events_8h_1acfa517963c25f8b71acc6b56721c5d9b">SDL_PollEvent</link> (<link linkend="_union_s_d_l___event">SDL_Event</link> *<link linkend="__s_d_l__opengl__glext_8h_1a03b04a5a978bad576866339075de01f6">event</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__events_8h_1af37c266ea979ba39b82079d9eb401003">SDL_WaitEvent</link> (<link linkend="_union_s_d_l___event">SDL_Event</link> *<link linkend="__s_d_l__opengl__glext_8h_1a03b04a5a978bad576866339075de01f6">event</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__events_8h_1a54285ab4f6e2d6d1a01df6a1dd78294a">SDL_WaitEventTimeout</link> (<link linkend="_union_s_d_l___event">SDL_Event</link> *<link linkend="__s_d_l__opengl__glext_8h_1a03b04a5a978bad576866339075de01f6">event</link>, int <link linkend="__s_d_l__opengl__glext_8h_1ad29bb0d8468b264a4e3d9204366cfaab">timeout</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__events_8h_1adced45c8816620846a6fde2a7d54b446">SDL_PushEvent</link> (<link linkend="_union_s_d_l___event">SDL_Event</link> *<link linkend="__s_d_l__opengl__glext_8h_1a03b04a5a978bad576866339075de01f6">event</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__events_8h_1ac02d22efa3a02407ec1f3b4f303b0bfb">SDL_SetEventFilter</link> (<link linkend="__s_d_l__events_8h_1a8f371e5b06361baa576bdb1289595d95">SDL_EventFilter</link> <link linkend="__s_d_l__opengl__glext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>, <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> *userdata)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__events_8h_1a9cc48009a4dc4464594213ca45b26c27">SDL_GetEventFilter</link> (<link linkend="__s_d_l__events_8h_1a8f371e5b06361baa576bdb1289595d95">SDL_EventFilter</link> *<link linkend="__s_d_l__opengl__glext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>, <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> **userdata)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__events_8h_1ad81eba7df9eae4fd0acd046b7f983202">SDL_AddEventWatch</link> (<link linkend="__s_d_l__events_8h_1a8f371e5b06361baa576bdb1289595d95">SDL_EventFilter</link> <link linkend="__s_d_l__opengl__glext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>, <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> *userdata)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__events_8h_1a05a54ccb07f32fe31b73e93ac238e20a">SDL_DelEventWatch</link> (<link linkend="__s_d_l__events_8h_1a8f371e5b06361baa576bdb1289595d95">SDL_EventFilter</link> <link linkend="__s_d_l__opengl__glext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>, <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> *userdata)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__events_8h_1a37e4458a58164455f53ed35d633c4bb5">SDL_FilterEvents</link> (<link linkend="__s_d_l__events_8h_1a8f371e5b06361baa576bdb1289595d95">SDL_EventFilter</link> <link linkend="__s_d_l__opengl__glext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>, <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> *userdata)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__events_8h_1afb772893e1c46f186fa39a4defe76df3">SDL_EventState</link> (<link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> <link linkend="__s_d_l__opengl_8h_1ad5ddf6fca7b585646515660e810e0188">type</link>, int state)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__events_8h_1af99e29fafb9e4773b70f68cec08681fc">SDL_RegisterEvents</link> (int numevents)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Include file for SDL event handling. </para>
</section>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="__s_d_l__events_8h_1a8190e7249139292b676f0cfcaf7d590a"/><section>
    <title>SDL_DISABLE</title>
<indexterm><primary>SDL_DISABLE</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_DISABLE</secondary></indexterm>
<para><computeroutput>#define SDL_DISABLE   0</computeroutput></para></section>
<anchor xml:id="__s_d_l__events_8h_1ae8ffaa5d3d65f4dd75dcf1563e1cc8a9"/><section>
    <title>SDL_ENABLE</title>
<indexterm><primary>SDL_ENABLE</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_ENABLE</secondary></indexterm>
<para><computeroutput>#define SDL_ENABLE   1</computeroutput></para></section>
<anchor xml:id="__s_d_l__events_8h_1a733b4d1d521281545a5a34d799f8a2a1"/><section>
    <title>SDL_GetEventState</title>
<indexterm><primary>SDL_GetEventState</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_GetEventState</secondary></indexterm>
<para><computeroutput>#define SDL_GetEventState( <link linkend="__s_d_l__opengl_8h_1ad5ddf6fca7b585646515660e810e0188">type</link>)   <link linkend="__s_d_l__events_8h_1afb772893e1c46f186fa39a4defe76df3">SDL_EventState</link>(<link linkend="__s_d_l__opengl_8h_1ad5ddf6fca7b585646515660e810e0188">type</link>, <link linkend="__s_d_l__events_8h_1a56cee6a1344dd6d33598af982fa9607f">SDL_QUERY</link>)</computeroutput></para></section>
<anchor xml:id="__s_d_l__events_8h_1af1ff071ae5e1576d6de5663d68391ac5"/><section>
    <title>SDL_IGNORE</title>
<indexterm><primary>SDL_IGNORE</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_IGNORE</secondary></indexterm>
<para><computeroutput>#define SDL_IGNORE   0</computeroutput></para></section>
<anchor xml:id="__s_d_l__events_8h_1aee81bbffbc8489bdea8fecd1232c4bd1"/><section>
    <title>SDL_PRESSED</title>
<indexterm><primary>SDL_PRESSED</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_PRESSED</secondary></indexterm>
<para><computeroutput>#define SDL_PRESSED   1</computeroutput></para></section>
<anchor xml:id="__s_d_l__events_8h_1a56cee6a1344dd6d33598af982fa9607f"/><section>
    <title>SDL_QUERY</title>
<indexterm><primary>SDL_QUERY</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_QUERY</secondary></indexterm>
<para><computeroutput>#define SDL_QUERY   -1</computeroutput></para></section>
<anchor xml:id="__s_d_l__events_8h_1ad680a069f9fcab80de91b3eefdf29c3c"/><section>
    <title>SDL_RELEASED</title>
<indexterm><primary>SDL_RELEASED</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_RELEASED</secondary></indexterm>
<para><computeroutput>#define SDL_RELEASED   0</computeroutput></para></section>
<anchor xml:id="__s_d_l__events_8h_1a2399de7b94f0570b853f5da9c5db7e82"/><section>
    <title>SDL_TEXTEDITINGEVENT_TEXT_SIZE</title>
<indexterm><primary>SDL_TEXTEDITINGEVENT_TEXT_SIZE</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_TEXTEDITINGEVENT_TEXT_SIZE</secondary></indexterm>
<para><computeroutput>#define SDL_TEXTEDITINGEVENT_TEXT_SIZE   (32)</computeroutput></para></section>
<anchor xml:id="__s_d_l__events_8h_1a43822437fd5e89c1da1841a813cad4aa"/><section>
    <title>SDL_TEXTINPUTEVENT_TEXT_SIZE</title>
<indexterm><primary>SDL_TEXTINPUTEVENT_TEXT_SIZE</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_TEXTINPUTEVENT_TEXT_SIZE</secondary></indexterm>
<para><computeroutput>#define SDL_TEXTINPUTEVENT_TEXT_SIZE   (32)</computeroutput></para></section>
</section>
<section>
<title>Typedef Documentation</title>
<anchor xml:id="__s_d_l__events_8h_1a64524ac8fed2cb0cadafa09560dff210"/><section>
    <title>SDL_AudioDeviceEvent</title>
<indexterm><primary>SDL_AudioDeviceEvent</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_AudioDeviceEvent</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_struct_s_d_l___audio_device_event">SDL_AudioDeviceEvent</link> <link linkend="_struct_s_d_l___audio_device_event">SDL_AudioDeviceEvent</link></computeroutput></para><para>

<para>Audio device event structure (event.adevice.*) </para>
</para>
</section>
<anchor xml:id="__s_d_l__events_8h_1a737d360b5df89c7c8a13a8fefb0aa321"/><section>
    <title>SDL_CommonEvent</title>
<indexterm><primary>SDL_CommonEvent</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_CommonEvent</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_struct_s_d_l___common_event">SDL_CommonEvent</link> <link linkend="_struct_s_d_l___common_event">SDL_CommonEvent</link></computeroutput></para><para>

<para>Fields shared by every event. </para>
</para>
</section>
<anchor xml:id="__s_d_l__events_8h_1a9b12bc8c4cfa09f0c385b583f15bbf3f"/><section>
    <title>SDL_ControllerAxisEvent</title>
<indexterm><primary>SDL_ControllerAxisEvent</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_ControllerAxisEvent</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_struct_s_d_l___controller_axis_event">SDL_ControllerAxisEvent</link> <link linkend="_struct_s_d_l___controller_axis_event">SDL_ControllerAxisEvent</link></computeroutput></para><para>

<para>Game controller axis motion event structure (event.caxis.*) </para>
</para>
</section>
<anchor xml:id="__s_d_l__events_8h_1a04d2d1528e21ae733a88f0895cf2a11f"/><section>
    <title>SDL_ControllerButtonEvent</title>
<indexterm><primary>SDL_ControllerButtonEvent</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_ControllerButtonEvent</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_struct_s_d_l___controller_button_event">SDL_ControllerButtonEvent</link> <link linkend="_struct_s_d_l___controller_button_event">SDL_ControllerButtonEvent</link></computeroutput></para><para>

<para>Game controller button event structure (event.cbutton.*) </para>
</para>
</section>
<anchor xml:id="__s_d_l__events_8h_1a9e9263b2b62bec155b03edc2e9480857"/><section>
    <title>SDL_ControllerDeviceEvent</title>
<indexterm><primary>SDL_ControllerDeviceEvent</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_ControllerDeviceEvent</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_struct_s_d_l___controller_device_event">SDL_ControllerDeviceEvent</link> <link linkend="_struct_s_d_l___controller_device_event">SDL_ControllerDeviceEvent</link></computeroutput></para><para>

<para>Controller device event structure (event.cdevice.*) </para>
</para>
</section>
<anchor xml:id="__s_d_l__events_8h_1a62f889a8116b32e07411a799bb99c467"/><section>
    <title>SDL_ControllerSensorEvent</title>
<indexterm><primary>SDL_ControllerSensorEvent</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_ControllerSensorEvent</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_struct_s_d_l___controller_sensor_event">SDL_ControllerSensorEvent</link> <link linkend="_struct_s_d_l___controller_sensor_event">SDL_ControllerSensorEvent</link></computeroutput></para><para>

<para>Game controller sensor event structure (event.csensor.*) </para>
</para>
</section>
<anchor xml:id="__s_d_l__events_8h_1a13d736c13be4ec8764c0edaa30e3356f"/><section>
    <title>SDL_ControllerTouchpadEvent</title>
<indexterm><primary>SDL_ControllerTouchpadEvent</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_ControllerTouchpadEvent</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_struct_s_d_l___controller_touchpad_event">SDL_ControllerTouchpadEvent</link> <link linkend="_struct_s_d_l___controller_touchpad_event">SDL_ControllerTouchpadEvent</link></computeroutput></para><para>

<para>Game controller touchpad event structure (event.ctouchpad.*) </para>
</para>
</section>
<anchor xml:id="__s_d_l__events_8h_1a4d37917cad4c24f3d886a064102b666b"/><section>
    <title>SDL_DisplayEvent</title>
<indexterm><primary>SDL_DisplayEvent</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_DisplayEvent</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_struct_s_d_l___display_event">SDL_DisplayEvent</link> <link linkend="_struct_s_d_l___display_event">SDL_DisplayEvent</link></computeroutput></para><para>

<para>Display state change event data (event.display.*) </para>
</para>
</section>
<anchor xml:id="__s_d_l__events_8h_1adf06d9167ed17ff913e20ef7cdacba34"/><section>
    <title>SDL_DollarGestureEvent</title>
<indexterm><primary>SDL_DollarGestureEvent</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_DollarGestureEvent</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_struct_s_d_l___dollar_gesture_event">SDL_DollarGestureEvent</link> <link linkend="_struct_s_d_l___dollar_gesture_event">SDL_DollarGestureEvent</link></computeroutput></para><para>

<para>Dollar Gesture Event (event.dgesture.*) </para>
</para>
</section>
<anchor xml:id="__s_d_l__events_8h_1a4c88d1d54b64b3f2b5c7a18984614f85"/><section>
    <title>SDL_DropEvent</title>
<indexterm><primary>SDL_DropEvent</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_DropEvent</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_struct_s_d_l___drop_event">SDL_DropEvent</link> <link linkend="_struct_s_d_l___drop_event">SDL_DropEvent</link></computeroutput></para><para>

<para>An event used to request a file open by the system (event.drop.*) This event is enabled by default, you can disable it with <link linkend="__s_d_l__events_8h_1afb772893e1c46f186fa39a4defe76df3">SDL_EventState()</link>. </para>
</para>

<para><note><title>Note</title>

<para>If this event is enabled, you must free the filename in the event. </para>
</note>
</para>
</section>
<anchor xml:id="__s_d_l__events_8h_1a33fcc6aa445cb781bfca881e39e5333e"/><section>
    <title>SDL_Event</title>
<indexterm><primary>SDL_Event</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_Event</secondary></indexterm>
<para><computeroutput>typedef union <link linkend="_union_s_d_l___event">SDL_Event</link> <link linkend="_union_s_d_l___event">SDL_Event</link></computeroutput></para><para>

<para>General event structure. </para>
</para>
</section>
<anchor xml:id="__s_d_l__events_8h_1a8f371e5b06361baa576bdb1289595d95"/><section>
    <title>SDL_EventFilter</title>
<indexterm><primary>SDL_EventFilter</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_EventFilter</secondary></indexterm>
<para><computeroutput>typedef int(<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> * SDL_EventFilter) (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> *userdata, <link linkend="_union_s_d_l___event">SDL_Event</link> *<link linkend="__s_d_l__opengl__glext_8h_1a03b04a5a978bad576866339075de01f6">event</link>)</computeroutput></para>
<para>A function pointer used for callbacks that watch the event queue.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>userdata</entry><entry>
<para>what was passed as <computeroutput>userdata</computeroutput> to <link linkend="__s_d_l__events_8h_1ac02d22efa3a02407ec1f3b4f303b0bfb">SDL_SetEventFilter()</link> or SDL_AddEventWatch, etc </para>
</entry>
                            </row>
                            <row>
<entry>event</entry><entry>
<para>the event that triggered the callback </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>1 to permit event to be added to the queue, and 0 to disallow it. When used with SDL_AddEventWatch, the return value is ignored.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__events_8h_1ac02d22efa3a02407ec1f3b4f303b0bfb">SDL_SetEventFilter</link> </para>

<para><link linkend="__s_d_l__events_8h_1ad81eba7df9eae4fd0acd046b7f983202">SDL_AddEventWatch</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__events_8h_1abf2328076a9820b8f2f906392680153c"/><section>
    <title>SDL_JoyAxisEvent</title>
<indexterm><primary>SDL_JoyAxisEvent</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_JoyAxisEvent</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_struct_s_d_l___joy_axis_event">SDL_JoyAxisEvent</link> <link linkend="_struct_s_d_l___joy_axis_event">SDL_JoyAxisEvent</link></computeroutput></para><para>

<para>Joystick axis motion event structure (event.jaxis.*) </para>
</para>
</section>
<anchor xml:id="__s_d_l__events_8h_1ab4f00b9e50d6256932b1d2e42a1d8768"/><section>
    <title>SDL_JoyBallEvent</title>
<indexterm><primary>SDL_JoyBallEvent</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_JoyBallEvent</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_struct_s_d_l___joy_ball_event">SDL_JoyBallEvent</link> <link linkend="_struct_s_d_l___joy_ball_event">SDL_JoyBallEvent</link></computeroutput></para><para>

<para>Joystick trackball motion event structure (event.jball.*) </para>
</para>
</section>
<anchor xml:id="__s_d_l__events_8h_1ac5a4678f070c2c2820a184dd8d2dc3fe"/><section>
    <title>SDL_JoyButtonEvent</title>
<indexterm><primary>SDL_JoyButtonEvent</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_JoyButtonEvent</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_struct_s_d_l___joy_button_event">SDL_JoyButtonEvent</link> <link linkend="_struct_s_d_l___joy_button_event">SDL_JoyButtonEvent</link></computeroutput></para><para>

<para>Joystick button event structure (event.jbutton.*) </para>
</para>
</section>
<anchor xml:id="__s_d_l__events_8h_1a823e4ba13b863419abc37c82445749c1"/><section>
    <title>SDL_JoyDeviceEvent</title>
<indexterm><primary>SDL_JoyDeviceEvent</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_JoyDeviceEvent</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_struct_s_d_l___joy_device_event">SDL_JoyDeviceEvent</link> <link linkend="_struct_s_d_l___joy_device_event">SDL_JoyDeviceEvent</link></computeroutput></para><para>

<para>Joystick device event structure (event.jdevice.*) </para>
</para>
</section>
<anchor xml:id="__s_d_l__events_8h_1acc126973445bf3de581f5b21fcdd9f34"/><section>
    <title>SDL_JoyHatEvent</title>
<indexterm><primary>SDL_JoyHatEvent</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_JoyHatEvent</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_struct_s_d_l___joy_hat_event">SDL_JoyHatEvent</link> <link linkend="_struct_s_d_l___joy_hat_event">SDL_JoyHatEvent</link></computeroutput></para><para>

<para>Joystick hat position change event structure (event.jhat.*) </para>
</para>
</section>
<anchor xml:id="__s_d_l__events_8h_1a0ac4af376ea5f04b1c099923b17aabcc"/><section>
    <title>SDL_KeyboardEvent</title>
<indexterm><primary>SDL_KeyboardEvent</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_KeyboardEvent</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_struct_s_d_l___keyboard_event">SDL_KeyboardEvent</link> <link linkend="_struct_s_d_l___keyboard_event">SDL_KeyboardEvent</link></computeroutput></para><para>

<para>Keyboard button event structure (event.key.*) </para>
</para>
</section>
<anchor xml:id="__s_d_l__events_8h_1a07c8c7d7bde4b2d43e6647a595754d36"/><section>
    <title>SDL_MouseButtonEvent</title>
<indexterm><primary>SDL_MouseButtonEvent</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_MouseButtonEvent</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_struct_s_d_l___mouse_button_event">SDL_MouseButtonEvent</link> <link linkend="_struct_s_d_l___mouse_button_event">SDL_MouseButtonEvent</link></computeroutput></para><para>

<para>Mouse button event structure (event.button.*) </para>
</para>
</section>
<anchor xml:id="__s_d_l__events_8h_1a47fa051bc75e8216caa65d1d3358b7ae"/><section>
    <title>SDL_MouseMotionEvent</title>
<indexterm><primary>SDL_MouseMotionEvent</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_MouseMotionEvent</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_struct_s_d_l___mouse_motion_event">SDL_MouseMotionEvent</link> <link linkend="_struct_s_d_l___mouse_motion_event">SDL_MouseMotionEvent</link></computeroutput></para><para>

<para>Mouse motion event structure (event.motion.*) </para>
</para>
</section>
<anchor xml:id="__s_d_l__events_8h_1a14c0794d5e8d6768fde5e4bb8bb6dea5"/><section>
    <title>SDL_MouseWheelEvent</title>
<indexterm><primary>SDL_MouseWheelEvent</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_MouseWheelEvent</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_struct_s_d_l___mouse_wheel_event">SDL_MouseWheelEvent</link> <link linkend="_struct_s_d_l___mouse_wheel_event">SDL_MouseWheelEvent</link></computeroutput></para><para>

<para>Mouse wheel event structure (event.wheel.*) </para>
</para>
</section>
<anchor xml:id="__s_d_l__events_8h_1ab6e6d25815e6d1b48a2777b2bddf695c"/><section>
    <title>SDL_MultiGestureEvent</title>
<indexterm><primary>SDL_MultiGestureEvent</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_MultiGestureEvent</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_struct_s_d_l___multi_gesture_event">SDL_MultiGestureEvent</link> <link linkend="_struct_s_d_l___multi_gesture_event">SDL_MultiGestureEvent</link></computeroutput></para><para>

<para>Multiple Finger Gesture Event (event.mgesture.*) </para>
</para>
</section>
<anchor xml:id="__s_d_l__events_8h_1a38f7a582f0cd969b24f26dce745cedfe"/><section>
    <title>SDL_OSEvent</title>
<indexterm><primary>SDL_OSEvent</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_OSEvent</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_struct_s_d_l___o_s_event">SDL_OSEvent</link> <link linkend="_struct_s_d_l___o_s_event">SDL_OSEvent</link></computeroutput></para><para>

<para>OS Specific event. </para>
</para>
</section>
<anchor xml:id="__s_d_l__events_8h_1a276c50ba90bfed63c8c3129551c65a43"/><section>
    <title>SDL_QuitEvent</title>
<indexterm><primary>SDL_QuitEvent</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_QuitEvent</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_struct_s_d_l___quit_event">SDL_QuitEvent</link> <link linkend="_struct_s_d_l___quit_event">SDL_QuitEvent</link></computeroutput></para><para>

<para>The &quot;quit requested&quot; event. </para>
</para>
</section>
<anchor xml:id="__s_d_l__events_8h_1a05670281251b800e3b450f21680e1ea6"/><section>
    <title>SDL_SensorEvent</title>
<indexterm><primary>SDL_SensorEvent</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_SensorEvent</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_struct_s_d_l___sensor_event">SDL_SensorEvent</link> <link linkend="_struct_s_d_l___sensor_event">SDL_SensorEvent</link></computeroutput></para><para>

<para>Sensor event structure (event.sensor.*) </para>
</para>
</section>
<anchor xml:id="__s_d_l__events_8h_1af028372f0833c630b96a1472899a0369"/><section>
    <title>SDL_SysWMEvent</title>
<indexterm><primary>SDL_SysWMEvent</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_SysWMEvent</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_struct_s_d_l___sys_w_m_event">SDL_SysWMEvent</link> <link linkend="_struct_s_d_l___sys_w_m_event">SDL_SysWMEvent</link></computeroutput></para><para>

<para>A video driver dependent system event (event.syswm.*) This event is disabled by default, you can enable it with <link linkend="__s_d_l__events_8h_1afb772893e1c46f186fa39a4defe76df3">SDL_EventState()</link> </para>
</para>

<para><note><title>Note</title>

<para>If you want to use this event, you should include SDL_syswm.h. </para>
</note>
</para>
</section>
<anchor xml:id="__s_d_l__events_8h_1a1ebcb2014aeef8b8c2cfdd66c91ce3c8"/><section>
    <title>SDL_SysWMmsg</title>
<indexterm><primary>SDL_SysWMmsg</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_SysWMmsg</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_struct_s_d_l___sys_w_mmsg">SDL_SysWMmsg</link> <link linkend="_struct_s_d_l___sys_w_mmsg">SDL_SysWMmsg</link></computeroutput></para></section>
<anchor xml:id="__s_d_l__events_8h_1a5cc9a3eec4f311d076f2f9e29eca9c3a"/><section>
    <title>SDL_TextEditingEvent</title>
<indexterm><primary>SDL_TextEditingEvent</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_TextEditingEvent</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_struct_s_d_l___text_editing_event">SDL_TextEditingEvent</link> <link linkend="_struct_s_d_l___text_editing_event">SDL_TextEditingEvent</link></computeroutput></para><para>

<para>Keyboard text editing event structure (event.edit.*) </para>
</para>
</section>
<anchor xml:id="__s_d_l__events_8h_1a078aa3712873c5ec13e17c42f9f394a0"/><section>
    <title>SDL_TextInputEvent</title>
<indexterm><primary>SDL_TextInputEvent</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_TextInputEvent</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_struct_s_d_l___text_input_event">SDL_TextInputEvent</link> <link linkend="_struct_s_d_l___text_input_event">SDL_TextInputEvent</link></computeroutput></para><para>

<para>Keyboard text input event structure (event.text.*) </para>
</para>
</section>
<anchor xml:id="__s_d_l__events_8h_1a7147e3df7940e4e43a997dc99e0611eb"/><section>
    <title>SDL_TouchFingerEvent</title>
<indexterm><primary>SDL_TouchFingerEvent</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_TouchFingerEvent</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_struct_s_d_l___touch_finger_event">SDL_TouchFingerEvent</link> <link linkend="_struct_s_d_l___touch_finger_event">SDL_TouchFingerEvent</link></computeroutput></para><para>

<para>Touch finger event structure (event.tfinger.*) </para>
</para>
</section>
<anchor xml:id="__s_d_l__events_8h_1a8103cd8a0899ff3fb8648dc5a47a8a82"/><section>
    <title>SDL_UserEvent</title>
<indexterm><primary>SDL_UserEvent</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_UserEvent</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_struct_s_d_l___user_event">SDL_UserEvent</link> <link linkend="_struct_s_d_l___user_event">SDL_UserEvent</link></computeroutput></para><para>

<para>A user-defined event type (event.user.*) </para>
</para>
</section>
<anchor xml:id="__s_d_l__events_8h_1aa19383df47bc131f64ea1adc49d3530b"/><section>
    <title>SDL_WindowEvent</title>
<indexterm><primary>SDL_WindowEvent</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_WindowEvent</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_struct_s_d_l___window_event">SDL_WindowEvent</link> <link linkend="_struct_s_d_l___window_event">SDL_WindowEvent</link></computeroutput></para><para>

<para>Window state change event data (event.window.*) </para>
</para>
</section>
</section>
<section>
<title>Enumeration Type Documentation</title>
<anchor xml:id="__s_d_l__events_8h_1a8fdf1485b0419bb77b89e745267dc179"/><section>
    <title>SDL_eventaction</title>
<indexterm><primary>SDL_eventaction</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_eventaction</secondary></indexterm>
<para><computeroutput>enum <link linkend="__s_d_l__events_8h_1a8fdf1485b0419bb77b89e745267dc179">SDL_eventaction</link></computeroutput></para><informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>SDL_ADDEVENT</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_ADDEVENT</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a8fdf1485b0419bb77b89e745267dc179a3cfcf139ec3d85b9ed46931b3ee5542f"/>SDL_ADDEVENT</entry><entry></entry></row><row><entry><indexterm><primary>SDL_PEEKEVENT</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_PEEKEVENT</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a8fdf1485b0419bb77b89e745267dc179a75469beff07bfd6aa7fa4f54674ce34d"/>SDL_PEEKEVENT</entry><entry></entry></row><row><entry><indexterm><primary>SDL_GETEVENT</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_GETEVENT</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a8fdf1485b0419bb77b89e745267dc179ae5f9b281fd90b9a836b50bfa5c520333"/>SDL_GETEVENT</entry><entry></entry></row>    </tbody>
    </tgroup>
</informaltable>
</section>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fcca"/><section>
    <title>SDL_EventType</title>
<indexterm><primary>SDL_EventType</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_EventType</secondary></indexterm>
<para><computeroutput>enum <link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fcca">SDL_EventType</link></computeroutput></para>
<para>The types of events that can be delivered. </para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>SDL_FIRSTEVENT</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_FIRSTEVENT</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaafd64b483c47e93576b91bf5b227d04c2"/>SDL_FIRSTEVENT</entry><entry>
<para>Unused (do not remove) </para>
</entry></row><row><entry><indexterm><primary>SDL_QUIT</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_QUIT</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa31acc5fdafc86ebe2c1f5c3cae48d603"/>SDL_QUIT</entry><entry>
<para>User-requested quit </para>
</entry></row><row><entry><indexterm><primary>SDL_APP_TERMINATING</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_APP_TERMINATING</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaac9c2c9870db9d109959ae68ec64cf67e"/>SDL_APP_TERMINATING</entry><entry>
<para>The application is being terminated by the OS Called on iOS in applicationWillTerminate() Called on Android in onDestroy() </para>
</entry></row><row><entry><indexterm><primary>SDL_APP_LOWMEMORY</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_APP_LOWMEMORY</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa32bc310f9370245fa086e42c69d76c40"/>SDL_APP_LOWMEMORY</entry><entry>
<para>The application is low on memory, free memory if possible. Called on iOS in applicationDidReceiveMemoryWarning() Called on Android in onLowMemory() </para>
</entry></row><row><entry><indexterm><primary>SDL_APP_WILLENTERBACKGROUND</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_APP_WILLENTERBACKGROUND</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaaa0c6280f19f3c307fd2e0c7b1d5f5461"/>SDL_APP_WILLENTERBACKGROUND</entry><entry>
<para>The application is about to enter the background Called on iOS in applicationWillResignActive() Called on Android in onPause() </para>
</entry></row><row><entry><indexterm><primary>SDL_APP_DIDENTERBACKGROUND</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_APP_DIDENTERBACKGROUND</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaab2a804d0e9d91a604f4a03e49f5ab7c1"/>SDL_APP_DIDENTERBACKGROUND</entry><entry>
<para>The application did enter the background and may not get CPU for some time Called on iOS in applicationDidEnterBackground() Called on Android in onPause() </para>
</entry></row><row><entry><indexterm><primary>SDL_APP_WILLENTERFOREGROUND</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_APP_WILLENTERFOREGROUND</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa406151c433bc968c46591bde396c987f"/>SDL_APP_WILLENTERFOREGROUND</entry><entry>
<para>The application is about to enter the foreground Called on iOS in applicationWillEnterForeground() Called on Android in onResume() </para>
</entry></row><row><entry><indexterm><primary>SDL_APP_DIDENTERFOREGROUND</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_APP_DIDENTERFOREGROUND</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa964e90265b0910f3a52619cc460699d7"/>SDL_APP_DIDENTERFOREGROUND</entry><entry>
<para>The application is now interactive Called on iOS in applicationDidBecomeActive() Called on Android in onResume() </para>
</entry></row><row><entry><indexterm><primary>SDL_LOCALECHANGED</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_LOCALECHANGED</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa758ba7218366518e82ffe0e0f4a5e691"/>SDL_LOCALECHANGED</entry><entry>
<para>The user&apos;s locale preferences have changed. </para>
</entry></row><row><entry><indexterm><primary>SDL_DISPLAYEVENT</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_DISPLAYEVENT</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa825818ce6265316146d7288601fd5974"/>SDL_DISPLAYEVENT</entry><entry>
<para>Display state change </para>
</entry></row><row><entry><indexterm><primary>SDL_WINDOWEVENT</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_WINDOWEVENT</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa5ff4e41f0d8b5def11cfe6a69ec0b698"/>SDL_WINDOWEVENT</entry><entry>
<para>Window state change </para>
</entry></row><row><entry><indexterm><primary>SDL_SYSWMEVENT</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_SYSWMEVENT</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa73749d735a18ce6ef17a09ee70d5dbe7"/>SDL_SYSWMEVENT</entry><entry>
<para>System specific event </para>
</entry></row><row><entry><indexterm><primary>SDL_KEYDOWN</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_KEYDOWN</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaacaf8cfd53c985cdbf6a90c811d51a1fc"/>SDL_KEYDOWN</entry><entry>
<para>Key pressed </para>
</entry></row><row><entry><indexterm><primary>SDL_KEYUP</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_KEYUP</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaadefb8866b9d28be21c2c33c35cc66c4b"/>SDL_KEYUP</entry><entry>
<para>Key released </para>
</entry></row><row><entry><indexterm><primary>SDL_TEXTEDITING</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_TEXTEDITING</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa1b80c465df69c0b6d06f026ce7a230e3"/>SDL_TEXTEDITING</entry><entry>
<para>Keyboard text editing (composition) </para>
</entry></row><row><entry><indexterm><primary>SDL_TEXTINPUT</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_TEXTINPUT</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa4fa2570088f6b9cbd109ae91b511368f"/>SDL_TEXTINPUT</entry><entry>
<para>Keyboard text input </para>
</entry></row><row><entry><indexterm><primary>SDL_KEYMAPCHANGED</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_KEYMAPCHANGED</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaacd473484a07dfdc628c4a02fbf9f83c9"/>SDL_KEYMAPCHANGED</entry><entry>
<para>Keymap changed due to a system event such as an input language or keyboard layout change. </para>
</entry></row><row><entry><indexterm><primary>SDL_MOUSEMOTION</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_MOUSEMOTION</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa04c436ef80fef38fb77a89e0e9124c30"/>SDL_MOUSEMOTION</entry><entry>
<para>Mouse moved </para>
</entry></row><row><entry><indexterm><primary>SDL_MOUSEBUTTONDOWN</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_MOUSEBUTTONDOWN</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa9267166e1536dfa8b0daa98c0afa9052"/>SDL_MOUSEBUTTONDOWN</entry><entry>
<para>Mouse button pressed </para>
</entry></row><row><entry><indexterm><primary>SDL_MOUSEBUTTONUP</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_MOUSEBUTTONUP</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa4ab85278398d29b9e50f500aad2b952b"/>SDL_MOUSEBUTTONUP</entry><entry>
<para>Mouse button released </para>
</entry></row><row><entry><indexterm><primary>SDL_MOUSEWHEEL</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_MOUSEWHEEL</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa63135c2e0aea2286f05066f3c0bc5c4e"/>SDL_MOUSEWHEEL</entry><entry>
<para>Mouse wheel motion </para>
</entry></row><row><entry><indexterm><primary>SDL_JOYAXISMOTION</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_JOYAXISMOTION</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaaf0803b3f8a12de3d85f81ebd7b514cd1"/>SDL_JOYAXISMOTION</entry><entry>
<para>Joystick axis motion </para>
</entry></row><row><entry><indexterm><primary>SDL_JOYBALLMOTION</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_JOYBALLMOTION</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa78f859489cfd565c305c7f6f9d5b25c1"/>SDL_JOYBALLMOTION</entry><entry>
<para>Joystick trackball motion </para>
</entry></row><row><entry><indexterm><primary>SDL_JOYHATMOTION</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_JOYHATMOTION</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaafba4080bfbad335e520097b2024f0dff"/>SDL_JOYHATMOTION</entry><entry>
<para>Joystick hat position change </para>
</entry></row><row><entry><indexterm><primary>SDL_JOYBUTTONDOWN</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_JOYBUTTONDOWN</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa386ac978bc145a45883fe0adab70710b"/>SDL_JOYBUTTONDOWN</entry><entry>
<para>Joystick button pressed </para>
</entry></row><row><entry><indexterm><primary>SDL_JOYBUTTONUP</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_JOYBUTTONUP</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa76f91c81110f012e3a47cbbc0449e3c3"/>SDL_JOYBUTTONUP</entry><entry>
<para>Joystick button released </para>
</entry></row><row><entry><indexterm><primary>SDL_JOYDEVICEADDED</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_JOYDEVICEADDED</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa0500c4e830a1822e6d0a90294c3f1393"/>SDL_JOYDEVICEADDED</entry><entry>
<para>A new joystick has been inserted into the system </para>
</entry></row><row><entry><indexterm><primary>SDL_JOYDEVICEREMOVED</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_JOYDEVICEREMOVED</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa4e2d7a1067dc56abeee393d46309ecd0"/>SDL_JOYDEVICEREMOVED</entry><entry>
<para>An opened joystick has been removed </para>
</entry></row><row><entry><indexterm><primary>SDL_CONTROLLERAXISMOTION</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_CONTROLLERAXISMOTION</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaaca6330126f4126f6a45454fa046c25f3"/>SDL_CONTROLLERAXISMOTION</entry><entry>
<para>Game controller axis motion </para>
</entry></row><row><entry><indexterm><primary>SDL_CONTROLLERBUTTONDOWN</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_CONTROLLERBUTTONDOWN</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaaafe044d5f92ac9608ded473218569474"/>SDL_CONTROLLERBUTTONDOWN</entry><entry>
<para>Game controller button pressed </para>
</entry></row><row><entry><indexterm><primary>SDL_CONTROLLERBUTTONUP</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_CONTROLLERBUTTONUP</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa8cb5a10b1ae0e185ef69a321d3d2d1be"/>SDL_CONTROLLERBUTTONUP</entry><entry>
<para>Game controller button released </para>
</entry></row><row><entry><indexterm><primary>SDL_CONTROLLERDEVICEADDED</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_CONTROLLERDEVICEADDED</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa9642de478348da1aba4fb5791e8c5314"/>SDL_CONTROLLERDEVICEADDED</entry><entry>
<para>A new Game controller has been inserted into the system </para>
</entry></row><row><entry><indexterm><primary>SDL_CONTROLLERDEVICEREMOVED</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_CONTROLLERDEVICEREMOVED</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaae00ac6995dfb7b92bfae68b9f47ae07a"/>SDL_CONTROLLERDEVICEREMOVED</entry><entry>
<para>An opened Game controller has been removed </para>
</entry></row><row><entry><indexterm><primary>SDL_CONTROLLERDEVICEREMAPPED</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_CONTROLLERDEVICEREMAPPED</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaaeca87c7b5bb21915d444298449a78ee6"/>SDL_CONTROLLERDEVICEREMAPPED</entry><entry>
<para>The controller mapping was updated </para>
</entry></row><row><entry><indexterm><primary>SDL_CONTROLLERTOUCHPADDOWN</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_CONTROLLERTOUCHPADDOWN</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa156ec1564f07159355de8137bdab406d"/>SDL_CONTROLLERTOUCHPADDOWN</entry><entry>
<para>Game controller touchpad was touched </para>
</entry></row><row><entry><indexterm><primary>SDL_CONTROLLERTOUCHPADMOTION</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_CONTROLLERTOUCHPADMOTION</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa6652ad594ff8306ded63b2e16a0d507f"/>SDL_CONTROLLERTOUCHPADMOTION</entry><entry>
<para>Game controller touchpad finger was moved </para>
</entry></row><row><entry><indexterm><primary>SDL_CONTROLLERTOUCHPADUP</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_CONTROLLERTOUCHPADUP</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaae94c3ab09ae94c2b83c386eae4e56810"/>SDL_CONTROLLERTOUCHPADUP</entry><entry>
<para>Game controller touchpad finger was lifted </para>
</entry></row><row><entry><indexterm><primary>SDL_CONTROLLERSENSORUPDATE</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_CONTROLLERSENSORUPDATE</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaafa7a5589ea54330547713f4c80b4437e"/>SDL_CONTROLLERSENSORUPDATE</entry><entry>
<para>Game controller sensor was updated </para>
</entry></row><row><entry><indexterm><primary>SDL_FINGERDOWN</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_FINGERDOWN</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaaa712d1fa8bb69f6042e24a31e835a9ec"/>SDL_FINGERDOWN</entry><entry></entry></row><row><entry><indexterm><primary>SDL_FINGERUP</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_FINGERUP</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa8266a108a628cc698c5172e72c1fc1e6"/>SDL_FINGERUP</entry><entry></entry></row><row><entry><indexterm><primary>SDL_FINGERMOTION</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_FINGERMOTION</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa1862d7d009ade2c79b2f1fe4a30c9dd2"/>SDL_FINGERMOTION</entry><entry></entry></row><row><entry><indexterm><primary>SDL_DOLLARGESTURE</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_DOLLARGESTURE</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaaac5b40f77c7e1eba688d536d465989c6"/>SDL_DOLLARGESTURE</entry><entry></entry></row><row><entry><indexterm><primary>SDL_DOLLARRECORD</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_DOLLARRECORD</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa9ce9b2a0e8fd0e130d8ac8499704a277"/>SDL_DOLLARRECORD</entry><entry></entry></row><row><entry><indexterm><primary>SDL_MULTIGESTURE</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_MULTIGESTURE</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaaa225e29d8bf6e619dda824c81826c929"/>SDL_MULTIGESTURE</entry><entry></entry></row><row><entry><indexterm><primary>SDL_CLIPBOARDUPDATE</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_CLIPBOARDUPDATE</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa6ba1fed7d9fec95993eeb74abd96f64a"/>SDL_CLIPBOARDUPDATE</entry><entry>
<para>The clipboard changed </para>
</entry></row><row><entry><indexterm><primary>SDL_DROPFILE</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_DROPFILE</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaad9238862d7aeaebff88be6453ee0fbab"/>SDL_DROPFILE</entry><entry>
<para>The system requests a file open </para>
</entry></row><row><entry><indexterm><primary>SDL_DROPTEXT</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_DROPTEXT</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa1d97f901333e40b0ccc4dff1a319213f"/>SDL_DROPTEXT</entry><entry>
<para>text/plain drag-and-drop event </para>
</entry></row><row><entry><indexterm><primary>SDL_DROPBEGIN</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_DROPBEGIN</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa0809886c132aaf734fff6f2abf466912"/>SDL_DROPBEGIN</entry><entry>
<para>A new set of drops is beginning (NULL filename) </para>
</entry></row><row><entry><indexterm><primary>SDL_DROPCOMPLETE</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_DROPCOMPLETE</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaaa83e80a89d5c4ff14889d07dddc402ef"/>SDL_DROPCOMPLETE</entry><entry>
<para>Current set of drops is now complete (NULL filename) </para>
</entry></row><row><entry><indexterm><primary>SDL_AUDIODEVICEADDED</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_AUDIODEVICEADDED</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaadb3154654baf003910e75d74b507a82b"/>SDL_AUDIODEVICEADDED</entry><entry>
<para>A new audio device is available </para>
</entry></row><row><entry><indexterm><primary>SDL_AUDIODEVICEREMOVED</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_AUDIODEVICEREMOVED</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaad56f8934fe24ee4c0cd9329e3c57c0c2"/>SDL_AUDIODEVICEREMOVED</entry><entry>
<para>An audio device has been removed. </para>
</entry></row><row><entry><indexterm><primary>SDL_SENSORUPDATE</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_SENSORUPDATE</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa1536ed6dfb1cdb20da84b7e2c602c022"/>SDL_SENSORUPDATE</entry><entry>
<para>A sensor was updated </para>
</entry></row><row><entry><indexterm><primary>SDL_RENDER_TARGETS_RESET</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_RENDER_TARGETS_RESET</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaae8971f362076f4844d953ea57702108a"/>SDL_RENDER_TARGETS_RESET</entry><entry>
<para>The render targets have been reset and their contents need to be updated </para>
</entry></row><row><entry><indexterm><primary>SDL_RENDER_DEVICE_RESET</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_RENDER_DEVICE_RESET</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa88e4a52a73047416133b179ba0fd7db0"/>SDL_RENDER_DEVICE_RESET</entry><entry>
<para>The device has been reset and all textures need to be recreated </para>
</entry></row><row><entry><indexterm><primary>SDL_POLLSENTINEL</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_POLLSENTINEL</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa3f831e6423f957738190a8c5e180124a"/>SDL_POLLSENTINEL</entry><entry>
<para>Signals the end of an event poll cycle </para>
</entry></row><row><entry><indexterm><primary>SDL_USEREVENT</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_USEREVENT</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa4364c23f54802309e83fdb9b1c07c719"/>SDL_USEREVENT</entry><entry>
<para>Events <link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaa4364c23f54802309e83fdb9b1c07c719">SDL_USEREVENT</link> through <link linkend="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaaffeac40a4ff366717c0ebc74118ea2ae">SDL_LASTEVENT</link> are for your use, and should be allocated with <link linkend="__s_d_l__events_8h_1af99e29fafb9e4773b70f68cec08681fc">SDL_RegisterEvents()</link> </para>
</entry></row><row><entry><indexterm><primary>SDL_LASTEVENT</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_LASTEVENT</secondary></indexterm>
<anchor xml:id="__s_d_l__events_8h_1a3b589e89be6b35c02e0dd34a55f3fccaaffeac40a4ff366717c0ebc74118ea2ae"/>SDL_LASTEVENT</entry><entry>
<para>This last event is only for bounding internal arrays </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="__s_d_l__events_8h_1ad81eba7df9eae4fd0acd046b7f983202"/><section>
    <title>SDL_AddEventWatch()</title>
<indexterm><primary>SDL_AddEventWatch</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_AddEventWatch</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_AddEventWatch (<link linkend="__s_d_l__events_8h_1a8f371e5b06361baa576bdb1289595d95">SDL_EventFilter</link> filter, <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> * userdata)</computeroutput></para>
<para>Add a callback to be triggered when an event is added to the event queue.</para>

<para><computeroutput>filter</computeroutput> will be called when an event happens, and its return value is ignored.</para>

<para><emphasis role="bold">WARNING</emphasis>: Be very careful of what you do in the event filter function, as it may run in a different thread!</para>

<para>If the quit event is generated by a signal (e.g. SIGINT), it will bypass the internal queue and be delivered to the watch callback immediately, and arrive at the next event poll.</para>

<para>Note: the callback is called for events posted by the user through <link linkend="__s_d_l__events_8h_1adced45c8816620846a6fde2a7d54b446">SDL_PushEvent()</link>, but not for disabled events, nor for events by a filter callback set with <link linkend="__s_d_l__events_8h_1ac02d22efa3a02407ec1f3b4f303b0bfb">SDL_SetEventFilter()</link>, nor for events posted by the user through <link linkend="__s_d_l__events_8h_1a83618a672f963892ddd0eef74a402e75">SDL_PeepEvents()</link>.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>filter</entry><entry>
<para>an SDL_EventFilter function to call when an event happens. </para>
</entry>
                            </row>
                            <row>
<entry>userdata</entry><entry>
<para>a pointer that is passed to <computeroutput>filter</computeroutput></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__events_8h_1a05a54ccb07f32fe31b73e93ac238e20a">SDL_DelEventWatch</link> </para>

<para><link linkend="__s_d_l__events_8h_1ac02d22efa3a02407ec1f3b4f303b0bfb">SDL_SetEventFilter</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__events_8h_1a358109832ab4b458758f71e0a474b67c"/><section>
    <title>SDL_COMPILE_TIME_ASSERT()</title>
<indexterm><primary>SDL_COMPILE_TIME_ASSERT</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_COMPILE_TIME_ASSERT</secondary></indexterm>
<para><computeroutput>SDL_COMPILE_TIME_ASSERT (<link linkend="_union_s_d_l___event">SDL_Event</link> , sizeof(<link linkend="_union_s_d_l___event">SDL_Event</link>)  = <computeroutput>=sizeof(((<link linkend="_union_s_d_l___event">SDL_Event</link> *) <link linkend="_begin__code_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>) -&gt;padding)</computeroutput>
)</computeroutput></para></section>
<anchor xml:id="__s_d_l__events_8h_1a05a54ccb07f32fe31b73e93ac238e20a"/><section>
    <title>SDL_DelEventWatch()</title>
<indexterm><primary>SDL_DelEventWatch</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_DelEventWatch</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_DelEventWatch (<link linkend="__s_d_l__events_8h_1a8f371e5b06361baa576bdb1289595d95">SDL_EventFilter</link> filter, <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> * userdata)</computeroutput></para>
<para>Remove an event watch callback added with <link linkend="__s_d_l__events_8h_1ad81eba7df9eae4fd0acd046b7f983202">SDL_AddEventWatch()</link>.</para>

<para>This function takes the same input as <link linkend="__s_d_l__events_8h_1ad81eba7df9eae4fd0acd046b7f983202">SDL_AddEventWatch()</link> to identify and delete the corresponding callback.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>filter</entry><entry>
<para>the function originally passed to <link linkend="__s_d_l__events_8h_1ad81eba7df9eae4fd0acd046b7f983202">SDL_AddEventWatch()</link> </para>
</entry>
                            </row>
                            <row>
<entry>userdata</entry><entry>
<para>the pointer originally passed to <link linkend="__s_d_l__events_8h_1ad81eba7df9eae4fd0acd046b7f983202">SDL_AddEventWatch()</link></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__events_8h_1ad81eba7df9eae4fd0acd046b7f983202">SDL_AddEventWatch</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__events_8h_1afb772893e1c46f186fa39a4defe76df3"/><section>
    <title>SDL_EventState()</title>
<indexterm><primary>SDL_EventState</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_EventState</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_EventState (<link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> type, int state)</computeroutput></para>
<para>Set the state of processing events by type.</para>

<para><computeroutput>state</computeroutput> may be any of the following:</para>

<para><itemizedlist>
<listitem>
<para><computeroutput>SDL_QUERY</computeroutput>: returns the current processing state of the specified event</para>
</listitem><listitem>
<para><computeroutput>SDL_IGNORE</computeroutput> (aka <computeroutput>SDL_DISABLE</computeroutput>): the event will automatically be dropped from the event queue and will not be filtered</para>
</listitem><listitem>
<para><computeroutput>SDL_ENABLE</computeroutput>: the event will be processed normally</para>
</listitem></itemizedlist>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>type</entry><entry>
<para>the type of event; see SDL_EventType for details </para>
</entry>
                            </row>
                            <row>
<entry>state</entry><entry>
<para>how to process the event </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><computeroutput>SDL_DISABLE</computeroutput> or <computeroutput>SDL_ENABLE</computeroutput>, representing the processing state of the event before this function makes any changes to it.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__events_8h_1a733b4d1d521281545a5a34d799f8a2a1">SDL_GetEventState</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__events_8h_1a37e4458a58164455f53ed35d633c4bb5"/><section>
    <title>SDL_FilterEvents()</title>
<indexterm><primary>SDL_FilterEvents</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_FilterEvents</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_FilterEvents (<link linkend="__s_d_l__events_8h_1a8f371e5b06361baa576bdb1289595d95">SDL_EventFilter</link> filter, <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> * userdata)</computeroutput></para>
<para>Run a specific filter function on the current event queue, removing any events for which the filter returns 0.</para>

<para>See <link linkend="__s_d_l__events_8h_1ac02d22efa3a02407ec1f3b4f303b0bfb">SDL_SetEventFilter()</link> for more information. Unlike <link linkend="__s_d_l__events_8h_1ac02d22efa3a02407ec1f3b4f303b0bfb">SDL_SetEventFilter()</link>, this function does not change the filter permanently, it only uses the supplied filter until this function returns.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>filter</entry><entry>
<para>the SDL_EventFilter function to call when an event happens </para>
</entry>
                            </row>
                            <row>
<entry>userdata</entry><entry>
<para>a pointer that is passed to <computeroutput>filter</computeroutput></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__events_8h_1a9cc48009a4dc4464594213ca45b26c27">SDL_GetEventFilter</link> </para>

<para><link linkend="__s_d_l__events_8h_1ac02d22efa3a02407ec1f3b4f303b0bfb">SDL_SetEventFilter</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__events_8h_1a4225727df385885e999784f416410cc9"/><section>
    <title>SDL_FlushEvent()</title>
<indexterm><primary>SDL_FlushEvent</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_FlushEvent</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_FlushEvent (<link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> type)</computeroutput></para>
<para>Clear events of a specific type from the event queue.</para>

<para>This will unconditionally remove any events from the queue that match <computeroutput>type</computeroutput>. If you need to remove a range of event types, use <link linkend="__s_d_l__events_8h_1aa0e3ec5d83d38af1dfea722d4b741f3e">SDL_FlushEvents()</link> instead.</para>

<para>It&apos;s also normal to just ignore events you don&apos;t care about in your event loop without calling this function.</para>

<para>This function only affects currently queued events. If you want to make sure that all pending OS events are flushed, you can call <link linkend="__s_d_l__events_8h_1aa15403d1c8fc341cd9cf750e27a66d19">SDL_PumpEvents()</link> on the main thread immediately before the flush call.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>type</entry><entry>
<para>the type of event to be cleared; see SDL_EventType for details</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__events_8h_1aa0e3ec5d83d38af1dfea722d4b741f3e">SDL_FlushEvents</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__events_8h_1aa0e3ec5d83d38af1dfea722d4b741f3e"/><section>
    <title>SDL_FlushEvents()</title>
<indexterm><primary>SDL_FlushEvents</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_FlushEvents</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_FlushEvents (<link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> minType, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> maxType)</computeroutput></para>
<para>Clear events of a range of types from the event queue.</para>

<para>This will unconditionally remove any events from the queue that are in the range of <computeroutput>minType</computeroutput> to <computeroutput>maxType</computeroutput>, inclusive. If you need to remove a single event type, use <link linkend="__s_d_l__events_8h_1a4225727df385885e999784f416410cc9">SDL_FlushEvent()</link> instead.</para>

<para>It&apos;s also normal to just ignore events you don&apos;t care about in your event loop without calling this function.</para>

<para>This function only affects currently queued events. If you want to make sure that all pending OS events are flushed, you can call <link linkend="__s_d_l__events_8h_1aa15403d1c8fc341cd9cf750e27a66d19">SDL_PumpEvents()</link> on the main thread immediately before the flush call.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>minType</entry><entry>
<para>the low end of event type to be cleared, inclusive; see SDL_EventType for details </para>
</entry>
                            </row>
                            <row>
<entry>maxType</entry><entry>
<para>the high end of event type to be cleared, inclusive; see SDL_EventType for details</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__events_8h_1a4225727df385885e999784f416410cc9">SDL_FlushEvent</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__events_8h_1a9cc48009a4dc4464594213ca45b26c27"/><section>
    <title>SDL_GetEventFilter()</title>
<indexterm><primary>SDL_GetEventFilter</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_GetEventFilter</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetEventFilter (<link linkend="__s_d_l__events_8h_1a8f371e5b06361baa576bdb1289595d95">SDL_EventFilter</link> * filter, <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> ** userdata)</computeroutput></para>
<para>Query the current event filter.</para>

<para>This function can be used to &quot;chain&quot; filters, by saving the existing filter before replacing it with a function that will call that saved filter.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>filter</entry><entry>
<para>the current callback function will be stored here </para>
</entry>
                            </row>
                            <row>
<entry>userdata</entry><entry>
<para>the pointer that is passed to the current event filter will be stored here </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>SDL_TRUE on success or SDL_FALSE if there is no event filter set.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__events_8h_1ac02d22efa3a02407ec1f3b4f303b0bfb">SDL_SetEventFilter</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__events_8h_1ac424563975b92f98c6175543e8f41012"/><section>
    <title>SDL_HasEvent()</title>
<indexterm><primary>SDL_HasEvent</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_HasEvent</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_HasEvent (<link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> type)</computeroutput></para>
<para>Check for the existence of a certain event type in the event queue.</para>

<para>If you need to check for a range of event types, use <link linkend="__s_d_l__events_8h_1a74336e7d6e86f06171814eccbc1e2157">SDL_HasEvents()</link> instead.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>type</entry><entry>
<para>the type of event to be queried; see SDL_EventType for details </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>SDL_TRUE if events matching <computeroutput>type</computeroutput> are present, or SDL_FALSE if events matching <computeroutput>type</computeroutput> are not present.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__events_8h_1a74336e7d6e86f06171814eccbc1e2157">SDL_HasEvents</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__events_8h_1a74336e7d6e86f06171814eccbc1e2157"/><section>
    <title>SDL_HasEvents()</title>
<indexterm><primary>SDL_HasEvents</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_HasEvents</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_HasEvents (<link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> minType, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> maxType)</computeroutput></para>
<para>Check for the existence of certain event types in the event queue.</para>

<para>If you need to check for a single event type, use <link linkend="__s_d_l__events_8h_1ac424563975b92f98c6175543e8f41012">SDL_HasEvent()</link> instead.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>minType</entry><entry>
<para>the low end of event type to be queried, inclusive; see SDL_EventType for details </para>
</entry>
                            </row>
                            <row>
<entry>maxType</entry><entry>
<para>the high end of event type to be queried, inclusive; see SDL_EventType for details </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>SDL_TRUE if events with type &gt;= <computeroutput>minType</computeroutput> and &lt;= <computeroutput>maxType</computeroutput> are present, or SDL_FALSE if not.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__events_8h_1a74336e7d6e86f06171814eccbc1e2157">SDL_HasEvents</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__events_8h_1a83618a672f963892ddd0eef74a402e75"/><section>
    <title>SDL_PeepEvents()</title>
<indexterm><primary>SDL_PeepEvents</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_PeepEvents</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_PeepEvents (<link linkend="_union_s_d_l___event">SDL_Event</link> * events, int numevents, <link linkend="__s_d_l__events_8h_1a8fdf1485b0419bb77b89e745267dc179">SDL_eventaction</link> action, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> minType, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> maxType)</computeroutput></para>
<para>Check the event queue for messages and optionally return them.</para>

<para><computeroutput>action</computeroutput> may be any of the following:</para>

<para><itemizedlist>
<listitem>
<para><computeroutput>SDL_ADDEVENT</computeroutput>: up to <computeroutput>numevents</computeroutput> events will be added to the back of the event queue.</para>
</listitem><listitem>
<para><computeroutput>SDL_PEEKEVENT</computeroutput>: <computeroutput>numevents</computeroutput> events at the front of the event queue, within the specified minimum and maximum type, will be returned to the caller and will <emphasis>not</emphasis> be removed from the queue.</para>
</listitem><listitem>
<para><computeroutput>SDL_GETEVENT</computeroutput>: up to <computeroutput>numevents</computeroutput> events at the front of the event queue, within the specified minimum and maximum type, will be returned to the caller and will be removed from the queue.</para>
</listitem></itemizedlist>
</para>

<para>You may have to call <link linkend="__s_d_l__events_8h_1aa15403d1c8fc341cd9cf750e27a66d19">SDL_PumpEvents()</link> before calling this function. Otherwise, the events may not be ready to be filtered when you call <link linkend="__s_d_l__events_8h_1a83618a672f963892ddd0eef74a402e75">SDL_PeepEvents()</link>.</para>

<para>This function is thread-safe.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>events</entry><entry>
<para>destination buffer for the retrieved events </para>
</entry>
                            </row>
                            <row>
<entry>numevents</entry><entry>
<para>if action is SDL_ADDEVENT, the number of events to add back to the event queue; if action is SDL_PEEKEVENT or SDL_GETEVENT, the maximum number of events to retrieve </para>
</entry>
                            </row>
                            <row>
<entry>action</entry><entry>
<para>action to take; see [[#action|Remarks]] for details </para>
</entry>
                            </row>
                            <row>
<entry>minType</entry><entry>
<para>minimum value of the event type to be considered; SDL_FIRSTEVENT is a safe choice </para>
</entry>
                            </row>
                            <row>
<entry>maxType</entry><entry>
<para>maximum value of the event type to be considered; SDL_LASTEVENT is a safe choice </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>the number of events actually stored or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__events_8h_1acfa517963c25f8b71acc6b56721c5d9b">SDL_PollEvent</link> </para>

<para><link linkend="__s_d_l__events_8h_1aa15403d1c8fc341cd9cf750e27a66d19">SDL_PumpEvents</link> </para>

<para><link linkend="__s_d_l__events_8h_1adced45c8816620846a6fde2a7d54b446">SDL_PushEvent</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__events_8h_1acfa517963c25f8b71acc6b56721c5d9b"/><section>
    <title>SDL_PollEvent()</title>
<indexterm><primary>SDL_PollEvent</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_PollEvent</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_PollEvent (<link linkend="_union_s_d_l___event">SDL_Event</link> * event)</computeroutput></para>
<para>Poll for currently pending events.</para>

<para>If <computeroutput>event</computeroutput> is not NULL, the next event is removed from the queue and stored in the <link linkend="_union_s_d_l___event">SDL_Event</link> structure pointed to by <computeroutput>event</computeroutput>. The 1 returned refers to this event, immediately stored in the SDL Event structure &#8211; not an event to follow.</para>

<para>If <computeroutput>event</computeroutput> is NULL, it simply returns 1 if there is an event in the queue, but will not remove it from the queue.</para>

<para>As this function may implicitly call <link linkend="__s_d_l__events_8h_1aa15403d1c8fc341cd9cf750e27a66d19">SDL_PumpEvents()</link>, you can only call this function in the thread that set the video mode.</para>

<para><link linkend="__s_d_l__events_8h_1acfa517963c25f8b71acc6b56721c5d9b">SDL_PollEvent()</link> is the favored way of receiving system events since it can be done from the main loop and does not suspend the main loop while waiting on an event to be posted.</para>

<para>The common practice is to fully process the event queue once every frame, usually as a first step before updating the game&apos;s state:</para>

<para><literallayout><computeroutput><emphasis role="keywordflow">while</emphasis>&#32;(game_is_still_running)&#32;{
&#32;&#32;&#32;&#32;<link linkend="_union_s_d_l___event">SDL_Event</link>&#32;<link linkend="__s_d_l__opengl__glext_8h_1a03b04a5a978bad576866339075de01f6">event</link>;
&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<link linkend="__s_d_l__events_8h_1acfa517963c25f8b71acc6b56721c5d9b">SDL_PollEvent</link>(&amp;<link linkend="__s_d_l__opengl__glext_8h_1a03b04a5a978bad576866339075de01f6">event</link>))&#32;{&#32;&#32;<emphasis role="comment">//&#32;poll&#32;until&#32;all&#32;events&#32;are&#32;handled!</emphasis>
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;decide&#32;what&#32;to&#32;do&#32;with&#32;this&#32;event.</emphasis>
&#32;&#32;&#32;&#32;}

&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;update&#32;game&#32;state,&#32;draw&#32;the&#32;current&#32;frame</emphasis>
}
</computeroutput></literallayout></para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>event</entry><entry>
<para>the <link linkend="_union_s_d_l___event">SDL_Event</link> structure to be filled with the next event from the queue, or NULL </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>1 if there is a pending event or 0 if there are none available.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__events_8h_1a9cc48009a4dc4464594213ca45b26c27">SDL_GetEventFilter</link> </para>

<para><link linkend="__s_d_l__events_8h_1a83618a672f963892ddd0eef74a402e75">SDL_PeepEvents</link> </para>

<para><link linkend="__s_d_l__events_8h_1adced45c8816620846a6fde2a7d54b446">SDL_PushEvent</link> </para>

<para><link linkend="__s_d_l__events_8h_1ac02d22efa3a02407ec1f3b4f303b0bfb">SDL_SetEventFilter</link> </para>

<para><link linkend="__s_d_l__events_8h_1af37c266ea979ba39b82079d9eb401003">SDL_WaitEvent</link> </para>

<para><link linkend="__s_d_l__events_8h_1a54285ab4f6e2d6d1a01df6a1dd78294a">SDL_WaitEventTimeout</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__events_8h_1aa15403d1c8fc341cd9cf750e27a66d19"/><section>
    <title>SDL_PumpEvents()</title>
<indexterm><primary>SDL_PumpEvents</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_PumpEvents</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_PumpEvents (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> )</computeroutput></para>
<para>Pump the event loop, gathering events from the input devices.</para>

<para>This function updates the event queue and internal input device state.</para>

<para><emphasis role="bold">WARNING</emphasis>: This should only be run in the thread that initialized the video subsystem, and for extra safety, you should consider only doing those things on the main thread in any case.</para>

<para><link linkend="__s_d_l__events_8h_1aa15403d1c8fc341cd9cf750e27a66d19">SDL_PumpEvents()</link> gathers all the pending input information from devices and places it in the event queue. Without calls to <link linkend="__s_d_l__events_8h_1aa15403d1c8fc341cd9cf750e27a66d19">SDL_PumpEvents()</link> no events would ever be placed on the queue. Often the need for calls to <link linkend="__s_d_l__events_8h_1aa15403d1c8fc341cd9cf750e27a66d19">SDL_PumpEvents()</link> is hidden from the user since <link linkend="__s_d_l__events_8h_1acfa517963c25f8b71acc6b56721c5d9b">SDL_PollEvent()</link> and <link linkend="__s_d_l__events_8h_1af37c266ea979ba39b82079d9eb401003">SDL_WaitEvent()</link> implicitly call <link linkend="__s_d_l__events_8h_1aa15403d1c8fc341cd9cf750e27a66d19">SDL_PumpEvents()</link>. However, if you are not polling or waiting for events (e.g. you are filtering them), then you must call <link linkend="__s_d_l__events_8h_1aa15403d1c8fc341cd9cf750e27a66d19">SDL_PumpEvents()</link> to force an event queue update.</para>

<para><formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__events_8h_1acfa517963c25f8b71acc6b56721c5d9b">SDL_PollEvent</link> </para>

<para><link linkend="__s_d_l__events_8h_1af37c266ea979ba39b82079d9eb401003">SDL_WaitEvent</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__events_8h_1adced45c8816620846a6fde2a7d54b446"/><section>
    <title>SDL_PushEvent()</title>
<indexterm><primary>SDL_PushEvent</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_PushEvent</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_PushEvent (<link linkend="_union_s_d_l___event">SDL_Event</link> * event)</computeroutput></para>
<para>Add an event to the event queue.</para>

<para>The event queue can actually be used as a two way communication channel. Not only can events be read from the queue, but the user can also push their own events onto it. <computeroutput>event</computeroutput> is a pointer to the event structure you wish to push onto the queue. The event is copied into the queue, and the caller may dispose of the memory pointed to after <link linkend="__s_d_l__events_8h_1adced45c8816620846a6fde2a7d54b446">SDL_PushEvent()</link> returns.</para>

<para>Note: Pushing device input events onto the queue doesn&apos;t modify the state of the device within SDL.</para>

<para>This function is thread-safe, and can be called from other threads safely.</para>

<para>Note: Events pushed onto the queue with <link linkend="__s_d_l__events_8h_1adced45c8816620846a6fde2a7d54b446">SDL_PushEvent()</link> get passed through the event filter but events added with <link linkend="__s_d_l__events_8h_1a83618a672f963892ddd0eef74a402e75">SDL_PeepEvents()</link> do not.</para>

<para>For pushing application-specific events, please use <link linkend="__s_d_l__events_8h_1af99e29fafb9e4773b70f68cec08681fc">SDL_RegisterEvents()</link> to get an event type that does not conflict with other code that also wants its own custom event types.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>event</entry><entry>
<para>the <link linkend="_union_s_d_l___event">SDL_Event</link> to be added to the queue </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>1 on success, 0 if the event was filtered, or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information. A common reason for error is the event queue being full.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__events_8h_1a83618a672f963892ddd0eef74a402e75">SDL_PeepEvents</link> </para>

<para><link linkend="__s_d_l__events_8h_1acfa517963c25f8b71acc6b56721c5d9b">SDL_PollEvent</link> </para>

<para><link linkend="__s_d_l__events_8h_1af99e29fafb9e4773b70f68cec08681fc">SDL_RegisterEvents</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__events_8h_1af99e29fafb9e4773b70f68cec08681fc"/><section>
    <title>SDL_RegisterEvents()</title>
<indexterm><primary>SDL_RegisterEvents</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_RegisterEvents</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_RegisterEvents (int numevents)</computeroutput></para>
<para>Allocate a set of user-defined events, and return the beginning event number for that set of events.</para>

<para>Calling this function with <computeroutput>numevents</computeroutput> &lt;= 0 is an error and will return (Uint32)-1.</para>

<para>Note, (Uint32)-1 means the maximum unsigned 32-bit integer value (or 0xFFFFFFFF), but is clearer to write.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>numevents</entry><entry>
<para>the number of events to be allocated </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>the beginning event number, or (Uint32)-1 if there are not enough user-defined events left.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__events_8h_1adced45c8816620846a6fde2a7d54b446">SDL_PushEvent</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__events_8h_1ac02d22efa3a02407ec1f3b4f303b0bfb"/><section>
    <title>SDL_SetEventFilter()</title>
<indexterm><primary>SDL_SetEventFilter</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_SetEventFilter</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_SetEventFilter (<link linkend="__s_d_l__events_8h_1a8f371e5b06361baa576bdb1289595d95">SDL_EventFilter</link> filter, <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> * userdata)</computeroutput></para>
<para>Set up a filter to process all events before they change internal state and are posted to the internal event queue.</para>

<para>If the filter function returns 1 when called, then the event will be added to the internal queue. If it returns 0, then the event will be dropped from the queue, but the internal state will still be updated. This allows selective filtering of dynamically arriving events.</para>

<para><emphasis role="bold">WARNING</emphasis>: Be very careful of what you do in the event filter function, as it may run in a different thread!</para>

<para>On platforms that support it, if the quit event is generated by an interrupt signal (e.g. pressing Ctrl-C), it will be delivered to the application at the next event poll.</para>

<para>There is one caveat when dealing with the <link linkend="_struct_s_d_l___quit_event">SDL_QuitEvent</link> event type. The event filter is only called when the window manager desires to close the application window. If the event filter returns 1, then the window will be closed, otherwise the window will remain open if possible.</para>

<para>Note: Disabled events never make it to the event filter function; see <link linkend="__s_d_l__events_8h_1afb772893e1c46f186fa39a4defe76df3">SDL_EventState()</link>.</para>

<para>Note: If you just want to inspect events without filtering, you should use <link linkend="__s_d_l__events_8h_1ad81eba7df9eae4fd0acd046b7f983202">SDL_AddEventWatch()</link> instead.</para>

<para>Note: Events pushed onto the queue with <link linkend="__s_d_l__events_8h_1adced45c8816620846a6fde2a7d54b446">SDL_PushEvent()</link> get passed through the event filter, but events pushed onto the queue with <link linkend="__s_d_l__events_8h_1a83618a672f963892ddd0eef74a402e75">SDL_PeepEvents()</link> do not.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>filter</entry><entry>
<para>An SDL_EventFilter function to call when an event happens </para>
</entry>
                            </row>
                            <row>
<entry>userdata</entry><entry>
<para>a pointer that is passed to <computeroutput>filter</computeroutput></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__events_8h_1ad81eba7df9eae4fd0acd046b7f983202">SDL_AddEventWatch</link> </para>

<para><link linkend="__s_d_l__events_8h_1afb772893e1c46f186fa39a4defe76df3">SDL_EventState</link> </para>

<para><link linkend="__s_d_l__events_8h_1a9cc48009a4dc4464594213ca45b26c27">SDL_GetEventFilter</link> </para>

<para><link linkend="__s_d_l__events_8h_1a83618a672f963892ddd0eef74a402e75">SDL_PeepEvents</link> </para>

<para><link linkend="__s_d_l__events_8h_1adced45c8816620846a6fde2a7d54b446">SDL_PushEvent</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__events_8h_1af37c266ea979ba39b82079d9eb401003"/><section>
    <title>SDL_WaitEvent()</title>
<indexterm><primary>SDL_WaitEvent</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_WaitEvent</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_WaitEvent (<link linkend="_union_s_d_l___event">SDL_Event</link> * event)</computeroutput></para>
<para>Wait indefinitely for the next available event.</para>

<para>If <computeroutput>event</computeroutput> is not NULL, the next event is removed from the queue and stored in the <link linkend="_union_s_d_l___event">SDL_Event</link> structure pointed to by <computeroutput>event</computeroutput>.</para>

<para>As this function may implicitly call <link linkend="__s_d_l__events_8h_1aa15403d1c8fc341cd9cf750e27a66d19">SDL_PumpEvents()</link>, you can only call this function in the thread that initialized the video subsystem.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>event</entry><entry>
<para>the <link linkend="_union_s_d_l___event">SDL_Event</link> structure to be filled in with the next event from the queue, or NULL </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>1 on success or 0 if there was an error while waiting for events; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__events_8h_1acfa517963c25f8b71acc6b56721c5d9b">SDL_PollEvent</link> </para>

<para><link linkend="__s_d_l__events_8h_1aa15403d1c8fc341cd9cf750e27a66d19">SDL_PumpEvents</link> </para>

<para><link linkend="__s_d_l__events_8h_1a54285ab4f6e2d6d1a01df6a1dd78294a">SDL_WaitEventTimeout</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__events_8h_1a54285ab4f6e2d6d1a01df6a1dd78294a"/><section>
    <title>SDL_WaitEventTimeout()</title>
<indexterm><primary>SDL_WaitEventTimeout</primary><secondary>SDL_events.h</secondary></indexterm>
<indexterm><primary>SDL_events.h</primary><secondary>SDL_WaitEventTimeout</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_WaitEventTimeout (<link linkend="_union_s_d_l___event">SDL_Event</link> * event, int timeout)</computeroutput></para>
<para>Wait until the specified timeout (in milliseconds) for the next available event.</para>

<para>If <computeroutput>event</computeroutput> is not NULL, the next event is removed from the queue and stored in the <link linkend="_union_s_d_l___event">SDL_Event</link> structure pointed to by <computeroutput>event</computeroutput>.</para>

<para>As this function may implicitly call <link linkend="__s_d_l__events_8h_1aa15403d1c8fc341cd9cf750e27a66d19">SDL_PumpEvents()</link>, you can only call this function in the thread that initialized the video subsystem.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>event</entry><entry>
<para>the <link linkend="_union_s_d_l___event">SDL_Event</link> structure to be filled in with the next event from the queue, or NULL </para>
</entry>
                            </row>
                            <row>
<entry>timeout</entry><entry>
<para>the maximum number of milliseconds to wait for the next available event </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>1 on success or 0 if there was an error while waiting for events; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information. This also returns 0 if the timeout elapsed without an event arriving.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__events_8h_1acfa517963c25f8b71acc6b56721c5d9b">SDL_PollEvent</link> </para>

<para><link linkend="__s_d_l__events_8h_1aa15403d1c8fc341cd9cf750e27a66d19">SDL_PumpEvents</link> </para>

<para><link linkend="__s_d_l__events_8h_1af37c266ea979ba39b82079d9eb401003">SDL_WaitEvent</link> </para>
</formalpara>
</para>
</section>
</section>
</section>
