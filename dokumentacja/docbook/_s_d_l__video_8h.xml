<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__s_d_l__video_8h" xml:lang="en-US">
<title>D:/RayTracing/include/SDL_video.h File Reference</title>
<indexterm><primary>D:/RayTracing/include/SDL_video.h</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &quot;SDL_stdinc.h&quot;
#include &quot;SDL_pixels.h&quot;
#include &quot;SDL_rect.h&quot;
#include &quot;SDL_surface.h&quot;
#include &quot;begin_code.h&quot;
#include &quot;close_code.h&quot;
</programlisting><simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_struct_s_d_l___display_mode">SDL_DisplayMode</link></para>

<para>The structure that defines a display mode. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#define <link linkend="__s_d_l__video_8h_1a0eee89b50bf349f05cb28d6ca7c2dec8">SDL_WINDOWPOS_UNDEFINED_MASK</link>   0x1FFF0000u</para>

<para>Used to indicate that you don&apos;t care what the window position is. </para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__video_8h_1a29aa3ade62cfe16de4c8b1e9c4272ab0">SDL_WINDOWPOS_UNDEFINED_DISPLAY</link>(X)   (<link linkend="__s_d_l__video_8h_1a0eee89b50bf349f05cb28d6ca7c2dec8">SDL_WINDOWPOS_UNDEFINED_MASK</link>|(X))</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__video_8h_1a20917558a7e5fb159647980218726a52">SDL_WINDOWPOS_UNDEFINED</link>   <link linkend="__s_d_l__video_8h_1a29aa3ade62cfe16de4c8b1e9c4272ab0">SDL_WINDOWPOS_UNDEFINED_DISPLAY</link>(0)</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__video_8h_1a8ded7367fc7c4375cc195ff4a2a2132c">SDL_WINDOWPOS_ISUNDEFINED</link>(X)               (((X)&amp;0xFFFF0000) == <link linkend="__s_d_l__video_8h_1a0eee89b50bf349f05cb28d6ca7c2dec8">SDL_WINDOWPOS_UNDEFINED_MASK</link>)</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__video_8h_1a5088b87c9d01cc26915ff082aaf014fa">SDL_WINDOWPOS_CENTERED_MASK</link>   0x2FFF0000u</para>

<para>Used to indicate that the window position should be centered. </para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__video_8h_1a3399af2e94d0de95e69e6bcc57969d58">SDL_WINDOWPOS_CENTERED_DISPLAY</link>(X)   (<link linkend="__s_d_l__video_8h_1a5088b87c9d01cc26915ff082aaf014fa">SDL_WINDOWPOS_CENTERED_MASK</link>|(X))</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__video_8h_1a8d2f428ddef3b4ccf08915814e35d9c7">SDL_WINDOWPOS_CENTERED</link>   <link linkend="__s_d_l__video_8h_1a3399af2e94d0de95e69e6bcc57969d58">SDL_WINDOWPOS_CENTERED_DISPLAY</link>(0)</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__video_8h_1a07ffe394c82e7c5d93443e76e5356cbb">SDL_WINDOWPOS_ISCENTERED</link>(X)               (((X)&amp;0xFFFF0000) == <link linkend="__s_d_l__video_8h_1a5088b87c9d01cc26915ff082aaf014fa">SDL_WINDOWPOS_CENTERED_MASK</link>)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Typedefs    </title>
        <itemizedlist>
            <listitem><para>typedef struct <link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> <link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link></para>

<para>The type used to identify a window. </para>
</listitem>
            <listitem><para>typedef <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> * <link linkend="__s_d_l__video_8h_1a0d64dcf67c9685d09cbe051448e1b3f3">SDL_GLContext</link></para>

<para>An opaque handle to an OpenGL context. </para>
</listitem>
            <listitem><para>typedef <link linkend="__s_d_l__video_8h_1a0415a108581752b68c6aca800ff3bad5">SDL_HitTestResult</link>(<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> * <link linkend="__s_d_l__video_8h_1a247c7fd43bb60b20630945a5bd9e4957">SDL_HitTest</link>) (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *win, const <link linkend="_struct_s_d_l___point">SDL_Point</link> *area, <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> *<link linkend="__s_d_l__opengl_8h_1a2e335d56e2846b0fea47eed068b2d34a">data</link>)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Enumerations    </title>
        <itemizedlist>
            <listitem><para>enum <link linkend="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18">SDL_WindowFlags</link> { 
<link linkend="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18ac7b8279bdf5e22a0b4a95aae3d846923">SDL_WINDOW_FULLSCREEN</link> = 0x00000001
, <link linkend="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18a5cf8af096f1870b0c2b12267cabd1f7a">SDL_WINDOW_OPENGL</link> = 0x00000002
, <link linkend="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18a4300d051290adcb71c1b5e82e2553c4d">SDL_WINDOW_SHOWN</link> = 0x00000004
, <link linkend="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18adda25e98e54964c0c2ec9ac31f5e629c">SDL_WINDOW_HIDDEN</link> = 0x00000008
, 
<link linkend="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18af7baea7dc9c0e4f09b28793504b02e4c">SDL_WINDOW_BORDERLESS</link> = 0x00000010
, <link linkend="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18aaf59a5e2f762aa2b6d2e49b0ca220fd8">SDL_WINDOW_RESIZABLE</link> = 0x00000020
, <link linkend="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18a7f08ee26b5773412a212233ddc168c5a">SDL_WINDOW_MINIMIZED</link> = 0x00000040
, <link linkend="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18acd8063a617f2ce05f694ecdbf56f811a">SDL_WINDOW_MAXIMIZED</link> = 0x00000080
, 
<link linkend="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18ae0d26c938ff5e806166f5f44d2ffcf70">SDL_WINDOW_MOUSE_GRABBED</link> = 0x00000100
, <link linkend="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18afcbb682c0942bc106af1474c1d34bb53">SDL_WINDOW_INPUT_FOCUS</link> = 0x00000200
, <link linkend="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18aa722d0955c297fc60c09b10e1679684c">SDL_WINDOW_MOUSE_FOCUS</link> = 0x00000400
, <link linkend="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18abfb8eeb3dc7f1844aa55dfdee3d4d7b8">SDL_WINDOW_FULLSCREEN_DESKTOP</link> = ( SDL_WINDOW_FULLSCREEN | 0x00001000 )
, 
<link linkend="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18a1ac8e0ef2237a089cf487d7e7fcc6e23">SDL_WINDOW_FOREIGN</link> = 0x00000800
, <link linkend="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18a03ec21b04fa4e5c8cc868aa01a0c1bf3">SDL_WINDOW_ALLOW_HIGHDPI</link> = 0x00002000
, <link linkend="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18a4c16b51a323741bf5c492adce34e5882">SDL_WINDOW_MOUSE_CAPTURE</link> = 0x00004000
, <link linkend="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18a318e8aee0e3fddcfe2257757c6eb3128">SDL_WINDOW_ALWAYS_ON_TOP</link> = 0x00008000
, 
<link linkend="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18a4bd52941a63adc993271579d52fb6641">SDL_WINDOW_SKIP_TASKBAR</link> = 0x00010000
, <link linkend="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18a94224404de009a2fb6856a6a69d20d85">SDL_WINDOW_UTILITY</link> = 0x00020000
, <link linkend="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18a226509512aeab3c2c01deb75c182adf5">SDL_WINDOW_TOOLTIP</link> = 0x00040000
, <link linkend="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18aeb1e21d5d8ed10b5d65ab0909b5c8c0d">SDL_WINDOW_POPUP_MENU</link> = 0x00080000
, 
<link linkend="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18ab323e087b24b6034070bbc825287cf18">SDL_WINDOW_KEYBOARD_GRABBED</link> = 0x00100000
, <link linkend="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18a55d2d1e92b96050c5a9cd8280d78f26c">SDL_WINDOW_VULKAN</link> = 0x10000000
, <link linkend="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18ad63da27122aeaa0c8986dbb7014ce76d">SDL_WINDOW_METAL</link> = 0x20000000
, <link linkend="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18aaf410e1082e45a55ef9176163610dba2">SDL_WINDOW_INPUT_GRABBED</link> = SDL_WINDOW_MOUSE_GRABBED
 }</para>

<para>The flags on a window. </para>
</listitem>
            <listitem><para>enum <link linkend="__s_d_l__video_8h_1ac486b40a4860d980dbc74d0b4adf3bab">SDL_WindowEventID</link> { 
<link linkend="__s_d_l__video_8h_1ac486b40a4860d980dbc74d0b4adf3babaee1301eee7ad982c50cd310607f968b7">SDL_WINDOWEVENT_NONE</link>
, <link linkend="__s_d_l__video_8h_1ac486b40a4860d980dbc74d0b4adf3baba5e91fe11ed6a24a377a77d024c9639d5">SDL_WINDOWEVENT_SHOWN</link>
, <link linkend="__s_d_l__video_8h_1ac486b40a4860d980dbc74d0b4adf3baba04e5bd277e03b61a6e4b577f2a3fda55">SDL_WINDOWEVENT_HIDDEN</link>
, <link linkend="__s_d_l__video_8h_1ac486b40a4860d980dbc74d0b4adf3babac37af5c3ce56fe0956bc310821d59489">SDL_WINDOWEVENT_EXPOSED</link>
, 
<link linkend="__s_d_l__video_8h_1ac486b40a4860d980dbc74d0b4adf3baba64da80af7b0a58689f07c7196de23da5">SDL_WINDOWEVENT_MOVED</link>
, <link linkend="__s_d_l__video_8h_1ac486b40a4860d980dbc74d0b4adf3baba26096363b1a5a1eccc56a00d5f61948d">SDL_WINDOWEVENT_RESIZED</link>
, <link linkend="__s_d_l__video_8h_1ac486b40a4860d980dbc74d0b4adf3baba98e76df5341be0a05c7461e32c7835f0">SDL_WINDOWEVENT_SIZE_CHANGED</link>
, <link linkend="__s_d_l__video_8h_1ac486b40a4860d980dbc74d0b4adf3baba70577b21b05c509d0342a5649092928d">SDL_WINDOWEVENT_MINIMIZED</link>
, 
<link linkend="__s_d_l__video_8h_1ac486b40a4860d980dbc74d0b4adf3baba83593cf9ef16d0eaeeaac19b32a86a05">SDL_WINDOWEVENT_MAXIMIZED</link>
, <link linkend="__s_d_l__video_8h_1ac486b40a4860d980dbc74d0b4adf3baba9ebe8fbb15f1bf06521d6b5484de3d89">SDL_WINDOWEVENT_RESTORED</link>
, <link linkend="__s_d_l__video_8h_1ac486b40a4860d980dbc74d0b4adf3babac6990e7537a4cc6cc7aaabc3376b9eb5">SDL_WINDOWEVENT_ENTER</link>
, <link linkend="__s_d_l__video_8h_1ac486b40a4860d980dbc74d0b4adf3baba7e1afdd5cfea592a59e129419b431bd5">SDL_WINDOWEVENT_LEAVE</link>
, 
<link linkend="__s_d_l__video_8h_1ac486b40a4860d980dbc74d0b4adf3baba529d1b574e559ee46892024e1c2e6c92">SDL_WINDOWEVENT_FOCUS_GAINED</link>
, <link linkend="__s_d_l__video_8h_1ac486b40a4860d980dbc74d0b4adf3baba239e734c6ba478fb2f694fc7cde30c31">SDL_WINDOWEVENT_FOCUS_LOST</link>
, <link linkend="__s_d_l__video_8h_1ac486b40a4860d980dbc74d0b4adf3baba2483911a3a2a20dbb1c88a15ffb9a360">SDL_WINDOWEVENT_CLOSE</link>
, <link linkend="__s_d_l__video_8h_1ac486b40a4860d980dbc74d0b4adf3baba69ee247e6859b1d5d7dfffb7c1a99b4e">SDL_WINDOWEVENT_TAKE_FOCUS</link>
, 
<link linkend="__s_d_l__video_8h_1ac486b40a4860d980dbc74d0b4adf3baba425a0e4dca5ba339eed8166248eeef8e">SDL_WINDOWEVENT_HIT_TEST</link>
, <link linkend="__s_d_l__video_8h_1ac486b40a4860d980dbc74d0b4adf3baba9fd10380e9447afc2a43ca1682ca8f67">SDL_WINDOWEVENT_ICCPROF_CHANGED</link>
, <link linkend="__s_d_l__video_8h_1ac486b40a4860d980dbc74d0b4adf3baba79f1c661b605adb4390be30a4f217080">SDL_WINDOWEVENT_DISPLAY_CHANGED</link>
 }</para>

<para>Event subtype for window events. </para>
</listitem>
            <listitem><para>enum <link linkend="__s_d_l__video_8h_1ad671b39d95c255af51db93cb54512ffc">SDL_DisplayEventID</link> { <link linkend="__s_d_l__video_8h_1ad671b39d95c255af51db93cb54512ffca0f22fc5951aac829337807e4238110e5">SDL_DISPLAYEVENT_NONE</link>
, <link linkend="__s_d_l__video_8h_1ad671b39d95c255af51db93cb54512ffca79af38ade27966e9e53476f5d3755f04">SDL_DISPLAYEVENT_ORIENTATION</link>
, <link linkend="__s_d_l__video_8h_1ad671b39d95c255af51db93cb54512ffcaf5929ccf80049ecabbd5e50f2fc8485b">SDL_DISPLAYEVENT_CONNECTED</link>
, <link linkend="__s_d_l__video_8h_1ad671b39d95c255af51db93cb54512ffcaeeb05c4066d71e3d5fc4774879d7540d">SDL_DISPLAYEVENT_DISCONNECTED</link>
 }</para>

<para>Event subtype for display events. </para>
</listitem>
            <listitem><para>enum <link linkend="__s_d_l__video_8h_1af2b86ebfae9cd2f87ea6c18dd109dbde">SDL_DisplayOrientation</link> { 
<link linkend="__s_d_l__video_8h_1af2b86ebfae9cd2f87ea6c18dd109dbdeacb20982c4f82c7271a66a76b98eda731">SDL_ORIENTATION_UNKNOWN</link>
, <link linkend="__s_d_l__video_8h_1af2b86ebfae9cd2f87ea6c18dd109dbdea5b1e627bf8f8be31d62292681f42694b">SDL_ORIENTATION_LANDSCAPE</link>
, <link linkend="__s_d_l__video_8h_1af2b86ebfae9cd2f87ea6c18dd109dbdea6cd1294f411220564276f85c32616c6a">SDL_ORIENTATION_LANDSCAPE_FLIPPED</link>
, <link linkend="__s_d_l__video_8h_1af2b86ebfae9cd2f87ea6c18dd109dbdea5fb622ac90f47a799d7d7f660d7c860b">SDL_ORIENTATION_PORTRAIT</link>
, 
<link linkend="__s_d_l__video_8h_1af2b86ebfae9cd2f87ea6c18dd109dbdea66727ec5e93a1112a254b4d3b8e867db">SDL_ORIENTATION_PORTRAIT_FLIPPED</link>
 }</para>

<para>Display orientation. </para>
</listitem>
            <listitem><para>enum <link linkend="__s_d_l__video_8h_1a32391ac4af019aac0e487845adb5baaf">SDL_FlashOperation</link> { <link linkend="__s_d_l__video_8h_1a32391ac4af019aac0e487845adb5baafa9164bc961f90c240d737dfa4e5877080">SDL_FLASH_CANCEL</link>
, <link linkend="__s_d_l__video_8h_1a32391ac4af019aac0e487845adb5baafa337fa7e6aa90ea2873d0243b2654aae4">SDL_FLASH_BRIEFLY</link>
, <link linkend="__s_d_l__video_8h_1a32391ac4af019aac0e487845adb5baafa000ab7f97a52e7bbf062ef847ba6556f">SDL_FLASH_UNTIL_FOCUSED</link>
 }</para>

<para>Window flash operation. </para>
</listitem>
            <listitem><para>enum <link linkend="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4">SDL_GLattr</link> { 
<link linkend="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4ab91e9b7978b6d2c62291b9d7e88a1903">SDL_GL_RED_SIZE</link>
, <link linkend="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4af32b5125f656487de9d3c1600c6e4eb9">SDL_GL_GREEN_SIZE</link>
, <link linkend="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4aa7f058249f389ebba59f5d3cb00d7806">SDL_GL_BLUE_SIZE</link>
, <link linkend="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4abe24aa11a8007880290835e7eb07d5d7">SDL_GL_ALPHA_SIZE</link>
, 
<link linkend="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4ac41c21ee24979f52471afd0712ee08c4">SDL_GL_BUFFER_SIZE</link>
, <link linkend="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4a28c3841afe3b66ab86a267bf5d0a28e0">SDL_GL_DOUBLEBUFFER</link>
, <link linkend="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4addf8f9d5c6d217954b14ece543dcbf17">SDL_GL_DEPTH_SIZE</link>
, <link linkend="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4a29dc7e9872be52f3327a452b6875c102">SDL_GL_STENCIL_SIZE</link>
, 
<link linkend="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4ae43ed10c33a2cc5b98a8c3d71e94ba43">SDL_GL_ACCUM_RED_SIZE</link>
, <link linkend="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4a901dce8f81e72cd6c0efa1f32ac96c2d">SDL_GL_ACCUM_GREEN_SIZE</link>
, <link linkend="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4acc5dc0cb2c0e9e16d64dbdbde177d775">SDL_GL_ACCUM_BLUE_SIZE</link>
, <link linkend="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4a4c35a77fa9c78ac60997b3c15e158b2e">SDL_GL_ACCUM_ALPHA_SIZE</link>
, 
<link linkend="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4a7d51f1f66a480883c5e7a7d58f668d72">SDL_GL_STEREO</link>
, <link linkend="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4a83d7d3086480baed28bed6be4dadc8bf">SDL_GL_MULTISAMPLEBUFFERS</link>
, <link linkend="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4a54761551da12a1de15e2f844c70d19ad">SDL_GL_MULTISAMPLESAMPLES</link>
, <link linkend="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4ac48c7a4cf9eff0fa154878988b6697db">SDL_GL_ACCELERATED_VISUAL</link>
, 
<link linkend="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4ab2409f43111e32a7233602976d8fb588">SDL_GL_RETAINED_BACKING</link>
, <link linkend="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4a3102858c17eea157bdfcd245695fe0e8">SDL_GL_CONTEXT_MAJOR_VERSION</link>
, <link linkend="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4a5aa38fec236a59f29def7cbc26e0a459">SDL_GL_CONTEXT_MINOR_VERSION</link>
, <link linkend="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4a40f4b0ae113a8f384490d685f9d48de8">SDL_GL_CONTEXT_EGL</link>
, 
<link linkend="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4aec49ddd5d7f32394faa0bd9bf119657c">SDL_GL_CONTEXT_FLAGS</link>
, <link linkend="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4aec99ff71cb16785eb431311c59bd97e0">SDL_GL_CONTEXT_PROFILE_MASK</link>
, <link linkend="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4ab162bed722047d9cd09b984a5c7e1277">SDL_GL_SHARE_WITH_CURRENT_CONTEXT</link>
, <link linkend="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4a1c7c3def7beea2c0aa8794d9da5003f4">SDL_GL_FRAMEBUFFER_SRGB_CAPABLE</link>
, 
<link linkend="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4a1ff3378ded0143863f908062afd0c17b">SDL_GL_CONTEXT_RELEASE_BEHAVIOR</link>
, <link linkend="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4a3822f24741078433542b649fac5eddb7">SDL_GL_CONTEXT_RESET_NOTIFICATION</link>
, <link linkend="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4aee607d4cdab39620c3dcc6e108b62a73">SDL_GL_CONTEXT_NO_ERROR</link>
 }</para>

<para>OpenGL configuration attributes. </para>
</listitem>
            <listitem><para>enum <link linkend="__s_d_l__video_8h_1ad5ea1835b83fe139bcc182c3326d7a5f">SDL_GLprofile</link> { <link linkend="__s_d_l__video_8h_1ad5ea1835b83fe139bcc182c3326d7a5fa7fae54c64a26a0e2a8dac6d47a1c510a">SDL_GL_CONTEXT_PROFILE_CORE</link> = 0x0001
, <link linkend="__s_d_l__video_8h_1ad5ea1835b83fe139bcc182c3326d7a5fa6db21ad6da230fb961fe0190a9e3398f">SDL_GL_CONTEXT_PROFILE_COMPATIBILITY</link> = 0x0002
, <link linkend="__s_d_l__video_8h_1ad5ea1835b83fe139bcc182c3326d7a5fa721fa797743fb228d804532cab8b8faa">SDL_GL_CONTEXT_PROFILE_ES</link> = 0x0004
 }</para>
</listitem>
            <listitem><para>enum <link linkend="__s_d_l__video_8h_1abd0baef2bdd92997a9436f5b62b18f5d">SDL_GLcontextFlag</link> { <link linkend="__s_d_l__video_8h_1abd0baef2bdd92997a9436f5b62b18f5daf47902af7f161e63161b2b2489072173">SDL_GL_CONTEXT_DEBUG_FLAG</link> = 0x0001
, <link linkend="__s_d_l__video_8h_1abd0baef2bdd92997a9436f5b62b18f5da127c5bc8035c20dabeb006d98a8da63e">SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG</link> = 0x0002
, <link linkend="__s_d_l__video_8h_1abd0baef2bdd92997a9436f5b62b18f5dac25c11305e0eb9f5e047529bd5ce3b5d">SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG</link> = 0x0004
, <link linkend="__s_d_l__video_8h_1abd0baef2bdd92997a9436f5b62b18f5da8f39abd1936a704f37ba8162e02bbb25">SDL_GL_CONTEXT_RESET_ISOLATION_FLAG</link> = 0x0008
 }</para>
</listitem>
            <listitem><para>enum <link linkend="__s_d_l__video_8h_1a9a34b07d44a580ac7216b6c842663aed">SDL_GLcontextReleaseFlag</link> { <link linkend="__s_d_l__video_8h_1a9a34b07d44a580ac7216b6c842663aeda7f6f5f576fc1fa56dcb6e8d30f4d1941">SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE</link> = 0x0000
, <link linkend="__s_d_l__video_8h_1a9a34b07d44a580ac7216b6c842663aedab0f0d7285f42906890a1cfc3d5240ebe">SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH</link> = 0x0001
 }</para>
</listitem>
            <listitem><para>enum <link linkend="__s_d_l__video_8h_1af68cd1e823f43af61bbeb1701c641375">SDL_GLContextResetNotification</link> { <link linkend="__s_d_l__video_8h_1af68cd1e823f43af61bbeb1701c641375a9395326b54fec0667f99e5c081eb8bf7">SDL_GL_CONTEXT_RESET_NO_NOTIFICATION</link> = 0x0000
, <link linkend="__s_d_l__video_8h_1af68cd1e823f43af61bbeb1701c641375a9d8b7f4f987dfe5c7f6e2ae4227a41f4">SDL_GL_CONTEXT_RESET_LOSE_CONTEXT</link> = 0x0001
 }</para>
</listitem>
            <listitem><para>enum <link linkend="__s_d_l__video_8h_1a0415a108581752b68c6aca800ff3bad5">SDL_HitTestResult</link> { 
<link linkend="__s_d_l__video_8h_1a0415a108581752b68c6aca800ff3bad5a3eb7be45c88e40366315d453f3bf721e">SDL_HITTEST_NORMAL</link>
, <link linkend="__s_d_l__video_8h_1a0415a108581752b68c6aca800ff3bad5a078a028af8c26848cf3576bd0c4d8fc9">SDL_HITTEST_DRAGGABLE</link>
, <link linkend="__s_d_l__video_8h_1a0415a108581752b68c6aca800ff3bad5acbfbe2bde22d4fdce5b19f327fd26798">SDL_HITTEST_RESIZE_TOPLEFT</link>
, <link linkend="__s_d_l__video_8h_1a0415a108581752b68c6aca800ff3bad5a19edd2ad7c4f276d13a21aaf61672fcd">SDL_HITTEST_RESIZE_TOP</link>
, 
<link linkend="__s_d_l__video_8h_1a0415a108581752b68c6aca800ff3bad5a2119a0469719b69f16a1f35ab810aff3">SDL_HITTEST_RESIZE_TOPRIGHT</link>
, <link linkend="__s_d_l__video_8h_1a0415a108581752b68c6aca800ff3bad5ac8c0e2ed653a7b69243e317867d8ac42">SDL_HITTEST_RESIZE_RIGHT</link>
, <link linkend="__s_d_l__video_8h_1a0415a108581752b68c6aca800ff3bad5a7be4783a68f0c51166dbd289d9a42c51">SDL_HITTEST_RESIZE_BOTTOMRIGHT</link>
, <link linkend="__s_d_l__video_8h_1a0415a108581752b68c6aca800ff3bad5a689ac09305aee5ee819aa39625f848db">SDL_HITTEST_RESIZE_BOTTOM</link>
, 
<link linkend="__s_d_l__video_8h_1a0415a108581752b68c6aca800ff3bad5a94f9165ed48fb13d6996eae2a83154bf">SDL_HITTEST_RESIZE_BOTTOMLEFT</link>
, <link linkend="__s_d_l__video_8h_1a0415a108581752b68c6aca800ff3bad5a09656621305e2f938a864fc425fe0869">SDL_HITTEST_RESIZE_LEFT</link>
 }</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1ac6f3250a95bd027fd1a374d7ed15fc57">SDL_GetNumVideoDrivers</link> (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> const char *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1ae88ab2c7515c52b180ef0238f8965b4b">SDL_GetVideoDriver</link> (int <link linkend="__s_d_l__opengl__glext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a05244b30716f0339dcd140c6f92017b7">SDL_VideoInit</link> (const char *driver_name)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1ade5fc4847320fb235f17265b683fa013">SDL_VideoQuit</link> (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> const char *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1aec2f46152701003e12689dac7de79eb9">SDL_GetCurrentVideoDriver</link> (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a074d185b7ef04e0305acdeeb049dd2be">SDL_GetNumVideoDisplays</link> (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> const char *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a3c8523dad11fceab8a8029239185529b">SDL_GetDisplayName</link> (int displayIndex)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1ac05213009395c10ae40bede2de8e08a1">SDL_GetDisplayBounds</link> (int displayIndex, <link linkend="_struct_s_d_l___rect">SDL_Rect</link> *rect)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a9898f2e51cd90ace84cb0c6ea65d7051">SDL_GetDisplayUsableBounds</link> (int displayIndex, <link linkend="_struct_s_d_l___rect">SDL_Rect</link> *rect)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a8207ec5d13bd87158cbb42ef76e33216">SDL_GetDisplayDPI</link> (int displayIndex, float *ddpi, float *hdpi, float *vdpi)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__video_8h_1af2b86ebfae9cd2f87ea6c18dd109dbde">SDL_DisplayOrientation</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a6540db01a424ced1847376e583361ecb">SDL_GetDisplayOrientation</link> (int displayIndex)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a5abcf18592f00019c517e791f8ba53fc">SDL_GetNumDisplayModes</link> (int displayIndex)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a0a53e003ec6ad24dd2bbbcd0ad297311">SDL_GetDisplayMode</link> (int displayIndex, int modeIndex, <link linkend="_struct_s_d_l___display_mode">SDL_DisplayMode</link> *<link linkend="__s_d_l__opengl__glext_8h_1a1e71d9c196e4683cc06c4b54d53f7ef5">mode</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1ab97bca68fc068a6ecc3db473c4c0defd">SDL_GetDesktopDisplayMode</link> (int displayIndex, <link linkend="_struct_s_d_l___display_mode">SDL_DisplayMode</link> *<link linkend="__s_d_l__opengl__glext_8h_1a1e71d9c196e4683cc06c4b54d53f7ef5">mode</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a14dce1cb33085b36f08d27b3d8f2335b">SDL_GetCurrentDisplayMode</link> (int displayIndex, <link linkend="_struct_s_d_l___display_mode">SDL_DisplayMode</link> *<link linkend="__s_d_l__opengl__glext_8h_1a1e71d9c196e4683cc06c4b54d53f7ef5">mode</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="_struct_s_d_l___display_mode">SDL_DisplayMode</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a912994189211554bdd0b264e3f6d8e9f">SDL_GetClosestDisplayMode</link> (int displayIndex, const <link linkend="_struct_s_d_l___display_mode">SDL_DisplayMode</link> *<link linkend="__s_d_l__opengl__glext_8h_1a1e71d9c196e4683cc06c4b54d53f7ef5">mode</link>, <link linkend="_struct_s_d_l___display_mode">SDL_DisplayMode</link> *closest)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a0be1d0a4d1f9a0da23b78db2f55871b5">SDL_GetWindowDisplayIndex</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a2ca17d1e857d1560738e002c9935088a">SDL_SetWindowDisplayMode</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window, const <link linkend="_struct_s_d_l___display_mode">SDL_DisplayMode</link> *<link linkend="__s_d_l__opengl__glext_8h_1a1e71d9c196e4683cc06c4b54d53f7ef5">mode</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a8185547bc7cb0bbeb400f459792d081a">SDL_GetWindowDisplayMode</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window, <link linkend="_struct_s_d_l___display_mode">SDL_DisplayMode</link> *<link linkend="__s_d_l__opengl__glext_8h_1a1e71d9c196e4683cc06c4b54d53f7ef5">mode</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a191991d151bc02a17b7f1b4b80a61795">SDL_GetWindowICCProfile</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window, <link linkend="__s_d_l__config_8h_1a7c94ea6f8948649f8d181ae55911eeaf">size_t</link> *<link linkend="__s_d_l__opengl__glext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a3abb4a27f109ac055eb2a82227a9d11f">SDL_GetWindowPixelFormat</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a841edb930dc7cb2c1ec64f831d3abba6">SDL_CreateWindow</link> (const char *title, int <link linkend="__s_d_l__opengl_8h_1ad0e63d0edcdbd3d79554076bf309fd47">x</link>, int <link linkend="__s_d_l__opengl_8h_1a1675d9d7bb68e1657ff028643b4037e3">y</link>, int <link linkend="__s_d_l__opengl__glext_8h_1a6ee8f168a7ab6785a9bb57c6715dad99">w</link>, int <link linkend="__s_d_l__opengl__glext_8h_1afa0fb1b5e976920c0abeff2dca3ed774">h</link>, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> <link linkend="__s_d_l__opengl__glext_8h_1ac7ba7d3cce3d19ca020e056b37231289">flags</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1aa5ba5ca928613b022e9872dc19197f6e">SDL_CreateWindowFrom</link> (const <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> *<link linkend="__s_d_l__opengl_8h_1a2e335d56e2846b0fea47eed068b2d34a">data</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a1f6c1c22ced1564ffd0d54bbf9824134">SDL_GetWindowID</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a61016989f88ade9a0f331c63fd200d78">SDL_GetWindowFromID</link> (<link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> <link linkend="__s_d_l__opengl__glext_8h_1a58c2a664503e14ffb8f21012aabff3e9">id</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a4445733f04a1a9dd0e063cd4738f285f">SDL_GetWindowFlags</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a41aabc4b68f75f41d97995e02eb9deb6">SDL_SetWindowTitle</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window, const char *title)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> const char *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a631b117f2c3712a55706d7fd60013536">SDL_GetWindowTitle</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a0b6910b5d5aa2df0aeda257e445a472e">SDL_SetWindowIcon</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window, <link linkend="_struct_s_d_l___surface">SDL_Surface</link> *icon)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a4d2831ad431f59e3a5a5e472599f6c0a">SDL_SetWindowData</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window, const char *<link linkend="__s_d_l__opengl__glext_8h_1aaced7cfc21e7d37775d6921bb8177239">name</link>, <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> *userdata)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1ae2b358354dfad5523efadb95adc59ce4">SDL_GetWindowData</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window, const char *<link linkend="__s_d_l__opengl__glext_8h_1aaced7cfc21e7d37775d6921bb8177239">name</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1ab200a53e01ddc697fd6b8e017cc4e6dd">SDL_SetWindowPosition</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window, int <link linkend="__s_d_l__opengl_8h_1ad0e63d0edcdbd3d79554076bf309fd47">x</link>, int <link linkend="__s_d_l__opengl_8h_1a1675d9d7bb68e1657ff028643b4037e3">y</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a03adfc1ed4aaf57da4af00bd247ac99c">SDL_GetWindowPosition</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window, int *<link linkend="__s_d_l__opengl_8h_1ad0e63d0edcdbd3d79554076bf309fd47">x</link>, int *<link linkend="__s_d_l__opengl_8h_1a1675d9d7bb68e1657ff028643b4037e3">y</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a29b118c6932ccb94d85b5435ae1e0a19">SDL_SetWindowSize</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window, int <link linkend="__s_d_l__opengl__glext_8h_1a6ee8f168a7ab6785a9bb57c6715dad99">w</link>, int <link linkend="__s_d_l__opengl__glext_8h_1afa0fb1b5e976920c0abeff2dca3ed774">h</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a5cbfffcfec91c22a7ca95fd1d5163db5">SDL_GetWindowSize</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window, int *<link linkend="__s_d_l__opengl__glext_8h_1a6ee8f168a7ab6785a9bb57c6715dad99">w</link>, int *<link linkend="__s_d_l__opengl__glext_8h_1afa0fb1b5e976920c0abeff2dca3ed774">h</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a1f309d151c3526b1ac3a7cb9c1a231ae">SDL_GetWindowBordersSize</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window, int *<link linkend="__s_d_l__opengl__glext_8h_1a5ab323daeacf8dfdb8f91132fecdca23">top</link>, int *<link linkend="__s_d_l__opengl__glext_8h_1a85b8f6c07fbc1fb5d77c2ae090f21995">left</link>, int *<link linkend="__s_d_l__opengl__glext_8h_1a95fc257e5ddf46f7db9d5e898cdf1991">bottom</link>, int *<link linkend="__s_d_l__opengl__glext_8h_1a5ffadbbacc6b89cf6218bc43b384d3fe">right</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a1b6dd546d8dec383be411f98926335ae">SDL_SetWindowMinimumSize</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window, int min_w, int min_h)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1afe1c6ca08d5b8c336b1276236559287a">SDL_GetWindowMinimumSize</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window, int *<link linkend="__s_d_l__opengl__glext_8h_1a6ee8f168a7ab6785a9bb57c6715dad99">w</link>, int *<link linkend="__s_d_l__opengl__glext_8h_1afa0fb1b5e976920c0abeff2dca3ed774">h</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1aaf95e53a3b70d55d71d7b2cf822ea77e">SDL_SetWindowMaximumSize</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window, int max_w, int max_h)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a38d65795da3feacfec1c392c101e92fd">SDL_GetWindowMaximumSize</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window, int *<link linkend="__s_d_l__opengl__glext_8h_1a6ee8f168a7ab6785a9bb57c6715dad99">w</link>, int *<link linkend="__s_d_l__opengl__glext_8h_1afa0fb1b5e976920c0abeff2dca3ed774">h</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1afb4b868e2cc0107ed6bcf5ba7aa376e0">SDL_SetWindowBordered</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window, <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> bordered)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a42d2451050ae01aaf2974344b9d4a812">SDL_SetWindowResizable</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window, <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> resizable)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1ae6e6eed29cdb84d7c2e3b359273667a1">SDL_SetWindowAlwaysOnTop</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window, <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> on_top)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a6051ce26885b32b80bc7285b4facd0a1">SDL_ShowWindow</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1aa3cbe663e0bd62aa7a747a6c11781766">SDL_HideWindow</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a4b66b90f95780276addc14bc573c9f3c">SDL_RaiseWindow</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a8d969b660fee270f84cb403c8b75ded6">SDL_MaximizeWindow</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a9f802f6c7952552b1cb26958fad3f2a6">SDL_MinimizeWindow</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1afea37fca3b12f454e7f91d919fc99fbd">SDL_RestoreWindow</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1ab4aa48f0a29f0868ce4e0422c02ed2fa">SDL_SetWindowFullscreen</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> <link linkend="__s_d_l__opengl__glext_8h_1ac7ba7d3cce3d19ca020e056b37231289">flags</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="_struct_s_d_l___surface">SDL_Surface</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a53fd405291238e8677632165afad3ea0">SDL_GetWindowSurface</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a7bbfee05788dc85a1d67218cf3006653">SDL_UpdateWindowSurface</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1ae6b0c6cf354beb87291887bfa02385b1">SDL_UpdateWindowSurfaceRects</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> *rects, int numrects)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1abe7fd559e9d6da046c5984dea679a89b">SDL_SetWindowGrab</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window, <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> grabbed)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a474b4cf41f81e65f88243b7616ad1789">SDL_SetWindowKeyboardGrab</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window, <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> grabbed)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a1777999c919b478bc736f4a444c65381">SDL_SetWindowMouseGrab</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window, <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> grabbed)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1ad4e451db3880b6e0dd6647cbc351c6c0">SDL_GetWindowGrab</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1af34c1a3d017f800f3266257eeda19a61">SDL_GetWindowKeyboardGrab</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a2aaf67c9351b65a6517c78a32f651e46">SDL_GetWindowMouseGrab</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a6d0a45787b2a383bed8ed56133b04eab">SDL_GetGrabbedWindow</link> (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1aa4fe6c9f78691def921be2882e8e1747">SDL_SetWindowMouseRect</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> *rect)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1ae41bb7764e10f1a8f189a49690ea1528">SDL_GetWindowMouseRect</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a896972250b4d2e0f75888fa44fa792ec">SDL_SetWindowBrightness</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window, float brightness)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> float <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a21c10969331c89e8d0e6a8f998a3c319">SDL_GetWindowBrightness</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1ac10be8659aa8b5bdefb8ce43b6961f7f">SDL_SetWindowOpacity</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window, float opacity)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a9a85fb11978adecf13a04976efe6ceca">SDL_GetWindowOpacity</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window, float *out_opacity)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1afb7627a0ede24c28453857fff4f02aca">SDL_SetWindowModalFor</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *modal_window, <link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *parent_window)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1aa77986a0f56e51f216af57d829bca896">SDL_SetWindowInputFocus</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a6799acf235454f519ac209ccf14caa67">SDL_SetWindowGammaRamp</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window, const <link linkend="__s_d_l__stdinc_8h_1a31fcc0a076c9068668173ee26d33e42b">Uint16</link> *red, const <link linkend="__s_d_l__stdinc_8h_1a31fcc0a076c9068668173ee26d33e42b">Uint16</link> *<link linkend="__s_d_l__opengl__glext_8h_1ac14cda87cf6c751d53b65a3cd41c35a1">green</link>, const <link linkend="__s_d_l__stdinc_8h_1a31fcc0a076c9068668173ee26d33e42b">Uint16</link> *<link linkend="__s_d_l__opengl__glext_8h_1a1853b32584a90fa75432925f3e26d0e8">blue</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1af4d647be3bb21a33586d69d5cad87ead">SDL_GetWindowGammaRamp</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window, <link linkend="__s_d_l__stdinc_8h_1a31fcc0a076c9068668173ee26d33e42b">Uint16</link> *red, <link linkend="__s_d_l__stdinc_8h_1a31fcc0a076c9068668173ee26d33e42b">Uint16</link> *<link linkend="__s_d_l__opengl__glext_8h_1ac14cda87cf6c751d53b65a3cd41c35a1">green</link>, <link linkend="__s_d_l__stdinc_8h_1a31fcc0a076c9068668173ee26d33e42b">Uint16</link> *<link linkend="__s_d_l__opengl__glext_8h_1a1853b32584a90fa75432925f3e26d0e8">blue</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a23e14e1f21f7fb3727f38fd9b0711186">SDL_SetWindowHitTest</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window, <link linkend="__s_d_l__video_8h_1a247c7fd43bb60b20630945a5bd9e4957">SDL_HitTest</link> callback, <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> *callback_data)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a20c2c00579bb4b1fa6c15124621bbc6e">SDL_FlashWindow</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window, <link linkend="__s_d_l__video_8h_1a32391ac4af019aac0e487845adb5baaf">SDL_FlashOperation</link> operation)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a72609295a4faee0587268339ccff80c2">SDL_DestroyWindow</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a4b5c116d57947bf508c13b21aac49cbf">SDL_IsScreenSaverEnabled</link> (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a17846c713066aa29a86e1be205a7fc3e">SDL_EnableScreenSaver</link> (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a68eb0d850934fa1c7ac12c30f2d56a84">SDL_DisableScreenSaver</link> (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link>)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect><title>OpenGL support functions</title>
        <itemizedlist>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a398df9aaf43a69dc2cfaab5b306b8f91">SDL_GL_LoadLibrary</link> (const char *<link linkend="__s_d_l__opengl__glext_8h_1ab25d8cd967ccbd19b630d7100ff8f67e">path</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a6500d698e7dbe6799250a626a8b42359">SDL_GL_GetProcAddress</link> (const char *proc)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a92103adf9637ec2dc471714076872bdc">SDL_GL_UnloadLibrary</link> (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a1fa0cc176fbc16db139b40a121e9cfa7">SDL_GL_ExtensionSupported</link> (const char *extension)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1ac96f25a7a6b28387d2813d8db71921ff">SDL_GL_ResetAttributes</link> (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1aed4d4347f2d5def1532bc22893e0e0d9">SDL_GL_SetAttribute</link> (<link linkend="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4">SDL_GLattr</link> attr, int <link linkend="__s_d_l__opengl__glext_8h_1a8ad81492d410ff2ac11f754f4042150f">value</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a611bbed6c7374329e1d1b9c31b06976d">SDL_GL_GetAttribute</link> (<link linkend="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4">SDL_GLattr</link> attr, int *<link linkend="__s_d_l__opengl__glext_8h_1a8ad81492d410ff2ac11f754f4042150f">value</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__video_8h_1a0d64dcf67c9685d09cbe051448e1b3f3">SDL_GLContext</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a0e14c935cf304133278893bf6c1d2691">SDL_GL_CreateContext</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a5a2ad98e8920f8069bf89eb3f9bbc377">SDL_GL_MakeCurrent</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window, <link linkend="__s_d_l__video_8h_1a0d64dcf67c9685d09cbe051448e1b3f3">SDL_GLContext</link> context)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a98181cae6b6d56f3bdbe9f83e46482de">SDL_GL_GetCurrentWindow</link> (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__video_8h_1a0d64dcf67c9685d09cbe051448e1b3f3">SDL_GLContext</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a742f600404b9090bd64f8e863ece98c8">SDL_GL_GetCurrentContext</link> (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1ac21851bbd91760c5bab92594a58edba3">SDL_GL_GetDrawableSize</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window, int *<link linkend="__s_d_l__opengl__glext_8h_1a6ee8f168a7ab6785a9bb57c6715dad99">w</link>, int *<link linkend="__s_d_l__opengl__glext_8h_1afa0fb1b5e976920c0abeff2dca3ed774">h</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a68b0d06595d086d9244fd49afe3e8360">SDL_GL_SetSwapInterval</link> (int interval)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1ae96490db6285ed0df44a9b1c0f498605">SDL_GL_GetSwapInterval</link> (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1a11d1245662f49f6af257627119f22835">SDL_GL_SwapWindow</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__video_8h_1aa64ab050e0bd3a61057c3dffe953aa9f">SDL_GL_DeleteContext</link> (<link linkend="__s_d_l__video_8h_1a0d64dcf67c9685d09cbe051448e1b3f3">SDL_GLContext</link> context)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Header file for SDL video functions. </para>
</section>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="__s_d_l__video_8h_1a8d2f428ddef3b4ccf08915814e35d9c7"/><section>
    <title>SDL_WINDOWPOS_CENTERED</title>
<indexterm><primary>SDL_WINDOWPOS_CENTERED</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_WINDOWPOS_CENTERED</secondary></indexterm>
<para><computeroutput>#define SDL_WINDOWPOS_CENTERED   <link linkend="__s_d_l__video_8h_1a3399af2e94d0de95e69e6bcc57969d58">SDL_WINDOWPOS_CENTERED_DISPLAY</link>(0)</computeroutput></para></section>
<anchor xml:id="__s_d_l__video_8h_1a3399af2e94d0de95e69e6bcc57969d58"/><section>
    <title>SDL_WINDOWPOS_CENTERED_DISPLAY</title>
<indexterm><primary>SDL_WINDOWPOS_CENTERED_DISPLAY</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_WINDOWPOS_CENTERED_DISPLAY</secondary></indexterm>
<para><computeroutput>#define SDL_WINDOWPOS_CENTERED_DISPLAY( X)   (<link linkend="__s_d_l__video_8h_1a5088b87c9d01cc26915ff082aaf014fa">SDL_WINDOWPOS_CENTERED_MASK</link>|(X))</computeroutput></para></section>
<anchor xml:id="__s_d_l__video_8h_1a5088b87c9d01cc26915ff082aaf014fa"/><section>
    <title>SDL_WINDOWPOS_CENTERED_MASK</title>
<indexterm><primary>SDL_WINDOWPOS_CENTERED_MASK</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_WINDOWPOS_CENTERED_MASK</secondary></indexterm>
<para><computeroutput>#define SDL_WINDOWPOS_CENTERED_MASK   0x2FFF0000u</computeroutput></para><para>

<para>Used to indicate that the window position should be centered. </para>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a07ffe394c82e7c5d93443e76e5356cbb"/><section>
    <title>SDL_WINDOWPOS_ISCENTERED</title>
<indexterm><primary>SDL_WINDOWPOS_ISCENTERED</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_WINDOWPOS_ISCENTERED</secondary></indexterm>
<para><computeroutput>#define SDL_WINDOWPOS_ISCENTERED( X)               (((X)&amp;0xFFFF0000) == <link linkend="__s_d_l__video_8h_1a5088b87c9d01cc26915ff082aaf014fa">SDL_WINDOWPOS_CENTERED_MASK</link>)</computeroutput></para></section>
<anchor xml:id="__s_d_l__video_8h_1a8ded7367fc7c4375cc195ff4a2a2132c"/><section>
    <title>SDL_WINDOWPOS_ISUNDEFINED</title>
<indexterm><primary>SDL_WINDOWPOS_ISUNDEFINED</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_WINDOWPOS_ISUNDEFINED</secondary></indexterm>
<para><computeroutput>#define SDL_WINDOWPOS_ISUNDEFINED( X)               (((X)&amp;0xFFFF0000) == <link linkend="__s_d_l__video_8h_1a0eee89b50bf349f05cb28d6ca7c2dec8">SDL_WINDOWPOS_UNDEFINED_MASK</link>)</computeroutput></para></section>
<anchor xml:id="__s_d_l__video_8h_1a20917558a7e5fb159647980218726a52"/><section>
    <title>SDL_WINDOWPOS_UNDEFINED</title>
<indexterm><primary>SDL_WINDOWPOS_UNDEFINED</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_WINDOWPOS_UNDEFINED</secondary></indexterm>
<para><computeroutput>#define SDL_WINDOWPOS_UNDEFINED   <link linkend="__s_d_l__video_8h_1a29aa3ade62cfe16de4c8b1e9c4272ab0">SDL_WINDOWPOS_UNDEFINED_DISPLAY</link>(0)</computeroutput></para></section>
<anchor xml:id="__s_d_l__video_8h_1a29aa3ade62cfe16de4c8b1e9c4272ab0"/><section>
    <title>SDL_WINDOWPOS_UNDEFINED_DISPLAY</title>
<indexterm><primary>SDL_WINDOWPOS_UNDEFINED_DISPLAY</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_WINDOWPOS_UNDEFINED_DISPLAY</secondary></indexterm>
<para><computeroutput>#define SDL_WINDOWPOS_UNDEFINED_DISPLAY( X)   (<link linkend="__s_d_l__video_8h_1a0eee89b50bf349f05cb28d6ca7c2dec8">SDL_WINDOWPOS_UNDEFINED_MASK</link>|(X))</computeroutput></para></section>
<anchor xml:id="__s_d_l__video_8h_1a0eee89b50bf349f05cb28d6ca7c2dec8"/><section>
    <title>SDL_WINDOWPOS_UNDEFINED_MASK</title>
<indexterm><primary>SDL_WINDOWPOS_UNDEFINED_MASK</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_WINDOWPOS_UNDEFINED_MASK</secondary></indexterm>
<para><computeroutput>#define SDL_WINDOWPOS_UNDEFINED_MASK   0x1FFF0000u</computeroutput></para><para>

<para>Used to indicate that you don&apos;t care what the window position is. </para>
</para>
</section>
</section>
<section>
<title>Typedef Documentation</title>
<anchor xml:id="__s_d_l__video_8h_1a0d64dcf67c9685d09cbe051448e1b3f3"/><section>
    <title>SDL_GLContext</title>
<indexterm><primary>SDL_GLContext</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GLContext</secondary></indexterm>
<para><computeroutput>typedef <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link>* <link linkend="__s_d_l__video_8h_1a0d64dcf67c9685d09cbe051448e1b3f3">SDL_GLContext</link></computeroutput></para><para>

<para>An opaque handle to an OpenGL context. </para>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a247c7fd43bb60b20630945a5bd9e4957"/><section>
    <title>SDL_HitTest</title>
<indexterm><primary>SDL_HitTest</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_HitTest</secondary></indexterm>
<para><computeroutput>typedef <link linkend="__s_d_l__video_8h_1a0415a108581752b68c6aca800ff3bad5">SDL_HitTestResult</link>(<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> * SDL_HitTest) (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *win, const <link linkend="_struct_s_d_l___point">SDL_Point</link> *area, <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> *<link linkend="__s_d_l__opengl_8h_1a2e335d56e2846b0fea47eed068b2d34a">data</link>)</computeroutput></para>
<para>Callback used for hit-testing.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>win</entry><entry>
<para>the SDL_Window where hit-testing was set on </para>
</entry>
                            </row>
                            <row>
<entry>area</entry><entry>
<para>an <link linkend="_struct_s_d_l___point">SDL_Point</link> which should be hit-tested </para>
</entry>
                            </row>
                            <row>
<entry>data</entry><entry>
<para>what was passed as <computeroutput>callback_data</computeroutput> to <link linkend="__s_d_l__video_8h_1a23e14e1f21f7fb3727f38fd9b0711186">SDL_SetWindowHitTest()</link> </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>an SDL_HitTestResult value.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a23e14e1f21f7fb3727f38fd9b0711186">SDL_SetWindowHitTest</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392"/><section>
    <title>SDL_Window</title>
<indexterm><primary>SDL_Window</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_Window</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> <link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link></computeroutput></para><para>

<para>The type used to identify a window. </para>
</para>

<para><formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a841edb930dc7cb2c1ec64f831d3abba6">SDL_CreateWindow()</link> </para>

<para><link linkend="__s_d_l__video_8h_1aa5ba5ca928613b022e9872dc19197f6e">SDL_CreateWindowFrom()</link> </para>

<para><link linkend="__s_d_l__video_8h_1a72609295a4faee0587268339ccff80c2">SDL_DestroyWindow()</link> </para>

<para><link linkend="__s_d_l__video_8h_1a20c2c00579bb4b1fa6c15124621bbc6e">SDL_FlashWindow()</link> </para>

<para><link linkend="__s_d_l__video_8h_1ae2b358354dfad5523efadb95adc59ce4">SDL_GetWindowData()</link> </para>

<para><link linkend="__s_d_l__video_8h_1a4445733f04a1a9dd0e063cd4738f285f">SDL_GetWindowFlags()</link> </para>

<para><link linkend="__s_d_l__video_8h_1ad4e451db3880b6e0dd6647cbc351c6c0">SDL_GetWindowGrab()</link> </para>

<para><link linkend="__s_d_l__video_8h_1af34c1a3d017f800f3266257eeda19a61">SDL_GetWindowKeyboardGrab()</link> </para>

<para><link linkend="__s_d_l__video_8h_1a2aaf67c9351b65a6517c78a32f651e46">SDL_GetWindowMouseGrab()</link> </para>

<para><link linkend="__s_d_l__video_8h_1a03adfc1ed4aaf57da4af00bd247ac99c">SDL_GetWindowPosition()</link> </para>

<para><link linkend="__s_d_l__video_8h_1a5cbfffcfec91c22a7ca95fd1d5163db5">SDL_GetWindowSize()</link> </para>

<para><link linkend="__s_d_l__video_8h_1a631b117f2c3712a55706d7fd60013536">SDL_GetWindowTitle()</link> </para>

<para><link linkend="__s_d_l__video_8h_1aa3cbe663e0bd62aa7a747a6c11781766">SDL_HideWindow()</link> </para>

<para><link linkend="__s_d_l__video_8h_1a8d969b660fee270f84cb403c8b75ded6">SDL_MaximizeWindow()</link> </para>

<para><link linkend="__s_d_l__video_8h_1a9f802f6c7952552b1cb26958fad3f2a6">SDL_MinimizeWindow()</link> </para>

<para><link linkend="__s_d_l__video_8h_1a4b66b90f95780276addc14bc573c9f3c">SDL_RaiseWindow()</link> </para>

<para><link linkend="__s_d_l__video_8h_1afea37fca3b12f454e7f91d919fc99fbd">SDL_RestoreWindow()</link> </para>

<para><link linkend="__s_d_l__video_8h_1a4d2831ad431f59e3a5a5e472599f6c0a">SDL_SetWindowData()</link> </para>

<para><link linkend="__s_d_l__video_8h_1ab4aa48f0a29f0868ce4e0422c02ed2fa">SDL_SetWindowFullscreen()</link> </para>

<para><link linkend="__s_d_l__video_8h_1abe7fd559e9d6da046c5984dea679a89b">SDL_SetWindowGrab()</link> </para>

<para><link linkend="__s_d_l__video_8h_1a474b4cf41f81e65f88243b7616ad1789">SDL_SetWindowKeyboardGrab()</link> </para>

<para><link linkend="__s_d_l__video_8h_1a1777999c919b478bc736f4a444c65381">SDL_SetWindowMouseGrab()</link> </para>

<para><link linkend="__s_d_l__video_8h_1a0b6910b5d5aa2df0aeda257e445a472e">SDL_SetWindowIcon()</link> </para>

<para><link linkend="__s_d_l__video_8h_1ab200a53e01ddc697fd6b8e017cc4e6dd">SDL_SetWindowPosition()</link> </para>

<para><link linkend="__s_d_l__video_8h_1a29b118c6932ccb94d85b5435ae1e0a19">SDL_SetWindowSize()</link> </para>

<para><link linkend="__s_d_l__video_8h_1afb4b868e2cc0107ed6bcf5ba7aa376e0">SDL_SetWindowBordered()</link> </para>

<para><link linkend="__s_d_l__video_8h_1a42d2451050ae01aaf2974344b9d4a812">SDL_SetWindowResizable()</link> </para>

<para><link linkend="__s_d_l__video_8h_1a41aabc4b68f75f41d97995e02eb9deb6">SDL_SetWindowTitle()</link> </para>

<para><link linkend="__s_d_l__video_8h_1a6051ce26885b32b80bc7285b4facd0a1">SDL_ShowWindow()</link> </para>
</formalpara>
</para>
</section>
</section>
<section>
<title>Enumeration Type Documentation</title>
<anchor xml:id="__s_d_l__video_8h_1ad671b39d95c255af51db93cb54512ffc"/><section>
    <title>SDL_DisplayEventID</title>
<indexterm><primary>SDL_DisplayEventID</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_DisplayEventID</secondary></indexterm>
<para><computeroutput>enum <link linkend="__s_d_l__video_8h_1ad671b39d95c255af51db93cb54512ffc">SDL_DisplayEventID</link></computeroutput></para><para>

<para>Event subtype for display events. </para>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>SDL_DISPLAYEVENT_NONE</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_DISPLAYEVENT_NONE</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1ad671b39d95c255af51db93cb54512ffca0f22fc5951aac829337807e4238110e5"/>SDL_DISPLAYEVENT_NONE</entry><entry>
<para>Never used </para>
</entry></row><row><entry><indexterm><primary>SDL_DISPLAYEVENT_ORIENTATION</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_DISPLAYEVENT_ORIENTATION</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1ad671b39d95c255af51db93cb54512ffca79af38ade27966e9e53476f5d3755f04"/>SDL_DISPLAYEVENT_ORIENTATION</entry><entry>
<para>Display orientation has changed to data1 </para>
</entry></row><row><entry><indexterm><primary>SDL_DISPLAYEVENT_CONNECTED</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_DISPLAYEVENT_CONNECTED</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1ad671b39d95c255af51db93cb54512ffcaf5929ccf80049ecabbd5e50f2fc8485b"/>SDL_DISPLAYEVENT_CONNECTED</entry><entry>
<para>Display has been added to the system </para>
</entry></row><row><entry><indexterm><primary>SDL_DISPLAYEVENT_DISCONNECTED</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_DISPLAYEVENT_DISCONNECTED</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1ad671b39d95c255af51db93cb54512ffcaeeb05c4066d71e3d5fc4774879d7540d"/>SDL_DISPLAYEVENT_DISCONNECTED</entry><entry>
<para>Display has been removed from the system </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
</section>
<anchor xml:id="__s_d_l__video_8h_1af2b86ebfae9cd2f87ea6c18dd109dbde"/><section>
    <title>SDL_DisplayOrientation</title>
<indexterm><primary>SDL_DisplayOrientation</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_DisplayOrientation</secondary></indexterm>
<para><computeroutput>enum <link linkend="__s_d_l__video_8h_1af2b86ebfae9cd2f87ea6c18dd109dbde">SDL_DisplayOrientation</link></computeroutput></para><para>

<para>Display orientation. </para>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>SDL_ORIENTATION_UNKNOWN</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_ORIENTATION_UNKNOWN</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1af2b86ebfae9cd2f87ea6c18dd109dbdeacb20982c4f82c7271a66a76b98eda731"/>SDL_ORIENTATION_UNKNOWN</entry><entry>
<para>The display orientation can&apos;t be determined </para>
</entry></row><row><entry><indexterm><primary>SDL_ORIENTATION_LANDSCAPE</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_ORIENTATION_LANDSCAPE</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1af2b86ebfae9cd2f87ea6c18dd109dbdea5b1e627bf8f8be31d62292681f42694b"/>SDL_ORIENTATION_LANDSCAPE</entry><entry>
<para>The display is in landscape mode, with the right side up, relative to portrait mode </para>
</entry></row><row><entry><indexterm><primary>SDL_ORIENTATION_LANDSCAPE_FLIPPED</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_ORIENTATION_LANDSCAPE_FLIPPED</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1af2b86ebfae9cd2f87ea6c18dd109dbdea6cd1294f411220564276f85c32616c6a"/>SDL_ORIENTATION_LANDSCAPE_FLIPPED</entry><entry>
<para>The display is in landscape mode, with the left side up, relative to portrait mode </para>
</entry></row><row><entry><indexterm><primary>SDL_ORIENTATION_PORTRAIT</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_ORIENTATION_PORTRAIT</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1af2b86ebfae9cd2f87ea6c18dd109dbdea5fb622ac90f47a799d7d7f660d7c860b"/>SDL_ORIENTATION_PORTRAIT</entry><entry>
<para>The display is in portrait mode </para>
</entry></row><row><entry><indexterm><primary>SDL_ORIENTATION_PORTRAIT_FLIPPED</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_ORIENTATION_PORTRAIT_FLIPPED</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1af2b86ebfae9cd2f87ea6c18dd109dbdea66727ec5e93a1112a254b4d3b8e867db"/>SDL_ORIENTATION_PORTRAIT_FLIPPED</entry><entry>
<para>The display is in portrait mode, upside down </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
</section>
<anchor xml:id="__s_d_l__video_8h_1a32391ac4af019aac0e487845adb5baaf"/><section>
    <title>SDL_FlashOperation</title>
<indexterm><primary>SDL_FlashOperation</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_FlashOperation</secondary></indexterm>
<para><computeroutput>enum <link linkend="__s_d_l__video_8h_1a32391ac4af019aac0e487845adb5baaf">SDL_FlashOperation</link></computeroutput></para><para>

<para>Window flash operation. </para>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>SDL_FLASH_CANCEL</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_FLASH_CANCEL</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1a32391ac4af019aac0e487845adb5baafa9164bc961f90c240d737dfa4e5877080"/>SDL_FLASH_CANCEL</entry><entry>
<para>Cancel any window flash state </para>
</entry></row><row><entry><indexterm><primary>SDL_FLASH_BRIEFLY</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_FLASH_BRIEFLY</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1a32391ac4af019aac0e487845adb5baafa337fa7e6aa90ea2873d0243b2654aae4"/>SDL_FLASH_BRIEFLY</entry><entry>
<para>Flash the window briefly to get attention </para>
</entry></row><row><entry><indexterm><primary>SDL_FLASH_UNTIL_FOCUSED</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_FLASH_UNTIL_FOCUSED</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1a32391ac4af019aac0e487845adb5baafa000ab7f97a52e7bbf062ef847ba6556f"/>SDL_FLASH_UNTIL_FOCUSED</entry><entry>
<para>Flash the window until it gets focus </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
</section>
<anchor xml:id="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4"/><section>
    <title>SDL_GLattr</title>
<indexterm><primary>SDL_GLattr</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GLattr</secondary></indexterm>
<para><computeroutput>enum <link linkend="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4">SDL_GLattr</link></computeroutput></para><para>

<para>OpenGL configuration attributes. </para>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>SDL_GL_RED_SIZE</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GL_RED_SIZE</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4ab91e9b7978b6d2c62291b9d7e88a1903"/>SDL_GL_RED_SIZE</entry><entry></entry></row><row><entry><indexterm><primary>SDL_GL_GREEN_SIZE</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GL_GREEN_SIZE</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4af32b5125f656487de9d3c1600c6e4eb9"/>SDL_GL_GREEN_SIZE</entry><entry></entry></row><row><entry><indexterm><primary>SDL_GL_BLUE_SIZE</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GL_BLUE_SIZE</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4aa7f058249f389ebba59f5d3cb00d7806"/>SDL_GL_BLUE_SIZE</entry><entry></entry></row><row><entry><indexterm><primary>SDL_GL_ALPHA_SIZE</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GL_ALPHA_SIZE</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4abe24aa11a8007880290835e7eb07d5d7"/>SDL_GL_ALPHA_SIZE</entry><entry></entry></row><row><entry><indexterm><primary>SDL_GL_BUFFER_SIZE</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GL_BUFFER_SIZE</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4ac41c21ee24979f52471afd0712ee08c4"/>SDL_GL_BUFFER_SIZE</entry><entry></entry></row><row><entry><indexterm><primary>SDL_GL_DOUBLEBUFFER</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GL_DOUBLEBUFFER</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4a28c3841afe3b66ab86a267bf5d0a28e0"/>SDL_GL_DOUBLEBUFFER</entry><entry></entry></row><row><entry><indexterm><primary>SDL_GL_DEPTH_SIZE</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GL_DEPTH_SIZE</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4addf8f9d5c6d217954b14ece543dcbf17"/>SDL_GL_DEPTH_SIZE</entry><entry></entry></row><row><entry><indexterm><primary>SDL_GL_STENCIL_SIZE</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GL_STENCIL_SIZE</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4a29dc7e9872be52f3327a452b6875c102"/>SDL_GL_STENCIL_SIZE</entry><entry></entry></row><row><entry><indexterm><primary>SDL_GL_ACCUM_RED_SIZE</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GL_ACCUM_RED_SIZE</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4ae43ed10c33a2cc5b98a8c3d71e94ba43"/>SDL_GL_ACCUM_RED_SIZE</entry><entry></entry></row><row><entry><indexterm><primary>SDL_GL_ACCUM_GREEN_SIZE</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GL_ACCUM_GREEN_SIZE</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4a901dce8f81e72cd6c0efa1f32ac96c2d"/>SDL_GL_ACCUM_GREEN_SIZE</entry><entry></entry></row><row><entry><indexterm><primary>SDL_GL_ACCUM_BLUE_SIZE</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GL_ACCUM_BLUE_SIZE</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4acc5dc0cb2c0e9e16d64dbdbde177d775"/>SDL_GL_ACCUM_BLUE_SIZE</entry><entry></entry></row><row><entry><indexterm><primary>SDL_GL_ACCUM_ALPHA_SIZE</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GL_ACCUM_ALPHA_SIZE</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4a4c35a77fa9c78ac60997b3c15e158b2e"/>SDL_GL_ACCUM_ALPHA_SIZE</entry><entry></entry></row><row><entry><indexterm><primary>SDL_GL_STEREO</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GL_STEREO</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4a7d51f1f66a480883c5e7a7d58f668d72"/>SDL_GL_STEREO</entry><entry></entry></row><row><entry><indexterm><primary>SDL_GL_MULTISAMPLEBUFFERS</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GL_MULTISAMPLEBUFFERS</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4a83d7d3086480baed28bed6be4dadc8bf"/>SDL_GL_MULTISAMPLEBUFFERS</entry><entry></entry></row><row><entry><indexterm><primary>SDL_GL_MULTISAMPLESAMPLES</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GL_MULTISAMPLESAMPLES</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4a54761551da12a1de15e2f844c70d19ad"/>SDL_GL_MULTISAMPLESAMPLES</entry><entry></entry></row><row><entry><indexterm><primary>SDL_GL_ACCELERATED_VISUAL</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GL_ACCELERATED_VISUAL</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4ac48c7a4cf9eff0fa154878988b6697db"/>SDL_GL_ACCELERATED_VISUAL</entry><entry></entry></row><row><entry><indexterm><primary>SDL_GL_RETAINED_BACKING</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GL_RETAINED_BACKING</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4ab2409f43111e32a7233602976d8fb588"/>SDL_GL_RETAINED_BACKING</entry><entry></entry></row><row><entry><indexterm><primary>SDL_GL_CONTEXT_MAJOR_VERSION</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GL_CONTEXT_MAJOR_VERSION</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4a3102858c17eea157bdfcd245695fe0e8"/>SDL_GL_CONTEXT_MAJOR_VERSION</entry><entry></entry></row><row><entry><indexterm><primary>SDL_GL_CONTEXT_MINOR_VERSION</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GL_CONTEXT_MINOR_VERSION</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4a5aa38fec236a59f29def7cbc26e0a459"/>SDL_GL_CONTEXT_MINOR_VERSION</entry><entry></entry></row><row><entry><indexterm><primary>SDL_GL_CONTEXT_EGL</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GL_CONTEXT_EGL</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4a40f4b0ae113a8f384490d685f9d48de8"/>SDL_GL_CONTEXT_EGL</entry><entry></entry></row><row><entry><indexterm><primary>SDL_GL_CONTEXT_FLAGS</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GL_CONTEXT_FLAGS</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4aec49ddd5d7f32394faa0bd9bf119657c"/>SDL_GL_CONTEXT_FLAGS</entry><entry></entry></row><row><entry><indexterm><primary>SDL_GL_CONTEXT_PROFILE_MASK</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GL_CONTEXT_PROFILE_MASK</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4aec99ff71cb16785eb431311c59bd97e0"/>SDL_GL_CONTEXT_PROFILE_MASK</entry><entry></entry></row><row><entry><indexterm><primary>SDL_GL_SHARE_WITH_CURRENT_CONTEXT</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GL_SHARE_WITH_CURRENT_CONTEXT</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4ab162bed722047d9cd09b984a5c7e1277"/>SDL_GL_SHARE_WITH_CURRENT_CONTEXT</entry><entry></entry></row><row><entry><indexterm><primary>SDL_GL_FRAMEBUFFER_SRGB_CAPABLE</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GL_FRAMEBUFFER_SRGB_CAPABLE</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4a1c7c3def7beea2c0aa8794d9da5003f4"/>SDL_GL_FRAMEBUFFER_SRGB_CAPABLE</entry><entry></entry></row><row><entry><indexterm><primary>SDL_GL_CONTEXT_RELEASE_BEHAVIOR</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GL_CONTEXT_RELEASE_BEHAVIOR</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4a1ff3378ded0143863f908062afd0c17b"/>SDL_GL_CONTEXT_RELEASE_BEHAVIOR</entry><entry></entry></row><row><entry><indexterm><primary>SDL_GL_CONTEXT_RESET_NOTIFICATION</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GL_CONTEXT_RESET_NOTIFICATION</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4a3822f24741078433542b649fac5eddb7"/>SDL_GL_CONTEXT_RESET_NOTIFICATION</entry><entry></entry></row><row><entry><indexterm><primary>SDL_GL_CONTEXT_NO_ERROR</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GL_CONTEXT_NO_ERROR</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4aee607d4cdab39620c3dcc6e108b62a73"/>SDL_GL_CONTEXT_NO_ERROR</entry><entry></entry></row>    </tbody>
    </tgroup>
</informaltable>
</section>
<anchor xml:id="__s_d_l__video_8h_1abd0baef2bdd92997a9436f5b62b18f5d"/><section>
    <title>SDL_GLcontextFlag</title>
<indexterm><primary>SDL_GLcontextFlag</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GLcontextFlag</secondary></indexterm>
<para><computeroutput>enum <link linkend="__s_d_l__video_8h_1abd0baef2bdd92997a9436f5b62b18f5d">SDL_GLcontextFlag</link></computeroutput></para><informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>SDL_GL_CONTEXT_DEBUG_FLAG</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GL_CONTEXT_DEBUG_FLAG</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1abd0baef2bdd92997a9436f5b62b18f5daf47902af7f161e63161b2b2489072173"/>SDL_GL_CONTEXT_DEBUG_FLAG</entry><entry></entry></row><row><entry><indexterm><primary>SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1abd0baef2bdd92997a9436f5b62b18f5da127c5bc8035c20dabeb006d98a8da63e"/>SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG</entry><entry></entry></row><row><entry><indexterm><primary>SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1abd0baef2bdd92997a9436f5b62b18f5dac25c11305e0eb9f5e047529bd5ce3b5d"/>SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG</entry><entry></entry></row><row><entry><indexterm><primary>SDL_GL_CONTEXT_RESET_ISOLATION_FLAG</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GL_CONTEXT_RESET_ISOLATION_FLAG</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1abd0baef2bdd92997a9436f5b62b18f5da8f39abd1936a704f37ba8162e02bbb25"/>SDL_GL_CONTEXT_RESET_ISOLATION_FLAG</entry><entry></entry></row>    </tbody>
    </tgroup>
</informaltable>
</section>
<anchor xml:id="__s_d_l__video_8h_1a9a34b07d44a580ac7216b6c842663aed"/><section>
    <title>SDL_GLcontextReleaseFlag</title>
<indexterm><primary>SDL_GLcontextReleaseFlag</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GLcontextReleaseFlag</secondary></indexterm>
<para><computeroutput>enum <link linkend="__s_d_l__video_8h_1a9a34b07d44a580ac7216b6c842663aed">SDL_GLcontextReleaseFlag</link></computeroutput></para><informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1a9a34b07d44a580ac7216b6c842663aeda7f6f5f576fc1fa56dcb6e8d30f4d1941"/>SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE</entry><entry></entry></row><row><entry><indexterm><primary>SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1a9a34b07d44a580ac7216b6c842663aedab0f0d7285f42906890a1cfc3d5240ebe"/>SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH</entry><entry></entry></row>    </tbody>
    </tgroup>
</informaltable>
</section>
<anchor xml:id="__s_d_l__video_8h_1af68cd1e823f43af61bbeb1701c641375"/><section>
    <title>SDL_GLContextResetNotification</title>
<indexterm><primary>SDL_GLContextResetNotification</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GLContextResetNotification</secondary></indexterm>
<para><computeroutput>enum <link linkend="__s_d_l__video_8h_1af68cd1e823f43af61bbeb1701c641375">SDL_GLContextResetNotification</link></computeroutput></para><informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>SDL_GL_CONTEXT_RESET_NO_NOTIFICATION</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GL_CONTEXT_RESET_NO_NOTIFICATION</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1af68cd1e823f43af61bbeb1701c641375a9395326b54fec0667f99e5c081eb8bf7"/>SDL_GL_CONTEXT_RESET_NO_NOTIFICATION</entry><entry></entry></row><row><entry><indexterm><primary>SDL_GL_CONTEXT_RESET_LOSE_CONTEXT</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GL_CONTEXT_RESET_LOSE_CONTEXT</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1af68cd1e823f43af61bbeb1701c641375a9d8b7f4f987dfe5c7f6e2ae4227a41f4"/>SDL_GL_CONTEXT_RESET_LOSE_CONTEXT</entry><entry></entry></row>    </tbody>
    </tgroup>
</informaltable>
</section>
<anchor xml:id="__s_d_l__video_8h_1ad5ea1835b83fe139bcc182c3326d7a5f"/><section>
    <title>SDL_GLprofile</title>
<indexterm><primary>SDL_GLprofile</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GLprofile</secondary></indexterm>
<para><computeroutput>enum <link linkend="__s_d_l__video_8h_1ad5ea1835b83fe139bcc182c3326d7a5f">SDL_GLprofile</link></computeroutput></para><informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>SDL_GL_CONTEXT_PROFILE_CORE</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GL_CONTEXT_PROFILE_CORE</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1ad5ea1835b83fe139bcc182c3326d7a5fa7fae54c64a26a0e2a8dac6d47a1c510a"/>SDL_GL_CONTEXT_PROFILE_CORE</entry><entry></entry></row><row><entry><indexterm><primary>SDL_GL_CONTEXT_PROFILE_COMPATIBILITY</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GL_CONTEXT_PROFILE_COMPATIBILITY</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1ad5ea1835b83fe139bcc182c3326d7a5fa6db21ad6da230fb961fe0190a9e3398f"/>SDL_GL_CONTEXT_PROFILE_COMPATIBILITY</entry><entry></entry></row><row><entry><indexterm><primary>SDL_GL_CONTEXT_PROFILE_ES</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GL_CONTEXT_PROFILE_ES</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1ad5ea1835b83fe139bcc182c3326d7a5fa721fa797743fb228d804532cab8b8faa"/>SDL_GL_CONTEXT_PROFILE_ES</entry><entry>
<para>GLX_CONTEXT_ES2_PROFILE_BIT_EXT </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
</section>
<anchor xml:id="__s_d_l__video_8h_1a0415a108581752b68c6aca800ff3bad5"/><section>
    <title>SDL_HitTestResult</title>
<indexterm><primary>SDL_HitTestResult</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_HitTestResult</secondary></indexterm>
<para><computeroutput>enum <link linkend="__s_d_l__video_8h_1a0415a108581752b68c6aca800ff3bad5">SDL_HitTestResult</link></computeroutput></para>
<para>Possible return values from the SDL_HitTest callback.</para>

<para><formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a247c7fd43bb60b20630945a5bd9e4957">SDL_HitTest</link> </para>
</formalpara>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>SDL_HITTEST_NORMAL</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_HITTEST_NORMAL</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1a0415a108581752b68c6aca800ff3bad5a3eb7be45c88e40366315d453f3bf721e"/>SDL_HITTEST_NORMAL</entry><entry>
<para>Region is normal. No special properties. </para>
</entry></row><row><entry><indexterm><primary>SDL_HITTEST_DRAGGABLE</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_HITTEST_DRAGGABLE</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1a0415a108581752b68c6aca800ff3bad5a078a028af8c26848cf3576bd0c4d8fc9"/>SDL_HITTEST_DRAGGABLE</entry><entry>
<para>Region can drag entire window. </para>
</entry></row><row><entry><indexterm><primary>SDL_HITTEST_RESIZE_TOPLEFT</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_HITTEST_RESIZE_TOPLEFT</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1a0415a108581752b68c6aca800ff3bad5acbfbe2bde22d4fdce5b19f327fd26798"/>SDL_HITTEST_RESIZE_TOPLEFT</entry><entry></entry></row><row><entry><indexterm><primary>SDL_HITTEST_RESIZE_TOP</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_HITTEST_RESIZE_TOP</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1a0415a108581752b68c6aca800ff3bad5a19edd2ad7c4f276d13a21aaf61672fcd"/>SDL_HITTEST_RESIZE_TOP</entry><entry></entry></row><row><entry><indexterm><primary>SDL_HITTEST_RESIZE_TOPRIGHT</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_HITTEST_RESIZE_TOPRIGHT</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1a0415a108581752b68c6aca800ff3bad5a2119a0469719b69f16a1f35ab810aff3"/>SDL_HITTEST_RESIZE_TOPRIGHT</entry><entry></entry></row><row><entry><indexterm><primary>SDL_HITTEST_RESIZE_RIGHT</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_HITTEST_RESIZE_RIGHT</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1a0415a108581752b68c6aca800ff3bad5ac8c0e2ed653a7b69243e317867d8ac42"/>SDL_HITTEST_RESIZE_RIGHT</entry><entry></entry></row><row><entry><indexterm><primary>SDL_HITTEST_RESIZE_BOTTOMRIGHT</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_HITTEST_RESIZE_BOTTOMRIGHT</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1a0415a108581752b68c6aca800ff3bad5a7be4783a68f0c51166dbd289d9a42c51"/>SDL_HITTEST_RESIZE_BOTTOMRIGHT</entry><entry></entry></row><row><entry><indexterm><primary>SDL_HITTEST_RESIZE_BOTTOM</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_HITTEST_RESIZE_BOTTOM</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1a0415a108581752b68c6aca800ff3bad5a689ac09305aee5ee819aa39625f848db"/>SDL_HITTEST_RESIZE_BOTTOM</entry><entry></entry></row><row><entry><indexterm><primary>SDL_HITTEST_RESIZE_BOTTOMLEFT</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_HITTEST_RESIZE_BOTTOMLEFT</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1a0415a108581752b68c6aca800ff3bad5a94f9165ed48fb13d6996eae2a83154bf"/>SDL_HITTEST_RESIZE_BOTTOMLEFT</entry><entry></entry></row><row><entry><indexterm><primary>SDL_HITTEST_RESIZE_LEFT</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_HITTEST_RESIZE_LEFT</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1a0415a108581752b68c6aca800ff3bad5a09656621305e2f938a864fc425fe0869"/>SDL_HITTEST_RESIZE_LEFT</entry><entry></entry></row>    </tbody>
    </tgroup>
</informaltable>
</section>
<anchor xml:id="__s_d_l__video_8h_1ac486b40a4860d980dbc74d0b4adf3bab"/><section>
    <title>SDL_WindowEventID</title>
<indexterm><primary>SDL_WindowEventID</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_WindowEventID</secondary></indexterm>
<para><computeroutput>enum <link linkend="__s_d_l__video_8h_1ac486b40a4860d980dbc74d0b4adf3bab">SDL_WindowEventID</link></computeroutput></para><para>

<para>Event subtype for window events. </para>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>SDL_WINDOWEVENT_NONE</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_WINDOWEVENT_NONE</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1ac486b40a4860d980dbc74d0b4adf3babaee1301eee7ad982c50cd310607f968b7"/>SDL_WINDOWEVENT_NONE</entry><entry>
<para>Never used </para>
</entry></row><row><entry><indexterm><primary>SDL_WINDOWEVENT_SHOWN</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_WINDOWEVENT_SHOWN</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1ac486b40a4860d980dbc74d0b4adf3baba5e91fe11ed6a24a377a77d024c9639d5"/>SDL_WINDOWEVENT_SHOWN</entry><entry>
<para>Window has been shown </para>
</entry></row><row><entry><indexterm><primary>SDL_WINDOWEVENT_HIDDEN</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_WINDOWEVENT_HIDDEN</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1ac486b40a4860d980dbc74d0b4adf3baba04e5bd277e03b61a6e4b577f2a3fda55"/>SDL_WINDOWEVENT_HIDDEN</entry><entry>
<para>Window has been hidden </para>
</entry></row><row><entry><indexterm><primary>SDL_WINDOWEVENT_EXPOSED</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_WINDOWEVENT_EXPOSED</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1ac486b40a4860d980dbc74d0b4adf3babac37af5c3ce56fe0956bc310821d59489"/>SDL_WINDOWEVENT_EXPOSED</entry><entry>
<para>Window has been exposed and should be redrawn </para>
</entry></row><row><entry><indexterm><primary>SDL_WINDOWEVENT_MOVED</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_WINDOWEVENT_MOVED</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1ac486b40a4860d980dbc74d0b4adf3baba64da80af7b0a58689f07c7196de23da5"/>SDL_WINDOWEVENT_MOVED</entry><entry>
<para>Window has been moved to data1, data2 </para>
</entry></row><row><entry><indexterm><primary>SDL_WINDOWEVENT_RESIZED</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_WINDOWEVENT_RESIZED</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1ac486b40a4860d980dbc74d0b4adf3baba26096363b1a5a1eccc56a00d5f61948d"/>SDL_WINDOWEVENT_RESIZED</entry><entry>
<para>Window has been resized to data1xdata2 </para>
</entry></row><row><entry><indexterm><primary>SDL_WINDOWEVENT_SIZE_CHANGED</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_WINDOWEVENT_SIZE_CHANGED</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1ac486b40a4860d980dbc74d0b4adf3baba98e76df5341be0a05c7461e32c7835f0"/>SDL_WINDOWEVENT_SIZE_CHANGED</entry><entry>
<para>The window size has changed, either as a result of an API call or through the system or user changing the window size. </para>
</entry></row><row><entry><indexterm><primary>SDL_WINDOWEVENT_MINIMIZED</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_WINDOWEVENT_MINIMIZED</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1ac486b40a4860d980dbc74d0b4adf3baba70577b21b05c509d0342a5649092928d"/>SDL_WINDOWEVENT_MINIMIZED</entry><entry>
<para>Window has been minimized </para>
</entry></row><row><entry><indexterm><primary>SDL_WINDOWEVENT_MAXIMIZED</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_WINDOWEVENT_MAXIMIZED</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1ac486b40a4860d980dbc74d0b4adf3baba83593cf9ef16d0eaeeaac19b32a86a05"/>SDL_WINDOWEVENT_MAXIMIZED</entry><entry>
<para>Window has been maximized </para>
</entry></row><row><entry><indexterm><primary>SDL_WINDOWEVENT_RESTORED</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_WINDOWEVENT_RESTORED</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1ac486b40a4860d980dbc74d0b4adf3baba9ebe8fbb15f1bf06521d6b5484de3d89"/>SDL_WINDOWEVENT_RESTORED</entry><entry>
<para>Window has been restored to normal size and position </para>
</entry></row><row><entry><indexterm><primary>SDL_WINDOWEVENT_ENTER</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_WINDOWEVENT_ENTER</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1ac486b40a4860d980dbc74d0b4adf3babac6990e7537a4cc6cc7aaabc3376b9eb5"/>SDL_WINDOWEVENT_ENTER</entry><entry>
<para>Window has gained mouse focus </para>
</entry></row><row><entry><indexterm><primary>SDL_WINDOWEVENT_LEAVE</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_WINDOWEVENT_LEAVE</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1ac486b40a4860d980dbc74d0b4adf3baba7e1afdd5cfea592a59e129419b431bd5"/>SDL_WINDOWEVENT_LEAVE</entry><entry>
<para>Window has lost mouse focus </para>
</entry></row><row><entry><indexterm><primary>SDL_WINDOWEVENT_FOCUS_GAINED</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_WINDOWEVENT_FOCUS_GAINED</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1ac486b40a4860d980dbc74d0b4adf3baba529d1b574e559ee46892024e1c2e6c92"/>SDL_WINDOWEVENT_FOCUS_GAINED</entry><entry>
<para>Window has gained keyboard focus </para>
</entry></row><row><entry><indexterm><primary>SDL_WINDOWEVENT_FOCUS_LOST</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_WINDOWEVENT_FOCUS_LOST</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1ac486b40a4860d980dbc74d0b4adf3baba239e734c6ba478fb2f694fc7cde30c31"/>SDL_WINDOWEVENT_FOCUS_LOST</entry><entry>
<para>Window has lost keyboard focus </para>
</entry></row><row><entry><indexterm><primary>SDL_WINDOWEVENT_CLOSE</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_WINDOWEVENT_CLOSE</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1ac486b40a4860d980dbc74d0b4adf3baba2483911a3a2a20dbb1c88a15ffb9a360"/>SDL_WINDOWEVENT_CLOSE</entry><entry>
<para>The window manager requests that the window be closed </para>
</entry></row><row><entry><indexterm><primary>SDL_WINDOWEVENT_TAKE_FOCUS</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_WINDOWEVENT_TAKE_FOCUS</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1ac486b40a4860d980dbc74d0b4adf3baba69ee247e6859b1d5d7dfffb7c1a99b4e"/>SDL_WINDOWEVENT_TAKE_FOCUS</entry><entry>
<para>Window is being offered a focus (should SetWindowInputFocus() on itself or a subwindow, or ignore) </para>
</entry></row><row><entry><indexterm><primary>SDL_WINDOWEVENT_HIT_TEST</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_WINDOWEVENT_HIT_TEST</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1ac486b40a4860d980dbc74d0b4adf3baba425a0e4dca5ba339eed8166248eeef8e"/>SDL_WINDOWEVENT_HIT_TEST</entry><entry>
<para>Window had a hit test that wasn&apos;t SDL_HITTEST_NORMAL. </para>
</entry></row><row><entry><indexterm><primary>SDL_WINDOWEVENT_ICCPROF_CHANGED</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_WINDOWEVENT_ICCPROF_CHANGED</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1ac486b40a4860d980dbc74d0b4adf3baba9fd10380e9447afc2a43ca1682ca8f67"/>SDL_WINDOWEVENT_ICCPROF_CHANGED</entry><entry>
<para>The ICC profile of the window&apos;s display has changed. </para>
</entry></row><row><entry><indexterm><primary>SDL_WINDOWEVENT_DISPLAY_CHANGED</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_WINDOWEVENT_DISPLAY_CHANGED</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1ac486b40a4860d980dbc74d0b4adf3baba79f1c661b605adb4390be30a4f217080"/>SDL_WINDOWEVENT_DISPLAY_CHANGED</entry><entry>
<para>Window has been moved to display data1. </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
</section>
<anchor xml:id="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18"/><section>
    <title>SDL_WindowFlags</title>
<indexterm><primary>SDL_WindowFlags</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_WindowFlags</secondary></indexterm>
<para><computeroutput>enum <link linkend="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18">SDL_WindowFlags</link></computeroutput></para><para>

<para>The flags on a window. </para>
</para>

<para><formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a4445733f04a1a9dd0e063cd4738f285f">SDL_GetWindowFlags()</link> </para>
</formalpara>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>SDL_WINDOW_FULLSCREEN</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_WINDOW_FULLSCREEN</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18ac7b8279bdf5e22a0b4a95aae3d846923"/>SDL_WINDOW_FULLSCREEN</entry><entry>
<para>fullscreen window </para>
</entry></row><row><entry><indexterm><primary>SDL_WINDOW_OPENGL</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_WINDOW_OPENGL</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18a5cf8af096f1870b0c2b12267cabd1f7a"/>SDL_WINDOW_OPENGL</entry><entry>
<para>window usable with OpenGL context </para>
</entry></row><row><entry><indexterm><primary>SDL_WINDOW_SHOWN</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_WINDOW_SHOWN</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18a4300d051290adcb71c1b5e82e2553c4d"/>SDL_WINDOW_SHOWN</entry><entry>
<para>window is visible </para>
</entry></row><row><entry><indexterm><primary>SDL_WINDOW_HIDDEN</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_WINDOW_HIDDEN</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18adda25e98e54964c0c2ec9ac31f5e629c"/>SDL_WINDOW_HIDDEN</entry><entry>
<para>window is not visible </para>
</entry></row><row><entry><indexterm><primary>SDL_WINDOW_BORDERLESS</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_WINDOW_BORDERLESS</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18af7baea7dc9c0e4f09b28793504b02e4c"/>SDL_WINDOW_BORDERLESS</entry><entry>
<para>no window decoration </para>
</entry></row><row><entry><indexterm><primary>SDL_WINDOW_RESIZABLE</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_WINDOW_RESIZABLE</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18aaf59a5e2f762aa2b6d2e49b0ca220fd8"/>SDL_WINDOW_RESIZABLE</entry><entry>
<para>window can be resized </para>
</entry></row><row><entry><indexterm><primary>SDL_WINDOW_MINIMIZED</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_WINDOW_MINIMIZED</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18a7f08ee26b5773412a212233ddc168c5a"/>SDL_WINDOW_MINIMIZED</entry><entry>
<para>window is minimized </para>
</entry></row><row><entry><indexterm><primary>SDL_WINDOW_MAXIMIZED</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_WINDOW_MAXIMIZED</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18acd8063a617f2ce05f694ecdbf56f811a"/>SDL_WINDOW_MAXIMIZED</entry><entry>
<para>window is maximized </para>
</entry></row><row><entry><indexterm><primary>SDL_WINDOW_MOUSE_GRABBED</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_WINDOW_MOUSE_GRABBED</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18ae0d26c938ff5e806166f5f44d2ffcf70"/>SDL_WINDOW_MOUSE_GRABBED</entry><entry>
<para>window has grabbed mouse input </para>
</entry></row><row><entry><indexterm><primary>SDL_WINDOW_INPUT_FOCUS</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_WINDOW_INPUT_FOCUS</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18afcbb682c0942bc106af1474c1d34bb53"/>SDL_WINDOW_INPUT_FOCUS</entry><entry>
<para>window has input focus </para>
</entry></row><row><entry><indexterm><primary>SDL_WINDOW_MOUSE_FOCUS</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_WINDOW_MOUSE_FOCUS</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18aa722d0955c297fc60c09b10e1679684c"/>SDL_WINDOW_MOUSE_FOCUS</entry><entry>
<para>window has mouse focus </para>
</entry></row><row><entry><indexterm><primary>SDL_WINDOW_FULLSCREEN_DESKTOP</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_WINDOW_FULLSCREEN_DESKTOP</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18abfb8eeb3dc7f1844aa55dfdee3d4d7b8"/>SDL_WINDOW_FULLSCREEN_DESKTOP</entry><entry></entry></row><row><entry><indexterm><primary>SDL_WINDOW_FOREIGN</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_WINDOW_FOREIGN</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18a1ac8e0ef2237a089cf487d7e7fcc6e23"/>SDL_WINDOW_FOREIGN</entry><entry>
<para>window not created by SDL </para>
</entry></row><row><entry><indexterm><primary>SDL_WINDOW_ALLOW_HIGHDPI</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_WINDOW_ALLOW_HIGHDPI</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18a03ec21b04fa4e5c8cc868aa01a0c1bf3"/>SDL_WINDOW_ALLOW_HIGHDPI</entry><entry>
<para>window should be created in high-DPI mode if supported. On macOS NSHighResolutionCapable must be set true in the application&apos;s Info.plist for this to have any effect. </para>
</entry></row><row><entry><indexterm><primary>SDL_WINDOW_MOUSE_CAPTURE</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_WINDOW_MOUSE_CAPTURE</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18a4c16b51a323741bf5c492adce34e5882"/>SDL_WINDOW_MOUSE_CAPTURE</entry><entry>
<para>window has mouse captured (unrelated to MOUSE_GRABBED) </para>
</entry></row><row><entry><indexterm><primary>SDL_WINDOW_ALWAYS_ON_TOP</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_WINDOW_ALWAYS_ON_TOP</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18a318e8aee0e3fddcfe2257757c6eb3128"/>SDL_WINDOW_ALWAYS_ON_TOP</entry><entry>
<para>window should always be above others </para>
</entry></row><row><entry><indexterm><primary>SDL_WINDOW_SKIP_TASKBAR</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_WINDOW_SKIP_TASKBAR</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18a4bd52941a63adc993271579d52fb6641"/>SDL_WINDOW_SKIP_TASKBAR</entry><entry>
<para>window should not be added to the taskbar </para>
</entry></row><row><entry><indexterm><primary>SDL_WINDOW_UTILITY</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_WINDOW_UTILITY</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18a94224404de009a2fb6856a6a69d20d85"/>SDL_WINDOW_UTILITY</entry><entry>
<para>window should be treated as a utility window </para>
</entry></row><row><entry><indexterm><primary>SDL_WINDOW_TOOLTIP</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_WINDOW_TOOLTIP</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18a226509512aeab3c2c01deb75c182adf5"/>SDL_WINDOW_TOOLTIP</entry><entry>
<para>window should be treated as a tooltip </para>
</entry></row><row><entry><indexterm><primary>SDL_WINDOW_POPUP_MENU</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_WINDOW_POPUP_MENU</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18aeb1e21d5d8ed10b5d65ab0909b5c8c0d"/>SDL_WINDOW_POPUP_MENU</entry><entry>
<para>window should be treated as a popup menu </para>
</entry></row><row><entry><indexterm><primary>SDL_WINDOW_KEYBOARD_GRABBED</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_WINDOW_KEYBOARD_GRABBED</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18ab323e087b24b6034070bbc825287cf18"/>SDL_WINDOW_KEYBOARD_GRABBED</entry><entry>
<para>window has grabbed keyboard input </para>
</entry></row><row><entry><indexterm><primary>SDL_WINDOW_VULKAN</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_WINDOW_VULKAN</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18a55d2d1e92b96050c5a9cd8280d78f26c"/>SDL_WINDOW_VULKAN</entry><entry>
<para>window usable for Vulkan surface </para>
</entry></row><row><entry><indexterm><primary>SDL_WINDOW_METAL</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_WINDOW_METAL</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18ad63da27122aeaa0c8986dbb7014ce76d"/>SDL_WINDOW_METAL</entry><entry>
<para>window usable for Metal view </para>
</entry></row><row><entry><indexterm><primary>SDL_WINDOW_INPUT_GRABBED</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_WINDOW_INPUT_GRABBED</secondary></indexterm>
<anchor xml:id="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18aaf410e1082e45a55ef9176163610dba2"/>SDL_WINDOW_INPUT_GRABBED</entry><entry>
<para>equivalent to SDL_WINDOW_MOUSE_GRABBED for compatibility </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="__s_d_l__video_8h_1a841edb930dc7cb2c1ec64f831d3abba6"/><section>
    <title>SDL_CreateWindow()</title>
<indexterm><primary>SDL_CreateWindow</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_CreateWindow</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_CreateWindow (const char * title, int x, int y, int w, int h, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> flags)</computeroutput></para>
<para>Create a window with the specified position, dimensions, and flags.</para>

<para><computeroutput>flags</computeroutput> may be any of the following OR&apos;d together:</para>

<para><itemizedlist>
<listitem>
<para><computeroutput>SDL_WINDOW_FULLSCREEN</computeroutput>: fullscreen window</para>
</listitem><listitem>
<para><computeroutput>SDL_WINDOW_FULLSCREEN_DESKTOP</computeroutput>: fullscreen window at desktop resolution</para>
</listitem><listitem>
<para><computeroutput>SDL_WINDOW_OPENGL</computeroutput>: window usable with an OpenGL context</para>
</listitem><listitem>
<para><computeroutput>SDL_WINDOW_VULKAN</computeroutput>: window usable with a Vulkan instance</para>
</listitem><listitem>
<para><computeroutput>SDL_WINDOW_METAL</computeroutput>: window usable with a Metal instance</para>
</listitem><listitem>
<para><computeroutput>SDL_WINDOW_HIDDEN</computeroutput>: window is not visible</para>
</listitem><listitem>
<para><computeroutput>SDL_WINDOW_BORDERLESS</computeroutput>: no window decoration</para>
</listitem><listitem>
<para><computeroutput>SDL_WINDOW_RESIZABLE</computeroutput>: window can be resized</para>
</listitem><listitem>
<para><computeroutput>SDL_WINDOW_MINIMIZED</computeroutput>: window is minimized</para>
</listitem><listitem>
<para><computeroutput>SDL_WINDOW_MAXIMIZED</computeroutput>: window is maximized</para>
</listitem><listitem>
<para><computeroutput>SDL_WINDOW_INPUT_GRABBED</computeroutput>: window has grabbed input focus</para>
</listitem><listitem>
<para><computeroutput>SDL_WINDOW_ALLOW_HIGHDPI</computeroutput>: window should be created in high-DPI mode if supported (&gt;= SDL 2.0.1)</para>
</listitem></itemizedlist>
</para>

<para><computeroutput>SDL_WINDOW_SHOWN</computeroutput> is ignored by <link linkend="__s_d_l__video_8h_1a841edb930dc7cb2c1ec64f831d3abba6">SDL_CreateWindow()</link>. The SDL_Window is implicitly shown if SDL_WINDOW_HIDDEN is not set. <computeroutput>SDL_WINDOW_SHOWN</computeroutput> may be queried later using <link linkend="__s_d_l__video_8h_1a4445733f04a1a9dd0e063cd4738f285f">SDL_GetWindowFlags()</link>.</para>

<para>On Apple&apos;s macOS, you <emphasis role="bold">must</emphasis> set the NSHighResolutionCapable Info.plist property to YES, otherwise you will not receive a High-DPI OpenGL canvas.</para>

<para>If the window is created with the <computeroutput>SDL_WINDOW_ALLOW_HIGHDPI</computeroutput> flag, its size in pixels may differ from its size in screen coordinates on platforms with high-DPI support (e.g. iOS and macOS). Use <link linkend="__s_d_l__video_8h_1a5cbfffcfec91c22a7ca95fd1d5163db5">SDL_GetWindowSize()</link> to query the client area&apos;s size in screen coordinates, and <link linkend="__s_d_l__video_8h_1ac21851bbd91760c5bab92594a58edba3">SDL_GL_GetDrawableSize()</link> or <link linkend="__s_d_l__render_8h_1abfc0c9a50d9d1870ab7d271b7a73d8ab">SDL_GetRendererOutputSize()</link> to query the drawable size in pixels.</para>

<para>If the window is set fullscreen, the width and height parameters <computeroutput>w</computeroutput> and <computeroutput>h</computeroutput> will not be used. However, invalid size parameters (e.g. too large) may still fail. Window size is actually limited to 16384 x 16384 for all platforms at window creation.</para>

<para>If the window is created with any of the SDL_WINDOW_OPENGL or SDL_WINDOW_VULKAN flags, then the corresponding LoadLibrary function (SDL_GL_LoadLibrary or SDL_Vulkan_LoadLibrary) is called and the corresponding UnloadLibrary function is called by <link linkend="__s_d_l__video_8h_1a72609295a4faee0587268339ccff80c2">SDL_DestroyWindow()</link>.</para>

<para>If SDL_WINDOW_VULKAN is specified and there isn&apos;t a working Vulkan driver, <link linkend="__s_d_l__video_8h_1a841edb930dc7cb2c1ec64f831d3abba6">SDL_CreateWindow()</link> will fail because <link linkend="__s_d_l__vulkan_8h_1a9fcc0942c8eaa67c3eff2e3526304b5b">SDL_Vulkan_LoadLibrary()</link> will fail.</para>

<para>If SDL_WINDOW_METAL is specified on an OS that does not support Metal, <link linkend="__s_d_l__video_8h_1a841edb930dc7cb2c1ec64f831d3abba6">SDL_CreateWindow()</link> will fail.</para>

<para>On non-Apple devices, SDL requires you to either not link to the Vulkan loader or link to a dynamic library version. This limitation may be removed in a future version of SDL.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>title</entry><entry>
<para>the title of the window, in UTF-8 encoding </para>
</entry>
                            </row>
                            <row>
<entry>x</entry><entry>
<para>the x position of the window, <computeroutput>SDL_WINDOWPOS_CENTERED</computeroutput>, or <computeroutput>SDL_WINDOWPOS_UNDEFINED</computeroutput> </para>
</entry>
                            </row>
                            <row>
<entry>y</entry><entry>
<para>the y position of the window, <computeroutput>SDL_WINDOWPOS_CENTERED</computeroutput>, or <computeroutput>SDL_WINDOWPOS_UNDEFINED</computeroutput> </para>
</entry>
                            </row>
                            <row>
<entry>w</entry><entry>
<para>the width of the window, in screen coordinates </para>
</entry>
                            </row>
                            <row>
<entry>h</entry><entry>
<para>the height of the window, in screen coordinates </para>
</entry>
                            </row>
                            <row>
<entry>flags</entry><entry>
<para>0, or one or more SDL_WindowFlags OR&apos;d together </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>the window that was created or NULL on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1aa5ba5ca928613b022e9872dc19197f6e">SDL_CreateWindowFrom</link> </para>

<para><link linkend="__s_d_l__video_8h_1a72609295a4faee0587268339ccff80c2">SDL_DestroyWindow</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1aa5ba5ca928613b022e9872dc19197f6e"/><section>
    <title>SDL_CreateWindowFrom()</title>
<indexterm><primary>SDL_CreateWindowFrom</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_CreateWindowFrom</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_CreateWindowFrom (const <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> * data)</computeroutput></para>
<para>Create an SDL window from an existing native window.</para>

<para>In some cases (e.g. OpenGL) and on some platforms (e.g. Microsoft Windows) the hint <computeroutput>SDL_HINT_VIDEO_WINDOW_SHARE_PIXEL_FORMAT</computeroutput> needs to be configured before using <link linkend="__s_d_l__video_8h_1aa5ba5ca928613b022e9872dc19197f6e">SDL_CreateWindowFrom()</link>.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>data</entry><entry>
<para>a pointer to driver-dependent window creation data, typically your native window cast to a void* </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>the window that was created or NULL on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a841edb930dc7cb2c1ec64f831d3abba6">SDL_CreateWindow</link> </para>

<para><link linkend="__s_d_l__video_8h_1a72609295a4faee0587268339ccff80c2">SDL_DestroyWindow</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a72609295a4faee0587268339ccff80c2"/><section>
    <title>SDL_DestroyWindow()</title>
<indexterm><primary>SDL_DestroyWindow</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_DestroyWindow</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_DestroyWindow (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window)</computeroutput></para>
<para>Destroy a window.</para>

<para>If <computeroutput>window</computeroutput> is NULL, this function will return immediately after setting the SDL error message to &quot;Invalid window&quot;. See <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link>.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>the window to destroy</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a841edb930dc7cb2c1ec64f831d3abba6">SDL_CreateWindow</link> </para>

<para><link linkend="__s_d_l__video_8h_1aa5ba5ca928613b022e9872dc19197f6e">SDL_CreateWindowFrom</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a68eb0d850934fa1c7ac12c30f2d56a84"/><section>
    <title>SDL_DisableScreenSaver()</title>
<indexterm><primary>SDL_DisableScreenSaver</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_DisableScreenSaver</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_DisableScreenSaver (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> )</computeroutput></para>
<para>Prevent the screen from being blanked by a screen saver.</para>

<para>If you disable the screensaver, it is automatically re-enabled when SDL quits.</para>

<para><formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a17846c713066aa29a86e1be205a7fc3e">SDL_EnableScreenSaver</link> </para>

<para><link linkend="__s_d_l__video_8h_1a4b5c116d57947bf508c13b21aac49cbf">SDL_IsScreenSaverEnabled</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a17846c713066aa29a86e1be205a7fc3e"/><section>
    <title>SDL_EnableScreenSaver()</title>
<indexterm><primary>SDL_EnableScreenSaver</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_EnableScreenSaver</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_EnableScreenSaver (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> )</computeroutput></para>
<para>Allow the screen to be blanked by a screen saver.</para>

<para><formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a68eb0d850934fa1c7ac12c30f2d56a84">SDL_DisableScreenSaver</link> </para>

<para><link linkend="__s_d_l__video_8h_1a4b5c116d57947bf508c13b21aac49cbf">SDL_IsScreenSaverEnabled</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a20c2c00579bb4b1fa6c15124621bbc6e"/><section>
    <title>SDL_FlashWindow()</title>
<indexterm><primary>SDL_FlashWindow</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_FlashWindow</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_FlashWindow (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window, <link linkend="__s_d_l__video_8h_1a32391ac4af019aac0e487845adb5baaf">SDL_FlashOperation</link> operation)</computeroutput></para>
<para>Request a window to demand attention from the user.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>the window to be flashed </para>
</entry>
                            </row>
                            <row>
<entry>operation</entry><entry>
<para>the flash operation </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.16. </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a912994189211554bdd0b264e3f6d8e9f"/><section>
    <title>SDL_GetClosestDisplayMode()</title>
<indexterm><primary>SDL_GetClosestDisplayMode</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GetClosestDisplayMode</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="_struct_s_d_l___display_mode">SDL_DisplayMode</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetClosestDisplayMode (int displayIndex, const <link linkend="_struct_s_d_l___display_mode">SDL_DisplayMode</link> * mode, <link linkend="_struct_s_d_l___display_mode">SDL_DisplayMode</link> * closest)</computeroutput></para>
<para>Get the closest match to the requested display mode.</para>

<para>The available display modes are scanned and <computeroutput>closest</computeroutput> is filled in with the closest mode matching the requested mode and returned. The mode format and refresh rate default to the desktop mode if they are set to 0. The modes are scanned with size being first priority, format being second priority, and finally checking the refresh rate. If all the available modes are too small, then NULL is returned.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>displayIndex</entry><entry>
<para>the index of the display to query </para>
</entry>
                            </row>
                            <row>
<entry>mode</entry><entry>
<para>an <link linkend="_struct_s_d_l___display_mode">SDL_DisplayMode</link> structure containing the desired display mode </para>
</entry>
                            </row>
                            <row>
<entry>closest</entry><entry>
<para>an <link linkend="_struct_s_d_l___display_mode">SDL_DisplayMode</link> structure filled in with the closest match of the available display modes </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>the passed in value <computeroutput>closest</computeroutput> or NULL if no matching video mode was available; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a0a53e003ec6ad24dd2bbbcd0ad297311">SDL_GetDisplayMode</link> </para>

<para><link linkend="__s_d_l__video_8h_1a5abcf18592f00019c517e791f8ba53fc">SDL_GetNumDisplayModes</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a14dce1cb33085b36f08d27b3d8f2335b"/><section>
    <title>SDL_GetCurrentDisplayMode()</title>
<indexterm><primary>SDL_GetCurrentDisplayMode</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GetCurrentDisplayMode</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetCurrentDisplayMode (int displayIndex, <link linkend="_struct_s_d_l___display_mode">SDL_DisplayMode</link> * mode)</computeroutput></para>
<para>Get information about the current display mode.</para>

<para>There&apos;s a difference between this function and <link linkend="__s_d_l__video_8h_1ab97bca68fc068a6ecc3db473c4c0defd">SDL_GetDesktopDisplayMode()</link> when SDL runs fullscreen and has changed the resolution. In that case this function will return the current display mode, and not the previous native display mode.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>displayIndex</entry><entry>
<para>the index of the display to query </para>
</entry>
                            </row>
                            <row>
<entry>mode</entry><entry>
<para>an <link linkend="_struct_s_d_l___display_mode">SDL_DisplayMode</link> structure filled in with the current display mode </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1ab97bca68fc068a6ecc3db473c4c0defd">SDL_GetDesktopDisplayMode</link> </para>

<para><link linkend="__s_d_l__video_8h_1a0a53e003ec6ad24dd2bbbcd0ad297311">SDL_GetDisplayMode</link> </para>

<para><link linkend="__s_d_l__video_8h_1a074d185b7ef04e0305acdeeb049dd2be">SDL_GetNumVideoDisplays</link> </para>

<para><link linkend="__s_d_l__video_8h_1a2ca17d1e857d1560738e002c9935088a">SDL_SetWindowDisplayMode</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1aec2f46152701003e12689dac7de79eb9"/><section>
    <title>SDL_GetCurrentVideoDriver()</title>
<indexterm><primary>SDL_GetCurrentVideoDriver</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GetCurrentVideoDriver</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> const char *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetCurrentVideoDriver (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> )</computeroutput></para>
<para>Get the name of the currently initialized video driver.</para>

<para><formalpara><title>Returns</title>

<para>the name of the current video driver or NULL if no driver has been initialized.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1ac6f3250a95bd027fd1a374d7ed15fc57">SDL_GetNumVideoDrivers</link> </para>

<para><link linkend="__s_d_l__video_8h_1ae88ab2c7515c52b180ef0238f8965b4b">SDL_GetVideoDriver</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1ab97bca68fc068a6ecc3db473c4c0defd"/><section>
    <title>SDL_GetDesktopDisplayMode()</title>
<indexterm><primary>SDL_GetDesktopDisplayMode</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GetDesktopDisplayMode</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetDesktopDisplayMode (int displayIndex, <link linkend="_struct_s_d_l___display_mode">SDL_DisplayMode</link> * mode)</computeroutput></para>
<para>Get information about the desktop&apos;s display mode.</para>

<para>There&apos;s a difference between this function and <link linkend="__s_d_l__video_8h_1a14dce1cb33085b36f08d27b3d8f2335b">SDL_GetCurrentDisplayMode()</link> when SDL runs fullscreen and has changed the resolution. In that case this function will return the previous native display mode, and not the current display mode.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>displayIndex</entry><entry>
<para>the index of the display to query </para>
</entry>
                            </row>
                            <row>
<entry>mode</entry><entry>
<para>an <link linkend="_struct_s_d_l___display_mode">SDL_DisplayMode</link> structure filled in with the current display mode </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a14dce1cb33085b36f08d27b3d8f2335b">SDL_GetCurrentDisplayMode</link> </para>

<para><link linkend="__s_d_l__video_8h_1a0a53e003ec6ad24dd2bbbcd0ad297311">SDL_GetDisplayMode</link> </para>

<para><link linkend="__s_d_l__video_8h_1a2ca17d1e857d1560738e002c9935088a">SDL_SetWindowDisplayMode</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1ac05213009395c10ae40bede2de8e08a1"/><section>
    <title>SDL_GetDisplayBounds()</title>
<indexterm><primary>SDL_GetDisplayBounds</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GetDisplayBounds</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetDisplayBounds (int displayIndex, <link linkend="_struct_s_d_l___rect">SDL_Rect</link> * rect)</computeroutput></para>
<para>Get the desktop area represented by a display.</para>

<para>The primary display (<computeroutput>displayIndex</computeroutput> zero) is always located at 0,0.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>displayIndex</entry><entry>
<para>the index of the display to query </para>
</entry>
                            </row>
                            <row>
<entry>rect</entry><entry>
<para>the <link linkend="_struct_s_d_l___rect">SDL_Rect</link> structure filled in with the display bounds </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a074d185b7ef04e0305acdeeb049dd2be">SDL_GetNumVideoDisplays</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a8207ec5d13bd87158cbb42ef76e33216"/><section>
    <title>SDL_GetDisplayDPI()</title>
<indexterm><primary>SDL_GetDisplayDPI</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GetDisplayDPI</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetDisplayDPI (int displayIndex, float * ddpi, float * hdpi, float * vdpi)</computeroutput></para>
<para>Get the dots/pixels-per-inch for a display.</para>

<para>Diagonal, horizontal and vertical DPI can all be optionally returned if the appropriate parameter is non-NULL.</para>

<para>A failure of this function usually means that either no DPI information is available or the <computeroutput>displayIndex</computeroutput> is out of range.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>displayIndex</entry><entry>
<para>the index of the display from which DPI information should be queried </para>
</entry>
                            </row>
                            <row>
<entry>ddpi</entry><entry>
<para>a pointer filled in with the diagonal DPI of the display; may be NULL </para>
</entry>
                            </row>
                            <row>
<entry>hdpi</entry><entry>
<para>a pointer filled in with the horizontal DPI of the display; may be NULL </para>
</entry>
                            </row>
                            <row>
<entry>vdpi</entry><entry>
<para>a pointer filled in with the vertical DPI of the display; may be NULL </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.4.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a074d185b7ef04e0305acdeeb049dd2be">SDL_GetNumVideoDisplays</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a0a53e003ec6ad24dd2bbbcd0ad297311"/><section>
    <title>SDL_GetDisplayMode()</title>
<indexterm><primary>SDL_GetDisplayMode</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GetDisplayMode</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetDisplayMode (int displayIndex, int modeIndex, <link linkend="_struct_s_d_l___display_mode">SDL_DisplayMode</link> * mode)</computeroutput></para>
<para>Get information about a specific display mode.</para>

<para>The display modes are sorted in this priority:</para>

<para><itemizedlist>
<listitem>
<para>width -&gt; largest to smallest</para>
</listitem><listitem>
<para>height -&gt; largest to smallest</para>
</listitem><listitem>
<para>bits per pixel -&gt; more colors to fewer colors</para>
</listitem><listitem>
<para>packed pixel layout -&gt; largest to smallest</para>
</listitem><listitem>
<para>refresh rate -&gt; highest to lowest</para>
</listitem></itemizedlist>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>displayIndex</entry><entry>
<para>the index of the display to query </para>
</entry>
                            </row>
                            <row>
<entry>modeIndex</entry><entry>
<para>the index of the display mode to query </para>
</entry>
                            </row>
                            <row>
<entry>mode</entry><entry>
<para>an <link linkend="_struct_s_d_l___display_mode">SDL_DisplayMode</link> structure filled in with the mode at <computeroutput>modeIndex</computeroutput> </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a5abcf18592f00019c517e791f8ba53fc">SDL_GetNumDisplayModes</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a3c8523dad11fceab8a8029239185529b"/><section>
    <title>SDL_GetDisplayName()</title>
<indexterm><primary>SDL_GetDisplayName</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GetDisplayName</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> const char *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetDisplayName (int displayIndex)</computeroutput></para>
<para>Get the name of a display in UTF-8 encoding.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>displayIndex</entry><entry>
<para>the index of display from which the name should be queried </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>the name of a display or NULL for an invalid display index or failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a074d185b7ef04e0305acdeeb049dd2be">SDL_GetNumVideoDisplays</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a6540db01a424ced1847376e583361ecb"/><section>
    <title>SDL_GetDisplayOrientation()</title>
<indexterm><primary>SDL_GetDisplayOrientation</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GetDisplayOrientation</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__video_8h_1af2b86ebfae9cd2f87ea6c18dd109dbde">SDL_DisplayOrientation</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetDisplayOrientation (int displayIndex)</computeroutput></para>
<para>Get the orientation of a display.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>displayIndex</entry><entry>
<para>the index of the display to query </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The SDL_DisplayOrientation enum value of the display, or <computeroutput>SDL_ORIENTATION_UNKNOWN</computeroutput> if it isn&apos;t available.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.9.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a074d185b7ef04e0305acdeeb049dd2be">SDL_GetNumVideoDisplays</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a9898f2e51cd90ace84cb0c6ea65d7051"/><section>
    <title>SDL_GetDisplayUsableBounds()</title>
<indexterm><primary>SDL_GetDisplayUsableBounds</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GetDisplayUsableBounds</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetDisplayUsableBounds (int displayIndex, <link linkend="_struct_s_d_l___rect">SDL_Rect</link> * rect)</computeroutput></para>
<para>Get the usable desktop area represented by a display.</para>

<para>The primary display (<computeroutput>displayIndex</computeroutput> zero) is always located at 0,0.</para>

<para>This is the same area as <link linkend="__s_d_l__video_8h_1ac05213009395c10ae40bede2de8e08a1">SDL_GetDisplayBounds()</link> reports, but with portions reserved by the system removed. For example, on Apple&apos;s macOS, this subtracts the area occupied by the menu bar and dock.</para>

<para>Setting a window to be fullscreen generally bypasses these unusable areas, so these are good guidelines for the maximum space available to a non-fullscreen window.</para>

<para>The parameter <computeroutput>rect</computeroutput> is ignored if it is NULL.</para>

<para>This function also returns -1 if the parameter <computeroutput>displayIndex</computeroutput> is out of range.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>displayIndex</entry><entry>
<para>the index of the display to query the usable bounds from </para>
</entry>
                            </row>
                            <row>
<entry>rect</entry><entry>
<para>the <link linkend="_struct_s_d_l___rect">SDL_Rect</link> structure filled in with the display bounds </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.5.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1ac05213009395c10ae40bede2de8e08a1">SDL_GetDisplayBounds</link> </para>

<para><link linkend="__s_d_l__video_8h_1a074d185b7ef04e0305acdeeb049dd2be">SDL_GetNumVideoDisplays</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a6d0a45787b2a383bed8ed56133b04eab"/><section>
    <title>SDL_GetGrabbedWindow()</title>
<indexterm><primary>SDL_GetGrabbedWindow</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GetGrabbedWindow</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetGrabbedWindow (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> )</computeroutput></para>
<para>Get the window that currently has an input grab enabled.</para>

<para><formalpara><title>Returns</title>

<para>the window if input is grabbed or NULL otherwise.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.4.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1ad4e451db3880b6e0dd6647cbc351c6c0">SDL_GetWindowGrab</link> </para>

<para><link linkend="__s_d_l__video_8h_1abe7fd559e9d6da046c5984dea679a89b">SDL_SetWindowGrab</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a5abcf18592f00019c517e791f8ba53fc"/><section>
    <title>SDL_GetNumDisplayModes()</title>
<indexterm><primary>SDL_GetNumDisplayModes</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GetNumDisplayModes</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetNumDisplayModes (int displayIndex)</computeroutput></para>
<para>Get the number of available display modes.</para>

<para>The <computeroutput>displayIndex</computeroutput> needs to be in the range from 0 to <link linkend="__s_d_l__video_8h_1a074d185b7ef04e0305acdeeb049dd2be">SDL_GetNumVideoDisplays()</link> - 1.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>displayIndex</entry><entry>
<para>the index of the display to query </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>a number &gt;= 1 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a0a53e003ec6ad24dd2bbbcd0ad297311">SDL_GetDisplayMode</link> </para>

<para><link linkend="__s_d_l__video_8h_1a074d185b7ef04e0305acdeeb049dd2be">SDL_GetNumVideoDisplays</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a074d185b7ef04e0305acdeeb049dd2be"/><section>
    <title>SDL_GetNumVideoDisplays()</title>
<indexterm><primary>SDL_GetNumVideoDisplays</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GetNumVideoDisplays</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetNumVideoDisplays (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> )</computeroutput></para>
<para>Get the number of available video displays.</para>

<para><formalpara><title>Returns</title>

<para>a number &gt;= 1 or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1ac05213009395c10ae40bede2de8e08a1">SDL_GetDisplayBounds</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1ac6f3250a95bd027fd1a374d7ed15fc57"/><section>
    <title>SDL_GetNumVideoDrivers()</title>
<indexterm><primary>SDL_GetNumVideoDrivers</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GetNumVideoDrivers</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetNumVideoDrivers (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> )</computeroutput></para>
<para>Get the number of video drivers compiled into SDL.</para>

<para><formalpara><title>Returns</title>

<para>a number &gt;= 1 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1ae88ab2c7515c52b180ef0238f8965b4b">SDL_GetVideoDriver</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1ae88ab2c7515c52b180ef0238f8965b4b"/><section>
    <title>SDL_GetVideoDriver()</title>
<indexterm><primary>SDL_GetVideoDriver</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GetVideoDriver</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> const char *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetVideoDriver (int index)</computeroutput></para>
<para>Get the name of a built in video driver.</para>

<para>The video drivers are presented in the order in which they are normally checked during initialization.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>index</entry><entry>
<para>the index of a video driver </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>the name of the video driver with the given <emphasis role="bold">index</emphasis>.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1ac6f3250a95bd027fd1a374d7ed15fc57">SDL_GetNumVideoDrivers</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a1f309d151c3526b1ac3a7cb9c1a231ae"/><section>
    <title>SDL_GetWindowBordersSize()</title>
<indexterm><primary>SDL_GetWindowBordersSize</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GetWindowBordersSize</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetWindowBordersSize (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window, int * top, int * left, int * bottom, int * right)</computeroutput></para>
<para>Get the size of a window&apos;s borders (decorations) around the client area.</para>

<para>Note: If this function fails (returns -1), the size values will be initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the window in question was borderless.</para>

<para>Note: This function may fail on systems where the window has not yet been decorated by the display server (for example, immediately after calling SDL_CreateWindow). It is recommended that you wait at least until the window has been presented and composited, so that the window system has a chance to decorate the window and provide the border dimensions to SDL.</para>

<para>This function also returns -1 if getting the information is not supported.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>the window to query the size values of the border (decorations) from </para>
</entry>
                            </row>
                            <row>
<entry>top</entry><entry>
<para>pointer to variable for storing the size of the top border; NULL is permitted </para>
</entry>
                            </row>
                            <row>
<entry>left</entry><entry>
<para>pointer to variable for storing the size of the left border; NULL is permitted </para>
</entry>
                            </row>
                            <row>
<entry>bottom</entry><entry>
<para>pointer to variable for storing the size of the bottom border; NULL is permitted </para>
</entry>
                            </row>
                            <row>
<entry>right</entry><entry>
<para>pointer to variable for storing the size of the right border; NULL is permitted </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.5.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a5cbfffcfec91c22a7ca95fd1d5163db5">SDL_GetWindowSize</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a21c10969331c89e8d0e6a8f998a3c319"/><section>
    <title>SDL_GetWindowBrightness()</title>
<indexterm><primary>SDL_GetWindowBrightness</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GetWindowBrightness</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> float <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetWindowBrightness (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window)</computeroutput></para>
<para>Get the brightness (gamma multiplier) for a given window&apos;s display.</para>

<para>Despite the name and signature, this method retrieves the brightness of the entire display, not an individual window. A window is considered to be owned by the display that contains the window&apos;s center pixel. (The index of this display can be retrieved using <link linkend="__s_d_l__video_8h_1a0be1d0a4d1f9a0da23b78db2f55871b5">SDL_GetWindowDisplayIndex()</link>.)</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>the window used to select the display whose brightness will be queried </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>the brightness for the display where 0.0 is completely dark and 1.0 is normal brightness.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a896972250b4d2e0f75888fa44fa792ec">SDL_SetWindowBrightness</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1ae2b358354dfad5523efadb95adc59ce4"/><section>
    <title>SDL_GetWindowData()</title>
<indexterm><primary>SDL_GetWindowData</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GetWindowData</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetWindowData (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window, const char * name)</computeroutput></para>
<para>Retrieve the data pointer associated with a window.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>the window to query </para>
</entry>
                            </row>
                            <row>
<entry>name</entry><entry>
<para>the name of the pointer </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>the value associated with <computeroutput>name</computeroutput>.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a4d2831ad431f59e3a5a5e472599f6c0a">SDL_SetWindowData</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a0be1d0a4d1f9a0da23b78db2f55871b5"/><section>
    <title>SDL_GetWindowDisplayIndex()</title>
<indexterm><primary>SDL_GetWindowDisplayIndex</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GetWindowDisplayIndex</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetWindowDisplayIndex (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window)</computeroutput></para>
<para>Get the index of the display associated with a window.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>the window to query </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>the index of the display containing the center of the window on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1ac05213009395c10ae40bede2de8e08a1">SDL_GetDisplayBounds</link> </para>

<para><link linkend="__s_d_l__video_8h_1a074d185b7ef04e0305acdeeb049dd2be">SDL_GetNumVideoDisplays</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a8185547bc7cb0bbeb400f459792d081a"/><section>
    <title>SDL_GetWindowDisplayMode()</title>
<indexterm><primary>SDL_GetWindowDisplayMode</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GetWindowDisplayMode</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetWindowDisplayMode (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window, <link linkend="_struct_s_d_l___display_mode">SDL_DisplayMode</link> * mode)</computeroutput></para>
<para>Query the display mode to use when a window is visible at fullscreen.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>the window to query </para>
</entry>
                            </row>
                            <row>
<entry>mode</entry><entry>
<para>an <link linkend="_struct_s_d_l___display_mode">SDL_DisplayMode</link> structure filled in with the fullscreen display mode </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a2ca17d1e857d1560738e002c9935088a">SDL_SetWindowDisplayMode</link> </para>

<para><link linkend="__s_d_l__video_8h_1ab4aa48f0a29f0868ce4e0422c02ed2fa">SDL_SetWindowFullscreen</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a4445733f04a1a9dd0e063cd4738f285f"/><section>
    <title>SDL_GetWindowFlags()</title>
<indexterm><primary>SDL_GetWindowFlags</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GetWindowFlags</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetWindowFlags (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window)</computeroutput></para>
<para>Get the window flags.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>the window to query </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>a mask of the SDL_WindowFlags associated with <computeroutput>window</computeroutput></para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a841edb930dc7cb2c1ec64f831d3abba6">SDL_CreateWindow</link> </para>

<para><link linkend="__s_d_l__video_8h_1aa3cbe663e0bd62aa7a747a6c11781766">SDL_HideWindow</link> </para>

<para><link linkend="__s_d_l__video_8h_1a8d969b660fee270f84cb403c8b75ded6">SDL_MaximizeWindow</link> </para>

<para><link linkend="__s_d_l__video_8h_1a9f802f6c7952552b1cb26958fad3f2a6">SDL_MinimizeWindow</link> </para>

<para><link linkend="__s_d_l__video_8h_1ab4aa48f0a29f0868ce4e0422c02ed2fa">SDL_SetWindowFullscreen</link> </para>

<para><link linkend="__s_d_l__video_8h_1abe7fd559e9d6da046c5984dea679a89b">SDL_SetWindowGrab</link> </para>

<para><link linkend="__s_d_l__video_8h_1a6051ce26885b32b80bc7285b4facd0a1">SDL_ShowWindow</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a61016989f88ade9a0f331c63fd200d78"/><section>
    <title>SDL_GetWindowFromID()</title>
<indexterm><primary>SDL_GetWindowFromID</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GetWindowFromID</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetWindowFromID (<link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> id)</computeroutput></para>
<para>Get a window from a stored ID.</para>

<para>The numeric ID is what <link linkend="_struct_s_d_l___window_event">SDL_WindowEvent</link> references, and is necessary to map these events to specific SDL_Window objects.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>id</entry><entry>
<para>the ID of the window </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>the window associated with <computeroutput>id</computeroutput> or NULL if it doesn&apos;t exist; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a1f6c1c22ced1564ffd0d54bbf9824134">SDL_GetWindowID</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1af4d647be3bb21a33586d69d5cad87ead"/><section>
    <title>SDL_GetWindowGammaRamp()</title>
<indexterm><primary>SDL_GetWindowGammaRamp</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GetWindowGammaRamp</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetWindowGammaRamp (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window, <link linkend="__s_d_l__stdinc_8h_1a31fcc0a076c9068668173ee26d33e42b">Uint16</link> * red, <link linkend="__s_d_l__stdinc_8h_1a31fcc0a076c9068668173ee26d33e42b">Uint16</link> * green, <link linkend="__s_d_l__stdinc_8h_1a31fcc0a076c9068668173ee26d33e42b">Uint16</link> * blue)</computeroutput></para>
<para>Get the gamma ramp for a given window&apos;s display.</para>

<para>Despite the name and signature, this method retrieves the gamma ramp of the entire display, not an individual window. A window is considered to be owned by the display that contains the window&apos;s center pixel. (The index of this display can be retrieved using <link linkend="__s_d_l__video_8h_1a0be1d0a4d1f9a0da23b78db2f55871b5">SDL_GetWindowDisplayIndex()</link>.)</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>the window used to select the display whose gamma ramp will be queried </para>
</entry>
                            </row>
                            <row>
<entry>red</entry><entry>
<para>a 256 element array of 16-bit quantities filled in with the translation table for the red channel, or NULL </para>
</entry>
                            </row>
                            <row>
<entry>green</entry><entry>
<para>a 256 element array of 16-bit quantities filled in with the translation table for the green channel, or NULL </para>
</entry>
                            </row>
                            <row>
<entry>blue</entry><entry>
<para>a 256 element array of 16-bit quantities filled in with the translation table for the blue channel, or NULL </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a6799acf235454f519ac209ccf14caa67">SDL_SetWindowGammaRamp</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1ad4e451db3880b6e0dd6647cbc351c6c0"/><section>
    <title>SDL_GetWindowGrab()</title>
<indexterm><primary>SDL_GetWindowGrab</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GetWindowGrab</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetWindowGrab (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window)</computeroutput></para>
<para>Get a window&apos;s input grab mode.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>the window to query </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>SDL_TRUE if input is grabbed, SDL_FALSE otherwise.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1abe7fd559e9d6da046c5984dea679a89b">SDL_SetWindowGrab</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a191991d151bc02a17b7f1b4b80a61795"/><section>
    <title>SDL_GetWindowICCProfile()</title>
<indexterm><primary>SDL_GetWindowICCProfile</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GetWindowICCProfile</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetWindowICCProfile (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window, <link linkend="__s_d_l__config_8h_1a7c94ea6f8948649f8d181ae55911eeaf">size_t</link> * size)</computeroutput></para>
<para>Get the raw ICC profile data for the screen the window is currently on.</para>

<para>Data returned should be freed with SDL_free.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>the window to query </para>
</entry>
                            </row>
                            <row>
<entry>size</entry><entry>
<para>the size of the ICC profile </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>the raw ICC profile data on success or NULL on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.18. </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a1f6c1c22ced1564ffd0d54bbf9824134"/><section>
    <title>SDL_GetWindowID()</title>
<indexterm><primary>SDL_GetWindowID</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GetWindowID</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetWindowID (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window)</computeroutput></para>
<para>Get the numeric ID of a window.</para>

<para>The numeric ID is what <link linkend="_struct_s_d_l___window_event">SDL_WindowEvent</link> references, and is necessary to map these events to specific SDL_Window objects.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>the window to query </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>the ID of the window on success or 0 on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a61016989f88ade9a0f331c63fd200d78">SDL_GetWindowFromID</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1af34c1a3d017f800f3266257eeda19a61"/><section>
    <title>SDL_GetWindowKeyboardGrab()</title>
<indexterm><primary>SDL_GetWindowKeyboardGrab</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GetWindowKeyboardGrab</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetWindowKeyboardGrab (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window)</computeroutput></para>
<para>Get a window&apos;s keyboard grab mode.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>the window to query </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>SDL_TRUE if keyboard is grabbed, and SDL_FALSE otherwise.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.16.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a474b4cf41f81e65f88243b7616ad1789">SDL_SetWindowKeyboardGrab</link> </para>

<para><link linkend="__s_d_l__video_8h_1ad4e451db3880b6e0dd6647cbc351c6c0">SDL_GetWindowGrab</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a38d65795da3feacfec1c392c101e92fd"/><section>
    <title>SDL_GetWindowMaximumSize()</title>
<indexterm><primary>SDL_GetWindowMaximumSize</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GetWindowMaximumSize</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetWindowMaximumSize (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window, int * w, int * h)</computeroutput></para>
<para>Get the maximum size of a window&apos;s client area.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>the window to query </para>
</entry>
                            </row>
                            <row>
<entry>w</entry><entry>
<para>a pointer filled in with the maximum width of the window, may be NULL </para>
</entry>
                            </row>
                            <row>
<entry>h</entry><entry>
<para>a pointer filled in with the maximum height of the window, may be NULL</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1afe1c6ca08d5b8c336b1276236559287a">SDL_GetWindowMinimumSize</link> </para>

<para><link linkend="__s_d_l__video_8h_1aaf95e53a3b70d55d71d7b2cf822ea77e">SDL_SetWindowMaximumSize</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1afe1c6ca08d5b8c336b1276236559287a"/><section>
    <title>SDL_GetWindowMinimumSize()</title>
<indexterm><primary>SDL_GetWindowMinimumSize</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GetWindowMinimumSize</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetWindowMinimumSize (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window, int * w, int * h)</computeroutput></para>
<para>Get the minimum size of a window&apos;s client area.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>the window to query </para>
</entry>
                            </row>
                            <row>
<entry>w</entry><entry>
<para>a pointer filled in with the minimum width of the window, may be NULL </para>
</entry>
                            </row>
                            <row>
<entry>h</entry><entry>
<para>a pointer filled in with the minimum height of the window, may be NULL</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a38d65795da3feacfec1c392c101e92fd">SDL_GetWindowMaximumSize</link> </para>

<para><link linkend="__s_d_l__video_8h_1a1b6dd546d8dec383be411f98926335ae">SDL_SetWindowMinimumSize</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a2aaf67c9351b65a6517c78a32f651e46"/><section>
    <title>SDL_GetWindowMouseGrab()</title>
<indexterm><primary>SDL_GetWindowMouseGrab</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GetWindowMouseGrab</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetWindowMouseGrab (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window)</computeroutput></para>
<para>Get a window&apos;s mouse grab mode.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>the window to query </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>SDL_TRUE if mouse is grabbed, and SDL_FALSE otherwise.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.16.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a474b4cf41f81e65f88243b7616ad1789">SDL_SetWindowKeyboardGrab</link> </para>

<para><link linkend="__s_d_l__video_8h_1ad4e451db3880b6e0dd6647cbc351c6c0">SDL_GetWindowGrab</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1ae41bb7764e10f1a8f189a49690ea1528"/><section>
    <title>SDL_GetWindowMouseRect()</title>
<indexterm><primary>SDL_GetWindowMouseRect</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GetWindowMouseRect</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetWindowMouseRect (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window)</computeroutput></para>
<para>Get the mouse confinement rectangle of a window.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>The window to query </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A pointer to the mouse confinement rectangle of a window, or NULL if there isn&apos;t one.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.18.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1aa4fe6c9f78691def921be2882e8e1747">SDL_SetWindowMouseRect</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a9a85fb11978adecf13a04976efe6ceca"/><section>
    <title>SDL_GetWindowOpacity()</title>
<indexterm><primary>SDL_GetWindowOpacity</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GetWindowOpacity</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetWindowOpacity (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window, float * out_opacity)</computeroutput></para>
<para>Get the opacity of a window.</para>

<para>If transparency isn&apos;t supported on this platform, opacity will be reported as 1.0f without error.</para>

<para>The parameter <computeroutput>opacity</computeroutput> is ignored if it is NULL.</para>

<para>This function also returns -1 if an invalid window was provided.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>the window to get the current opacity value from </para>
</entry>
                            </row>
                            <row>
<entry>out_opacity</entry><entry>
<para>the float filled in (0.0f - transparent, 1.0f - opaque) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.5.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1ac10be8659aa8b5bdefb8ce43b6961f7f">SDL_SetWindowOpacity</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a3abb4a27f109ac055eb2a82227a9d11f"/><section>
    <title>SDL_GetWindowPixelFormat()</title>
<indexterm><primary>SDL_GetWindowPixelFormat</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GetWindowPixelFormat</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetWindowPixelFormat (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window)</computeroutput></para>
<para>Get the pixel format associated with the window.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>the window to query </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>the pixel format of the window on success or SDL_PIXELFORMAT_UNKNOWN on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0. </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a03adfc1ed4aaf57da4af00bd247ac99c"/><section>
    <title>SDL_GetWindowPosition()</title>
<indexterm><primary>SDL_GetWindowPosition</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GetWindowPosition</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetWindowPosition (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window, int * x, int * y)</computeroutput></para>
<para>Get the position of a window.</para>

<para>If you do not need the value for one of the positions a NULL may be passed in the <computeroutput>x</computeroutput> or <computeroutput>y</computeroutput> parameter.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>the window to query </para>
</entry>
                            </row>
                            <row>
<entry>x</entry><entry>
<para>a pointer filled in with the x position of the window, in screen coordinates, may be NULL </para>
</entry>
                            </row>
                            <row>
<entry>y</entry><entry>
<para>a pointer filled in with the y position of the window, in screen coordinates, may be NULL</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1ab200a53e01ddc697fd6b8e017cc4e6dd">SDL_SetWindowPosition</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a5cbfffcfec91c22a7ca95fd1d5163db5"/><section>
    <title>SDL_GetWindowSize()</title>
<indexterm><primary>SDL_GetWindowSize</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GetWindowSize</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetWindowSize (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window, int * w, int * h)</computeroutput></para>
<para>Get the size of a window&apos;s client area.</para>

<para>NULL can safely be passed as the <computeroutput>w</computeroutput> or <computeroutput>h</computeroutput> parameter if the width or height value is not desired.</para>

<para>The window size in screen coordinates may differ from the size in pixels, if the window was created with <computeroutput>SDL_WINDOW_ALLOW_HIGHDPI</computeroutput> on a platform with high-dpi support (e.g. iOS or macOS). Use <link linkend="__s_d_l__video_8h_1ac21851bbd91760c5bab92594a58edba3">SDL_GL_GetDrawableSize()</link>, <link linkend="__s_d_l__vulkan_8h_1a170ea51b623cbda9f945b37c037d7974">SDL_Vulkan_GetDrawableSize()</link>, or <link linkend="__s_d_l__render_8h_1abfc0c9a50d9d1870ab7d271b7a73d8ab">SDL_GetRendererOutputSize()</link> to get the real client area size in pixels.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>the window to query the width and height from </para>
</entry>
                            </row>
                            <row>
<entry>w</entry><entry>
<para>a pointer filled in with the width of the window, in screen coordinates, may be NULL </para>
</entry>
                            </row>
                            <row>
<entry>h</entry><entry>
<para>a pointer filled in with the height of the window, in screen coordinates, may be NULL</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1ac21851bbd91760c5bab92594a58edba3">SDL_GL_GetDrawableSize</link> </para>

<para><link linkend="__s_d_l__vulkan_8h_1a170ea51b623cbda9f945b37c037d7974">SDL_Vulkan_GetDrawableSize</link> </para>

<para><link linkend="__s_d_l__video_8h_1a29b118c6932ccb94d85b5435ae1e0a19">SDL_SetWindowSize</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a53fd405291238e8677632165afad3ea0"/><section>
    <title>SDL_GetWindowSurface()</title>
<indexterm><primary>SDL_GetWindowSurface</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GetWindowSurface</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="_struct_s_d_l___surface">SDL_Surface</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetWindowSurface (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window)</computeroutput></para>
<para>Get the SDL surface associated with the window.</para>

<para>A new surface will be created with the optimal format for the window, if necessary. This surface will be freed when the window is destroyed. Do not free this surface.</para>

<para>This surface will be invalidated if the window is resized. After resizing a window this function must be called again to return a valid surface.</para>

<para>You may not combine this with 3D or the rendering API on this window.</para>

<para>This function is affected by <computeroutput>SDL_HINT_FRAMEBUFFER_ACCELERATION</computeroutput>.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>the window to query </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>the surface associated with the window, or NULL on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a7bbfee05788dc85a1d67218cf3006653">SDL_UpdateWindowSurface</link> </para>

<para><link linkend="__s_d_l__video_8h_1ae6b0c6cf354beb87291887bfa02385b1">SDL_UpdateWindowSurfaceRects</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a631b117f2c3712a55706d7fd60013536"/><section>
    <title>SDL_GetWindowTitle()</title>
<indexterm><primary>SDL_GetWindowTitle</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GetWindowTitle</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> const char *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetWindowTitle (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window)</computeroutput></para>
<para>Get the title of a window.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>the window to query </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>the title of the window in UTF-8 format or &quot;&quot; if there is no title.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a41aabc4b68f75f41d97995e02eb9deb6">SDL_SetWindowTitle</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a0e14c935cf304133278893bf6c1d2691"/><section>
    <title>SDL_GL_CreateContext()</title>
<indexterm><primary>SDL_GL_CreateContext</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GL_CreateContext</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__video_8h_1a0d64dcf67c9685d09cbe051448e1b3f3">SDL_GLContext</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GL_CreateContext (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window)</computeroutput></para>
<para>Create an OpenGL context for an OpenGL window, and make it current.</para>

<para>Windows users new to OpenGL should note that, for historical reasons, GL functions added after OpenGL version 1.1 are not available by default. Those functions must be loaded at run-time, either with an OpenGL extension-handling library or with <link linkend="__s_d_l__video_8h_1a6500d698e7dbe6799250a626a8b42359">SDL_GL_GetProcAddress()</link> and its related functions.</para>

<para>SDL_GLContext is an alias for <computeroutput>void *</computeroutput>. It&apos;s opaque to the application.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>the window to associate with the context </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>the OpenGL context associated with <computeroutput>window</computeroutput> or NULL on error; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more details.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1aa64ab050e0bd3a61057c3dffe953aa9f">SDL_GL_DeleteContext</link> </para>

<para><link linkend="__s_d_l__video_8h_1a5a2ad98e8920f8069bf89eb3f9bbc377">SDL_GL_MakeCurrent</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1aa64ab050e0bd3a61057c3dffe953aa9f"/><section>
    <title>SDL_GL_DeleteContext()</title>
<indexterm><primary>SDL_GL_DeleteContext</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GL_DeleteContext</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GL_DeleteContext (<link linkend="__s_d_l__video_8h_1a0d64dcf67c9685d09cbe051448e1b3f3">SDL_GLContext</link> context)</computeroutput></para>
<para>Delete an OpenGL context.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>context</entry><entry>
<para>the OpenGL context to be deleted</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a0e14c935cf304133278893bf6c1d2691">SDL_GL_CreateContext</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a1fa0cc176fbc16db139b40a121e9cfa7"/><section>
    <title>SDL_GL_ExtensionSupported()</title>
<indexterm><primary>SDL_GL_ExtensionSupported</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GL_ExtensionSupported</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GL_ExtensionSupported (const char * extension)</computeroutput></para>
<para>Check if an OpenGL extension is supported for the current context.</para>

<para>This function operates on the current GL context; you must have created a context and it must be current before calling this function. Do not assume that all contexts you create will have the same set of extensions available, or that recreating an existing context will offer the same extensions again.</para>

<para>While it&apos;s probably not a massive overhead, this function is not an O(1) operation. Check the extensions you care about after creating the GL context and save that information somewhere instead of calling the function every time you need to know.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>extension</entry><entry>
<para>the name of the extension to check </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>SDL_TRUE if the extension is supported, SDL_FALSE otherwise.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0. </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a611bbed6c7374329e1d1b9c31b06976d"/><section>
    <title>SDL_GL_GetAttribute()</title>
<indexterm><primary>SDL_GL_GetAttribute</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GL_GetAttribute</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GL_GetAttribute (<link linkend="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4">SDL_GLattr</link> attr, int * value)</computeroutput></para>
<para>Get the actual value for an attribute from the current context.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>attr</entry><entry>
<para>an SDL_GLattr enum value specifying the OpenGL attribute to get </para>
</entry>
                            </row>
                            <row>
<entry>value</entry><entry>
<para>a pointer filled in with the current value of <computeroutput>attr</computeroutput> </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1ac96f25a7a6b28387d2813d8db71921ff">SDL_GL_ResetAttributes</link> </para>

<para><link linkend="__s_d_l__video_8h_1aed4d4347f2d5def1532bc22893e0e0d9">SDL_GL_SetAttribute</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a742f600404b9090bd64f8e863ece98c8"/><section>
    <title>SDL_GL_GetCurrentContext()</title>
<indexterm><primary>SDL_GL_GetCurrentContext</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GL_GetCurrentContext</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__video_8h_1a0d64dcf67c9685d09cbe051448e1b3f3">SDL_GLContext</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GL_GetCurrentContext (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> )</computeroutput></para>
<para>Get the currently active OpenGL context.</para>

<para><formalpara><title>Returns</title>

<para>the currently active OpenGL context or NULL on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a5a2ad98e8920f8069bf89eb3f9bbc377">SDL_GL_MakeCurrent</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a98181cae6b6d56f3bdbe9f83e46482de"/><section>
    <title>SDL_GL_GetCurrentWindow()</title>
<indexterm><primary>SDL_GL_GetCurrentWindow</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GL_GetCurrentWindow</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GL_GetCurrentWindow (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> )</computeroutput></para>
<para>Get the currently active OpenGL window.</para>

<para><formalpara><title>Returns</title>

<para>the currently active OpenGL window on success or NULL on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0. </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1ac21851bbd91760c5bab92594a58edba3"/><section>
    <title>SDL_GL_GetDrawableSize()</title>
<indexterm><primary>SDL_GL_GetDrawableSize</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GL_GetDrawableSize</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GL_GetDrawableSize (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window, int * w, int * h)</computeroutput></para>
<para>Get the size of a window&apos;s underlying drawable in pixels.</para>

<para>This returns info useful for calling <link linkend="__s_d_l__opengl_8h_1a8e93835e91933b7078c88f905dd8599c">glViewport()</link>.</para>

<para>This may differ from <link linkend="__s_d_l__video_8h_1a5cbfffcfec91c22a7ca95fd1d5163db5">SDL_GetWindowSize()</link> if we&apos;re rendering to a high-DPI drawable, i.e. the window was created with <computeroutput>SDL_WINDOW_ALLOW_HIGHDPI</computeroutput> on a platform with high-DPI support (Apple calls this &quot;Retina&quot;), and not disabled by the <computeroutput>SDL_HINT_VIDEO_HIGHDPI_DISABLED</computeroutput> hint.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>the window from which the drawable size should be queried </para>
</entry>
                            </row>
                            <row>
<entry>w</entry><entry>
<para>a pointer to variable for storing the width in pixels, may be NULL </para>
</entry>
                            </row>
                            <row>
<entry>h</entry><entry>
<para>a pointer to variable for storing the height in pixels, may be NULL</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.1.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a841edb930dc7cb2c1ec64f831d3abba6">SDL_CreateWindow</link> </para>

<para><link linkend="__s_d_l__video_8h_1a5cbfffcfec91c22a7ca95fd1d5163db5">SDL_GetWindowSize</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a6500d698e7dbe6799250a626a8b42359"/><section>
    <title>SDL_GL_GetProcAddress()</title>
<indexterm><primary>SDL_GL_GetProcAddress</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GL_GetProcAddress</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GL_GetProcAddress (const char * proc)</computeroutput></para>
<para>Get an OpenGL function by name.</para>

<para>If the GL library is loaded at runtime with <link linkend="__s_d_l__video_8h_1a398df9aaf43a69dc2cfaab5b306b8f91">SDL_GL_LoadLibrary()</link>, then all GL functions must be retrieved this way. Usually this is used to retrieve function pointers to OpenGL extensions.</para>

<para>There are some quirks to looking up OpenGL functions that require some extra care from the application. If you code carefully, you can handle these quirks without any platform-specific code, though:</para>

<para><itemizedlist>
<listitem>
<para>On Windows, function pointers are specific to the current GL context; this means you need to have created a GL context and made it current before calling <link linkend="__s_d_l__video_8h_1a6500d698e7dbe6799250a626a8b42359">SDL_GL_GetProcAddress()</link>. If you recreate your context or create a second context, you should assume that any existing function pointers aren&apos;t valid to use with it. This is (currently) a Windows-specific limitation, and in practice lots of drivers don&apos;t suffer this limitation, but it is still the way the wgl API is documented to work and you should expect crashes if you don&apos;t respect it. Store a copy of the function pointers that comes and goes with context lifespan.</para>
</listitem><listitem>
<para>On X11, function pointers returned by this function are valid for any context, and can even be looked up before a context is created at all. This means that, for at least some common OpenGL implementations, if you look up a function that doesn&apos;t exist, you&apos;ll get a non-NULL result that is <emphasis>NOT</emphasis> safe to call. You must always make sure the function is actually available for a given GL context before calling it, by checking for the existence of the appropriate extension with <link linkend="__s_d_l__video_8h_1a1fa0cc176fbc16db139b40a121e9cfa7">SDL_GL_ExtensionSupported()</link>, or verifying that the version of OpenGL you&apos;re using offers the function as core functionality.</para>
</listitem><listitem>
<para>Some OpenGL drivers, on all platforms, <emphasis>will</emphasis> return NULL if a function isn&apos;t supported, but you can&apos;t count on this behavior. Check for extensions you use, and if you get a NULL anyway, act as if that extension wasn&apos;t available. This is probably a bug in the driver, but you can code defensively for this scenario anyhow.</para>
</listitem><listitem>
<para>Just because you&apos;re on Linux/Unix, don&apos;t assume you&apos;ll be using X11. Next-gen display servers are waiting to replace it, and may or may not make the same promises about function pointers.</para>
</listitem><listitem>
<para>OpenGL function pointers must be declared <computeroutput>APIENTRY</computeroutput> as in the example code. This will ensure the proper calling convention is followed on platforms where this matters (Win32) thereby avoiding stack corruption.</para>
</listitem></itemizedlist>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>proc</entry><entry>
<para>the name of an OpenGL function </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>a pointer to the named OpenGL function. The returned pointer should be cast to the appropriate function signature.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a1fa0cc176fbc16db139b40a121e9cfa7">SDL_GL_ExtensionSupported</link> </para>

<para><link linkend="__s_d_l__video_8h_1a398df9aaf43a69dc2cfaab5b306b8f91">SDL_GL_LoadLibrary</link> </para>

<para><link linkend="__s_d_l__video_8h_1a92103adf9637ec2dc471714076872bdc">SDL_GL_UnloadLibrary</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1ae96490db6285ed0df44a9b1c0f498605"/><section>
    <title>SDL_GL_GetSwapInterval()</title>
<indexterm><primary>SDL_GL_GetSwapInterval</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GL_GetSwapInterval</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GL_GetSwapInterval (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> )</computeroutput></para>
<para>Get the swap interval for the current OpenGL context.</para>

<para>If the system can&apos;t determine the swap interval, or there isn&apos;t a valid current context, this function will return 0 as a safe default.</para>

<para><formalpara><title>Returns</title>

<para>0 if there is no vertical retrace synchronization, 1 if the buffer swap is synchronized with the vertical retrace, and -1 if late swaps happen immediately instead of waiting for the next retrace; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a68b0d06595d086d9244fd49afe3e8360">SDL_GL_SetSwapInterval</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a398df9aaf43a69dc2cfaab5b306b8f91"/><section>
    <title>SDL_GL_LoadLibrary()</title>
<indexterm><primary>SDL_GL_LoadLibrary</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GL_LoadLibrary</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GL_LoadLibrary (const char * path)</computeroutput></para>
<para>Dynamically load an OpenGL library.</para>

<para>This should be done after initializing the video driver, but before creating any OpenGL windows. If no OpenGL library is loaded, the default library will be loaded upon creation of the first OpenGL window.</para>

<para>If you do this, you need to retrieve all of the GL functions used in your program from the dynamic library using <link linkend="__s_d_l__video_8h_1a6500d698e7dbe6799250a626a8b42359">SDL_GL_GetProcAddress()</link>.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>path</entry><entry>
<para>the platform dependent OpenGL library name, or NULL to open the default OpenGL library </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a6500d698e7dbe6799250a626a8b42359">SDL_GL_GetProcAddress</link> </para>

<para><link linkend="__s_d_l__video_8h_1a92103adf9637ec2dc471714076872bdc">SDL_GL_UnloadLibrary</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a5a2ad98e8920f8069bf89eb3f9bbc377"/><section>
    <title>SDL_GL_MakeCurrent()</title>
<indexterm><primary>SDL_GL_MakeCurrent</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GL_MakeCurrent</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GL_MakeCurrent (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window, <link linkend="__s_d_l__video_8h_1a0d64dcf67c9685d09cbe051448e1b3f3">SDL_GLContext</link> context)</computeroutput></para>
<para>Set up an OpenGL context for rendering into an OpenGL window.</para>

<para>The context must have been created with a compatible window.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>the window to associate with the context </para>
</entry>
                            </row>
                            <row>
<entry>context</entry><entry>
<para>the OpenGL context to associate with the window </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a0e14c935cf304133278893bf6c1d2691">SDL_GL_CreateContext</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1ac96f25a7a6b28387d2813d8db71921ff"/><section>
    <title>SDL_GL_ResetAttributes()</title>
<indexterm><primary>SDL_GL_ResetAttributes</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GL_ResetAttributes</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GL_ResetAttributes (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> )</computeroutput></para>
<para>Reset all previously set OpenGL context attributes to their default values.</para>

<para><formalpara><title>Since</title>

<para>This function is available since SDL 2.0.2.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a611bbed6c7374329e1d1b9c31b06976d">SDL_GL_GetAttribute</link> </para>

<para><link linkend="__s_d_l__video_8h_1aed4d4347f2d5def1532bc22893e0e0d9">SDL_GL_SetAttribute</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1aed4d4347f2d5def1532bc22893e0e0d9"/><section>
    <title>SDL_GL_SetAttribute()</title>
<indexterm><primary>SDL_GL_SetAttribute</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GL_SetAttribute</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GL_SetAttribute (<link linkend="__s_d_l__video_8h_1a2de24951bbc6626dc259ec0db5ae8ed4">SDL_GLattr</link> attr, int value)</computeroutput></para>
<para>Set an OpenGL window attribute before window creation.</para>

<para>This function sets the OpenGL attribute <computeroutput>attr</computeroutput> to <computeroutput>value</computeroutput>. The requested attributes should be set before creating an OpenGL window. You should use <link linkend="__s_d_l__video_8h_1a611bbed6c7374329e1d1b9c31b06976d">SDL_GL_GetAttribute()</link> to check the values after creating the OpenGL context, since the values obtained can differ from the requested ones.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>attr</entry><entry>
<para>an SDL_GLattr enum value specifying the OpenGL attribute to set </para>
</entry>
                            </row>
                            <row>
<entry>value</entry><entry>
<para>the desired value for the attribute </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a611bbed6c7374329e1d1b9c31b06976d">SDL_GL_GetAttribute</link> </para>

<para><link linkend="__s_d_l__video_8h_1ac96f25a7a6b28387d2813d8db71921ff">SDL_GL_ResetAttributes</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a68b0d06595d086d9244fd49afe3e8360"/><section>
    <title>SDL_GL_SetSwapInterval()</title>
<indexterm><primary>SDL_GL_SetSwapInterval</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GL_SetSwapInterval</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GL_SetSwapInterval (int interval)</computeroutput></para>
<para>Set the swap interval for the current OpenGL context.</para>

<para>Some systems allow specifying -1 for the interval, to enable adaptive vsync. Adaptive vsync works the same as vsync, but if you&apos;ve already missed the vertical retrace for a given frame, it swaps buffers immediately, which might be less jarring for the user during occasional framerate drops. If an application requests adaptive vsync and the system does not support it, this function will fail and return -1. In such a case, you should probably retry the call with 1 for the interval.</para>

<para>Adaptive vsync is implemented for some glX drivers with GLX_EXT_swap_control_tear:</para>

<para><link xlink:href="https://www.opengl.org/registry/specs/EXT/glx_swap_control_tear.txt">https://www.opengl.org/registry/specs/EXT/glx_swap_control_tear.txt</link></para>

<para>and for some Windows drivers with WGL_EXT_swap_control_tear:</para>

<para><link xlink:href="https://www.opengl.org/registry/specs/EXT/wgl_swap_control_tear.txt">https://www.opengl.org/registry/specs/EXT/wgl_swap_control_tear.txt</link></para>

<para>Read more on the Khronos wiki: <link xlink:href="https://www.khronos.org/opengl/wiki/Swap_Interval#Adaptive_Vsync">https://www.khronos.org/opengl/wiki/Swap_Interval#Adaptive_Vsync</link></para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>interval</entry><entry>
<para>0 for immediate updates, 1 for updates synchronized with the vertical retrace, -1 for adaptive vsync </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or -1 if setting the swap interval is not supported; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1ae96490db6285ed0df44a9b1c0f498605">SDL_GL_GetSwapInterval</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a11d1245662f49f6af257627119f22835"/><section>
    <title>SDL_GL_SwapWindow()</title>
<indexterm><primary>SDL_GL_SwapWindow</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GL_SwapWindow</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GL_SwapWindow (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window)</computeroutput></para>
<para>Update a window with OpenGL rendering.</para>

<para>This is used with double-buffered OpenGL contexts, which are the default.</para>

<para>On macOS, make sure you bind 0 to the draw framebuffer before swapping the window, otherwise nothing will happen. If you aren&apos;t using <link linkend="__s_d_l__opengles2__gl2_8h_1ad755c8947ccfb469c84702204d19adf4">glBindFramebuffer()</link>, this is the default and you won&apos;t have to do anything extra.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>the window to change</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0. </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a92103adf9637ec2dc471714076872bdc"/><section>
    <title>SDL_GL_UnloadLibrary()</title>
<indexterm><primary>SDL_GL_UnloadLibrary</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_GL_UnloadLibrary</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GL_UnloadLibrary (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> )</computeroutput></para>
<para>Unload the OpenGL library previously loaded by <link linkend="__s_d_l__video_8h_1a398df9aaf43a69dc2cfaab5b306b8f91">SDL_GL_LoadLibrary()</link>.</para>

<para><formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a398df9aaf43a69dc2cfaab5b306b8f91">SDL_GL_LoadLibrary</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1aa3cbe663e0bd62aa7a747a6c11781766"/><section>
    <title>SDL_HideWindow()</title>
<indexterm><primary>SDL_HideWindow</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_HideWindow</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_HideWindow (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window)</computeroutput></para>
<para>Hide a window.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>the window to hide</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a6051ce26885b32b80bc7285b4facd0a1">SDL_ShowWindow</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a4b5c116d57947bf508c13b21aac49cbf"/><section>
    <title>SDL_IsScreenSaverEnabled()</title>
<indexterm><primary>SDL_IsScreenSaverEnabled</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_IsScreenSaverEnabled</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_IsScreenSaverEnabled (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> )</computeroutput></para>
<para>Check whether the screensaver is currently enabled.</para>

<para>The screensaver is disabled by default since SDL 2.0.2. Before SDL 2.0.2 the screensaver was enabled by default.</para>

<para>The default can also be changed using <computeroutput>SDL_HINT_VIDEO_ALLOW_SCREENSAVER</computeroutput>.</para>

<para><formalpara><title>Returns</title>

<para>SDL_TRUE if the screensaver is enabled, SDL_FALSE if it is disabled.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a68eb0d850934fa1c7ac12c30f2d56a84">SDL_DisableScreenSaver</link> </para>

<para><link linkend="__s_d_l__video_8h_1a17846c713066aa29a86e1be205a7fc3e">SDL_EnableScreenSaver</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a8d969b660fee270f84cb403c8b75ded6"/><section>
    <title>SDL_MaximizeWindow()</title>
<indexterm><primary>SDL_MaximizeWindow</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_MaximizeWindow</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_MaximizeWindow (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window)</computeroutput></para>
<para>Make a window as large as possible.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>the window to maximize</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a9f802f6c7952552b1cb26958fad3f2a6">SDL_MinimizeWindow</link> </para>

<para><link linkend="__s_d_l__video_8h_1afea37fca3b12f454e7f91d919fc99fbd">SDL_RestoreWindow</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a9f802f6c7952552b1cb26958fad3f2a6"/><section>
    <title>SDL_MinimizeWindow()</title>
<indexterm><primary>SDL_MinimizeWindow</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_MinimizeWindow</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_MinimizeWindow (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window)</computeroutput></para>
<para>Minimize a window to an iconic representation.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>the window to minimize</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a8d969b660fee270f84cb403c8b75ded6">SDL_MaximizeWindow</link> </para>

<para><link linkend="__s_d_l__video_8h_1afea37fca3b12f454e7f91d919fc99fbd">SDL_RestoreWindow</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a4b66b90f95780276addc14bc573c9f3c"/><section>
    <title>SDL_RaiseWindow()</title>
<indexterm><primary>SDL_RaiseWindow</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_RaiseWindow</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_RaiseWindow (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window)</computeroutput></para>
<para>Raise a window above other windows and set the input focus.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>the window to raise</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0. </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1afea37fca3b12f454e7f91d919fc99fbd"/><section>
    <title>SDL_RestoreWindow()</title>
<indexterm><primary>SDL_RestoreWindow</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_RestoreWindow</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_RestoreWindow (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window)</computeroutput></para>
<para>Restore the size and position of a minimized or maximized window.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>the window to restore</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a8d969b660fee270f84cb403c8b75ded6">SDL_MaximizeWindow</link> </para>

<para><link linkend="__s_d_l__video_8h_1a9f802f6c7952552b1cb26958fad3f2a6">SDL_MinimizeWindow</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1ae6e6eed29cdb84d7c2e3b359273667a1"/><section>
    <title>SDL_SetWindowAlwaysOnTop()</title>
<indexterm><primary>SDL_SetWindowAlwaysOnTop</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_SetWindowAlwaysOnTop</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_SetWindowAlwaysOnTop (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window, <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> on_top)</computeroutput></para>
<para>Set the window to always be above the others.</para>

<para>This will add or remove the window&apos;s <computeroutput>SDL_WINDOW_ALWAYS_ON_TOP</computeroutput> flag. This will bring the window to the front and keep the window above the rest.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>The window of which to change the always on top state </para>
</entry>
                            </row>
                            <row>
<entry>on_top</entry><entry>
<para>SDL_TRUE to set the window always on top, SDL_FALSE to disable</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.16.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a4445733f04a1a9dd0e063cd4738f285f">SDL_GetWindowFlags</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1afb4b868e2cc0107ed6bcf5ba7aa376e0"/><section>
    <title>SDL_SetWindowBordered()</title>
<indexterm><primary>SDL_SetWindowBordered</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_SetWindowBordered</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_SetWindowBordered (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window, <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> bordered)</computeroutput></para>
<para>Set the border state of a window.</para>

<para>This will add or remove the window&apos;s <computeroutput>SDL_WINDOW_BORDERLESS</computeroutput> flag and add or remove the border from the actual window. This is a no-op if the window&apos;s border already matches the requested state.</para>

<para>You can&apos;t change the border state of a fullscreen window.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>the window of which to change the border state </para>
</entry>
                            </row>
                            <row>
<entry>bordered</entry><entry>
<para>SDL_FALSE to remove border, SDL_TRUE to add border</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a4445733f04a1a9dd0e063cd4738f285f">SDL_GetWindowFlags</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a896972250b4d2e0f75888fa44fa792ec"/><section>
    <title>SDL_SetWindowBrightness()</title>
<indexterm><primary>SDL_SetWindowBrightness</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_SetWindowBrightness</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_SetWindowBrightness (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window, float brightness)</computeroutput></para>
<para>Set the brightness (gamma multiplier) for a given window&apos;s display.</para>

<para>Despite the name and signature, this method sets the brightness of the entire display, not an individual window. A window is considered to be owned by the display that contains the window&apos;s center pixel. (The index of this display can be retrieved using <link linkend="__s_d_l__video_8h_1a0be1d0a4d1f9a0da23b78db2f55871b5">SDL_GetWindowDisplayIndex()</link>.) The brightness set will not follow the window if it is moved to another display.</para>

<para>Many platforms will refuse to set the display brightness in modern times. You are better off using a shader to adjust gamma during rendering, or something similar.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>the window used to select the display whose brightness will be changed </para>
</entry>
                            </row>
                            <row>
<entry>brightness</entry><entry>
<para>the brightness (gamma multiplier) value to set where 0.0 is completely dark and 1.0 is normal brightness </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a21c10969331c89e8d0e6a8f998a3c319">SDL_GetWindowBrightness</link> </para>

<para><link linkend="__s_d_l__video_8h_1a6799acf235454f519ac209ccf14caa67">SDL_SetWindowGammaRamp</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a4d2831ad431f59e3a5a5e472599f6c0a"/><section>
    <title>SDL_SetWindowData()</title>
<indexterm><primary>SDL_SetWindowData</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_SetWindowData</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_SetWindowData (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window, const char * name, <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> * userdata)</computeroutput></para>
<para>Associate an arbitrary named pointer with a window.</para>

<para><computeroutput>name</computeroutput> is case-sensitive.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>the window to associate with the pointer </para>
</entry>
                            </row>
                            <row>
<entry>name</entry><entry>
<para>the name of the pointer </para>
</entry>
                            </row>
                            <row>
<entry>userdata</entry><entry>
<para>the associated pointer </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>the previous value associated with <computeroutput>name</computeroutput>.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1ae2b358354dfad5523efadb95adc59ce4">SDL_GetWindowData</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a2ca17d1e857d1560738e002c9935088a"/><section>
    <title>SDL_SetWindowDisplayMode()</title>
<indexterm><primary>SDL_SetWindowDisplayMode</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_SetWindowDisplayMode</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_SetWindowDisplayMode (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window, const <link linkend="_struct_s_d_l___display_mode">SDL_DisplayMode</link> * mode)</computeroutput></para>
<para>Set the display mode to use when a window is visible at fullscreen.</para>

<para>This only affects the display mode used when the window is fullscreen. To change the window size when the window is not fullscreen, use <link linkend="__s_d_l__video_8h_1a29b118c6932ccb94d85b5435ae1e0a19">SDL_SetWindowSize()</link>.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>the window to affect </para>
</entry>
                            </row>
                            <row>
<entry>mode</entry><entry>
<para>the <link linkend="_struct_s_d_l___display_mode">SDL_DisplayMode</link> structure representing the mode to use, or NULL to use the window&apos;s dimensions and the desktop&apos;s format and refresh rate </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a8185547bc7cb0bbeb400f459792d081a">SDL_GetWindowDisplayMode</link> </para>

<para><link linkend="__s_d_l__video_8h_1ab4aa48f0a29f0868ce4e0422c02ed2fa">SDL_SetWindowFullscreen</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1ab4aa48f0a29f0868ce4e0422c02ed2fa"/><section>
    <title>SDL_SetWindowFullscreen()</title>
<indexterm><primary>SDL_SetWindowFullscreen</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_SetWindowFullscreen</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_SetWindowFullscreen (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> flags)</computeroutput></para>
<para>Set a window&apos;s fullscreen state.</para>

<para><computeroutput>flags</computeroutput> may be <computeroutput>SDL_WINDOW_FULLSCREEN</computeroutput>, for &quot;real&quot; fullscreen with a videomode change; <computeroutput>SDL_WINDOW_FULLSCREEN_DESKTOP</computeroutput> for &quot;fake&quot; fullscreen that takes the size of the desktop; and 0 for windowed mode.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>the window to change </para>
</entry>
                            </row>
                            <row>
<entry>flags</entry><entry>
<para><computeroutput>SDL_WINDOW_FULLSCREEN</computeroutput>, <computeroutput>SDL_WINDOW_FULLSCREEN_DESKTOP</computeroutput> or 0 </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a8185547bc7cb0bbeb400f459792d081a">SDL_GetWindowDisplayMode</link> </para>

<para><link linkend="__s_d_l__video_8h_1a2ca17d1e857d1560738e002c9935088a">SDL_SetWindowDisplayMode</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a6799acf235454f519ac209ccf14caa67"/><section>
    <title>SDL_SetWindowGammaRamp()</title>
<indexterm><primary>SDL_SetWindowGammaRamp</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_SetWindowGammaRamp</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_SetWindowGammaRamp (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window, const <link linkend="__s_d_l__stdinc_8h_1a31fcc0a076c9068668173ee26d33e42b">Uint16</link> * red, const <link linkend="__s_d_l__stdinc_8h_1a31fcc0a076c9068668173ee26d33e42b">Uint16</link> * green, const <link linkend="__s_d_l__stdinc_8h_1a31fcc0a076c9068668173ee26d33e42b">Uint16</link> * blue)</computeroutput></para>
<para>Set the gamma ramp for the display that owns a given window.</para>

<para>Set the gamma translation table for the red, green, and blue channels of the video hardware. Each table is an array of 256 16-bit quantities, representing a mapping between the input and output for that channel. The input is the index into the array, and the output is the 16-bit gamma value at that index, scaled to the output color precision.</para>

<para>Despite the name and signature, this method sets the gamma ramp of the entire display, not an individual window. A window is considered to be owned by the display that contains the window&apos;s center pixel. (The index of this display can be retrieved using <link linkend="__s_d_l__video_8h_1a0be1d0a4d1f9a0da23b78db2f55871b5">SDL_GetWindowDisplayIndex()</link>.) The gamma ramp set will not follow the window if it is moved to another display.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>the window used to select the display whose gamma ramp will be changed </para>
</entry>
                            </row>
                            <row>
<entry>red</entry><entry>
<para>a 256 element array of 16-bit quantities representing the translation table for the red channel, or NULL </para>
</entry>
                            </row>
                            <row>
<entry>green</entry><entry>
<para>a 256 element array of 16-bit quantities representing the translation table for the green channel, or NULL </para>
</entry>
                            </row>
                            <row>
<entry>blue</entry><entry>
<para>a 256 element array of 16-bit quantities representing the translation table for the blue channel, or NULL </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1af4d647be3bb21a33586d69d5cad87ead">SDL_GetWindowGammaRamp</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1abe7fd559e9d6da046c5984dea679a89b"/><section>
    <title>SDL_SetWindowGrab()</title>
<indexterm><primary>SDL_SetWindowGrab</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_SetWindowGrab</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_SetWindowGrab (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window, <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> grabbed)</computeroutput></para>
<para>Set a window&apos;s input grab mode.</para>

<para>When input is grabbed, the mouse is confined to the window. This function will also grab the keyboard if <computeroutput>SDL_HINT_GRAB_KEYBOARD</computeroutput> is set. To grab the keyboard without also grabbing the mouse, use <link linkend="__s_d_l__video_8h_1a474b4cf41f81e65f88243b7616ad1789">SDL_SetWindowKeyboardGrab()</link>.</para>

<para>If the caller enables a grab while another window is currently grabbed, the other window loses its grab in favor of the caller&apos;s window.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>the window for which the input grab mode should be set </para>
</entry>
                            </row>
                            <row>
<entry>grabbed</entry><entry>
<para>SDL_TRUE to grab input or SDL_FALSE to release input</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a6d0a45787b2a383bed8ed56133b04eab">SDL_GetGrabbedWindow</link> </para>

<para><link linkend="__s_d_l__video_8h_1ad4e451db3880b6e0dd6647cbc351c6c0">SDL_GetWindowGrab</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a23e14e1f21f7fb3727f38fd9b0711186"/><section>
    <title>SDL_SetWindowHitTest()</title>
<indexterm><primary>SDL_SetWindowHitTest</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_SetWindowHitTest</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_SetWindowHitTest (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window, <link linkend="__s_d_l__video_8h_1a247c7fd43bb60b20630945a5bd9e4957">SDL_HitTest</link> callback, <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> * callback_data)</computeroutput></para>
<para>Provide a callback that decides if a window region has special properties.</para>

<para>Normally windows are dragged and resized by decorations provided by the system window manager (a title bar, borders, etc), but for some apps, it makes sense to drag them from somewhere else inside the window itself; for example, one might have a borderless window that wants to be draggable from any part, or simulate its own title bar, etc.</para>

<para>This function lets the app provide a callback that designates pieces of a given window as special. This callback is run during event processing if we need to tell the OS to treat a region of the window specially; the use of this callback is known as &quot;hit testing.&quot;</para>

<para>Mouse input may not be delivered to your application if it is within a special area; the OS will often apply that input to moving the window or resizing the window and not deliver it to the application.</para>

<para>Specifying NULL for a callback disables hit-testing. Hit-testing is disabled by default.</para>

<para>Platforms that don&apos;t support this functionality will return -1 unconditionally, even if you&apos;re attempting to disable hit-testing.</para>

<para>Your callback may fire at any time, and its firing does not indicate any specific behavior (for example, on Windows, this certainly might fire when the OS is deciding whether to drag your window, but it fires for lots of other reasons, too, some unrelated to anything you probably care about <emphasis>and when the mouse isn&apos;t actually at the location it is testing</emphasis>). Since this can fire at any time, you should try to keep your callback efficient, devoid of allocations, etc.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>the window to set hit-testing on </para>
</entry>
                            </row>
                            <row>
<entry>callback</entry><entry>
<para>the function to call when doing a hit-test </para>
</entry>
                            </row>
                            <row>
<entry>callback_data</entry><entry>
<para>an app-defined void pointer passed to <emphasis role="bold">callback</emphasis> </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or -1 on error (including unsupported); call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.4. </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a0b6910b5d5aa2df0aeda257e445a472e"/><section>
    <title>SDL_SetWindowIcon()</title>
<indexterm><primary>SDL_SetWindowIcon</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_SetWindowIcon</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_SetWindowIcon (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window, <link linkend="_struct_s_d_l___surface">SDL_Surface</link> * icon)</computeroutput></para>
<para>Set the icon for a window.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>the window to change </para>
</entry>
                            </row>
                            <row>
<entry>icon</entry><entry>
<para>an <link linkend="_struct_s_d_l___surface">SDL_Surface</link> structure containing the icon for the window</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0. </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1aa77986a0f56e51f216af57d829bca896"/><section>
    <title>SDL_SetWindowInputFocus()</title>
<indexterm><primary>SDL_SetWindowInputFocus</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_SetWindowInputFocus</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_SetWindowInputFocus (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window)</computeroutput></para>
<para>Explicitly set input focus to the window.</para>

<para>You almost certainly want <link linkend="__s_d_l__video_8h_1a4b66b90f95780276addc14bc573c9f3c">SDL_RaiseWindow()</link> instead of this function. Use this with caution, as you might give focus to a window that is completely obscured by other windows.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>the window that should get the input focus </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.5.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a4b66b90f95780276addc14bc573c9f3c">SDL_RaiseWindow</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a474b4cf41f81e65f88243b7616ad1789"/><section>
    <title>SDL_SetWindowKeyboardGrab()</title>
<indexterm><primary>SDL_SetWindowKeyboardGrab</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_SetWindowKeyboardGrab</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_SetWindowKeyboardGrab (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window, <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> grabbed)</computeroutput></para>
<para>Set a window&apos;s keyboard grab mode.</para>

<para>Keyboard grab enables capture of system keyboard shortcuts like Alt+Tab or the Meta/Super key. Note that not all system keyboard shortcuts can be captured by applications (one example is Ctrl+Alt+Del on Windows).</para>

<para>This is primarily intended for specialized applications such as VNC clients or VM frontends. Normal games should not use keyboard grab.</para>

<para>When keyboard grab is enabled, SDL will continue to handle Alt+Tab when the window is full-screen to ensure the user is not trapped in your application. If you have a custom keyboard shortcut to exit fullscreen mode, you may suppress this behavior with <computeroutput>SDL_HINT_ALLOW_ALT_TAB_WHILE_GRABBED</computeroutput>.</para>

<para>If the caller enables a grab while another window is currently grabbed, the other window loses its grab in favor of the caller&apos;s window.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>The window for which the keyboard grab mode should be set. </para>
</entry>
                            </row>
                            <row>
<entry>grabbed</entry><entry>
<para>This is SDL_TRUE to grab keyboard, and SDL_FALSE to release.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.16.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1af34c1a3d017f800f3266257eeda19a61">SDL_GetWindowKeyboardGrab</link> </para>

<para><link linkend="__s_d_l__video_8h_1a1777999c919b478bc736f4a444c65381">SDL_SetWindowMouseGrab</link> </para>

<para><link linkend="__s_d_l__video_8h_1abe7fd559e9d6da046c5984dea679a89b">SDL_SetWindowGrab</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1aaf95e53a3b70d55d71d7b2cf822ea77e"/><section>
    <title>SDL_SetWindowMaximumSize()</title>
<indexterm><primary>SDL_SetWindowMaximumSize</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_SetWindowMaximumSize</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_SetWindowMaximumSize (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window, int max_w, int max_h)</computeroutput></para>
<para>Set the maximum size of a window&apos;s client area.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>the window to change </para>
</entry>
                            </row>
                            <row>
<entry>max_w</entry><entry>
<para>the maximum width of the window in pixels </para>
</entry>
                            </row>
                            <row>
<entry>max_h</entry><entry>
<para>the maximum height of the window in pixels</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a38d65795da3feacfec1c392c101e92fd">SDL_GetWindowMaximumSize</link> </para>

<para><link linkend="__s_d_l__video_8h_1a1b6dd546d8dec383be411f98926335ae">SDL_SetWindowMinimumSize</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a1b6dd546d8dec383be411f98926335ae"/><section>
    <title>SDL_SetWindowMinimumSize()</title>
<indexterm><primary>SDL_SetWindowMinimumSize</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_SetWindowMinimumSize</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_SetWindowMinimumSize (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window, int min_w, int min_h)</computeroutput></para>
<para>Set the minimum size of a window&apos;s client area.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>the window to change </para>
</entry>
                            </row>
                            <row>
<entry>min_w</entry><entry>
<para>the minimum width of the window in pixels </para>
</entry>
                            </row>
                            <row>
<entry>min_h</entry><entry>
<para>the minimum height of the window in pixels</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1afe1c6ca08d5b8c336b1276236559287a">SDL_GetWindowMinimumSize</link> </para>

<para><link linkend="__s_d_l__video_8h_1aaf95e53a3b70d55d71d7b2cf822ea77e">SDL_SetWindowMaximumSize</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1afb7627a0ede24c28453857fff4f02aca"/><section>
    <title>SDL_SetWindowModalFor()</title>
<indexterm><primary>SDL_SetWindowModalFor</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_SetWindowModalFor</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_SetWindowModalFor (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * modal_window, <link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * parent_window)</computeroutput></para>
<para>Set the window as a modal for another window.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>modal_window</entry><entry>
<para>the window that should be set modal </para>
</entry>
                            </row>
                            <row>
<entry>parent_window</entry><entry>
<para>the parent window for the modal window </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.5. </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a1777999c919b478bc736f4a444c65381"/><section>
    <title>SDL_SetWindowMouseGrab()</title>
<indexterm><primary>SDL_SetWindowMouseGrab</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_SetWindowMouseGrab</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_SetWindowMouseGrab (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window, <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> grabbed)</computeroutput></para>
<para>Set a window&apos;s mouse grab mode.</para>

<para>Mouse grab confines the mouse cursor to the window.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>The window for which the mouse grab mode should be set.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.16.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a2aaf67c9351b65a6517c78a32f651e46">SDL_GetWindowMouseGrab</link> </para>

<para><link linkend="__s_d_l__video_8h_1a474b4cf41f81e65f88243b7616ad1789">SDL_SetWindowKeyboardGrab</link> </para>

<para><link linkend="__s_d_l__video_8h_1abe7fd559e9d6da046c5984dea679a89b">SDL_SetWindowGrab</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1aa4fe6c9f78691def921be2882e8e1747"/><section>
    <title>SDL_SetWindowMouseRect()</title>
<indexterm><primary>SDL_SetWindowMouseRect</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_SetWindowMouseRect</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_SetWindowMouseRect (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> * rect)</computeroutput></para>
<para>Confines the cursor to the specified area of a window.</para>

<para>Note that this does NOT grab the cursor, it only defines the area a cursor is restricted to when the window has mouse focus.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>The window that will be associated with the barrier. </para>
</entry>
                            </row>
                            <row>
<entry>rect</entry><entry>
<para>A rectangle area in window-relative coordinates. If NULL the barrier for the specified window will be destroyed. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.18.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1ae41bb7764e10f1a8f189a49690ea1528">SDL_GetWindowMouseRect</link> </para>

<para><link linkend="__s_d_l__video_8h_1a1777999c919b478bc736f4a444c65381">SDL_SetWindowMouseGrab</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1ac10be8659aa8b5bdefb8ce43b6961f7f"/><section>
    <title>SDL_SetWindowOpacity()</title>
<indexterm><primary>SDL_SetWindowOpacity</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_SetWindowOpacity</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_SetWindowOpacity (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window, float opacity)</computeroutput></para>
<para>Set the opacity for a window.</para>

<para>The parameter <computeroutput>opacity</computeroutput> will be clamped internally between 0.0f (transparent) and 1.0f (opaque).</para>

<para>This function also returns -1 if setting the opacity isn&apos;t supported.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>the window which will be made transparent or opaque </para>
</entry>
                            </row>
                            <row>
<entry>opacity</entry><entry>
<para>the opacity value (0.0f - transparent, 1.0f - opaque) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.5.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a9a85fb11978adecf13a04976efe6ceca">SDL_GetWindowOpacity</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1ab200a53e01ddc697fd6b8e017cc4e6dd"/><section>
    <title>SDL_SetWindowPosition()</title>
<indexterm><primary>SDL_SetWindowPosition</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_SetWindowPosition</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_SetWindowPosition (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window, int x, int y)</computeroutput></para>
<para>Set the position of a window.</para>

<para>The window coordinate origin is the upper left of the display.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>the window to reposition </para>
</entry>
                            </row>
                            <row>
<entry>x</entry><entry>
<para>the x coordinate of the window in screen coordinates, or <computeroutput>SDL_WINDOWPOS_CENTERED</computeroutput> or <computeroutput>SDL_WINDOWPOS_UNDEFINED</computeroutput> </para>
</entry>
                            </row>
                            <row>
<entry>y</entry><entry>
<para>the y coordinate of the window in screen coordinates, or <computeroutput>SDL_WINDOWPOS_CENTERED</computeroutput> or <computeroutput>SDL_WINDOWPOS_UNDEFINED</computeroutput></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a03adfc1ed4aaf57da4af00bd247ac99c">SDL_GetWindowPosition</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a42d2451050ae01aaf2974344b9d4a812"/><section>
    <title>SDL_SetWindowResizable()</title>
<indexterm><primary>SDL_SetWindowResizable</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_SetWindowResizable</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_SetWindowResizable (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window, <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> resizable)</computeroutput></para>
<para>Set the user-resizable state of a window.</para>

<para>This will add or remove the window&apos;s <computeroutput>SDL_WINDOW_RESIZABLE</computeroutput> flag and allow/disallow user resizing of the window. This is a no-op if the window&apos;s resizable state already matches the requested state.</para>

<para>You can&apos;t change the resizable state of a fullscreen window.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>the window of which to change the resizable state </para>
</entry>
                            </row>
                            <row>
<entry>resizable</entry><entry>
<para>SDL_TRUE to allow resizing, SDL_FALSE to disallow</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.5.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a4445733f04a1a9dd0e063cd4738f285f">SDL_GetWindowFlags</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a29b118c6932ccb94d85b5435ae1e0a19"/><section>
    <title>SDL_SetWindowSize()</title>
<indexterm><primary>SDL_SetWindowSize</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_SetWindowSize</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_SetWindowSize (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window, int w, int h)</computeroutput></para>
<para>Set the size of a window&apos;s client area.</para>

<para>The window size in screen coordinates may differ from the size in pixels, if the window was created with <computeroutput>SDL_WINDOW_ALLOW_HIGHDPI</computeroutput> on a platform with high-dpi support (e.g. iOS or macOS). Use <link linkend="__s_d_l__video_8h_1ac21851bbd91760c5bab92594a58edba3">SDL_GL_GetDrawableSize()</link> or <link linkend="__s_d_l__render_8h_1abfc0c9a50d9d1870ab7d271b7a73d8ab">SDL_GetRendererOutputSize()</link> to get the real client area size in pixels.</para>

<para>Fullscreen windows automatically match the size of the display mode, and you should use <link linkend="__s_d_l__video_8h_1a2ca17d1e857d1560738e002c9935088a">SDL_SetWindowDisplayMode()</link> to change their size.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>the window to change </para>
</entry>
                            </row>
                            <row>
<entry>w</entry><entry>
<para>the width of the window in pixels, in screen coordinates, must be &gt; 0 </para>
</entry>
                            </row>
                            <row>
<entry>h</entry><entry>
<para>the height of the window in pixels, in screen coordinates, must be &gt; 0</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a5cbfffcfec91c22a7ca95fd1d5163db5">SDL_GetWindowSize</link> </para>

<para><link linkend="__s_d_l__video_8h_1a2ca17d1e857d1560738e002c9935088a">SDL_SetWindowDisplayMode</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a41aabc4b68f75f41d97995e02eb9deb6"/><section>
    <title>SDL_SetWindowTitle()</title>
<indexterm><primary>SDL_SetWindowTitle</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_SetWindowTitle</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_SetWindowTitle (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window, const char * title)</computeroutput></para>
<para>Set the title of a window.</para>

<para>This string is expected to be in UTF-8 encoding.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>the window to change </para>
</entry>
                            </row>
                            <row>
<entry>title</entry><entry>
<para>the desired window title in UTF-8 format</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a631b117f2c3712a55706d7fd60013536">SDL_GetWindowTitle</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a6051ce26885b32b80bc7285b4facd0a1"/><section>
    <title>SDL_ShowWindow()</title>
<indexterm><primary>SDL_ShowWindow</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_ShowWindow</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_ShowWindow (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window)</computeroutput></para>
<para>Show a window.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>the window to show</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1aa3cbe663e0bd62aa7a747a6c11781766">SDL_HideWindow</link> </para>

<para><link linkend="__s_d_l__video_8h_1a4b66b90f95780276addc14bc573c9f3c">SDL_RaiseWindow</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a7bbfee05788dc85a1d67218cf3006653"/><section>
    <title>SDL_UpdateWindowSurface()</title>
<indexterm><primary>SDL_UpdateWindowSurface</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_UpdateWindowSurface</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_UpdateWindowSurface (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window)</computeroutput></para>
<para>Copy the window surface to the screen.</para>

<para>This is the function you use to reflect any changes to the surface on the screen.</para>

<para>This function is equivalent to the SDL 1.2 API SDL_Flip().</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>the window to update </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a53fd405291238e8677632165afad3ea0">SDL_GetWindowSurface</link> </para>

<para><link linkend="__s_d_l__video_8h_1ae6b0c6cf354beb87291887bfa02385b1">SDL_UpdateWindowSurfaceRects</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1ae6b0c6cf354beb87291887bfa02385b1"/><section>
    <title>SDL_UpdateWindowSurfaceRects()</title>
<indexterm><primary>SDL_UpdateWindowSurfaceRects</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_UpdateWindowSurfaceRects</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_UpdateWindowSurfaceRects (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> * rects, int numrects)</computeroutput></para>
<para>Copy areas of the window surface to the screen.</para>

<para>This is the function you use to reflect changes to portions of the surface on the screen.</para>

<para>This function is equivalent to the SDL 1.2 API SDL_UpdateRects().</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>the window to update </para>
</entry>
                            </row>
                            <row>
<entry>rects</entry><entry>
<para>an array of <link linkend="_struct_s_d_l___rect">SDL_Rect</link> structures representing areas of the surface to copy </para>
</entry>
                            </row>
                            <row>
<entry>numrects</entry><entry>
<para>the number of rectangles </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a53fd405291238e8677632165afad3ea0">SDL_GetWindowSurface</link> </para>

<para><link linkend="__s_d_l__video_8h_1a7bbfee05788dc85a1d67218cf3006653">SDL_UpdateWindowSurface</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1a05244b30716f0339dcd140c6f92017b7"/><section>
    <title>SDL_VideoInit()</title>
<indexterm><primary>SDL_VideoInit</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_VideoInit</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_VideoInit (const char * driver_name)</computeroutput></para>
<para>Initialize the video subsystem, optionally specifying a video driver.</para>

<para>This function initializes the video subsystem, setting up a connection to the window manager, etc, and determines the available display modes and pixel formats, but does not initialize a window or graphics mode.</para>

<para>If you use this function and you haven&apos;t used the SDL_INIT_VIDEO flag with either <link linkend="__s_d_l_8h_1a8fc8d35348d7c74bad8392d776c937b8">SDL_Init()</link> or <link linkend="__s_d_l_8h_1adfbfddc0ec609b5e5e5cb1c89298e4db">SDL_InitSubSystem()</link>, you should call <link linkend="__s_d_l__video_8h_1ade5fc4847320fb235f17265b683fa013">SDL_VideoQuit()</link> before calling <link linkend="__s_d_l_8h_1afdabaf714781099083592051f2d9ac11">SDL_Quit()</link>.</para>

<para>It is safe to call this function multiple times. <link linkend="__s_d_l__video_8h_1a05244b30716f0339dcd140c6f92017b7">SDL_VideoInit()</link> will call <link linkend="__s_d_l__video_8h_1ade5fc4847320fb235f17265b683fa013">SDL_VideoQuit()</link> itself if the video subsystem has already been initialized.</para>

<para>You can use <link linkend="__s_d_l__video_8h_1ac6f3250a95bd027fd1a374d7ed15fc57">SDL_GetNumVideoDrivers()</link> and <link linkend="__s_d_l__video_8h_1ae88ab2c7515c52b180ef0238f8965b4b">SDL_GetVideoDriver()</link> to find a specific <computeroutput>driver_name</computeroutput>.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>driver_name</entry><entry>
<para>the name of a video driver to initialize, or NULL for the default driver </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1ac6f3250a95bd027fd1a374d7ed15fc57">SDL_GetNumVideoDrivers</link> </para>

<para><link linkend="__s_d_l__video_8h_1ae88ab2c7515c52b180ef0238f8965b4b">SDL_GetVideoDriver</link> </para>

<para><link linkend="__s_d_l_8h_1adfbfddc0ec609b5e5e5cb1c89298e4db">SDL_InitSubSystem</link> </para>

<para><link linkend="__s_d_l__video_8h_1ade5fc4847320fb235f17265b683fa013">SDL_VideoQuit</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__video_8h_1ade5fc4847320fb235f17265b683fa013"/><section>
    <title>SDL_VideoQuit()</title>
<indexterm><primary>SDL_VideoQuit</primary><secondary>SDL_video.h</secondary></indexterm>
<indexterm><primary>SDL_video.h</primary><secondary>SDL_VideoQuit</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_VideoQuit (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> )</computeroutput></para>
<para>Shut down the video subsystem, if initialized with <link linkend="__s_d_l__video_8h_1a05244b30716f0339dcd140c6f92017b7">SDL_VideoInit()</link>.</para>

<para>This function closes all windows, and restores the original video mode.</para>

<para><formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a05244b30716f0339dcd140c6f92017b7">SDL_VideoInit</link> </para>
</formalpara>
</para>
</section>
</section>
</section>
