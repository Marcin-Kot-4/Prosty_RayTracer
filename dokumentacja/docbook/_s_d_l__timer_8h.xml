<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__s_d_l__timer_8h" xml:lang="en-US">
<title>D:/RayTracing/include/SDL_timer.h File Reference</title>
<indexterm><primary>D:/RayTracing/include/SDL_timer.h</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &quot;SDL_stdinc.h&quot;
#include &quot;SDL_error.h&quot;
#include &quot;begin_code.h&quot;
#include &quot;close_code.h&quot;
</programlisting><simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#define <link linkend="__s_d_l__timer_8h_1a5cc109e24ba0c46f6becb28353cd8921">SDL_TICKS_PASSED</link>(A,  B)   ((<link linkend="__s_d_l__stdinc_8h_1a7a90b941db9d4582e9ad7abb9940ff7e">Sint32</link>)((B) - (A)) &lt;= 0)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Typedefs    </title>
        <itemizedlist>
            <listitem><para>typedef <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link>(<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> * <link linkend="__s_d_l__timer_8h_1a3c5c867db975d245e4a82fcf0cd7de80">SDL_TimerCallback</link>) (<link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> interval, <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> *<link linkend="__s_d_l__opengl__glext_8h_1ac7c896d55e93a6cf7ff8524005b4e7b4">param</link>)</para>
</listitem>
            <listitem><para>typedef int <link linkend="__s_d_l__timer_8h_1a412e8ff8a6c89615ba8f9486b292213a">SDL_TimerID</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__timer_8h_1a0b9bc71d6287e0ffafdc3419760fe2b3">SDL_GetTicks</link> (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__stdinc_8h_1ac006cf2bd55a42a9cc8ae9f123aa7e13">Uint64</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__timer_8h_1abf49cb0e55ee7685699893d251468861">SDL_GetTicks64</link> (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__stdinc_8h_1ac006cf2bd55a42a9cc8ae9f123aa7e13">Uint64</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__timer_8h_1a2dbeb63c4f0564811a4adf3938808977">SDL_GetPerformanceCounter</link> (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__stdinc_8h_1ac006cf2bd55a42a9cc8ae9f123aa7e13">Uint64</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__timer_8h_1a507ebea12e31dacc9f85f7d9febe0efb">SDL_GetPerformanceFrequency</link> (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__timer_8h_1ae8050b95373b95249064467592ab4e21">SDL_Delay</link> (<link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> ms)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__timer_8h_1a412e8ff8a6c89615ba8f9486b292213a">SDL_TimerID</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__timer_8h_1a56ceea49587e3fa5796b2e4bf85603b8">SDL_AddTimer</link> (<link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> interval, <link linkend="__s_d_l__timer_8h_1a3c5c867db975d245e4a82fcf0cd7de80">SDL_TimerCallback</link> callback, <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> *<link linkend="__s_d_l__opengl__glext_8h_1ac7c896d55e93a6cf7ff8524005b4e7b4">param</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__timer_8h_1afe8d418e59a24ae6ad820b92137ab9b2">SDL_RemoveTimer</link> (<link linkend="__s_d_l__timer_8h_1a412e8ff8a6c89615ba8f9486b292213a">SDL_TimerID</link> <link linkend="__s_d_l__opengl__glext_8h_1a58c2a664503e14ffb8f21012aabff3e9">id</link>)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Header for the SDL time management routines. </para>
</section>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="__s_d_l__timer_8h_1a5cc109e24ba0c46f6becb28353cd8921"/><section>
    <title>SDL_TICKS_PASSED</title>
<indexterm><primary>SDL_TICKS_PASSED</primary><secondary>SDL_timer.h</secondary></indexterm>
<indexterm><primary>SDL_timer.h</primary><secondary>SDL_TICKS_PASSED</secondary></indexterm>
<para><computeroutput>#define SDL_TICKS_PASSED( A,  B)   ((<link linkend="__s_d_l__stdinc_8h_1a7a90b941db9d4582e9ad7abb9940ff7e">Sint32</link>)((B) - (A)) &lt;= 0)</computeroutput></para>
<para>Compare 32-bit SDL ticks values, and return true if <computeroutput>A</computeroutput> has passed <computeroutput>B</computeroutput>.</para>

<para>This should be used with results from <link linkend="__s_d_l__timer_8h_1a0b9bc71d6287e0ffafdc3419760fe2b3">SDL_GetTicks()</link>, as this macro attempts to deal with the 32-bit counter wrapping back to zero every ~49 days, but should <emphasis>not</emphasis> be used with <link linkend="__s_d_l__timer_8h_1abf49cb0e55ee7685699893d251468861">SDL_GetTicks64()</link>, which does not have that problem.</para>

<para>For example, with <link linkend="__s_d_l__timer_8h_1a0b9bc71d6287e0ffafdc3419760fe2b3">SDL_GetTicks()</link>, if you want to wait 100 ms, you could do this:</para>

<para><literallayout><computeroutput><emphasis role="keyword">const</emphasis>&#32;<link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link>&#32;<link linkend="__s_d_l__opengl__glext_8h_1ad29bb0d8468b264a4e3d9204366cfaab">timeout</link>&#32;=&#32;<link linkend="__s_d_l__timer_8h_1a0b9bc71d6287e0ffafdc3419760fe2b3">SDL_GetTicks</link>()&#32;+&#32;100;
<emphasis role="keywordflow">while</emphasis>&#32;(!<link linkend="__s_d_l__timer_8h_1a5cc109e24ba0c46f6becb28353cd8921">SDL_TICKS_PASSED</link>(<link linkend="__s_d_l__timer_8h_1a0b9bc71d6287e0ffafdc3419760fe2b3">SDL_GetTicks</link>(),&#32;<link linkend="__s_d_l__opengl__glext_8h_1ad29bb0d8468b264a4e3d9204366cfaab">timeout</link>))&#32;{
&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;...&#32;do&#32;work&#32;until&#32;timeout&#32;has&#32;elapsed</emphasis>
}
</computeroutput></literallayout></para>

<para>Note that this does not handle tick differences greater than 2^31 so take care when using the above kind of code with large timeout delays (tens of days). </para>
</section>
</section>
<section>
<title>Typedef Documentation</title>
<anchor xml:id="__s_d_l__timer_8h_1a3c5c867db975d245e4a82fcf0cd7de80"/><section>
    <title>SDL_TimerCallback</title>
<indexterm><primary>SDL_TimerCallback</primary><secondary>SDL_timer.h</secondary></indexterm>
<indexterm><primary>SDL_timer.h</primary><secondary>SDL_TimerCallback</secondary></indexterm>
<para><computeroutput>typedef <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link>(<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> * SDL_TimerCallback) (<link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> interval, <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> *<link linkend="__s_d_l__opengl__glext_8h_1ac7c896d55e93a6cf7ff8524005b4e7b4">param</link>)</computeroutput></para>
<para>Function prototype for the timer callback function.</para>

<para>The callback function is passed the current timer interval and returns the next timer interval. If the returned value is the same as the one passed in, the periodic alarm continues, otherwise a new alarm is scheduled. If the callback returns 0, the periodic alarm is cancelled. </para>
</section>
<anchor xml:id="__s_d_l__timer_8h_1a412e8ff8a6c89615ba8f9486b292213a"/><section>
    <title>SDL_TimerID</title>
<indexterm><primary>SDL_TimerID</primary><secondary>SDL_timer.h</secondary></indexterm>
<indexterm><primary>SDL_timer.h</primary><secondary>SDL_TimerID</secondary></indexterm>
<para><computeroutput>typedef int <link linkend="__s_d_l__timer_8h_1a412e8ff8a6c89615ba8f9486b292213a">SDL_TimerID</link></computeroutput></para>
<para>Definition of the timer ID type. </para>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="__s_d_l__timer_8h_1a56ceea49587e3fa5796b2e4bf85603b8"/><section>
    <title>SDL_AddTimer()</title>
<indexterm><primary>SDL_AddTimer</primary><secondary>SDL_timer.h</secondary></indexterm>
<indexterm><primary>SDL_timer.h</primary><secondary>SDL_AddTimer</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__timer_8h_1a412e8ff8a6c89615ba8f9486b292213a">SDL_TimerID</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_AddTimer (<link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> interval, <link linkend="__s_d_l__timer_8h_1a3c5c867db975d245e4a82fcf0cd7de80">SDL_TimerCallback</link> callback, <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> * param)</computeroutput></para>
<para>Call a callback function at a future time.</para>

<para>If you use this function, you must pass <computeroutput>SDL_INIT_TIMER</computeroutput> to <link linkend="__s_d_l_8h_1a8fc8d35348d7c74bad8392d776c937b8">SDL_Init()</link>.</para>

<para>The callback function is passed the current timer interval and the user supplied parameter from the <link linkend="__s_d_l__timer_8h_1a56ceea49587e3fa5796b2e4bf85603b8">SDL_AddTimer()</link> call and should return the next timer interval. If the value returned from the callback is 0, the timer is canceled.</para>

<para>The callback is run on a separate thread.</para>

<para>Timers take into account the amount of time it took to execute the callback. For example, if the callback took 250 ms to execute and returned 1000 (ms), the timer would only wait another 750 ms before its next iteration.</para>

<para>Timing may be inexact due to OS scheduling. Be sure to note the current time with <link linkend="__s_d_l__timer_8h_1a0b9bc71d6287e0ffafdc3419760fe2b3">SDL_GetTicks()</link> or <link linkend="__s_d_l__timer_8h_1a2dbeb63c4f0564811a4adf3938808977">SDL_GetPerformanceCounter()</link> in case your callback needs to adjust for variances.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>interval</entry><entry>
<para>the timer delay, in milliseconds, passed to <computeroutput>callback</computeroutput> </para>
</entry>
                            </row>
                            <row>
<entry>callback</entry><entry>
<para>the SDL_TimerCallback function to call when the specified <computeroutput>interval</computeroutput> elapses </para>
</entry>
                            </row>
                            <row>
<entry>param</entry><entry>
<para>a pointer that is passed to <computeroutput>callback</computeroutput> </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>a timer ID or 0 if an error occurs; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__timer_8h_1afe8d418e59a24ae6ad820b92137ab9b2">SDL_RemoveTimer</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__timer_8h_1ae8050b95373b95249064467592ab4e21"/><section>
    <title>SDL_Delay()</title>
<indexterm><primary>SDL_Delay</primary><secondary>SDL_timer.h</secondary></indexterm>
<indexterm><primary>SDL_timer.h</primary><secondary>SDL_Delay</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_Delay (<link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> ms)</computeroutput></para>
<para>Wait a specified number of milliseconds before returning.</para>

<para>This function waits a specified number of milliseconds before returning. It waits at least the specified time, but possibly longer due to OS scheduling.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>ms</entry><entry>
<para>the number of milliseconds to delay</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0. </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__timer_8h_1a2dbeb63c4f0564811a4adf3938808977"/><section>
    <title>SDL_GetPerformanceCounter()</title>
<indexterm><primary>SDL_GetPerformanceCounter</primary><secondary>SDL_timer.h</secondary></indexterm>
<indexterm><primary>SDL_timer.h</primary><secondary>SDL_GetPerformanceCounter</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__stdinc_8h_1ac006cf2bd55a42a9cc8ae9f123aa7e13">Uint64</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetPerformanceCounter (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> )</computeroutput></para>
<para>Get the current value of the high resolution counter.</para>

<para>This function is typically used for profiling.</para>

<para>The counter values are only meaningful relative to each other. Differences between values can be converted to times by using <link linkend="__s_d_l__timer_8h_1a507ebea12e31dacc9f85f7d9febe0efb">SDL_GetPerformanceFrequency()</link>.</para>

<para><formalpara><title>Returns</title>

<para>the current counter value.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__timer_8h_1a507ebea12e31dacc9f85f7d9febe0efb">SDL_GetPerformanceFrequency</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__timer_8h_1a507ebea12e31dacc9f85f7d9febe0efb"/><section>
    <title>SDL_GetPerformanceFrequency()</title>
<indexterm><primary>SDL_GetPerformanceFrequency</primary><secondary>SDL_timer.h</secondary></indexterm>
<indexterm><primary>SDL_timer.h</primary><secondary>SDL_GetPerformanceFrequency</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__stdinc_8h_1ac006cf2bd55a42a9cc8ae9f123aa7e13">Uint64</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetPerformanceFrequency (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> )</computeroutput></para>
<para>Get the count per second of the high resolution counter.</para>

<para><formalpara><title>Returns</title>

<para>a platform-specific count per second.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__timer_8h_1a2dbeb63c4f0564811a4adf3938808977">SDL_GetPerformanceCounter</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__timer_8h_1a0b9bc71d6287e0ffafdc3419760fe2b3"/><section>
    <title>SDL_GetTicks()</title>
<indexterm><primary>SDL_GetTicks</primary><secondary>SDL_timer.h</secondary></indexterm>
<indexterm><primary>SDL_timer.h</primary><secondary>SDL_GetTicks</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetTicks (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> )</computeroutput></para>
<para>Get the number of milliseconds since SDL library initialization.</para>

<para>This value wraps if the program runs for more than ~49 days.</para>

<para>This function is not recommended as of SDL 2.0.18; use <link linkend="__s_d_l__timer_8h_1abf49cb0e55ee7685699893d251468861">SDL_GetTicks64()</link> instead, where the value doesn&apos;t wrap every ~49 days. There are places in SDL where we provide a 32-bit timestamp that can not change without breaking binary compatibility, though, so this function isn&apos;t officially deprecated.</para>

<para><formalpara><title>Returns</title>

<para>an unsigned 32-bit value representing the number of milliseconds since the SDL library initialized.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__timer_8h_1a5cc109e24ba0c46f6becb28353cd8921">SDL_TICKS_PASSED</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__timer_8h_1abf49cb0e55ee7685699893d251468861"/><section>
    <title>SDL_GetTicks64()</title>
<indexterm><primary>SDL_GetTicks64</primary><secondary>SDL_timer.h</secondary></indexterm>
<indexterm><primary>SDL_timer.h</primary><secondary>SDL_GetTicks64</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__stdinc_8h_1ac006cf2bd55a42a9cc8ae9f123aa7e13">Uint64</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetTicks64 (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> )</computeroutput></para>
<para>Get the number of milliseconds since SDL library initialization.</para>

<para>Note that you should not use the SDL_TICKS_PASSED macro with values returned by this function, as that macro does clever math to compensate for the 32-bit overflow every ~49 days that <link linkend="__s_d_l__timer_8h_1a0b9bc71d6287e0ffafdc3419760fe2b3">SDL_GetTicks()</link> suffers from. 64-bit values from this function can be safely compared directly.</para>

<para>For example, if you want to wait 100 ms, you could do this:</para>

<para><literallayout><computeroutput><emphasis role="keyword">const</emphasis>&#32;<link linkend="__s_d_l__stdinc_8h_1ac006cf2bd55a42a9cc8ae9f123aa7e13">Uint64</link>&#32;<link linkend="__s_d_l__opengl__glext_8h_1ad29bb0d8468b264a4e3d9204366cfaab">timeout</link>&#32;=&#32;<link linkend="__s_d_l__timer_8h_1abf49cb0e55ee7685699893d251468861">SDL_GetTicks64</link>()&#32;+&#32;100;
<emphasis role="keywordflow">while</emphasis>&#32;(<link linkend="__s_d_l__timer_8h_1abf49cb0e55ee7685699893d251468861">SDL_GetTicks64</link>()&#32;&lt;&#32;<link linkend="__s_d_l__opengl__glext_8h_1ad29bb0d8468b264a4e3d9204366cfaab">timeout</link>)&#32;{
&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;...&#32;do&#32;work&#32;until&#32;timeout&#32;has&#32;elapsed</emphasis>
}
</computeroutput></literallayout></para>

<para><formalpara><title>Returns</title>

<para>an unsigned 64-bit value representing the number of milliseconds since the SDL library initialized.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.18. </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__timer_8h_1afe8d418e59a24ae6ad820b92137ab9b2"/><section>
    <title>SDL_RemoveTimer()</title>
<indexterm><primary>SDL_RemoveTimer</primary><secondary>SDL_timer.h</secondary></indexterm>
<indexterm><primary>SDL_timer.h</primary><secondary>SDL_RemoveTimer</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_RemoveTimer (<link linkend="__s_d_l__timer_8h_1a412e8ff8a6c89615ba8f9486b292213a">SDL_TimerID</link> id)</computeroutput></para>
<para>Remove a timer created with <link linkend="__s_d_l__timer_8h_1a56ceea49587e3fa5796b2e4bf85603b8">SDL_AddTimer()</link>.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>id</entry><entry>
<para>the ID of the timer to remove </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>SDL_TRUE if the timer is removed or SDL_FALSE if the timer wasn&apos;t found.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__timer_8h_1a56ceea49587e3fa5796b2e4bf85603b8">SDL_AddTimer</link> </para>
</formalpara>
</para>
</section>
</section>
</section>
