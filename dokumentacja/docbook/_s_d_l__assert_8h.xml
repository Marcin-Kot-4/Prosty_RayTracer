<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__s_d_l__assert_8h" xml:lang="en-US">
<title>D:/RayTracing/include/SDL_assert.h File Reference</title>
<indexterm><primary>D:/RayTracing/include/SDL_assert.h</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &quot;SDL_config.h&quot;
#include &quot;begin_code.h&quot;
#include &quot;close_code.h&quot;
</programlisting><simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_struct_s_d_l___assert_data">SDL_AssertData</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#define <link linkend="__s_d_l__assert_8h_1afbd8fdb86f3bba968efccbd932877731">SDL_ASSERT_LEVEL</link>   1</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__assert_8h_1a42e8a6e0677acca7c1a927238b8dfe32">SDL_TriggerBreakpoint</link>()</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__assert_8h_1a30da3daba50f032ecda2c701e97da79d">SDL_FUNCTION</link>   &quot;???&quot;</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__assert_8h_1a195c2795832718d008000d969eed96c3">SDL_FILE</link>   __FILE__</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__assert_8h_1a421a39f96c53fe309aa6d66b5c5bec22">SDL_LINE</link>   __LINE__</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__assert_8h_1a2ffca06819acf027ec29d6fd14c94cbe">SDL_NULL_WHILE_LOOP_CONDITION</link>   (0)</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__assert_8h_1aeee78c1e2347a3cfe4ee3c215d497acd">SDL_disabled_assert</link>(<link linkend="__s_d_l__opengl__glext_8h_1a3fd7759b3d6e5284475eee14a613b9f9">condition</link>)       do { (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link>) sizeof ((<link linkend="__s_d_l__opengl__glext_8h_1a3fd7759b3d6e5284475eee14a613b9f9">condition</link>)); } while (<link linkend="__s_d_l__assert_8h_1a2ffca06819acf027ec29d6fd14c94cbe">SDL_NULL_WHILE_LOOP_CONDITION</link>)</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__assert_8h_1a560c9df30e5f2db3d81daef3bbe81992">SDL_enabled_assert</link>(<link linkend="__s_d_l__opengl__glext_8h_1a3fd7759b3d6e5284475eee14a613b9f9">condition</link>)</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__assert_8h_1af03d71e27f06835f6a09358943c33b1d">SDL_assert</link>(<link linkend="__s_d_l__opengl__glext_8h_1a3fd7759b3d6e5284475eee14a613b9f9">condition</link>)   <link linkend="__s_d_l__assert_8h_1aeee78c1e2347a3cfe4ee3c215d497acd">SDL_disabled_assert</link>(<link linkend="__s_d_l__opengl__glext_8h_1a3fd7759b3d6e5284475eee14a613b9f9">condition</link>)</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__assert_8h_1a3af3f7dba7e28942c17e16745028a7da">SDL_assert_release</link>(<link linkend="__s_d_l__opengl__glext_8h_1a3fd7759b3d6e5284475eee14a613b9f9">condition</link>)   <link linkend="__s_d_l__assert_8h_1a560c9df30e5f2db3d81daef3bbe81992">SDL_enabled_assert</link>(<link linkend="__s_d_l__opengl__glext_8h_1a3fd7759b3d6e5284475eee14a613b9f9">condition</link>)</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__assert_8h_1a4cc20db7eed29c5cd0e83f4f3d10860a">SDL_assert_paranoid</link>(<link linkend="__s_d_l__opengl__glext_8h_1a3fd7759b3d6e5284475eee14a613b9f9">condition</link>)   <link linkend="__s_d_l__assert_8h_1aeee78c1e2347a3cfe4ee3c215d497acd">SDL_disabled_assert</link>(<link linkend="__s_d_l__opengl__glext_8h_1a3fd7759b3d6e5284475eee14a613b9f9">condition</link>)</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__assert_8h_1a22dedc823eb26ea054cbc584b614718e">SDL_assert_always</link>(<link linkend="__s_d_l__opengl__glext_8h_1a3fd7759b3d6e5284475eee14a613b9f9">condition</link>)   <link linkend="__s_d_l__assert_8h_1a560c9df30e5f2db3d81daef3bbe81992">SDL_enabled_assert</link>(<link linkend="__s_d_l__opengl__glext_8h_1a3fd7759b3d6e5284475eee14a613b9f9">condition</link>)</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__assert_8h_1a15ee0b48c2893f92f851d251424837b6">SDL_assert_state</link>   <link linkend="__s_d_l__assert_8h_1a06d6a46a43cc7b34764c37398573ef1a">SDL_AssertState</link></para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__assert_8h_1a74c575b310128e12358caf79aec09da7">SDL_assert_data</link>   <link linkend="_struct_s_d_l___assert_data">SDL_AssertData</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Typedefs    </title>
        <itemizedlist>
            <listitem><para>typedef struct <link linkend="_struct_s_d_l___assert_data">SDL_AssertData</link> <link linkend="__s_d_l__assert_8h_1afc62064b31b91c078b2960270e29801e">SDL_AssertData</link></para>
</listitem>
            <listitem><para>typedef <link linkend="__s_d_l__assert_8h_1a06d6a46a43cc7b34764c37398573ef1a">SDL_AssertState</link>(<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> * <link linkend="__s_d_l__assert_8h_1aa63dc5ca0d954add6893512583b08071">SDL_AssertionHandler</link>) (const <link linkend="_struct_s_d_l___assert_data">SDL_AssertData</link> *<link linkend="__s_d_l__opengl_8h_1a2e335d56e2846b0fea47eed068b2d34a">data</link>, <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> *userdata)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Enumerations    </title>
        <itemizedlist>
            <listitem><para>enum <link linkend="__s_d_l__assert_8h_1a06d6a46a43cc7b34764c37398573ef1a">SDL_AssertState</link> { 
<link linkend="__s_d_l__assert_8h_1a06d6a46a43cc7b34764c37398573ef1aa0ccce3254f1d981283e0792cd70437df">SDL_ASSERTION_RETRY</link>
, <link linkend="__s_d_l__assert_8h_1a06d6a46a43cc7b34764c37398573ef1aace6f6a41a6b303e220828fbe25b5d2a6">SDL_ASSERTION_BREAK</link>
, <link linkend="__s_d_l__assert_8h_1a06d6a46a43cc7b34764c37398573ef1aa4cf9444bddf799c7638bbcc9c542799c">SDL_ASSERTION_ABORT</link>
, <link linkend="__s_d_l__assert_8h_1a06d6a46a43cc7b34764c37398573ef1aa76eace7638278c093e24d78a91d6d772">SDL_ASSERTION_IGNORE</link>
, 
<link linkend="__s_d_l__assert_8h_1a06d6a46a43cc7b34764c37398573ef1aaf8d1af4dc16f160217acadf2b8585fea">SDL_ASSERTION_ALWAYS_IGNORE</link>
 }</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__assert_8h_1a06d6a46a43cc7b34764c37398573ef1a">SDL_AssertState</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__assert_8h_1a01ef51d076f7e9c3839fff4161a16550">SDL_ReportAssertion</link> (<link linkend="_struct_s_d_l___assert_data">SDL_AssertData</link> *, const char *, const char *, int)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__assert_8h_1a12dc8edd25f52f3add69369b2978e689">SDL_SetAssertionHandler</link> (<link linkend="__s_d_l__assert_8h_1aa63dc5ca0d954add6893512583b08071">SDL_AssertionHandler</link> handler, <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> *userdata)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__assert_8h_1aa63dc5ca0d954add6893512583b08071">SDL_AssertionHandler</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__assert_8h_1a34dc4d9332bcdc32b3a0baa3fc2966bc">SDL_GetDefaultAssertionHandler</link> (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__assert_8h_1aa63dc5ca0d954add6893512583b08071">SDL_AssertionHandler</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__assert_8h_1a61c95d5aa8a1bd701e829b0842e04f07">SDL_GetAssertionHandler</link> (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> **puserdata)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> const <link linkend="_struct_s_d_l___assert_data">SDL_AssertData</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__assert_8h_1a59366c845267d9d6c8f214e096f7b45c">SDL_GetAssertionReport</link> (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__assert_8h_1abdbad45c4ede1953c784a7b312349a32">SDL_ResetAssertionReport</link> (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link>)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="__s_d_l__assert_8h_1af03d71e27f06835f6a09358943c33b1d"/><section>
    <title>SDL_assert</title>
<indexterm><primary>SDL_assert</primary><secondary>SDL_assert.h</secondary></indexterm>
<indexterm><primary>SDL_assert.h</primary><secondary>SDL_assert</secondary></indexterm>
<para><computeroutput>#define SDL_assert( <link linkend="__s_d_l__opengl__glext_8h_1a3fd7759b3d6e5284475eee14a613b9f9">condition</link>)   <link linkend="__s_d_l__assert_8h_1aeee78c1e2347a3cfe4ee3c215d497acd">SDL_disabled_assert</link>(<link linkend="__s_d_l__opengl__glext_8h_1a3fd7759b3d6e5284475eee14a613b9f9">condition</link>)</computeroutput></para></section>
<anchor xml:id="__s_d_l__assert_8h_1a22dedc823eb26ea054cbc584b614718e"/><section>
    <title>SDL_assert_always</title>
<indexterm><primary>SDL_assert_always</primary><secondary>SDL_assert.h</secondary></indexterm>
<indexterm><primary>SDL_assert.h</primary><secondary>SDL_assert_always</secondary></indexterm>
<para><computeroutput>#define SDL_assert_always( <link linkend="__s_d_l__opengl__glext_8h_1a3fd7759b3d6e5284475eee14a613b9f9">condition</link>)   <link linkend="__s_d_l__assert_8h_1a560c9df30e5f2db3d81daef3bbe81992">SDL_enabled_assert</link>(<link linkend="__s_d_l__opengl__glext_8h_1a3fd7759b3d6e5284475eee14a613b9f9">condition</link>)</computeroutput></para></section>
<anchor xml:id="__s_d_l__assert_8h_1a74c575b310128e12358caf79aec09da7"/><section>
    <title>SDL_assert_data</title>
<indexterm><primary>SDL_assert_data</primary><secondary>SDL_assert.h</secondary></indexterm>
<indexterm><primary>SDL_assert.h</primary><secondary>SDL_assert_data</secondary></indexterm>
<para><computeroutput>#define SDL_assert_data   <link linkend="_struct_s_d_l___assert_data">SDL_AssertData</link></computeroutput></para></section>
<anchor xml:id="__s_d_l__assert_8h_1afbd8fdb86f3bba968efccbd932877731"/><section>
    <title>SDL_ASSERT_LEVEL</title>
<indexterm><primary>SDL_ASSERT_LEVEL</primary><secondary>SDL_assert.h</secondary></indexterm>
<indexterm><primary>SDL_assert.h</primary><secondary>SDL_ASSERT_LEVEL</secondary></indexterm>
<para><computeroutput>#define SDL_ASSERT_LEVEL   1</computeroutput></para></section>
<anchor xml:id="__s_d_l__assert_8h_1a4cc20db7eed29c5cd0e83f4f3d10860a"/><section>
    <title>SDL_assert_paranoid</title>
<indexterm><primary>SDL_assert_paranoid</primary><secondary>SDL_assert.h</secondary></indexterm>
<indexterm><primary>SDL_assert.h</primary><secondary>SDL_assert_paranoid</secondary></indexterm>
<para><computeroutput>#define SDL_assert_paranoid( <link linkend="__s_d_l__opengl__glext_8h_1a3fd7759b3d6e5284475eee14a613b9f9">condition</link>)   <link linkend="__s_d_l__assert_8h_1aeee78c1e2347a3cfe4ee3c215d497acd">SDL_disabled_assert</link>(<link linkend="__s_d_l__opengl__glext_8h_1a3fd7759b3d6e5284475eee14a613b9f9">condition</link>)</computeroutput></para></section>
<anchor xml:id="__s_d_l__assert_8h_1a3af3f7dba7e28942c17e16745028a7da"/><section>
    <title>SDL_assert_release</title>
<indexterm><primary>SDL_assert_release</primary><secondary>SDL_assert.h</secondary></indexterm>
<indexterm><primary>SDL_assert.h</primary><secondary>SDL_assert_release</secondary></indexterm>
<para><computeroutput>#define SDL_assert_release( <link linkend="__s_d_l__opengl__glext_8h_1a3fd7759b3d6e5284475eee14a613b9f9">condition</link>)   <link linkend="__s_d_l__assert_8h_1a560c9df30e5f2db3d81daef3bbe81992">SDL_enabled_assert</link>(<link linkend="__s_d_l__opengl__glext_8h_1a3fd7759b3d6e5284475eee14a613b9f9">condition</link>)</computeroutput></para></section>
<anchor xml:id="__s_d_l__assert_8h_1a15ee0b48c2893f92f851d251424837b6"/><section>
    <title>SDL_assert_state</title>
<indexterm><primary>SDL_assert_state</primary><secondary>SDL_assert.h</secondary></indexterm>
<indexterm><primary>SDL_assert.h</primary><secondary>SDL_assert_state</secondary></indexterm>
<para><computeroutput>#define SDL_assert_state   <link linkend="__s_d_l__assert_8h_1a06d6a46a43cc7b34764c37398573ef1a">SDL_AssertState</link></computeroutput></para></section>
<anchor xml:id="__s_d_l__assert_8h_1aeee78c1e2347a3cfe4ee3c215d497acd"/><section>
    <title>SDL_disabled_assert</title>
<indexterm><primary>SDL_disabled_assert</primary><secondary>SDL_assert.h</secondary></indexterm>
<indexterm><primary>SDL_assert.h</primary><secondary>SDL_disabled_assert</secondary></indexterm>
<para><computeroutput>#define SDL_disabled_assert( <link linkend="__s_d_l__opengl__glext_8h_1a3fd7759b3d6e5284475eee14a613b9f9">condition</link>)       do { (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link>) sizeof ((<link linkend="__s_d_l__opengl__glext_8h_1a3fd7759b3d6e5284475eee14a613b9f9">condition</link>)); } while (<link linkend="__s_d_l__assert_8h_1a2ffca06819acf027ec29d6fd14c94cbe">SDL_NULL_WHILE_LOOP_CONDITION</link>)</computeroutput></para></section>
<anchor xml:id="__s_d_l__assert_8h_1a560c9df30e5f2db3d81daef3bbe81992"/><section>
    <title>SDL_enabled_assert</title>
<indexterm><primary>SDL_enabled_assert</primary><secondary>SDL_assert.h</secondary></indexterm>
<indexterm><primary>SDL_assert.h</primary><secondary>SDL_enabled_assert</secondary></indexterm>
<para><computeroutput>#define SDL_enabled_assert( <link linkend="__s_d_l__opengl__glext_8h_1a3fd7759b3d6e5284475eee14a613b9f9">condition</link>)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;while&#32;(&#32;!(<link linkend="__s_d_l__opengl__glext_8h_1a3fd7759b3d6e5284475eee14a613b9f9">condition</link>)&#32;)&#32;{&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_s_d_l___assert_data">SDL_AssertData</link>&#32;sdl_assert_data&#32;=&#32;{&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,&#32;0,&#32;#<link linkend="__s_d_l__opengl__glext_8h_1a3fd7759b3d6e5284475eee14a613b9f9">condition</link>,&#32;0,&#32;0,&#32;0,&#32;0&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;<link linkend="__s_d_l__assert_8h_1a06d6a46a43cc7b34764c37398573ef1a">SDL_AssertState</link>&#32;sdl_assert_state&#32;=&#32;<link linkend="__s_d_l__assert_8h_1a01ef51d076f7e9c3839fff4161a16550">SDL_ReportAssertion</link>(&amp;sdl_assert_data,&#32;<link linkend="__s_d_l__assert_8h_1a30da3daba50f032ecda2c701e97da79d">SDL_FUNCTION</link>,&#32;<link linkend="__s_d_l__assert_8h_1a195c2795832718d008000d969eed96c3">SDL_FILE</link>,&#32;<link linkend="__s_d_l__assert_8h_1a421a39f96c53fe309aa6d66b5c5bec22">SDL_LINE</link>);&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(sdl_assert_state&#32;==&#32;<link linkend="__s_d_l__assert_8h_1a06d6a46a43cc7b34764c37398573ef1aa0ccce3254f1d981283e0792cd70437df">SDL_ASSERTION_RETRY</link>)&#32;{&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;continue;&#32;<emphasis role="comment">/*&#32;go&#32;again.&#32;*/</emphasis>&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sdl_assert_state&#32;==&#32;<link linkend="__s_d_l__assert_8h_1a06d6a46a43cc7b34764c37398573ef1aace6f6a41a6b303e220828fbe25b5d2a6">SDL_ASSERTION_BREAK</link>)&#32;{&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SDL_TriggerBreakpoint();&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;break;&#32;<emphasis role="comment">/*&#32;not&#32;retrying.&#32;*/</emphasis>&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;\
&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<link linkend="__s_d_l__assert_8h_1a2ffca06819acf027ec29d6fd14c94cbe">SDL_NULL_WHILE_LOOP_CONDITION</link>)
</programlisting></section>
<anchor xml:id="__s_d_l__assert_8h_1a195c2795832718d008000d969eed96c3"/><section>
    <title>SDL_FILE</title>
<indexterm><primary>SDL_FILE</primary><secondary>SDL_assert.h</secondary></indexterm>
<indexterm><primary>SDL_assert.h</primary><secondary>SDL_FILE</secondary></indexterm>
<para><computeroutput>#define SDL_FILE   __FILE__</computeroutput></para></section>
<anchor xml:id="__s_d_l__assert_8h_1a30da3daba50f032ecda2c701e97da79d"/><section>
    <title>SDL_FUNCTION</title>
<indexterm><primary>SDL_FUNCTION</primary><secondary>SDL_assert.h</secondary></indexterm>
<indexterm><primary>SDL_assert.h</primary><secondary>SDL_FUNCTION</secondary></indexterm>
<para><computeroutput>#define SDL_FUNCTION   &quot;???&quot;</computeroutput></para></section>
<anchor xml:id="__s_d_l__assert_8h_1a421a39f96c53fe309aa6d66b5c5bec22"/><section>
    <title>SDL_LINE</title>
<indexterm><primary>SDL_LINE</primary><secondary>SDL_assert.h</secondary></indexterm>
<indexterm><primary>SDL_assert.h</primary><secondary>SDL_LINE</secondary></indexterm>
<para><computeroutput>#define SDL_LINE   __LINE__</computeroutput></para></section>
<anchor xml:id="__s_d_l__assert_8h_1a2ffca06819acf027ec29d6fd14c94cbe"/><section>
    <title>SDL_NULL_WHILE_LOOP_CONDITION</title>
<indexterm><primary>SDL_NULL_WHILE_LOOP_CONDITION</primary><secondary>SDL_assert.h</secondary></indexterm>
<indexterm><primary>SDL_assert.h</primary><secondary>SDL_NULL_WHILE_LOOP_CONDITION</secondary></indexterm>
<para><computeroutput>#define SDL_NULL_WHILE_LOOP_CONDITION   (0)</computeroutput></para></section>
<anchor xml:id="__s_d_l__assert_8h_1a42e8a6e0677acca7c1a927238b8dfe32"/><section>
    <title>SDL_TriggerBreakpoint</title>
<indexterm><primary>SDL_TriggerBreakpoint</primary><secondary>SDL_assert.h</secondary></indexterm>
<indexterm><primary>SDL_assert.h</primary><secondary>SDL_TriggerBreakpoint</secondary></indexterm>
<para><computeroutput>#define SDL_TriggerBreakpoint( )</computeroutput></para></section>
</section>
<section>
<title>Typedef Documentation</title>
<anchor xml:id="__s_d_l__assert_8h_1afc62064b31b91c078b2960270e29801e"/><section>
    <title>SDL_AssertData</title>
<indexterm><primary>SDL_AssertData</primary><secondary>SDL_assert.h</secondary></indexterm>
<indexterm><primary>SDL_assert.h</primary><secondary>SDL_AssertData</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_struct_s_d_l___assert_data">SDL_AssertData</link> <link linkend="_struct_s_d_l___assert_data">SDL_AssertData</link></computeroutput></para></section>
<anchor xml:id="__s_d_l__assert_8h_1aa63dc5ca0d954add6893512583b08071"/><section>
    <title>SDL_AssertionHandler</title>
<indexterm><primary>SDL_AssertionHandler</primary><secondary>SDL_assert.h</secondary></indexterm>
<indexterm><primary>SDL_assert.h</primary><secondary>SDL_AssertionHandler</secondary></indexterm>
<para><computeroutput>typedef <link linkend="__s_d_l__assert_8h_1a06d6a46a43cc7b34764c37398573ef1a">SDL_AssertState</link>(<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> * SDL_AssertionHandler) (const <link linkend="_struct_s_d_l___assert_data">SDL_AssertData</link> *<link linkend="__s_d_l__opengl_8h_1a2e335d56e2846b0fea47eed068b2d34a">data</link>, <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> *userdata)</computeroutput></para>
<para>A callback that fires when an SDL assertion fails.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>data</entry><entry>
<para>a pointer to the <link linkend="_struct_s_d_l___assert_data">SDL_AssertData</link> structure corresponding to the current assertion </para>
</entry>
                            </row>
                            <row>
<entry>userdata</entry><entry>
<para>what was passed as <computeroutput>userdata</computeroutput> to <link linkend="__s_d_l__assert_8h_1a12dc8edd25f52f3add69369b2978e689">SDL_SetAssertionHandler()</link> </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>an SDL_AssertState value indicating how to handle the failure. </para>
</formalpara>
</para>
</section>
</section>
<section>
<title>Enumeration Type Documentation</title>
<anchor xml:id="__s_d_l__assert_8h_1a06d6a46a43cc7b34764c37398573ef1a"/><section>
    <title>SDL_AssertState</title>
<indexterm><primary>SDL_AssertState</primary><secondary>SDL_assert.h</secondary></indexterm>
<indexterm><primary>SDL_assert.h</primary><secondary>SDL_AssertState</secondary></indexterm>
<para><computeroutput>enum <link linkend="__s_d_l__assert_8h_1a06d6a46a43cc7b34764c37398573ef1a">SDL_AssertState</link></computeroutput></para><informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>SDL_ASSERTION_RETRY</primary><secondary>SDL_assert.h</secondary></indexterm>
<indexterm><primary>SDL_assert.h</primary><secondary>SDL_ASSERTION_RETRY</secondary></indexterm>
<anchor xml:id="__s_d_l__assert_8h_1a06d6a46a43cc7b34764c37398573ef1aa0ccce3254f1d981283e0792cd70437df"/>SDL_ASSERTION_RETRY</entry><entry>
<para>Retry the assert immediately. </para>
</entry></row><row><entry><indexterm><primary>SDL_ASSERTION_BREAK</primary><secondary>SDL_assert.h</secondary></indexterm>
<indexterm><primary>SDL_assert.h</primary><secondary>SDL_ASSERTION_BREAK</secondary></indexterm>
<anchor xml:id="__s_d_l__assert_8h_1a06d6a46a43cc7b34764c37398573ef1aace6f6a41a6b303e220828fbe25b5d2a6"/>SDL_ASSERTION_BREAK</entry><entry>
<para>Make the debugger trigger a breakpoint. </para>
</entry></row><row><entry><indexterm><primary>SDL_ASSERTION_ABORT</primary><secondary>SDL_assert.h</secondary></indexterm>
<indexterm><primary>SDL_assert.h</primary><secondary>SDL_ASSERTION_ABORT</secondary></indexterm>
<anchor xml:id="__s_d_l__assert_8h_1a06d6a46a43cc7b34764c37398573ef1aa4cf9444bddf799c7638bbcc9c542799c"/>SDL_ASSERTION_ABORT</entry><entry>
<para>Terminate the program. </para>
</entry></row><row><entry><indexterm><primary>SDL_ASSERTION_IGNORE</primary><secondary>SDL_assert.h</secondary></indexterm>
<indexterm><primary>SDL_assert.h</primary><secondary>SDL_ASSERTION_IGNORE</secondary></indexterm>
<anchor xml:id="__s_d_l__assert_8h_1a06d6a46a43cc7b34764c37398573ef1aa76eace7638278c093e24d78a91d6d772"/>SDL_ASSERTION_IGNORE</entry><entry>
<para>Ignore the assert. </para>
</entry></row><row><entry><indexterm><primary>SDL_ASSERTION_ALWAYS_IGNORE</primary><secondary>SDL_assert.h</secondary></indexterm>
<indexterm><primary>SDL_assert.h</primary><secondary>SDL_ASSERTION_ALWAYS_IGNORE</secondary></indexterm>
<anchor xml:id="__s_d_l__assert_8h_1a06d6a46a43cc7b34764c37398573ef1aaf8d1af4dc16f160217acadf2b8585fea"/>SDL_ASSERTION_ALWAYS_IGNORE</entry><entry>
<para>Ignore the assert from now on. </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="__s_d_l__assert_8h_1a61c95d5aa8a1bd701e829b0842e04f07"/><section>
    <title>SDL_GetAssertionHandler()</title>
<indexterm><primary>SDL_GetAssertionHandler</primary><secondary>SDL_assert.h</secondary></indexterm>
<indexterm><primary>SDL_assert.h</primary><secondary>SDL_GetAssertionHandler</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__assert_8h_1aa63dc5ca0d954add6893512583b08071">SDL_AssertionHandler</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetAssertionHandler (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> ** puserdata)</computeroutput></para>
<para>Get the current assertion handler.</para>

<para>This returns the function pointer that is called when an assertion is triggered. This is either the value last passed to <link linkend="__s_d_l__assert_8h_1a12dc8edd25f52f3add69369b2978e689">SDL_SetAssertionHandler()</link>, or if no application-specified function is set, is equivalent to calling <link linkend="__s_d_l__assert_8h_1a34dc4d9332bcdc32b3a0baa3fc2966bc">SDL_GetDefaultAssertionHandler()</link>.</para>

<para>The parameter <computeroutput>puserdata</computeroutput> is a pointer to a void*, which will store the &quot;userdata&quot; pointer that was passed to <link linkend="__s_d_l__assert_8h_1a12dc8edd25f52f3add69369b2978e689">SDL_SetAssertionHandler()</link>. This value will always be NULL for the default handler. If you don&apos;t care about this data, it is safe to pass a NULL pointer to this function to ignore it.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>puserdata</entry><entry>
<para>pointer which is filled with the &quot;userdata&quot; pointer that was passed to <link linkend="__s_d_l__assert_8h_1a12dc8edd25f52f3add69369b2978e689">SDL_SetAssertionHandler()</link> </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>the SDL_AssertionHandler that is called when an assert triggers.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.2.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__assert_8h_1a12dc8edd25f52f3add69369b2978e689">SDL_SetAssertionHandler</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__assert_8h_1a59366c845267d9d6c8f214e096f7b45c"/><section>
    <title>SDL_GetAssertionReport()</title>
<indexterm><primary>SDL_GetAssertionReport</primary><secondary>SDL_assert.h</secondary></indexterm>
<indexterm><primary>SDL_assert.h</primary><secondary>SDL_GetAssertionReport</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> const <link linkend="_struct_s_d_l___assert_data">SDL_AssertData</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetAssertionReport (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> )</computeroutput></para>
<para>Get a list of all assertion failures.</para>

<para>This function gets all assertions triggered since the last call to <link linkend="__s_d_l__assert_8h_1abdbad45c4ede1953c784a7b312349a32">SDL_ResetAssertionReport()</link>, or the start of the program.</para>

<para>The proper way to examine this data looks something like this:</para>

<para><literallayout><computeroutput><emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_s_d_l___assert_data">SDL_AssertData</link>&#32;*item&#32;=&#32;<link linkend="__s_d_l__assert_8h_1a59366c845267d9d6c8f214e096f7b45c">SDL_GetAssertionReport</link>();
<emphasis role="keywordflow">while</emphasis>&#32;(item)&#32;{
&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&apos;%s&apos;,&#32;%s&#32;(%s:%d),&#32;triggered&#32;%u&#32;times,&#32;always&#32;ignore:&#32;%s.\\n&quot;</emphasis>,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;item-&gt;<link linkend="_struct_s_d_l___assert_data_1aec6d372462fa8c94a9d04c1168cd38c9">condition</link>,&#32;item-&gt;<link linkend="_struct_s_d_l___assert_data_1a4913c57d4affb813feea82fc5f48a25c">function</link>,&#32;item-&gt;<link linkend="_struct_s_d_l___assert_data_1acf27f593e6a436386d2cbcf826cf1ef7">filename</link>,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;item-&gt;<link linkend="_struct_s_d_l___assert_data_1ad026d8573970d2402230d5fa3c550b0f">linenum</link>,&#32;item-&gt;<link linkend="_struct_s_d_l___assert_data_1a230bbcc2d115aab04cf817773e08eb5b">trigger_count</link>,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;item-&gt;<link linkend="_struct_s_d_l___assert_data_1a825e1c7772fe24afad33d0afc42cf04c">always_ignore</link>&#32;?&#32;<emphasis role="stringliteral">&quot;yes&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;no&quot;</emphasis>);
&#32;&#32;&#32;item&#32;=&#32;item-&gt;<link linkend="_struct_s_d_l___assert_data_1a2081dcf06dce4df497e423bccddfc099">next</link>;
}
</computeroutput></literallayout></para>

<para><formalpara><title>Returns</title>

<para>a list of all failed assertions or NULL if the list is empty. This memory should not be modified or freed by the application.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__assert_8h_1abdbad45c4ede1953c784a7b312349a32">SDL_ResetAssertionReport</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__assert_8h_1a34dc4d9332bcdc32b3a0baa3fc2966bc"/><section>
    <title>SDL_GetDefaultAssertionHandler()</title>
<indexterm><primary>SDL_GetDefaultAssertionHandler</primary><secondary>SDL_assert.h</secondary></indexterm>
<indexterm><primary>SDL_assert.h</primary><secondary>SDL_GetDefaultAssertionHandler</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__assert_8h_1aa63dc5ca0d954add6893512583b08071">SDL_AssertionHandler</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetDefaultAssertionHandler (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> )</computeroutput></para>
<para>Get the default assertion handler.</para>

<para>This returns the function pointer that is called by default when an assertion is triggered. This is an internal function provided by SDL, that is used for assertions when <link linkend="__s_d_l__assert_8h_1a12dc8edd25f52f3add69369b2978e689">SDL_SetAssertionHandler()</link> hasn&apos;t been used to provide a different function.</para>

<para><formalpara><title>Returns</title>

<para>the default SDL_AssertionHandler that is called when an assert triggers.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.2.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__assert_8h_1a61c95d5aa8a1bd701e829b0842e04f07">SDL_GetAssertionHandler</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__assert_8h_1a01ef51d076f7e9c3839fff4161a16550"/><section>
    <title>SDL_ReportAssertion()</title>
<indexterm><primary>SDL_ReportAssertion</primary><secondary>SDL_assert.h</secondary></indexterm>
<indexterm><primary>SDL_assert.h</primary><secondary>SDL_ReportAssertion</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__assert_8h_1a06d6a46a43cc7b34764c37398573ef1a">SDL_AssertState</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_ReportAssertion (<link linkend="_struct_s_d_l___assert_data">SDL_AssertData</link> * , const char * , const char * , int )</computeroutput></para></section>
<anchor xml:id="__s_d_l__assert_8h_1abdbad45c4ede1953c784a7b312349a32"/><section>
    <title>SDL_ResetAssertionReport()</title>
<indexterm><primary>SDL_ResetAssertionReport</primary><secondary>SDL_assert.h</secondary></indexterm>
<indexterm><primary>SDL_assert.h</primary><secondary>SDL_ResetAssertionReport</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_ResetAssertionReport (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> )</computeroutput></para>
<para>Clear the list of all assertion failures.</para>

<para>This function will clear the list of all assertions triggered up to that point. Immediately following this call, SDL_GetAssertionReport will return no items. In addition, any previously-triggered assertions will be reset to a trigger_count of zero, and their always_ignore state will be false.</para>

<para><formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__assert_8h_1a59366c845267d9d6c8f214e096f7b45c">SDL_GetAssertionReport</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__assert_8h_1a12dc8edd25f52f3add69369b2978e689"/><section>
    <title>SDL_SetAssertionHandler()</title>
<indexterm><primary>SDL_SetAssertionHandler</primary><secondary>SDL_assert.h</secondary></indexterm>
<indexterm><primary>SDL_assert.h</primary><secondary>SDL_SetAssertionHandler</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_SetAssertionHandler (<link linkend="__s_d_l__assert_8h_1aa63dc5ca0d954add6893512583b08071">SDL_AssertionHandler</link> handler, <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> * userdata)</computeroutput></para>
<para>Set an application-defined assertion handler.</para>

<para>This function allows an application to show its own assertion UI and/or force the response to an assertion failure. If the application doesn&apos;t provide this, SDL will try to do the right thing, popping up a system-specific GUI dialog, and probably minimizing any fullscreen windows.</para>

<para>This callback may fire from any thread, but it runs wrapped in a mutex, so it will only fire from one thread at a time.</para>

<para>This callback is NOT reset to SDL&apos;s internal handler upon <link linkend="__s_d_l_8h_1afdabaf714781099083592051f2d9ac11">SDL_Quit()</link>!</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>handler</entry><entry>
<para>the SDL_AssertionHandler function to call when an assertion fails or NULL for the default handler </para>
</entry>
                            </row>
                            <row>
<entry>userdata</entry><entry>
<para>a pointer that is passed to <computeroutput>handler</computeroutput></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__assert_8h_1a61c95d5aa8a1bd701e829b0842e04f07">SDL_GetAssertionHandler</link> </para>
</formalpara>
</para>
</section>
</section>
</section>
