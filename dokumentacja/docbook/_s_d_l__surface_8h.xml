<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__s_d_l__surface_8h" xml:lang="en-US">
<title>D:/RayTracing/include/SDL_surface.h File Reference</title>
<indexterm><primary>D:/RayTracing/include/SDL_surface.h</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &quot;SDL_stdinc.h&quot;
#include &quot;SDL_pixels.h&quot;
#include &quot;SDL_rect.h&quot;
#include &quot;SDL_blendmode.h&quot;
#include &quot;SDL_rwops.h&quot;
#include &quot;begin_code.h&quot;
#include &quot;close_code.h&quot;
</programlisting><simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_struct_s_d_l___surface">SDL_Surface</link></para>

<para>A collection of pixels used in software blitting. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Surface flags    </title>

<para><anchor xml:id="__1amgrpd2eeaf52e16b8c367d79016ab953cd2b"/>These are the currently supported flags for the <link linkend="_struct_s_d_l___surface">SDL_Surface</link>. </para>
        <itemizedlist>
            <listitem><para>#define <link linkend="__s_d_l__surface_8h_1a59c7111f96872f973d0f058362761776">SDL_SWSURFACE</link>   0</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__surface_8h_1a4a5f795a69ac626fba73c4bd0bfd9626">SDL_PREALLOC</link>   0x00000001</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__surface_8h_1a3b3d53ad7ba0b7294ca25251d88d40fb">SDL_RLEACCEL</link>   0x00000002</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__surface_8h_1a2d3381f5c76aec3fea3f8b990c2e9f6d">SDL_DONTFREE</link>   0x00000004</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__surface_8h_1a48a8fb403cb1513b0f689b532dc75861">SDL_SIMD_ALIGNED</link>   0x00000008</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__surface_8h_1aba3239116c763175b6ea41ef78b72091">SDL_MUSTLOCK</link>(S)   (((S)-&gt;<link linkend="__s_d_l__opengl__glext_8h_1ac7ba7d3cce3d19ca020e056b37231289">flags</link> &amp; <link linkend="__s_d_l__surface_8h_1a3b3d53ad7ba0b7294ca25251d88d40fb">SDL_RLEACCEL</link>) != 0)</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__surface_8h_1ae63aa646481001be542220a8733c3ce0">SDL_LoadBMP</link>(file)   <link linkend="__s_d_l__surface_8h_1a30572a53ecbd5a2c260d9aafc464503c">SDL_LoadBMP_RW</link>(<link linkend="__s_d_l__rwops_8h_1a898d9ad749f054f6b6780bff411fd33a">SDL_RWFromFile</link>(file, &quot;rb&quot;), 1)</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__surface_8h_1a425e7a69acbdf2bd9ba46d332d917320">SDL_SaveBMP</link>(surface,  file)           <link linkend="__s_d_l__surface_8h_1aadc126a4edeafb5033d5e942cf32db6a">SDL_SaveBMP_RW</link>(surface, <link linkend="__s_d_l__rwops_8h_1a898d9ad749f054f6b6780bff411fd33a">SDL_RWFromFile</link>(file, &quot;wb&quot;), 1)</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__surface_8h_1aad8d7ebe5e953593cb7d91373e73ba9a">SDL_BlitSurface</link>   <link linkend="__s_d_l__surface_8h_1ac418c4404813eeb32f4e1b24f9deae96">SDL_UpperBlit</link></para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__surface_8h_1a0be5f27c24e29a61096c2f59610ff1bf">SDL_BlitScaled</link>   <link linkend="__s_d_l__surface_8h_1a90ac01634e9ee33764fcf5ec7bc43c46">SDL_UpperBlitScaled</link></para>
</listitem>
            <listitem><para>enum <link linkend="__s_d_l__surface_8h_1a00a564600207cec7a2cb50a6e20d2446">SDL_YUV_CONVERSION_MODE</link> { <link linkend="__s_d_l__surface_8h_1a00a564600207cec7a2cb50a6e20d2446a779237ffb78ee935518b83e8ab8a35dc">SDL_YUV_CONVERSION_JPEG</link>
, <link linkend="__s_d_l__surface_8h_1a00a564600207cec7a2cb50a6e20d2446a58058f0ed3146de73b031e256aa2aaaa">SDL_YUV_CONVERSION_BT601</link>
, <link linkend="__s_d_l__surface_8h_1a00a564600207cec7a2cb50a6e20d2446a806aeb86ff618a298206cbf921c0202a">SDL_YUV_CONVERSION_BT709</link>
, <link linkend="__s_d_l__surface_8h_1a00a564600207cec7a2cb50a6e20d2446acbf0cb1b718195c6c0960d4471a5ed0a">SDL_YUV_CONVERSION_AUTOMATIC</link>
 }</para>

<para>The formula used for converting between YUV and RGB. </para>
</listitem>
            <listitem><para>typedef struct <link linkend="_struct_s_d_l___surface">SDL_Surface</link> <link linkend="__s_d_l__surface_8h_1ad894d177fae95d7a1c0d23597b69e569">SDL_Surface</link></para>

<para>A collection of pixels used in software blitting. </para>
</listitem>
            <listitem><para>typedef int(<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> * <link linkend="__s_d_l__surface_8h_1ab2d7366d99a08693d476b98760690947">SDL_blit</link>) (struct <link linkend="_struct_s_d_l___surface">SDL_Surface</link> *<link linkend="__s_d_l__opengl__glext_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>, <link linkend="_struct_s_d_l___rect">SDL_Rect</link> *srcrect, struct <link linkend="_struct_s_d_l___surface">SDL_Surface</link> *<link linkend="__s_d_l__opengl__glext_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>, <link linkend="_struct_s_d_l___rect">SDL_Rect</link> *dstrect)</para>

<para>The type of function used for surface blitting functions. </para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="_struct_s_d_l___surface">SDL_Surface</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__surface_8h_1a46e9fd3961922c6888a19b0462a75b24">SDL_CreateRGBSurface</link> (<link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> <link linkend="__s_d_l__opengl__glext_8h_1ac7ba7d3cce3d19ca020e056b37231289">flags</link>, int <link linkend="__s_d_l__opengl_8h_1a9a82cf3caff84cabc4598e2619faac17">width</link>, int <link linkend="__s_d_l__opengl_8h_1aa352f2804b9902ac30769c00dde75d5f">height</link>, int <link linkend="__s_d_l__opengl_8h_1aa8bd8cf1eef34712fdb6ad58b540a2ee">depth</link>, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> Rmask, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> Gmask, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> Bmask, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> Amask)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="_struct_s_d_l___surface">SDL_Surface</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__surface_8h_1a9a981370beff567b9c7fbf888e272d8f">SDL_CreateRGBSurfaceWithFormat</link> (<link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> <link linkend="__s_d_l__opengl__glext_8h_1ac7ba7d3cce3d19ca020e056b37231289">flags</link>, int <link linkend="__s_d_l__opengl_8h_1a9a82cf3caff84cabc4598e2619faac17">width</link>, int <link linkend="__s_d_l__opengl_8h_1aa352f2804b9902ac30769c00dde75d5f">height</link>, int <link linkend="__s_d_l__opengl_8h_1aa8bd8cf1eef34712fdb6ad58b540a2ee">depth</link>, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> <link linkend="__s_d_l__audio_8h_1a71a65ffd977afe9c3fef116a5bc9ee27">format</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="_struct_s_d_l___surface">SDL_Surface</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__surface_8h_1a6487ace22fb07cc55785bc3be9489835">SDL_CreateRGBSurfaceFrom</link> (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> *<link linkend="__s_d_l__opengl_8h_1ada7ad693ea2e311b8103f4693fc35f80">pixels</link>, int <link linkend="__s_d_l__opengl_8h_1a9a82cf3caff84cabc4598e2619faac17">width</link>, int <link linkend="__s_d_l__opengl_8h_1aa352f2804b9902ac30769c00dde75d5f">height</link>, int <link linkend="__s_d_l__opengl_8h_1aa8bd8cf1eef34712fdb6ad58b540a2ee">depth</link>, int pitch, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> Rmask, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> Gmask, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> Bmask, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> Amask)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="_struct_s_d_l___surface">SDL_Surface</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__surface_8h_1af29df8bb7f57912211f5b6af199dcdc3">SDL_CreateRGBSurfaceWithFormatFrom</link> (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> *<link linkend="__s_d_l__opengl_8h_1ada7ad693ea2e311b8103f4693fc35f80">pixels</link>, int <link linkend="__s_d_l__opengl_8h_1a9a82cf3caff84cabc4598e2619faac17">width</link>, int <link linkend="__s_d_l__opengl_8h_1aa352f2804b9902ac30769c00dde75d5f">height</link>, int <link linkend="__s_d_l__opengl_8h_1aa8bd8cf1eef34712fdb6ad58b540a2ee">depth</link>, int pitch, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> <link linkend="__s_d_l__audio_8h_1a71a65ffd977afe9c3fef116a5bc9ee27">format</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__surface_8h_1a7b8d4f9cc058822501896a2eed81220e">SDL_FreeSurface</link> (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> *surface)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__surface_8h_1a72c780465293acb1f586995943422a17">SDL_SetSurfacePalette</link> (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> *surface, <link linkend="_struct_s_d_l___palette">SDL_Palette</link> *palette)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__surface_8h_1a3d1da1c7ecdaa461fac51a10785f5077">SDL_LockSurface</link> (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> *surface)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__surface_8h_1a56b93f51358b55d7fc213a3ba9b02c24">SDL_UnlockSurface</link> (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> *surface)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="_struct_s_d_l___surface">SDL_Surface</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__surface_8h_1a30572a53ecbd5a2c260d9aafc464503c">SDL_LoadBMP_RW</link> (<link linkend="_struct_s_d_l___r_wops">SDL_RWops</link> *<link linkend="__s_d_l__opengl__glext_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>, int freesrc)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__surface_8h_1aadc126a4edeafb5033d5e942cf32db6a">SDL_SaveBMP_RW</link> (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> *surface, <link linkend="_struct_s_d_l___r_wops">SDL_RWops</link> *<link linkend="__s_d_l__opengl__glext_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>, int freedst)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__surface_8h_1ae2f6d70b8071e83e0c84241dbdcd3a3b">SDL_SetSurfaceRLE</link> (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> *surface, int flag)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__surface_8h_1abdc58e9ce47e2693230a3a1389b1bfb6">SDL_HasSurfaceRLE</link> (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> *surface)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__surface_8h_1a4cbe831b210dc900cb93101352357b73">SDL_SetColorKey</link> (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> *surface, int flag, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> key)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__surface_8h_1a31ca900bd39b6805fc8586472be18c90">SDL_HasColorKey</link> (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> *surface)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__surface_8h_1a2ff80a244bad20f1c4fa85adf1e1deb9">SDL_GetColorKey</link> (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> *surface, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> *key)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__surface_8h_1a4edf978396e3f562d43c672630e0ca71">SDL_SetSurfaceColorMod</link> (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> *surface, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> <link linkend="__s_d_l__opengl_8h_1a42ce7cdc612e53abee15043f80220d97">r</link>, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> <link linkend="__s_d_l__opengl__glext_8h_1acaceb3a655ff28b75259860bcb868f9f">g</link>, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> <link linkend="__s_d_l__opengl__glext_8h_1a0f71581a41fd2264c8944126dabbd010">b</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__surface_8h_1a5db1ae32b7884b598d86424e205c3a86">SDL_GetSurfaceColorMod</link> (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> *surface, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> *<link linkend="__s_d_l__opengl_8h_1a42ce7cdc612e53abee15043f80220d97">r</link>, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> *<link linkend="__s_d_l__opengl__glext_8h_1acaceb3a655ff28b75259860bcb868f9f">g</link>, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> *<link linkend="__s_d_l__opengl__glext_8h_1a0f71581a41fd2264c8944126dabbd010">b</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__surface_8h_1a0035f0239f0588d16c57aff7672be174">SDL_SetSurfaceAlphaMod</link> (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> *surface, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> <link linkend="__s_d_l__opengl__glext_8h_1ac03904b1f7e359bb2acf10a755e97c5a">alpha</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__surface_8h_1a09a99bb24420857e85071e39607678f6">SDL_GetSurfaceAlphaMod</link> (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> *surface, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> *<link linkend="__s_d_l__opengl__glext_8h_1ac03904b1f7e359bb2acf10a755e97c5a">alpha</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__surface_8h_1a35f5b3b64c503c4a8da01566f62976a9">SDL_SetSurfaceBlendMode</link> (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> *surface, <link linkend="__s_d_l__blendmode_8h_1a850d3c67a878fd6698a1c8dbb1eabf1e">SDL_BlendMode</link> blendMode)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__surface_8h_1a95570c617879f45bf7e2e4d330534f6b">SDL_GetSurfaceBlendMode</link> (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> *surface, <link linkend="__s_d_l__blendmode_8h_1a850d3c67a878fd6698a1c8dbb1eabf1e">SDL_BlendMode</link> *blendMode)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__surface_8h_1a6cf2c30be55f51fe9e4faf97e3f8d08b">SDL_SetClipRect</link> (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> *surface, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> *rect)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__surface_8h_1a7d7f71b94748a1b0db3b5b769834ed27">SDL_GetClipRect</link> (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> *surface, <link linkend="_struct_s_d_l___rect">SDL_Rect</link> *rect)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="_struct_s_d_l___surface">SDL_Surface</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__surface_8h_1a1702789e69f61f2ecc5ce848464533c5">SDL_DuplicateSurface</link> (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> *surface)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="_struct_s_d_l___surface">SDL_Surface</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__surface_8h_1a5bcce95525131d59a3039994a5ebdc7e">SDL_ConvertSurface</link> (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> *<link linkend="__s_d_l__opengl__glext_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>, const <link linkend="_struct_s_d_l___pixel_format">SDL_PixelFormat</link> *fmt, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> <link linkend="__s_d_l__opengl__glext_8h_1ac7ba7d3cce3d19ca020e056b37231289">flags</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="_struct_s_d_l___surface">SDL_Surface</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__surface_8h_1a32edde1eab798bd958c09dd08135ca8a">SDL_ConvertSurfaceFormat</link> (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> *<link linkend="__s_d_l__opengl__glext_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> pixel_format, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> <link linkend="__s_d_l__opengl__glext_8h_1ac7ba7d3cce3d19ca020e056b37231289">flags</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__surface_8h_1a339c5728a1181e2d6334ad07e1e84440">SDL_ConvertPixels</link> (int <link linkend="__s_d_l__opengl_8h_1a9a82cf3caff84cabc4598e2619faac17">width</link>, int <link linkend="__s_d_l__opengl_8h_1aa352f2804b9902ac30769c00dde75d5f">height</link>, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> src_format, const <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> *<link linkend="__s_d_l__opengl__glext_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>, int src_pitch, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> dst_format, <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> *<link linkend="__s_d_l__opengl__glext_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>, int dst_pitch)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__surface_8h_1ab6af6b224b687e7c6413106b785743d3">SDL_PremultiplyAlpha</link> (int <link linkend="__s_d_l__opengl_8h_1a9a82cf3caff84cabc4598e2619faac17">width</link>, int <link linkend="__s_d_l__opengl_8h_1aa352f2804b9902ac30769c00dde75d5f">height</link>, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> src_format, const <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> *<link linkend="__s_d_l__opengl__glext_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>, int src_pitch, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> dst_format, <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> *<link linkend="__s_d_l__opengl__glext_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>, int dst_pitch)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__surface_8h_1a98b3595458c6271303d6470cb2b2c721">SDL_FillRect</link> (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> *<link linkend="__s_d_l__opengl__glext_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> *rect, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> <link linkend="__s_d_l__opengl__glext_8h_1a3ea846f998d64f079b86052b6c4193a8">color</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__surface_8h_1a7b893162f400b8193ff6ca628ec784b6">SDL_FillRects</link> (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> *<link linkend="__s_d_l__opengl__glext_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> *rects, int <link linkend="__s_d_l__opengl_8h_1a619bc20e8198de3bd3f3d7fc34de66b2">count</link>, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> <link linkend="__s_d_l__opengl__glext_8h_1a3ea846f998d64f079b86052b6c4193a8">color</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__surface_8h_1ac418c4404813eeb32f4e1b24f9deae96">SDL_UpperBlit</link> (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> *<link linkend="__s_d_l__opengl__glext_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> *srcrect, <link linkend="_struct_s_d_l___surface">SDL_Surface</link> *<link linkend="__s_d_l__opengl__glext_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>, <link linkend="_struct_s_d_l___rect">SDL_Rect</link> *dstrect)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__surface_8h_1a82bd1c0e0886d77e287207fe6351bf87">SDL_LowerBlit</link> (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> *<link linkend="__s_d_l__opengl__glext_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>, <link linkend="_struct_s_d_l___rect">SDL_Rect</link> *srcrect, <link linkend="_struct_s_d_l___surface">SDL_Surface</link> *<link linkend="__s_d_l__opengl__glext_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>, <link linkend="_struct_s_d_l___rect">SDL_Rect</link> *dstrect)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__surface_8h_1aee44fe7d5dba376a971793d70ffcf55c">SDL_SoftStretch</link> (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> *<link linkend="__s_d_l__opengl__glext_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> *srcrect, <link linkend="_struct_s_d_l___surface">SDL_Surface</link> *<link linkend="__s_d_l__opengl__glext_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> *dstrect)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__surface_8h_1ac2fe0fda20d38a16ec1802da9d6e49a0">SDL_SoftStretchLinear</link> (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> *<link linkend="__s_d_l__opengl__glext_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> *srcrect, <link linkend="_struct_s_d_l___surface">SDL_Surface</link> *<link linkend="__s_d_l__opengl__glext_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> *dstrect)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__surface_8h_1a90ac01634e9ee33764fcf5ec7bc43c46">SDL_UpperBlitScaled</link> (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> *<link linkend="__s_d_l__opengl__glext_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> *srcrect, <link linkend="_struct_s_d_l___surface">SDL_Surface</link> *<link linkend="__s_d_l__opengl__glext_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>, <link linkend="_struct_s_d_l___rect">SDL_Rect</link> *dstrect)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__surface_8h_1a5c6b2f06726600d41ff75ff259d4383b">SDL_LowerBlitScaled</link> (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> *<link linkend="__s_d_l__opengl__glext_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>, <link linkend="_struct_s_d_l___rect">SDL_Rect</link> *srcrect, <link linkend="_struct_s_d_l___surface">SDL_Surface</link> *<link linkend="__s_d_l__opengl__glext_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>, <link linkend="_struct_s_d_l___rect">SDL_Rect</link> *dstrect)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__surface_8h_1a35875bf88b2d78e0990f5f13ef1cd0e1">SDL_SetYUVConversionMode</link> (<link linkend="__s_d_l__surface_8h_1a00a564600207cec7a2cb50a6e20d2446">SDL_YUV_CONVERSION_MODE</link> <link linkend="__s_d_l__opengl__glext_8h_1a1e71d9c196e4683cc06c4b54d53f7ef5">mode</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__surface_8h_1a00a564600207cec7a2cb50a6e20d2446">SDL_YUV_CONVERSION_MODE</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__surface_8h_1a61d2c4412423e5d1a0e3426ee678d262">SDL_GetYUVConversionMode</link> (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__surface_8h_1a00a564600207cec7a2cb50a6e20d2446">SDL_YUV_CONVERSION_MODE</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__surface_8h_1a1cfad98219e074988d0c5731e304cda4">SDL_GetYUVConversionModeForResolution</link> (int <link linkend="__s_d_l__opengl_8h_1a9a82cf3caff84cabc4598e2619faac17">width</link>, int <link linkend="__s_d_l__opengl_8h_1aa352f2804b9902ac30769c00dde75d5f">height</link>)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Header file for <link linkend="_struct_s_d_l___surface">SDL_Surface</link> definition and management functions. </para>
</section>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="__s_d_l__surface_8h_1a0be5f27c24e29a61096c2f59610ff1bf"/><section>
    <title>SDL_BlitScaled</title>
<indexterm><primary>SDL_BlitScaled</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_BlitScaled</secondary></indexterm>
<para><computeroutput>#define SDL_BlitScaled   <link linkend="__s_d_l__surface_8h_1a90ac01634e9ee33764fcf5ec7bc43c46">SDL_UpperBlitScaled</link></computeroutput></para></section>
<anchor xml:id="__s_d_l__surface_8h_1aad8d7ebe5e953593cb7d91373e73ba9a"/><section>
    <title>SDL_BlitSurface</title>
<indexterm><primary>SDL_BlitSurface</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_BlitSurface</secondary></indexterm>
<para><computeroutput>#define SDL_BlitSurface   <link linkend="__s_d_l__surface_8h_1ac418c4404813eeb32f4e1b24f9deae96">SDL_UpperBlit</link></computeroutput></para>
<para>Performs a fast blit from the source surface to the destination surface.</para>

<para>This assumes that the source and destination rectangles are the same size. If either <computeroutput>srcrect</computeroutput> or <computeroutput>dstrect</computeroutput> are NULL, the entire surface (<computeroutput>src</computeroutput> or <computeroutput>dst</computeroutput>) is copied. The final blit rectangles are saved in <computeroutput>srcrect</computeroutput> and <computeroutput>dstrect</computeroutput> after all clipping is performed.</para>

<para><formalpara><title>Returns</title>

<para>0 if the blit is successful, otherwise it returns -1.</para>
</formalpara>
The blit function should not be called on a locked surface.</para>

<para>The blit semantics for surfaces with and without blending and colorkey are defined as follows: <literallayout><computeroutput>RGBA-&gt;RGB:
  Source surface blend mode set to SDL_BLENDMODE_BLEND:
    alpha-blend (using the source alpha-channel and per-surface alpha)
    SDL_SRCCOLORKEY ignored.
  Source surface blend mode set to SDL_BLENDMODE_NONE:
    copy RGB.
    if SDL_SRCCOLORKEY set, only copy the pixels matching the
    RGB values of the source color key, ignoring alpha in the
    comparison.

RGB-&gt;RGBA:
  Source surface blend mode set to SDL_BLENDMODE_BLEND:
    alpha-blend (using the source per-surface alpha)
  Source surface blend mode set to SDL_BLENDMODE_NONE:
    copy RGB, set destination alpha to source per-surface alpha value.
  both:
    if SDL_SRCCOLORKEY set, only copy the pixels matching the
    source color key.

RGBA-&gt;RGBA:
  Source surface blend mode set to SDL_BLENDMODE_BLEND:
    alpha-blend (using the source alpha-channel and per-surface alpha)
    SDL_SRCCOLORKEY ignored.
  Source surface blend mode set to SDL_BLENDMODE_NONE:
    copy all of RGBA to the destination.
    if SDL_SRCCOLORKEY set, only copy the pixels matching the
    RGB values of the source color key, ignoring alpha in the
    comparison.

RGB-&gt;RGB:
  Source surface blend mode set to SDL_BLENDMODE_BLEND:
    alpha-blend (using the source per-surface alpha)
  Source surface blend mode set to SDL_BLENDMODE_NONE:
    copy RGB.
  both:
    if SDL_SRCCOLORKEY set, only copy the pixels matching the
    source color key.
</computeroutput></literallayout></para>

<para>You should call <link linkend="__s_d_l__surface_8h_1aad8d7ebe5e953593cb7d91373e73ba9a">SDL_BlitSurface()</link> unless you know exactly how SDL blitting works internally and how to use the other blit functions. </para>
</section>
<anchor xml:id="__s_d_l__surface_8h_1a2d3381f5c76aec3fea3f8b990c2e9f6d"/><section>
    <title>SDL_DONTFREE</title>
<indexterm><primary>SDL_DONTFREE</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_DONTFREE</secondary></indexterm>
<para><computeroutput>#define SDL_DONTFREE   0x00000004</computeroutput></para>
<para>Surface is referenced internally </para>
</section>
<anchor xml:id="__s_d_l__surface_8h_1ae63aa646481001be542220a8733c3ce0"/><section>
    <title>SDL_LoadBMP</title>
<indexterm><primary>SDL_LoadBMP</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_LoadBMP</secondary></indexterm>
<para><computeroutput>#define SDL_LoadBMP( file)   <link linkend="__s_d_l__surface_8h_1a30572a53ecbd5a2c260d9aafc464503c">SDL_LoadBMP_RW</link>(<link linkend="__s_d_l__rwops_8h_1a898d9ad749f054f6b6780bff411fd33a">SDL_RWFromFile</link>(file, &quot;rb&quot;), 1)</computeroutput></para>
<para>Load a surface from a file.</para>

<para>Convenience macro. </para>
</section>
<anchor xml:id="__s_d_l__surface_8h_1aba3239116c763175b6ea41ef78b72091"/><section>
    <title>SDL_MUSTLOCK</title>
<indexterm><primary>SDL_MUSTLOCK</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_MUSTLOCK</secondary></indexterm>
<para><computeroutput>#define SDL_MUSTLOCK( S)   (((S)-&gt;<link linkend="__s_d_l__opengl__glext_8h_1ac7ba7d3cce3d19ca020e056b37231289">flags</link> &amp; <link linkend="__s_d_l__surface_8h_1a3b3d53ad7ba0b7294ca25251d88d40fb">SDL_RLEACCEL</link>) != 0)</computeroutput></para>
<para>Evaluates to true if the surface needs to be locked before access. </para>
</section>
<anchor xml:id="__s_d_l__surface_8h_1a4a5f795a69ac626fba73c4bd0bfd9626"/><section>
    <title>SDL_PREALLOC</title>
<indexterm><primary>SDL_PREALLOC</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_PREALLOC</secondary></indexterm>
<para><computeroutput>#define SDL_PREALLOC   0x00000001</computeroutput></para>
<para>Surface uses preallocated memory </para>
</section>
<anchor xml:id="__s_d_l__surface_8h_1a3b3d53ad7ba0b7294ca25251d88d40fb"/><section>
    <title>SDL_RLEACCEL</title>
<indexterm><primary>SDL_RLEACCEL</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_RLEACCEL</secondary></indexterm>
<para><computeroutput>#define SDL_RLEACCEL   0x00000002</computeroutput></para>
<para>Surface is RLE encoded </para>
</section>
<anchor xml:id="__s_d_l__surface_8h_1a425e7a69acbdf2bd9ba46d332d917320"/><section>
    <title>SDL_SaveBMP</title>
<indexterm><primary>SDL_SaveBMP</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_SaveBMP</secondary></indexterm>
<para><computeroutput>#define SDL_SaveBMP( surface,  file)           <link linkend="__s_d_l__surface_8h_1aadc126a4edeafb5033d5e942cf32db6a">SDL_SaveBMP_RW</link>(surface, <link linkend="__s_d_l__rwops_8h_1a898d9ad749f054f6b6780bff411fd33a">SDL_RWFromFile</link>(file, &quot;wb&quot;), 1)</computeroutput></para>
<para>Save a surface to a file.</para>

<para>Convenience macro. </para>
</section>
<anchor xml:id="__s_d_l__surface_8h_1a48a8fb403cb1513b0f689b532dc75861"/><section>
    <title>SDL_SIMD_ALIGNED</title>
<indexterm><primary>SDL_SIMD_ALIGNED</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_SIMD_ALIGNED</secondary></indexterm>
<para><computeroutput>#define SDL_SIMD_ALIGNED   0x00000008</computeroutput></para>
<para>Surface uses aligned memory </para>
</section>
<anchor xml:id="__s_d_l__surface_8h_1a59c7111f96872f973d0f058362761776"/><section>
    <title>SDL_SWSURFACE</title>
<indexterm><primary>SDL_SWSURFACE</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_SWSURFACE</secondary></indexterm>
<para><computeroutput>#define SDL_SWSURFACE   0</computeroutput></para>
<para>Just here for compatibility </para>
</section>
</section>
<section>
<title>Typedef Documentation</title>
<anchor xml:id="__s_d_l__surface_8h_1ab2d7366d99a08693d476b98760690947"/><section>
    <title>SDL_blit</title>
<indexterm><primary>SDL_blit</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_blit</secondary></indexterm>
<para><computeroutput>typedef int(<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> * SDL_blit) (struct <link linkend="_struct_s_d_l___surface">SDL_Surface</link> *<link linkend="__s_d_l__opengl__glext_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>, <link linkend="_struct_s_d_l___rect">SDL_Rect</link> *srcrect, struct <link linkend="_struct_s_d_l___surface">SDL_Surface</link> *<link linkend="__s_d_l__opengl__glext_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>, <link linkend="_struct_s_d_l___rect">SDL_Rect</link> *dstrect)</computeroutput></para><para>

<para>The type of function used for surface blitting functions. </para>
</para>
</section>
<anchor xml:id="__s_d_l__surface_8h_1ad894d177fae95d7a1c0d23597b69e569"/><section>
    <title>SDL_Surface</title>
<indexterm><primary>SDL_Surface</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_Surface</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_struct_s_d_l___surface">SDL_Surface</link> <link linkend="_struct_s_d_l___surface">SDL_Surface</link></computeroutput></para><para>

<para>A collection of pixels used in software blitting. </para>
</para>

<para><note><title>Note</title>

<para>This structure should be treated as read-only, except for <computeroutput>pixels</computeroutput>, which, if not NULL, contains the raw pixel data for the surface. </para>
</note>
</para>
</section>
</section>
<section>
<title>Enumeration Type Documentation</title>
<anchor xml:id="__s_d_l__surface_8h_1a00a564600207cec7a2cb50a6e20d2446"/><section>
    <title>SDL_YUV_CONVERSION_MODE</title>
<indexterm><primary>SDL_YUV_CONVERSION_MODE</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_YUV_CONVERSION_MODE</secondary></indexterm>
<para><computeroutput>enum <link linkend="__s_d_l__surface_8h_1a00a564600207cec7a2cb50a6e20d2446">SDL_YUV_CONVERSION_MODE</link></computeroutput></para><para>

<para>The formula used for converting between YUV and RGB. </para>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>SDL_YUV_CONVERSION_JPEG</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_YUV_CONVERSION_JPEG</secondary></indexterm>
<anchor xml:id="__s_d_l__surface_8h_1a00a564600207cec7a2cb50a6e20d2446a779237ffb78ee935518b83e8ab8a35dc"/>SDL_YUV_CONVERSION_JPEG</entry><entry>
<para>Full range JPEG </para>
</entry></row><row><entry><indexterm><primary>SDL_YUV_CONVERSION_BT601</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_YUV_CONVERSION_BT601</secondary></indexterm>
<anchor xml:id="__s_d_l__surface_8h_1a00a564600207cec7a2cb50a6e20d2446a58058f0ed3146de73b031e256aa2aaaa"/>SDL_YUV_CONVERSION_BT601</entry><entry>
<para>BT.601 (the default) </para>
</entry></row><row><entry><indexterm><primary>SDL_YUV_CONVERSION_BT709</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_YUV_CONVERSION_BT709</secondary></indexterm>
<anchor xml:id="__s_d_l__surface_8h_1a00a564600207cec7a2cb50a6e20d2446a806aeb86ff618a298206cbf921c0202a"/>SDL_YUV_CONVERSION_BT709</entry><entry>
<para>BT.709 </para>
</entry></row><row><entry><indexterm><primary>SDL_YUV_CONVERSION_AUTOMATIC</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_YUV_CONVERSION_AUTOMATIC</secondary></indexterm>
<anchor xml:id="__s_d_l__surface_8h_1a00a564600207cec7a2cb50a6e20d2446acbf0cb1b718195c6c0960d4471a5ed0a"/>SDL_YUV_CONVERSION_AUTOMATIC</entry><entry>
<para>BT.601 for SD content, BT.709 for HD content </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="__s_d_l__surface_8h_1a339c5728a1181e2d6334ad07e1e84440"/><section>
    <title>SDL_ConvertPixels()</title>
<indexterm><primary>SDL_ConvertPixels</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_ConvertPixels</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_ConvertPixels (int width, int height, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> src_format, const <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> * src, int src_pitch, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> dst_format, <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> * dst, int dst_pitch)</computeroutput></para>
<para>Copy a block of pixels of one format to another format.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>width</entry><entry>
<para>the width of the block to copy, in pixels </para>
</entry>
                            </row>
                            <row>
<entry>height</entry><entry>
<para>the height of the block to copy, in pixels </para>
</entry>
                            </row>
                            <row>
<entry>src_format</entry><entry>
<para>an SDL_PixelFormatEnum value of the <computeroutput>src</computeroutput> pixels format </para>
</entry>
                            </row>
                            <row>
<entry>src</entry><entry>
<para>a pointer to the source pixels </para>
</entry>
                            </row>
                            <row>
<entry>src_pitch</entry><entry>
<para>the pitch of the source pixels, in bytes </para>
</entry>
                            </row>
                            <row>
<entry>dst_format</entry><entry>
<para>an SDL_PixelFormatEnum value of the <computeroutput>dst</computeroutput> pixels format </para>
</entry>
                            </row>
                            <row>
<entry>dst</entry><entry>
<para>a pointer to be filled in with new pixel data </para>
</entry>
                            </row>
                            <row>
<entry>dst_pitch</entry><entry>
<para>the pitch of the destination pixels, in bytes </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0. </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__surface_8h_1a5bcce95525131d59a3039994a5ebdc7e"/><section>
    <title>SDL_ConvertSurface()</title>
<indexterm><primary>SDL_ConvertSurface</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_ConvertSurface</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="_struct_s_d_l___surface">SDL_Surface</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_ConvertSurface (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> * src, const <link linkend="_struct_s_d_l___pixel_format">SDL_PixelFormat</link> * fmt, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> flags)</computeroutput></para>
<para>Copy an existing surface to a new surface of the specified format.</para>

<para>This function is used to optimize images for faster <emphasis>repeat</emphasis> blitting. This is accomplished by converting the original and storing the result as a new surface. The new, optimized surface can then be used as the source for future blits, making them faster.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>src</entry><entry>
<para>the existing <link linkend="_struct_s_d_l___surface">SDL_Surface</link> structure to convert </para>
</entry>
                            </row>
                            <row>
<entry>fmt</entry><entry>
<para>the <link linkend="_struct_s_d_l___pixel_format">SDL_PixelFormat</link> structure that the new surface is optimized for </para>
</entry>
                            </row>
                            <row>
<entry>flags</entry><entry>
<para>the flags are unused and should be set to 0; this is a leftover from SDL 1.2&apos;s API </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>the new <link linkend="_struct_s_d_l___surface">SDL_Surface</link> structure that is created or NULL if it fails; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__pixels_8h_1af047e43ec12651a6a7a2d74d3ec8a3e5">SDL_AllocFormat</link> </para>

<para><link linkend="__s_d_l__surface_8h_1a32edde1eab798bd958c09dd08135ca8a">SDL_ConvertSurfaceFormat</link> </para>

<para><link linkend="__s_d_l__surface_8h_1a46e9fd3961922c6888a19b0462a75b24">SDL_CreateRGBSurface</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__surface_8h_1a32edde1eab798bd958c09dd08135ca8a"/><section>
    <title>SDL_ConvertSurfaceFormat()</title>
<indexterm><primary>SDL_ConvertSurfaceFormat</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_ConvertSurfaceFormat</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="_struct_s_d_l___surface">SDL_Surface</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_ConvertSurfaceFormat (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> * src, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> pixel_format, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> flags)</computeroutput></para>
<para>Copy an existing surface to a new surface of the specified format enum.</para>

<para>This function operates just like <link linkend="__s_d_l__surface_8h_1a5bcce95525131d59a3039994a5ebdc7e">SDL_ConvertSurface()</link>, but accepts an SDL_PixelFormatEnum value instead of an <link linkend="_struct_s_d_l___pixel_format">SDL_PixelFormat</link> structure. As such, it might be easier to call but it doesn&apos;t have access to palette information for the destination surface, in case that would be important.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>src</entry><entry>
<para>the existing <link linkend="_struct_s_d_l___surface">SDL_Surface</link> structure to convert </para>
</entry>
                            </row>
                            <row>
<entry>pixel_format</entry><entry>
<para>the SDL_PixelFormatEnum that the new surface is optimized for </para>
</entry>
                            </row>
                            <row>
<entry>flags</entry><entry>
<para>the flags are unused and should be set to 0; this is a leftover from SDL 1.2&apos;s API </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>the new <link linkend="_struct_s_d_l___surface">SDL_Surface</link> structure that is created or NULL if it fails; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__pixels_8h_1af047e43ec12651a6a7a2d74d3ec8a3e5">SDL_AllocFormat</link> </para>

<para><link linkend="__s_d_l__surface_8h_1a5bcce95525131d59a3039994a5ebdc7e">SDL_ConvertSurface</link> </para>

<para><link linkend="__s_d_l__surface_8h_1a46e9fd3961922c6888a19b0462a75b24">SDL_CreateRGBSurface</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__surface_8h_1a46e9fd3961922c6888a19b0462a75b24"/><section>
    <title>SDL_CreateRGBSurface()</title>
<indexterm><primary>SDL_CreateRGBSurface</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_CreateRGBSurface</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="_struct_s_d_l___surface">SDL_Surface</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_CreateRGBSurface (<link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> flags, int width, int height, int depth, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> Rmask, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> Gmask, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> Bmask, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> Amask)</computeroutput></para>
<para>Allocate a new RGB surface.</para>

<para>If <computeroutput>depth</computeroutput> is 4 or 8 bits, an empty palette is allocated for the surface. If <computeroutput>depth</computeroutput> is greater than 8 bits, the pixel format is set using the [RGBA]mask parameters.</para>

<para>The [RGBA]mask parameters are the bitmasks used to extract that color from a pixel. For instance, <computeroutput>Rmask</computeroutput> being 0xFF000000 means the red data is stored in the most significant byte. Using zeros for the RGB masks sets a default value, based on the depth. For example:</para>

<para><literallayout><computeroutput>&#32;{<link linkend="__s_d_l__opengl__glext_8h_1a1f2d7f8147412c43ba2303a56f97ee73">c</link>++}
<link linkend="__s_d_l__surface_8h_1a46e9fd3961922c6888a19b0462a75b24">SDL_CreateRGBSurface</link>(0,<link linkend="__s_d_l__opengl__glext_8h_1a6ee8f168a7ab6785a9bb57c6715dad99">w</link>,<link linkend="__s_d_l__opengl__glext_8h_1afa0fb1b5e976920c0abeff2dca3ed774">h</link>,32,0,0,0,0);
</computeroutput></literallayout></para>

<para>However, using zero for the Amask results in an Amask of 0.</para>

<para>By default surfaces with an alpha mask are set up for blending as with:</para>

<para><literallayout><computeroutput>&#32;{<link linkend="__s_d_l__opengl__glext_8h_1a1f2d7f8147412c43ba2303a56f97ee73">c</link>++}
<link linkend="__s_d_l__surface_8h_1a35f5b3b64c503c4a8da01566f62976a9">SDL_SetSurfaceBlendMode</link>(surface,&#32;<link linkend="__s_d_l__blendmode_8h_1a850d3c67a878fd6698a1c8dbb1eabf1eae421984ebfeedd59dfea21e1bdda1883">SDL_BLENDMODE_BLEND</link>)
</computeroutput></literallayout></para>

<para>You can change this by calling <link linkend="__s_d_l__surface_8h_1a35f5b3b64c503c4a8da01566f62976a9">SDL_SetSurfaceBlendMode()</link> and selecting a different <computeroutput>blendMode</computeroutput>.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>flags</entry><entry>
<para>the flags are unused and should be set to 0 </para>
</entry>
                            </row>
                            <row>
<entry>width</entry><entry>
<para>the width of the surface </para>
</entry>
                            </row>
                            <row>
<entry>height</entry><entry>
<para>the height of the surface </para>
</entry>
                            </row>
                            <row>
<entry>depth</entry><entry>
<para>the depth of the surface in bits </para>
</entry>
                            </row>
                            <row>
<entry>Rmask</entry><entry>
<para>the red mask for the pixels </para>
</entry>
                            </row>
                            <row>
<entry>Gmask</entry><entry>
<para>the green mask for the pixels </para>
</entry>
                            </row>
                            <row>
<entry>Bmask</entry><entry>
<para>the blue mask for the pixels </para>
</entry>
                            </row>
                            <row>
<entry>Amask</entry><entry>
<para>the alpha mask for the pixels </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>the new <link linkend="_struct_s_d_l___surface">SDL_Surface</link> structure that is created or NULL if it fails; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__surface_8h_1a6487ace22fb07cc55785bc3be9489835">SDL_CreateRGBSurfaceFrom</link> </para>

<para><link linkend="__s_d_l__surface_8h_1a9a981370beff567b9c7fbf888e272d8f">SDL_CreateRGBSurfaceWithFormat</link> </para>

<para><link linkend="__s_d_l__surface_8h_1a7b8d4f9cc058822501896a2eed81220e">SDL_FreeSurface</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__surface_8h_1a6487ace22fb07cc55785bc3be9489835"/><section>
    <title>SDL_CreateRGBSurfaceFrom()</title>
<indexterm><primary>SDL_CreateRGBSurfaceFrom</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_CreateRGBSurfaceFrom</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="_struct_s_d_l___surface">SDL_Surface</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_CreateRGBSurfaceFrom (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> * pixels, int width, int height, int depth, int pitch, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> Rmask, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> Gmask, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> Bmask, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> Amask)</computeroutput></para>
<para>Allocate a new RGB surface with existing pixel data.</para>

<para>This function operates mostly like <link linkend="__s_d_l__surface_8h_1a46e9fd3961922c6888a19b0462a75b24">SDL_CreateRGBSurface()</link>, except it does not allocate memory for the pixel data, instead the caller provides an existing buffer of data for the surface to use.</para>

<para>No copy is made of the pixel data. Pixel data is not managed automatically; you must free the surface before you free the pixel data.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>pixels</entry><entry>
<para>a pointer to existing pixel data </para>
</entry>
                            </row>
                            <row>
<entry>width</entry><entry>
<para>the width of the surface </para>
</entry>
                            </row>
                            <row>
<entry>height</entry><entry>
<para>the height of the surface </para>
</entry>
                            </row>
                            <row>
<entry>depth</entry><entry>
<para>the depth of the surface in bits </para>
</entry>
                            </row>
                            <row>
<entry>pitch</entry><entry>
<para>the pitch of the surface in bytes </para>
</entry>
                            </row>
                            <row>
<entry>Rmask</entry><entry>
<para>the red mask for the pixels </para>
</entry>
                            </row>
                            <row>
<entry>Gmask</entry><entry>
<para>the green mask for the pixels </para>
</entry>
                            </row>
                            <row>
<entry>Bmask</entry><entry>
<para>the blue mask for the pixels </para>
</entry>
                            </row>
                            <row>
<entry>Amask</entry><entry>
<para>the alpha mask for the pixels </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>the new <link linkend="_struct_s_d_l___surface">SDL_Surface</link> structure that is created or NULL if it fails; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__surface_8h_1a46e9fd3961922c6888a19b0462a75b24">SDL_CreateRGBSurface</link> </para>

<para><link linkend="__s_d_l__surface_8h_1a9a981370beff567b9c7fbf888e272d8f">SDL_CreateRGBSurfaceWithFormat</link> </para>

<para><link linkend="__s_d_l__surface_8h_1a7b8d4f9cc058822501896a2eed81220e">SDL_FreeSurface</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__surface_8h_1a9a981370beff567b9c7fbf888e272d8f"/><section>
    <title>SDL_CreateRGBSurfaceWithFormat()</title>
<indexterm><primary>SDL_CreateRGBSurfaceWithFormat</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_CreateRGBSurfaceWithFormat</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="_struct_s_d_l___surface">SDL_Surface</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_CreateRGBSurfaceWithFormat (<link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> flags, int width, int height, int depth, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> format)</computeroutput></para>
<para>Allocate a new RGB surface with a specific pixel format.</para>

<para>This function operates mostly like <link linkend="__s_d_l__surface_8h_1a46e9fd3961922c6888a19b0462a75b24">SDL_CreateRGBSurface()</link>, except instead of providing pixel color masks, you provide it with a predefined format from SDL_PixelFormatEnum.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>flags</entry><entry>
<para>the flags are unused and should be set to 0 </para>
</entry>
                            </row>
                            <row>
<entry>width</entry><entry>
<para>the width of the surface </para>
</entry>
                            </row>
                            <row>
<entry>height</entry><entry>
<para>the height of the surface </para>
</entry>
                            </row>
                            <row>
<entry>depth</entry><entry>
<para>the depth of the surface in bits </para>
</entry>
                            </row>
                            <row>
<entry>format</entry><entry>
<para>the SDL_PixelFormatEnum for the new surface&apos;s pixel format. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>the new <link linkend="_struct_s_d_l___surface">SDL_Surface</link> structure that is created or NULL if it fails; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.5.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__surface_8h_1a46e9fd3961922c6888a19b0462a75b24">SDL_CreateRGBSurface</link> </para>

<para><link linkend="__s_d_l__surface_8h_1a6487ace22fb07cc55785bc3be9489835">SDL_CreateRGBSurfaceFrom</link> </para>

<para><link linkend="__s_d_l__surface_8h_1a7b8d4f9cc058822501896a2eed81220e">SDL_FreeSurface</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__surface_8h_1af29df8bb7f57912211f5b6af199dcdc3"/><section>
    <title>SDL_CreateRGBSurfaceWithFormatFrom()</title>
<indexterm><primary>SDL_CreateRGBSurfaceWithFormatFrom</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_CreateRGBSurfaceWithFormatFrom</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="_struct_s_d_l___surface">SDL_Surface</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_CreateRGBSurfaceWithFormatFrom (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> * pixels, int width, int height, int depth, int pitch, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> format)</computeroutput></para>
<para>Allocate a new RGB surface with with a specific pixel format and existing pixel data.</para>

<para>This function operates mostly like <link linkend="__s_d_l__surface_8h_1a6487ace22fb07cc55785bc3be9489835">SDL_CreateRGBSurfaceFrom()</link>, except instead of providing pixel color masks, you provide it with a predefined format from SDL_PixelFormatEnum.</para>

<para>No copy is made of the pixel data. Pixel data is not managed automatically; you must free the surface before you free the pixel data.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>pixels</entry><entry>
<para>a pointer to existing pixel data </para>
</entry>
                            </row>
                            <row>
<entry>width</entry><entry>
<para>the width of the surface </para>
</entry>
                            </row>
                            <row>
<entry>height</entry><entry>
<para>the height of the surface </para>
</entry>
                            </row>
                            <row>
<entry>depth</entry><entry>
<para>the depth of the surface in bits </para>
</entry>
                            </row>
                            <row>
<entry>pitch</entry><entry>
<para>the pitch of the surface in bytes </para>
</entry>
                            </row>
                            <row>
<entry>format</entry><entry>
<para>the SDL_PixelFormatEnum for the new surface&apos;s pixel format. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>the new <link linkend="_struct_s_d_l___surface">SDL_Surface</link> structure that is created or NULL if it fails; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.5.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__surface_8h_1a6487ace22fb07cc55785bc3be9489835">SDL_CreateRGBSurfaceFrom</link> </para>

<para><link linkend="__s_d_l__surface_8h_1a9a981370beff567b9c7fbf888e272d8f">SDL_CreateRGBSurfaceWithFormat</link> </para>

<para><link linkend="__s_d_l__surface_8h_1a7b8d4f9cc058822501896a2eed81220e">SDL_FreeSurface</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__surface_8h_1a1702789e69f61f2ecc5ce848464533c5"/><section>
    <title>SDL_DuplicateSurface()</title>
<indexterm><primary>SDL_DuplicateSurface</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_DuplicateSurface</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="_struct_s_d_l___surface">SDL_Surface</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_DuplicateSurface (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> * surface)</computeroutput></para></section>
<anchor xml:id="__s_d_l__surface_8h_1a98b3595458c6271303d6470cb2b2c721"/><section>
    <title>SDL_FillRect()</title>
<indexterm><primary>SDL_FillRect</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_FillRect</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_FillRect (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> * dst, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> * rect, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> color)</computeroutput></para>
<para>Perform a fast fill of a rectangle with a specific color.</para>

<para><computeroutput>color</computeroutput> should be a pixel of the format used by the surface, and can be generated by <link linkend="__s_d_l__pixels_8h_1a157cf64c250c578722b939ea11a85b39">SDL_MapRGB()</link> or <link linkend="__s_d_l__pixels_8h_1a8cc5000a066e052d4d36070ea91ac942">SDL_MapRGBA()</link>. If the color value contains an alpha component then the destination is simply filled with that alpha information, no blending takes place.</para>

<para>If there is a clip rectangle set on the destination (set via <link linkend="__s_d_l__surface_8h_1a6cf2c30be55f51fe9e4faf97e3f8d08b">SDL_SetClipRect()</link>), then this function will fill based on the intersection of the clip rectangle and <computeroutput>rect</computeroutput>.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>dst</entry><entry>
<para>the <link linkend="_struct_s_d_l___surface">SDL_Surface</link> structure that is the drawing target </para>
</entry>
                            </row>
                            <row>
<entry>rect</entry><entry>
<para>the <link linkend="_struct_s_d_l___rect">SDL_Rect</link> structure representing the rectangle to fill, or NULL to fill the entire surface </para>
</entry>
                            </row>
                            <row>
<entry>color</entry><entry>
<para>the color to fill with </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__surface_8h_1a7b893162f400b8193ff6ca628ec784b6">SDL_FillRects</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__surface_8h_1a7b893162f400b8193ff6ca628ec784b6"/><section>
    <title>SDL_FillRects()</title>
<indexterm><primary>SDL_FillRects</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_FillRects</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_FillRects (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> * dst, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> * rects, int count, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> color)</computeroutput></para>
<para>Perform a fast fill of a set of rectangles with a specific color.</para>

<para><computeroutput>color</computeroutput> should be a pixel of the format used by the surface, and can be generated by <link linkend="__s_d_l__pixels_8h_1a157cf64c250c578722b939ea11a85b39">SDL_MapRGB()</link> or <link linkend="__s_d_l__pixels_8h_1a8cc5000a066e052d4d36070ea91ac942">SDL_MapRGBA()</link>. If the color value contains an alpha component then the destination is simply filled with that alpha information, no blending takes place.</para>

<para>If there is a clip rectangle set on the destination (set via <link linkend="__s_d_l__surface_8h_1a6cf2c30be55f51fe9e4faf97e3f8d08b">SDL_SetClipRect()</link>), then this function will fill based on the intersection of the clip rectangle and <computeroutput>rect</computeroutput>.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>dst</entry><entry>
<para>the <link linkend="_struct_s_d_l___surface">SDL_Surface</link> structure that is the drawing target </para>
</entry>
                            </row>
                            <row>
<entry>rects</entry><entry>
<para>an array of SDL_Rects representing the rectangles to fill. </para>
</entry>
                            </row>
                            <row>
<entry>count</entry><entry>
<para>the number of rectangles in the array </para>
</entry>
                            </row>
                            <row>
<entry>color</entry><entry>
<para>the color to fill with </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__surface_8h_1a98b3595458c6271303d6470cb2b2c721">SDL_FillRect</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__surface_8h_1a7b8d4f9cc058822501896a2eed81220e"/><section>
    <title>SDL_FreeSurface()</title>
<indexterm><primary>SDL_FreeSurface</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_FreeSurface</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_FreeSurface (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> * surface)</computeroutput></para>
<para>Free an RGB surface.</para>

<para>It is safe to pass NULL to this function.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>surface</entry><entry>
<para>the <link linkend="_struct_s_d_l___surface">SDL_Surface</link> to free.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__surface_8h_1a46e9fd3961922c6888a19b0462a75b24">SDL_CreateRGBSurface</link> </para>

<para><link linkend="__s_d_l__surface_8h_1a6487ace22fb07cc55785bc3be9489835">SDL_CreateRGBSurfaceFrom</link> </para>

<para><link linkend="__s_d_l__surface_8h_1ae63aa646481001be542220a8733c3ce0">SDL_LoadBMP</link> </para>

<para><link linkend="__s_d_l__surface_8h_1a30572a53ecbd5a2c260d9aafc464503c">SDL_LoadBMP_RW</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__surface_8h_1a7d7f71b94748a1b0db3b5b769834ed27"/><section>
    <title>SDL_GetClipRect()</title>
<indexterm><primary>SDL_GetClipRect</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_GetClipRect</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetClipRect (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> * surface, <link linkend="_struct_s_d_l___rect">SDL_Rect</link> * rect)</computeroutput></para>
<para>Get the clipping rectangle for a surface.</para>

<para>When <computeroutput>surface</computeroutput> is the destination of a blit, only the area within the clip rectangle is drawn into.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>surface</entry><entry>
<para>the <link linkend="_struct_s_d_l___surface">SDL_Surface</link> structure representing the surface to be clipped </para>
</entry>
                            </row>
                            <row>
<entry>rect</entry><entry>
<para>an <link linkend="_struct_s_d_l___rect">SDL_Rect</link> structure filled in with the clipping rectangle for the surface</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__surface_8h_1aad8d7ebe5e953593cb7d91373e73ba9a">SDL_BlitSurface</link> </para>

<para><link linkend="__s_d_l__surface_8h_1a6cf2c30be55f51fe9e4faf97e3f8d08b">SDL_SetClipRect</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__surface_8h_1a2ff80a244bad20f1c4fa85adf1e1deb9"/><section>
    <title>SDL_GetColorKey()</title>
<indexterm><primary>SDL_GetColorKey</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_GetColorKey</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetColorKey (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> * surface, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> * key)</computeroutput></para>
<para>Get the color key (transparent pixel) for a surface.</para>

<para>The color key is a pixel of the format used by the surface, as generated by <link linkend="__s_d_l__pixels_8h_1a157cf64c250c578722b939ea11a85b39">SDL_MapRGB()</link>.</para>

<para>If the surface doesn&apos;t have color key enabled this function returns -1.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>surface</entry><entry>
<para>the <link linkend="_struct_s_d_l___surface">SDL_Surface</link> structure to query </para>
</entry>
                            </row>
                            <row>
<entry>key</entry><entry>
<para>a pointer filled in with the transparent pixel </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__surface_8h_1aad8d7ebe5e953593cb7d91373e73ba9a">SDL_BlitSurface</link> </para>

<para><link linkend="__s_d_l__surface_8h_1a4cbe831b210dc900cb93101352357b73">SDL_SetColorKey</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__surface_8h_1a09a99bb24420857e85071e39607678f6"/><section>
    <title>SDL_GetSurfaceAlphaMod()</title>
<indexterm><primary>SDL_GetSurfaceAlphaMod</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_GetSurfaceAlphaMod</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetSurfaceAlphaMod (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> * surface, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> * alpha)</computeroutput></para>
<para>Get the additional alpha value used in blit operations.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>surface</entry><entry>
<para>the <link linkend="_struct_s_d_l___surface">SDL_Surface</link> structure to query </para>
</entry>
                            </row>
                            <row>
<entry>alpha</entry><entry>
<para>a pointer filled in with the current alpha value </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__surface_8h_1a5db1ae32b7884b598d86424e205c3a86">SDL_GetSurfaceColorMod</link> </para>

<para><link linkend="__s_d_l__surface_8h_1a0035f0239f0588d16c57aff7672be174">SDL_SetSurfaceAlphaMod</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__surface_8h_1a95570c617879f45bf7e2e4d330534f6b"/><section>
    <title>SDL_GetSurfaceBlendMode()</title>
<indexterm><primary>SDL_GetSurfaceBlendMode</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_GetSurfaceBlendMode</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetSurfaceBlendMode (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> * surface, <link linkend="__s_d_l__blendmode_8h_1a850d3c67a878fd6698a1c8dbb1eabf1e">SDL_BlendMode</link> * blendMode)</computeroutput></para>
<para>Get the blend mode used for blit operations.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>surface</entry><entry>
<para>the <link linkend="_struct_s_d_l___surface">SDL_Surface</link> structure to query </para>
</entry>
                            </row>
                            <row>
<entry>blendMode</entry><entry>
<para>a pointer filled in with the current SDL_BlendMode </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__surface_8h_1a35f5b3b64c503c4a8da01566f62976a9">SDL_SetSurfaceBlendMode</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__surface_8h_1a5db1ae32b7884b598d86424e205c3a86"/><section>
    <title>SDL_GetSurfaceColorMod()</title>
<indexterm><primary>SDL_GetSurfaceColorMod</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_GetSurfaceColorMod</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetSurfaceColorMod (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> * surface, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> * r, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> * g, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> * b)</computeroutput></para>
<para>Get the additional color value multiplied into blit operations.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>surface</entry><entry>
<para>the <link linkend="_struct_s_d_l___surface">SDL_Surface</link> structure to query </para>
</entry>
                            </row>
                            <row>
<entry>r</entry><entry>
<para>a pointer filled in with the current red color value </para>
</entry>
                            </row>
                            <row>
<entry>g</entry><entry>
<para>a pointer filled in with the current green color value </para>
</entry>
                            </row>
                            <row>
<entry>b</entry><entry>
<para>a pointer filled in with the current blue color value </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__surface_8h_1a09a99bb24420857e85071e39607678f6">SDL_GetSurfaceAlphaMod</link> </para>

<para><link linkend="__s_d_l__surface_8h_1a4edf978396e3f562d43c672630e0ca71">SDL_SetSurfaceColorMod</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__surface_8h_1a61d2c4412423e5d1a0e3426ee678d262"/><section>
    <title>SDL_GetYUVConversionMode()</title>
<indexterm><primary>SDL_GetYUVConversionMode</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_GetYUVConversionMode</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__surface_8h_1a00a564600207cec7a2cb50a6e20d2446">SDL_YUV_CONVERSION_MODE</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetYUVConversionMode (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> )</computeroutput></para>
<para>Get the YUV conversion mode</para>

<para><formalpara><title>Since</title>

<para>This function is available since SDL 2.0.8. </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__surface_8h_1a1cfad98219e074988d0c5731e304cda4"/><section>
    <title>SDL_GetYUVConversionModeForResolution()</title>
<indexterm><primary>SDL_GetYUVConversionModeForResolution</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_GetYUVConversionModeForResolution</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__surface_8h_1a00a564600207cec7a2cb50a6e20d2446">SDL_YUV_CONVERSION_MODE</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetYUVConversionModeForResolution (int width, int height)</computeroutput></para>
<para>Get the YUV conversion mode, returning the correct mode for the resolution when the current conversion mode is SDL_YUV_CONVERSION_AUTOMATIC</para>

<para><formalpara><title>Since</title>

<para>This function is available since SDL 2.0.8. </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__surface_8h_1a31ca900bd39b6805fc8586472be18c90"/><section>
    <title>SDL_HasColorKey()</title>
<indexterm><primary>SDL_HasColorKey</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_HasColorKey</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_HasColorKey (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> * surface)</computeroutput></para>
<para>Returns whether the surface has a color key</para>

<para>It is safe to pass a NULL <computeroutput>surface</computeroutput> here; it will return SDL_FALSE.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>surface</entry><entry>
<para>the <link linkend="_struct_s_d_l___surface">SDL_Surface</link> structure to query </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>SDL_TRUE if the surface has a color key, SDL_FALSE otherwise.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.9.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__surface_8h_1a4cbe831b210dc900cb93101352357b73">SDL_SetColorKey</link> </para>

<para><link linkend="__s_d_l__surface_8h_1a2ff80a244bad20f1c4fa85adf1e1deb9">SDL_GetColorKey</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__surface_8h_1abdc58e9ce47e2693230a3a1389b1bfb6"/><section>
    <title>SDL_HasSurfaceRLE()</title>
<indexterm><primary>SDL_HasSurfaceRLE</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_HasSurfaceRLE</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_HasSurfaceRLE (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> * surface)</computeroutput></para>
<para>Returns whether the surface is RLE enabled</para>

<para>It is safe to pass a NULL <computeroutput>surface</computeroutput> here; it will return SDL_FALSE.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>surface</entry><entry>
<para>the <link linkend="_struct_s_d_l___surface">SDL_Surface</link> structure to query </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>SDL_TRUE if the surface is RLE enabled, SDL_FALSE otherwise.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.14.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__surface_8h_1ae2f6d70b8071e83e0c84241dbdcd3a3b">SDL_SetSurfaceRLE</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__surface_8h_1a30572a53ecbd5a2c260d9aafc464503c"/><section>
    <title>SDL_LoadBMP_RW()</title>
<indexterm><primary>SDL_LoadBMP_RW</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_LoadBMP_RW</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="_struct_s_d_l___surface">SDL_Surface</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_LoadBMP_RW (<link linkend="_struct_s_d_l___r_wops">SDL_RWops</link> * src, int freesrc)</computeroutput></para>
<para>Load a BMP image from a seekable SDL data stream.</para>

<para>The new surface should be freed with <link linkend="__s_d_l__surface_8h_1a7b8d4f9cc058822501896a2eed81220e">SDL_FreeSurface()</link>. Not doing so will result in a memory leak.</para>

<para>src is an open <link linkend="_struct_s_d_l___r_wops">SDL_RWops</link> buffer, typically loaded with SDL_RWFromFile. Alternitavely, you might also use the macro SDL_LoadBMP to load a bitmap from a file, convert it to an <link linkend="_struct_s_d_l___surface">SDL_Surface</link> and then close the file.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>src</entry><entry>
<para>the data stream for the surface </para>
</entry>
                            </row>
                            <row>
<entry>freesrc</entry><entry>
<para>non-zero to close the stream after being read </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>a pointer to a new <link linkend="_struct_s_d_l___surface">SDL_Surface</link> structure or NULL if there was an error; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__surface_8h_1a7b8d4f9cc058822501896a2eed81220e">SDL_FreeSurface</link> </para>

<para><link linkend="__s_d_l__rwops_8h_1a898d9ad749f054f6b6780bff411fd33a">SDL_RWFromFile</link> </para>

<para><link linkend="__s_d_l__surface_8h_1ae63aa646481001be542220a8733c3ce0">SDL_LoadBMP</link> </para>

<para><link linkend="__s_d_l__surface_8h_1aadc126a4edeafb5033d5e942cf32db6a">SDL_SaveBMP_RW</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__surface_8h_1a3d1da1c7ecdaa461fac51a10785f5077"/><section>
    <title>SDL_LockSurface()</title>
<indexterm><primary>SDL_LockSurface</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_LockSurface</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_LockSurface (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> * surface)</computeroutput></para>
<para>Set up a surface for directly accessing the pixels.</para>

<para>Between calls to <link linkend="__s_d_l__surface_8h_1a3d1da1c7ecdaa461fac51a10785f5077">SDL_LockSurface()</link> / <link linkend="__s_d_l__surface_8h_1a56b93f51358b55d7fc213a3ba9b02c24">SDL_UnlockSurface()</link>, you can write to and read from <computeroutput>surface-&gt;pixels</computeroutput>, using the pixel format stored in <computeroutput>surface-&gt;format</computeroutput>. Once you are done accessing the surface, you should use <link linkend="__s_d_l__surface_8h_1a56b93f51358b55d7fc213a3ba9b02c24">SDL_UnlockSurface()</link> to release it.</para>

<para>Not all surfaces require locking. If <computeroutput><link linkend="__s_d_l__surface_8h_1aba3239116c763175b6ea41ef78b72091">SDL_MUSTLOCK(surface)</link></computeroutput> evaluates to 0, then you can read and write to the surface at any time, and the pixel format of the surface will not change.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>surface</entry><entry>
<para>the <link linkend="_struct_s_d_l___surface">SDL_Surface</link> structure to be locked </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__surface_8h_1aba3239116c763175b6ea41ef78b72091">SDL_MUSTLOCK</link> </para>

<para><link linkend="__s_d_l__surface_8h_1a56b93f51358b55d7fc213a3ba9b02c24">SDL_UnlockSurface</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__surface_8h_1a82bd1c0e0886d77e287207fe6351bf87"/><section>
    <title>SDL_LowerBlit()</title>
<indexterm><primary>SDL_LowerBlit</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_LowerBlit</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_LowerBlit (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> * src, <link linkend="_struct_s_d_l___rect">SDL_Rect</link> * srcrect, <link linkend="_struct_s_d_l___surface">SDL_Surface</link> * dst, <link linkend="_struct_s_d_l___rect">SDL_Rect</link> * dstrect)</computeroutput></para>
<para>Perform low-level surface blitting only.</para>

<para>This is a semi-private blit function and it performs low-level surface blitting, assuming the input rectangles have already been clipped.</para>

<para>Unless you know what you&apos;re doing, you should be using <link linkend="__s_d_l__surface_8h_1aad8d7ebe5e953593cb7d91373e73ba9a">SDL_BlitSurface()</link> instead.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>src</entry><entry>
<para>the <link linkend="_struct_s_d_l___surface">SDL_Surface</link> structure to be copied from </para>
</entry>
                            </row>
                            <row>
<entry>srcrect</entry><entry>
<para>the <link linkend="_struct_s_d_l___rect">SDL_Rect</link> structure representing the rectangle to be copied, or NULL to copy the entire surface </para>
</entry>
                            </row>
                            <row>
<entry>dst</entry><entry>
<para>the <link linkend="_struct_s_d_l___surface">SDL_Surface</link> structure that is the blit target </para>
</entry>
                            </row>
                            <row>
<entry>dstrect</entry><entry>
<para>the <link linkend="_struct_s_d_l___rect">SDL_Rect</link> structure representing the rectangle that is copied into </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__surface_8h_1aad8d7ebe5e953593cb7d91373e73ba9a">SDL_BlitSurface</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__surface_8h_1a5c6b2f06726600d41ff75ff259d4383b"/><section>
    <title>SDL_LowerBlitScaled()</title>
<indexterm><primary>SDL_LowerBlitScaled</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_LowerBlitScaled</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_LowerBlitScaled (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> * src, <link linkend="_struct_s_d_l___rect">SDL_Rect</link> * srcrect, <link linkend="_struct_s_d_l___surface">SDL_Surface</link> * dst, <link linkend="_struct_s_d_l___rect">SDL_Rect</link> * dstrect)</computeroutput></para>
<para>Perform low-level surface scaled blitting only.</para>

<para>This is a semi-private function and it performs low-level surface blitting, assuming the input rectangles have already been clipped.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>src</entry><entry>
<para>the <link linkend="_struct_s_d_l___surface">SDL_Surface</link> structure to be copied from </para>
</entry>
                            </row>
                            <row>
<entry>srcrect</entry><entry>
<para>the <link linkend="_struct_s_d_l___rect">SDL_Rect</link> structure representing the rectangle to be copied </para>
</entry>
                            </row>
                            <row>
<entry>dst</entry><entry>
<para>the <link linkend="_struct_s_d_l___surface">SDL_Surface</link> structure that is the blit target </para>
</entry>
                            </row>
                            <row>
<entry>dstrect</entry><entry>
<para>the <link linkend="_struct_s_d_l___rect">SDL_Rect</link> structure representing the rectangle that is copied into </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__surface_8h_1a0be5f27c24e29a61096c2f59610ff1bf">SDL_BlitScaled</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__surface_8h_1ab6af6b224b687e7c6413106b785743d3"/><section>
    <title>SDL_PremultiplyAlpha()</title>
<indexterm><primary>SDL_PremultiplyAlpha</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_PremultiplyAlpha</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_PremultiplyAlpha (int width, int height, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> src_format, const <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> * src, int src_pitch, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> dst_format, <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> * dst, int dst_pitch)</computeroutput></para>
<para>Premultiply the alpha on a block of pixels.</para>

<para>This is safe to use with src == dst, but not for other overlapping areas.</para>

<para>This function is currently only implemented for SDL_PIXELFORMAT_ARGB8888.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>width</entry><entry>
<para>the width of the block to convert, in pixels </para>
</entry>
                            </row>
                            <row>
<entry>height</entry><entry>
<para>the height of the block to convert, in pixels </para>
</entry>
                            </row>
                            <row>
<entry>src_format</entry><entry>
<para>an SDL_PixelFormatEnum value of the <computeroutput>src</computeroutput> pixels format </para>
</entry>
                            </row>
                            <row>
<entry>src</entry><entry>
<para>a pointer to the source pixels </para>
</entry>
                            </row>
                            <row>
<entry>src_pitch</entry><entry>
<para>the pitch of the source pixels, in bytes </para>
</entry>
                            </row>
                            <row>
<entry>dst_format</entry><entry>
<para>an SDL_PixelFormatEnum value of the <computeroutput>dst</computeroutput> pixels format </para>
</entry>
                            </row>
                            <row>
<entry>dst</entry><entry>
<para>a pointer to be filled in with premultiplied pixel data </para>
</entry>
                            </row>
                            <row>
<entry>dst_pitch</entry><entry>
<para>the pitch of the destination pixels, in bytes </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.18. </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__surface_8h_1aadc126a4edeafb5033d5e942cf32db6a"/><section>
    <title>SDL_SaveBMP_RW()</title>
<indexterm><primary>SDL_SaveBMP_RW</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_SaveBMP_RW</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_SaveBMP_RW (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> * surface, <link linkend="_struct_s_d_l___r_wops">SDL_RWops</link> * dst, int freedst)</computeroutput></para>
<para>Save a surface to a seekable SDL data stream in BMP format.</para>

<para>Surfaces with a 24-bit, 32-bit and paletted 8-bit format get saved in the BMP directly. Other RGB formats with 8-bit or higher get converted to a 24-bit surface or, if they have an alpha mask or a colorkey, to a 32-bit surface before they are saved. YUV and paletted 1-bit and 4-bit formats are not supported.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>surface</entry><entry>
<para>the <link linkend="_struct_s_d_l___surface">SDL_Surface</link> structure containing the image to be saved </para>
</entry>
                            </row>
                            <row>
<entry>dst</entry><entry>
<para>a data stream to save to </para>
</entry>
                            </row>
                            <row>
<entry>freedst</entry><entry>
<para>non-zero to close the stream after being written </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__surface_8h_1a30572a53ecbd5a2c260d9aafc464503c">SDL_LoadBMP_RW</link> </para>

<para><link linkend="__s_d_l__surface_8h_1a425e7a69acbdf2bd9ba46d332d917320">SDL_SaveBMP</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__surface_8h_1a6cf2c30be55f51fe9e4faf97e3f8d08b"/><section>
    <title>SDL_SetClipRect()</title>
<indexterm><primary>SDL_SetClipRect</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_SetClipRect</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_SetClipRect (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> * surface, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> * rect)</computeroutput></para>
<para>Set the clipping rectangle for a surface.</para>

<para>When <computeroutput>surface</computeroutput> is the destination of a blit, only the area within the clip rectangle is drawn into.</para>

<para>Note that blits are automatically clipped to the edges of the source and destination surfaces.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>surface</entry><entry>
<para>the <link linkend="_struct_s_d_l___surface">SDL_Surface</link> structure to be clipped </para>
</entry>
                            </row>
                            <row>
<entry>rect</entry><entry>
<para>the <link linkend="_struct_s_d_l___rect">SDL_Rect</link> structure representing the clipping rectangle, or NULL to disable clipping </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>SDL_TRUE if the rectangle intersects the surface, otherwise SDL_FALSE and blits will be completely clipped.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__surface_8h_1aad8d7ebe5e953593cb7d91373e73ba9a">SDL_BlitSurface</link> </para>

<para><link linkend="__s_d_l__surface_8h_1a7d7f71b94748a1b0db3b5b769834ed27">SDL_GetClipRect</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__surface_8h_1a4cbe831b210dc900cb93101352357b73"/><section>
    <title>SDL_SetColorKey()</title>
<indexterm><primary>SDL_SetColorKey</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_SetColorKey</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_SetColorKey (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> * surface, int flag, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> key)</computeroutput></para>
<para>Set the color key (transparent pixel) in a surface.</para>

<para>The color key defines a pixel value that will be treated as transparent in a blit. For example, one can use this to specify that cyan pixels should be considered transparent, and therefore not rendered.</para>

<para>It is a pixel of the format used by the surface, as generated by <link linkend="__s_d_l__pixels_8h_1a157cf64c250c578722b939ea11a85b39">SDL_MapRGB()</link>.</para>

<para>RLE acceleration can substantially speed up blitting of images with large horizontal runs of transparent pixels. See <link linkend="__s_d_l__surface_8h_1ae2f6d70b8071e83e0c84241dbdcd3a3b">SDL_SetSurfaceRLE()</link> for details.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>surface</entry><entry>
<para>the <link linkend="_struct_s_d_l___surface">SDL_Surface</link> structure to update </para>
</entry>
                            </row>
                            <row>
<entry>flag</entry><entry>
<para>SDL_TRUE to enable color key, SDL_FALSE to disable color key </para>
</entry>
                            </row>
                            <row>
<entry>key</entry><entry>
<para>the transparent pixel </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__surface_8h_1aad8d7ebe5e953593cb7d91373e73ba9a">SDL_BlitSurface</link> </para>

<para><link linkend="__s_d_l__surface_8h_1a2ff80a244bad20f1c4fa85adf1e1deb9">SDL_GetColorKey</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__surface_8h_1a0035f0239f0588d16c57aff7672be174"/><section>
    <title>SDL_SetSurfaceAlphaMod()</title>
<indexterm><primary>SDL_SetSurfaceAlphaMod</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_SetSurfaceAlphaMod</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_SetSurfaceAlphaMod (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> * surface, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> alpha)</computeroutput></para>
<para>Set an additional alpha value used in blit operations.</para>

<para>When this surface is blitted, during the blit operation the source alpha value is modulated by this alpha value according to the following formula:</para>

<para><computeroutput>srcA = srcA * (alpha / 255)</computeroutput></para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>surface</entry><entry>
<para>the <link linkend="_struct_s_d_l___surface">SDL_Surface</link> structure to update </para>
</entry>
                            </row>
                            <row>
<entry>alpha</entry><entry>
<para>the alpha value multiplied into blit operations </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__surface_8h_1a09a99bb24420857e85071e39607678f6">SDL_GetSurfaceAlphaMod</link> </para>

<para><link linkend="__s_d_l__surface_8h_1a4edf978396e3f562d43c672630e0ca71">SDL_SetSurfaceColorMod</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__surface_8h_1a35f5b3b64c503c4a8da01566f62976a9"/><section>
    <title>SDL_SetSurfaceBlendMode()</title>
<indexterm><primary>SDL_SetSurfaceBlendMode</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_SetSurfaceBlendMode</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_SetSurfaceBlendMode (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> * surface, <link linkend="__s_d_l__blendmode_8h_1a850d3c67a878fd6698a1c8dbb1eabf1e">SDL_BlendMode</link> blendMode)</computeroutput></para>
<para>Set the blend mode used for blit operations.</para>

<para>To copy a surface to another surface (or texture) without blending with the existing data, the blendmode of the SOURCE surface should be set to <computeroutput>SDL_BLENDMODE_NONE</computeroutput>.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>surface</entry><entry>
<para>the <link linkend="_struct_s_d_l___surface">SDL_Surface</link> structure to update </para>
</entry>
                            </row>
                            <row>
<entry>blendMode</entry><entry>
<para>the SDL_BlendMode to use for blit blending </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__surface_8h_1a95570c617879f45bf7e2e4d330534f6b">SDL_GetSurfaceBlendMode</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__surface_8h_1a4edf978396e3f562d43c672630e0ca71"/><section>
    <title>SDL_SetSurfaceColorMod()</title>
<indexterm><primary>SDL_SetSurfaceColorMod</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_SetSurfaceColorMod</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_SetSurfaceColorMod (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> * surface, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> r, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> g, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> b)</computeroutput></para>
<para>Set an additional color value multiplied into blit operations.</para>

<para>When this surface is blitted, during the blit operation each source color channel is modulated by the appropriate color value according to the following formula:</para>

<para><computeroutput>srcC = srcC * (color / 255)</computeroutput></para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>surface</entry><entry>
<para>the <link linkend="_struct_s_d_l___surface">SDL_Surface</link> structure to update </para>
</entry>
                            </row>
                            <row>
<entry>r</entry><entry>
<para>the red color value multiplied into blit operations </para>
</entry>
                            </row>
                            <row>
<entry>g</entry><entry>
<para>the green color value multiplied into blit operations </para>
</entry>
                            </row>
                            <row>
<entry>b</entry><entry>
<para>the blue color value multiplied into blit operations </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__surface_8h_1a5db1ae32b7884b598d86424e205c3a86">SDL_GetSurfaceColorMod</link> </para>

<para><link linkend="__s_d_l__surface_8h_1a0035f0239f0588d16c57aff7672be174">SDL_SetSurfaceAlphaMod</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__surface_8h_1a72c780465293acb1f586995943422a17"/><section>
    <title>SDL_SetSurfacePalette()</title>
<indexterm><primary>SDL_SetSurfacePalette</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_SetSurfacePalette</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_SetSurfacePalette (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> * surface, <link linkend="_struct_s_d_l___palette">SDL_Palette</link> * palette)</computeroutput></para>
<para>Set the palette used by a surface.</para>

<para>A single palette can be shared with many surfaces.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>surface</entry><entry>
<para>the <link linkend="_struct_s_d_l___surface">SDL_Surface</link> structure to update </para>
</entry>
                            </row>
                            <row>
<entry>palette</entry><entry>
<para>the <link linkend="_struct_s_d_l___palette">SDL_Palette</link> structure to use </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0. </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__surface_8h_1ae2f6d70b8071e83e0c84241dbdcd3a3b"/><section>
    <title>SDL_SetSurfaceRLE()</title>
<indexterm><primary>SDL_SetSurfaceRLE</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_SetSurfaceRLE</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_SetSurfaceRLE (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> * surface, int flag)</computeroutput></para>
<para>Set the RLE acceleration hint for a surface.</para>

<para>If RLE is enabled, color key and alpha blending blits are much faster, but the surface must be locked before directly accessing the pixels.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>surface</entry><entry>
<para>the <link linkend="_struct_s_d_l___surface">SDL_Surface</link> structure to optimize </para>
</entry>
                            </row>
                            <row>
<entry>flag</entry><entry>
<para>0 to disable, non-zero to enable RLE acceleration </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__surface_8h_1aad8d7ebe5e953593cb7d91373e73ba9a">SDL_BlitSurface</link> </para>

<para><link linkend="__s_d_l__surface_8h_1a3d1da1c7ecdaa461fac51a10785f5077">SDL_LockSurface</link> </para>

<para><link linkend="__s_d_l__surface_8h_1a56b93f51358b55d7fc213a3ba9b02c24">SDL_UnlockSurface</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__surface_8h_1a35875bf88b2d78e0990f5f13ef1cd0e1"/><section>
    <title>SDL_SetYUVConversionMode()</title>
<indexterm><primary>SDL_SetYUVConversionMode</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_SetYUVConversionMode</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_SetYUVConversionMode (<link linkend="__s_d_l__surface_8h_1a00a564600207cec7a2cb50a6e20d2446">SDL_YUV_CONVERSION_MODE</link> mode)</computeroutput></para>
<para>Set the YUV conversion mode</para>

<para><formalpara><title>Since</title>

<para>This function is available since SDL 2.0.8. </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__surface_8h_1aee44fe7d5dba376a971793d70ffcf55c"/><section>
    <title>SDL_SoftStretch()</title>
<indexterm><primary>SDL_SoftStretch</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_SoftStretch</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_SoftStretch (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> * src, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> * srcrect, <link linkend="_struct_s_d_l___surface">SDL_Surface</link> * dst, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> * dstrect)</computeroutput></para>
<para>Perform a fast, low quality, stretch blit between two surfaces of the same format.</para>

<para>Please use <link linkend="__s_d_l__surface_8h_1a0be5f27c24e29a61096c2f59610ff1bf">SDL_BlitScaled()</link> instead.</para>

<para><formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0. </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__surface_8h_1ac2fe0fda20d38a16ec1802da9d6e49a0"/><section>
    <title>SDL_SoftStretchLinear()</title>
<indexterm><primary>SDL_SoftStretchLinear</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_SoftStretchLinear</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_SoftStretchLinear (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> * src, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> * srcrect, <link linkend="_struct_s_d_l___surface">SDL_Surface</link> * dst, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> * dstrect)</computeroutput></para>
<para>Perform bilinear scaling between two surfaces of the same format, 32BPP.</para>

<para><formalpara><title>Since</title>

<para>This function is available since SDL 2.0.16. </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__surface_8h_1a56b93f51358b55d7fc213a3ba9b02c24"/><section>
    <title>SDL_UnlockSurface()</title>
<indexterm><primary>SDL_UnlockSurface</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_UnlockSurface</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_UnlockSurface (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> * surface)</computeroutput></para>
<para>Release a surface after directly accessing the pixels.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>surface</entry><entry>
<para>the <link linkend="_struct_s_d_l___surface">SDL_Surface</link> structure to be unlocked</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__surface_8h_1a3d1da1c7ecdaa461fac51a10785f5077">SDL_LockSurface</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__surface_8h_1ac418c4404813eeb32f4e1b24f9deae96"/><section>
    <title>SDL_UpperBlit()</title>
<indexterm><primary>SDL_UpperBlit</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_UpperBlit</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_UpperBlit (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> * src, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> * srcrect, <link linkend="_struct_s_d_l___surface">SDL_Surface</link> * dst, <link linkend="_struct_s_d_l___rect">SDL_Rect</link> * dstrect)</computeroutput></para>
<para>Perform a fast blit from the source surface to the destination surface.</para>

<para><link linkend="__s_d_l__surface_8h_1ac418c4404813eeb32f4e1b24f9deae96">SDL_UpperBlit()</link> has been replaced by <link linkend="__s_d_l__surface_8h_1aad8d7ebe5e953593cb7d91373e73ba9a">SDL_BlitSurface()</link>, which is merely a macro for this function with a less confusing name.</para>

<para><formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__surface_8h_1aad8d7ebe5e953593cb7d91373e73ba9a">SDL_BlitSurface</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__surface_8h_1a90ac01634e9ee33764fcf5ec7bc43c46"/><section>
    <title>SDL_UpperBlitScaled()</title>
<indexterm><primary>SDL_UpperBlitScaled</primary><secondary>SDL_surface.h</secondary></indexterm>
<indexterm><primary>SDL_surface.h</primary><secondary>SDL_UpperBlitScaled</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_UpperBlitScaled (<link linkend="_struct_s_d_l___surface">SDL_Surface</link> * src, const <link linkend="_struct_s_d_l___rect">SDL_Rect</link> * srcrect, <link linkend="_struct_s_d_l___surface">SDL_Surface</link> * dst, <link linkend="_struct_s_d_l___rect">SDL_Rect</link> * dstrect)</computeroutput></para>
<para>Perform a scaled surface copy to a destination surface.</para>

<para><link linkend="__s_d_l__surface_8h_1a90ac01634e9ee33764fcf5ec7bc43c46">SDL_UpperBlitScaled()</link> has been replaced by <link linkend="__s_d_l__surface_8h_1a0be5f27c24e29a61096c2f59610ff1bf">SDL_BlitScaled()</link>, which is merely a macro for this function with a less confusing name.</para>

<para><formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__surface_8h_1a0be5f27c24e29a61096c2f59610ff1bf">SDL_BlitScaled</link> </para>
</formalpara>
</para>
</section>
</section>
</section>
