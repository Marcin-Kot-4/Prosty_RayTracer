<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__s_d_l__audio_8h" xml:lang="en-US">
<title>D:/RayTracing/include/SDL_audio.h File Reference</title>
<indexterm><primary>D:/RayTracing/include/SDL_audio.h</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &quot;SDL_stdinc.h&quot;
#include &quot;SDL_error.h&quot;
#include &quot;SDL_endian.h&quot;
#include &quot;SDL_mutex.h&quot;
#include &quot;SDL_thread.h&quot;
#include &quot;SDL_rwops.h&quot;
#include &quot;begin_code.h&quot;
#include &quot;close_code.h&quot;
</programlisting><simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_struct_s_d_l___audio_spec">SDL_AudioSpec</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_s_d_l___audio_c_v_t">SDL_AudioCVT</link></para>

<para>A structure to hold a set of audio conversion filters and buffers. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Macros    </title>
<simplesect><title>Audio flags</title>
        <itemizedlist>
            <listitem><para>#define <link linkend="__s_d_l__audio_8h_1ade51417b52dbd9511d56066caae0038b">SDL_AUDIO_MASK_BITSIZE</link>   (0xFF)</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__audio_8h_1a50b4779246a7fbf4a39205a396ec7ea6">SDL_AUDIO_MASK_DATATYPE</link>   (1&lt;&lt;8)</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__audio_8h_1ab070cdd4d92ee3824cafefe24c620326">SDL_AUDIO_MASK_ENDIAN</link>   (1&lt;&lt;12)</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__audio_8h_1a06fc66d3c421c6c9b733854b73d104ce">SDL_AUDIO_MASK_SIGNED</link>   (1&lt;&lt;15)</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__audio_8h_1abe2f2a9193ad3a8fa822787098df266d">SDL_AUDIO_BITSIZE</link>(<link linkend="__s_d_l__opengl_8h_1ad0e63d0edcdbd3d79554076bf309fd47">x</link>)   (<link linkend="__s_d_l__opengl_8h_1ad0e63d0edcdbd3d79554076bf309fd47">x</link> &amp; <link linkend="__s_d_l__audio_8h_1ade51417b52dbd9511d56066caae0038b">SDL_AUDIO_MASK_BITSIZE</link>)</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__audio_8h_1a86ee1651c17955594a547e96b9c94890">SDL_AUDIO_ISFLOAT</link>(<link linkend="__s_d_l__opengl_8h_1ad0e63d0edcdbd3d79554076bf309fd47">x</link>)   (<link linkend="__s_d_l__opengl_8h_1ad0e63d0edcdbd3d79554076bf309fd47">x</link> &amp; <link linkend="__s_d_l__audio_8h_1a50b4779246a7fbf4a39205a396ec7ea6">SDL_AUDIO_MASK_DATATYPE</link>)</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__audio_8h_1a27e82da51370d77f83e4ea2098c9d38c">SDL_AUDIO_ISBIGENDIAN</link>(<link linkend="__s_d_l__opengl_8h_1ad0e63d0edcdbd3d79554076bf309fd47">x</link>)   (<link linkend="__s_d_l__opengl_8h_1ad0e63d0edcdbd3d79554076bf309fd47">x</link> &amp; <link linkend="__s_d_l__audio_8h_1ab070cdd4d92ee3824cafefe24c620326">SDL_AUDIO_MASK_ENDIAN</link>)</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__audio_8h_1a518fa9273a6a8b8b6f1d599ccca71434">SDL_AUDIO_ISSIGNED</link>(<link linkend="__s_d_l__opengl_8h_1ad0e63d0edcdbd3d79554076bf309fd47">x</link>)   (<link linkend="__s_d_l__opengl_8h_1ad0e63d0edcdbd3d79554076bf309fd47">x</link> &amp; <link linkend="__s_d_l__audio_8h_1a06fc66d3c421c6c9b733854b73d104ce">SDL_AUDIO_MASK_SIGNED</link>)</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__audio_8h_1a197decf956e451a5a10e7221974b0548">SDL_AUDIO_ISINT</link>(<link linkend="__s_d_l__opengl_8h_1ad0e63d0edcdbd3d79554076bf309fd47">x</link>)   (!<link linkend="__s_d_l__audio_8h_1a86ee1651c17955594a547e96b9c94890">SDL_AUDIO_ISFLOAT</link>(<link linkend="__s_d_l__opengl_8h_1ad0e63d0edcdbd3d79554076bf309fd47">x</link>))</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__audio_8h_1a2026be07a23986f2b7681a3500c8c341">SDL_AUDIO_ISLITTLEENDIAN</link>(<link linkend="__s_d_l__opengl_8h_1ad0e63d0edcdbd3d79554076bf309fd47">x</link>)   (!<link linkend="__s_d_l__audio_8h_1a27e82da51370d77f83e4ea2098c9d38c">SDL_AUDIO_ISBIGENDIAN</link>(<link linkend="__s_d_l__opengl_8h_1ad0e63d0edcdbd3d79554076bf309fd47">x</link>))</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__audio_8h_1aa9f715eb12c43474ad0aae52976e5095">SDL_AUDIO_ISUNSIGNED</link>(<link linkend="__s_d_l__opengl_8h_1ad0e63d0edcdbd3d79554076bf309fd47">x</link>)   (!<link linkend="__s_d_l__audio_8h_1a518fa9273a6a8b8b6f1d599ccca71434">SDL_AUDIO_ISSIGNED</link>(<link linkend="__s_d_l__opengl_8h_1ad0e63d0edcdbd3d79554076bf309fd47">x</link>))</para>
</listitem>
        </itemizedlist>
</simplesect>
</simplesect>
<simplesect><title>Audio format flags</title>

<para>Defaults to LSB byte order. </para>
        <itemizedlist>
            <listitem><para>#define <link linkend="__s_d_l__audio_8h_1a6468b4b3fc53ada655eca866e491d75f">AUDIO_U8</link>   0x0008</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__audio_8h_1a883b3d4539451e49bf014dde0f9cca29">AUDIO_S8</link>   0x8008</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__audio_8h_1a06808f806896c4d211314990c354b7fc">AUDIO_U16LSB</link>   0x0010</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__audio_8h_1a23838d612e88ce72d82c3e51460f831b">AUDIO_S16LSB</link>   0x8010</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__audio_8h_1a3b8052d0c49d14a2e3edf08eade52d3a">AUDIO_U16MSB</link>   0x1010</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__audio_8h_1a3109dfb1d7aab29dff2b62d630e690ca">AUDIO_S16MSB</link>   0x9010</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__audio_8h_1adee2cdf7dbda44620da17cd58ca819ea">AUDIO_U16</link>   <link linkend="__s_d_l__audio_8h_1a06808f806896c4d211314990c354b7fc">AUDIO_U16LSB</link></para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__audio_8h_1a4f4950d8eee757ebed84e50fb9316b12">AUDIO_S16</link>   <link linkend="__s_d_l__audio_8h_1a23838d612e88ce72d82c3e51460f831b">AUDIO_S16LSB</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect><title>int32 support</title>
        <itemizedlist>
            <listitem><para>#define <link linkend="__s_d_l__audio_8h_1ac81f9cc5739cea67436daf2689d29559">AUDIO_S32LSB</link>   0x8020</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__audio_8h_1a30641d7487680630c231b3415ecd47b6">AUDIO_S32MSB</link>   0x9020</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__audio_8h_1aaffc0931336d0d79717a144039670223">AUDIO_S32</link>   <link linkend="__s_d_l__audio_8h_1ac81f9cc5739cea67436daf2689d29559">AUDIO_S32LSB</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect><title>float32 support</title>
        <itemizedlist>
            <listitem><para>#define <link linkend="__s_d_l__audio_8h_1afaef57ecb718053b572c539e27e72d61">AUDIO_F32LSB</link>   0x8120</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__audio_8h_1a2d57382c01fdcd78cbbbb480605d91ef">AUDIO_F32MSB</link>   0x9120</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__audio_8h_1a4633772ee12935960a25ff8334c29990">AUDIO_F32</link>   <link linkend="__s_d_l__audio_8h_1afaef57ecb718053b572c539e27e72d61">AUDIO_F32LSB</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect><title>Native audio byte ordering</title>
        <itemizedlist>
            <listitem><para>#define <link linkend="__s_d_l__audio_8h_1afafc9f93ee2c583130c4152e243ba5b8">AUDIO_U16SYS</link>   <link linkend="__s_d_l__audio_8h_1a06808f806896c4d211314990c354b7fc">AUDIO_U16LSB</link></para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__audio_8h_1a4722de7e16982dd078f2b8cc64b9bae7">AUDIO_S16SYS</link>   <link linkend="__s_d_l__audio_8h_1a23838d612e88ce72d82c3e51460f831b">AUDIO_S16LSB</link></para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__audio_8h_1aafcbadd8f6fa14a878178bf18b883675">AUDIO_S32SYS</link>   <link linkend="__s_d_l__audio_8h_1ac81f9cc5739cea67436daf2689d29559">AUDIO_S32LSB</link></para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__audio_8h_1af001a94efb4bea024c233cae0cf98e6b">AUDIO_F32SYS</link>   <link linkend="__s_d_l__audio_8h_1afaef57ecb718053b572c539e27e72d61">AUDIO_F32LSB</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Typedefs    </title>
        <itemizedlist>
            <listitem><para>typedef <link linkend="__s_d_l__stdinc_8h_1a31fcc0a076c9068668173ee26d33e42b">Uint16</link> <link linkend="__s_d_l__audio_8h_1a491ed103fd25d920c4e6b7495217ce66">SDL_AudioFormat</link></para>

<para>Audio format flags. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
<simplesect><title>Driver discovery functions</title>

<para>These functions return the list of built in audio drivers, in the order that they are normally initialized by default. </para>
        <itemizedlist>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__audio_8h_1ae3cb6a3321d9ee32f3c05ea0794c5fb8">SDL_GetNumAudioDrivers</link> (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> const char *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__audio_8h_1a607058f35dad9277f3ca097c8fdae610">SDL_GetAudioDriver</link> (int <link linkend="__s_d_l__opengl__glext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>)</para>
</listitem>
        </itemizedlist>
</simplesect>
</simplesect>
<simplesect><title>Audio lock functions</title>

<para>The lock manipulated by these functions protects the callback function. During a <link linkend="__s_d_l__audio_8h_1a7ffa484f230f6085e271a4f43e678f06">SDL_LockAudio()</link>/SDL_UnlockAudio() pair, you can be guaranteed that the callback function is not running. Do not call these from the callback function or you will cause deadlock. </para>
        <itemizedlist>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__audio_8h_1a7ffa484f230f6085e271a4f43e678f06">SDL_LockAudio</link> (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__audio_8h_1a9769845303f88f084f051b99e55b62a1">SDL_LockAudioDevice</link> (<link linkend="__s_d_l__audio_8h_1a677d9d2a6f77a7502a0dc8b45ad211bb">SDL_AudioDeviceID</link> dev)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__audio_8h_1a76d8179bee14dad268e65378058d897d">SDL_UnlockAudio</link> (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__audio_8h_1a37427a5d47e10103f2fff8165d5f9000">SDL_UnlockAudioDevice</link> (<link linkend="__s_d_l__audio_8h_1a677d9d2a6f77a7502a0dc8b45ad211bb">SDL_AudioDeviceID</link> dev)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__audio_8h_1aa176acc650e66e1d38814cbed3ca258e">SDL_CloseAudio</link> (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__audio_8h_1abd910f31079d53b6c0ea8bf32dac0ce6">SDL_CloseAudioDevice</link> (<link linkend="__s_d_l__audio_8h_1a677d9d2a6f77a7502a0dc8b45ad211bb">SDL_AudioDeviceID</link> dev)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Allow change flags    </title>

<para><anchor xml:id="__1amgrp26fc1c9ee882f8e905e88be30d26e4ae"/>Which audio format changes are allowed when opening a device. </para>
        <itemizedlist>
            <listitem><para>#define <link linkend="__s_d_l__audio_8h_1a4b05381c3f0871e9a88b46959365f796">SDL_AUDIO_ALLOW_FREQUENCY_CHANGE</link>   0x00000001</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__audio_8h_1a32dbc13d28bdc43d7e07e080e24fb573">SDL_AUDIO_ALLOW_FORMAT_CHANGE</link>   0x00000002</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__audio_8h_1aad9eab304c2cee512410508811268575">SDL_AUDIO_ALLOW_CHANNELS_CHANGE</link>   0x00000004</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__audio_8h_1a2f5fcb9e11d3479e9e987a5d434d88ba">SDL_AUDIO_ALLOW_SAMPLES_CHANGE</link>   0x00000008</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__audio_8h_1acbee9b7a641274139377898c21df92e8">SDL_AUDIO_ALLOW_ANY_CHANGE</link>   (<link linkend="__s_d_l__audio_8h_1a4b05381c3f0871e9a88b46959365f796">SDL_AUDIO_ALLOW_FREQUENCY_CHANGE</link>|<link linkend="__s_d_l__audio_8h_1a32dbc13d28bdc43d7e07e080e24fb573">SDL_AUDIO_ALLOW_FORMAT_CHANGE</link>|<link linkend="__s_d_l__audio_8h_1aad9eab304c2cee512410508811268575">SDL_AUDIO_ALLOW_CHANNELS_CHANGE</link>|<link linkend="__s_d_l__audio_8h_1a2f5fcb9e11d3479e9e987a5d434d88ba">SDL_AUDIO_ALLOW_SAMPLES_CHANGE</link>)</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__audio_8h_1a3d38380ac4a45a68a0e1c1a7a02bd290">SDL_AUDIOCVT_MAX_FILTERS</link>   9</para>

<para>Upper limit of filters in <link linkend="_struct_s_d_l___audio_c_v_t">SDL_AudioCVT</link>. </para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__audio_8h_1ac34fc6df953e2bae89919edaaa740ff3">SDL_AUDIOCVT_PACKED</link></para>
</listitem>
            <listitem><para>typedef <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link>(<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> * <link linkend="__s_d_l__audio_8h_1a379fcc25845e46bfa80cb3619fc2821c">SDL_AudioCallback</link>) (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> *userdata, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> *<link linkend="__s_d_l__opengl__glext_8h_1a10d3bc96cdfc1d478f52c13d5ffd9316">stream</link>, int <link linkend="__s_d_l__opengl__glext_8h_1a652168017ea9a8bbcead03d5c16269fb">len</link>)</para>
</listitem>
            <listitem><para>typedef struct <link linkend="_struct_s_d_l___audio_spec">SDL_AudioSpec</link> <link linkend="__s_d_l__audio_8h_1ae95b698a5abe9ae3b36f0ab4617e9e14">SDL_AudioSpec</link></para>
</listitem>
            <listitem><para>typedef <link linkend="__s_d_l__audio_8h_1a491ed103fd25d920c4e6b7495217ce66">SDL_AudioFormat</link> <link linkend="__s_d_l__audio_8h_1a71a65ffd977afe9c3fef116a5bc9ee27">format</link></para>
</listitem>
            <listitem><para>typedef struct <link linkend="_struct_s_d_l___audio_c_v_t">SDL_AudioCVT</link> <link linkend="__s_d_l__audio_8h_1afc284f22978d12646dbffa692fe0c0ae">SDL_AudioCVT</link></para>
</listitem>
            <listitem><para>typedef <link linkend="__s_d_l__audio_8h_1aa5cb90967788ada2711894ca158ece01">void</link> (<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> *SDL_AudioFilter)(struct <link linkend="_struct_s_d_l___audio_c_v_t">SDL_AudioCVT</link> *cvt</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Pause audio functions    </title>

<para><anchor xml:id="__1amgrpaf7b771870771b0302bf26b5414a4319"/>These functions pause and unpause the audio callback processing. They should be called with a parameter of 0 after opening the audio device to start playing sound. This is so you can safely initialize data for your callback function after opening the audio device. Silence will be written to the audio device during the pause. </para>
        <itemizedlist>
            <listitem><para>#define <link linkend="__s_d_l__audio_8h_1a611f76dc30ba9891239bcce3f9b472b5">SDL_LoadWAV</link>(file,  spec,  audio_buf,  audio_len)       <link linkend="__s_d_l__audio_8h_1a21df7371c70c5cb31d3b348adaf72c86">SDL_LoadWAV_RW</link>(<link linkend="__s_d_l__rwops_8h_1a898d9ad749f054f6b6780bff411fd33a">SDL_RWFromFile</link>(file, &quot;rb&quot;),1, spec,audio_buf,audio_len)</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__audio_8h_1afa8e5e92d4424b0c599e7c813c91f720">SDL_MIX_MAXVOLUME</link>   128</para>
</listitem>
            <listitem><para>typedef struct _SDL_AudioStream <link linkend="__s_d_l__audio_8h_1a1f8d82f8013b06777000675a9636071e">SDL_AudioStream</link></para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__audio_8h_1aa68e60a33666ff4f2d36f3827b1d6061">SDL_PauseAudio</link> (int pause_on)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__audio_8h_1ab4c8e2a896ccf86599435af81fca928c">SDL_PauseAudioDevice</link> (<link linkend="__s_d_l__audio_8h_1a677d9d2a6f77a7502a0dc8b45ad211bb">SDL_AudioDeviceID</link> dev, int pause_on)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="_struct_s_d_l___audio_spec">SDL_AudioSpec</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__audio_8h_1a21df7371c70c5cb31d3b348adaf72c86">SDL_LoadWAV_RW</link> (<link linkend="_struct_s_d_l___r_wops">SDL_RWops</link> *<link linkend="__s_d_l__opengl__glext_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>, int freesrc, <link linkend="_struct_s_d_l___audio_spec">SDL_AudioSpec</link> *spec, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> **audio_buf, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> *audio_len)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__audio_8h_1a631aa8624575603df2c5ab9257feee59">SDL_FreeWAV</link> (<link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> *audio_buf)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__audio_8h_1a41e1602bc7cd4edb87ca779cf01d40bb">SDL_BuildAudioCVT</link> (<link linkend="_struct_s_d_l___audio_c_v_t">SDL_AudioCVT</link> *cvt, <link linkend="__s_d_l__audio_8h_1a491ed103fd25d920c4e6b7495217ce66">SDL_AudioFormat</link> src_format, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> src_channels, int src_rate, <link linkend="__s_d_l__audio_8h_1a491ed103fd25d920c4e6b7495217ce66">SDL_AudioFormat</link> dst_format, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> dst_channels, int dst_rate)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__audio_8h_1a8e8660222356e07002dde4928118b7df">SDL_ConvertAudio</link> (<link linkend="_struct_s_d_l___audio_c_v_t">SDL_AudioCVT</link> *cvt)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__audio_8h_1a1f8d82f8013b06777000675a9636071e">SDL_AudioStream</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__audio_8h_1a49212d7bdaed59c937ab08fdd3cf804e">SDL_NewAudioStream</link> (const <link linkend="__s_d_l__audio_8h_1a491ed103fd25d920c4e6b7495217ce66">SDL_AudioFormat</link> src_format, const <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> src_channels, const int src_rate, const <link linkend="__s_d_l__audio_8h_1a491ed103fd25d920c4e6b7495217ce66">SDL_AudioFormat</link> dst_format, const <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> dst_channels, const int dst_rate)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__audio_8h_1ae1cb87e81c853b21f025f42f336ad814">SDL_AudioStreamPut</link> (<link linkend="__s_d_l__audio_8h_1a1f8d82f8013b06777000675a9636071e">SDL_AudioStream</link> *<link linkend="__s_d_l__opengl__glext_8h_1a10d3bc96cdfc1d478f52c13d5ffd9316">stream</link>, const <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> *<link linkend="__s_d_l__opengl__glext_8h_1aa3b73d9ca9f2e2396cbeae1ce6ce14be">buf</link>, int <link linkend="__s_d_l__opengl__glext_8h_1a652168017ea9a8bbcead03d5c16269fb">len</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__audio_8h_1a6a8996f0cb3adf37d4c1c5ed4eef5b18">SDL_AudioStreamGet</link> (<link linkend="__s_d_l__audio_8h_1a1f8d82f8013b06777000675a9636071e">SDL_AudioStream</link> *<link linkend="__s_d_l__opengl__glext_8h_1a10d3bc96cdfc1d478f52c13d5ffd9316">stream</link>, <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> *<link linkend="__s_d_l__opengl__glext_8h_1aa3b73d9ca9f2e2396cbeae1ce6ce14be">buf</link>, int <link linkend="__s_d_l__opengl__glext_8h_1a652168017ea9a8bbcead03d5c16269fb">len</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__audio_8h_1a4667c3464058d7be76c1f8349d7656de">SDL_AudioStreamAvailable</link> (<link linkend="__s_d_l__audio_8h_1a1f8d82f8013b06777000675a9636071e">SDL_AudioStream</link> *<link linkend="__s_d_l__opengl__glext_8h_1a10d3bc96cdfc1d478f52c13d5ffd9316">stream</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__audio_8h_1add31a8f8ccd99c87b71bef2a9cf93f9b">SDL_AudioStreamFlush</link> (<link linkend="__s_d_l__audio_8h_1a1f8d82f8013b06777000675a9636071e">SDL_AudioStream</link> *<link linkend="__s_d_l__opengl__glext_8h_1a10d3bc96cdfc1d478f52c13d5ffd9316">stream</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__audio_8h_1a7a74da30372d4a2c3db7ceef406d65fb">SDL_AudioStreamClear</link> (<link linkend="__s_d_l__audio_8h_1a1f8d82f8013b06777000675a9636071e">SDL_AudioStream</link> *<link linkend="__s_d_l__opengl__glext_8h_1a10d3bc96cdfc1d478f52c13d5ffd9316">stream</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__audio_8h_1ab093ff9871e917dac8d2fa5169970cf5">SDL_FreeAudioStream</link> (<link linkend="__s_d_l__audio_8h_1a1f8d82f8013b06777000675a9636071e">SDL_AudioStream</link> *<link linkend="__s_d_l__opengl__glext_8h_1a10d3bc96cdfc1d478f52c13d5ffd9316">stream</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__audio_8h_1ab9ad945b4b15d816802f5a79da06c9f9">SDL_MixAudio</link> (<link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> *<link linkend="__s_d_l__opengl__glext_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>, const <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> *<link linkend="__s_d_l__opengl__glext_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> <link linkend="__s_d_l__opengl__glext_8h_1a652168017ea9a8bbcead03d5c16269fb">len</link>, int volume)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__audio_8h_1a27a0ad33d17f87a2d7574be78d2f39b7">SDL_MixAudioFormat</link> (<link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> *<link linkend="__s_d_l__opengl__glext_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>, const <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> *<link linkend="__s_d_l__opengl__glext_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>, <link linkend="__s_d_l__audio_8h_1a491ed103fd25d920c4e6b7495217ce66">SDL_AudioFormat</link> <link linkend="__s_d_l__audio_8h_1a71a65ffd977afe9c3fef116a5bc9ee27">format</link>, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> <link linkend="__s_d_l__opengl__glext_8h_1a652168017ea9a8bbcead03d5c16269fb">len</link>, int volume)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__audio_8h_1a19ef6fa2396f581aaf4d9a9512972268">SDL_QueueAudio</link> (<link linkend="__s_d_l__audio_8h_1a677d9d2a6f77a7502a0dc8b45ad211bb">SDL_AudioDeviceID</link> dev, const <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> *<link linkend="__s_d_l__opengl_8h_1a2e335d56e2846b0fea47eed068b2d34a">data</link>, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> <link linkend="__s_d_l__opengl__glext_8h_1a652168017ea9a8bbcead03d5c16269fb">len</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__audio_8h_1a6ed6333b8b294eafb6a9435fd8ff89fa">SDL_DequeueAudio</link> (<link linkend="__s_d_l__audio_8h_1a677d9d2a6f77a7502a0dc8b45ad211bb">SDL_AudioDeviceID</link> dev, <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> *<link linkend="__s_d_l__opengl_8h_1a2e335d56e2846b0fea47eed068b2d34a">data</link>, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> <link linkend="__s_d_l__opengl__glext_8h_1a652168017ea9a8bbcead03d5c16269fb">len</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__audio_8h_1a11a1d59fd68f8a416fa72bf14f5c9ec3">SDL_GetQueuedAudioSize</link> (<link linkend="__s_d_l__audio_8h_1a677d9d2a6f77a7502a0dc8b45ad211bb">SDL_AudioDeviceID</link> dev)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__audio_8h_1a073ed5d40cce01e839b34570c1c7ed50">SDL_ClearQueuedAudio</link> (<link linkend="__s_d_l__audio_8h_1a677d9d2a6f77a7502a0dc8b45ad211bb">SDL_AudioDeviceID</link> dev)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Audio state    </title>

<para><anchor xml:id="__1amgrpcef14621c5df51e9b3ed9d0b005e108e"/>Get the current audio state. </para>
        <itemizedlist>
            <listitem><para>enum <link linkend="__s_d_l__audio_8h_1a24a02745f01041dd2825d7e26502eef2">SDL_AudioStatus</link> { <link linkend="__s_d_l__audio_8h_1a24a02745f01041dd2825d7e26502eef2a3a26bd0e1ac5d46eda5053d0526b5fba">SDL_AUDIO_STOPPED</link> = 0
, <link linkend="__s_d_l__audio_8h_1a24a02745f01041dd2825d7e26502eef2ab7e7b45db79e783703b43677a15c29a4">SDL_AUDIO_PLAYING</link>
, <link linkend="__s_d_l__audio_8h_1a24a02745f01041dd2825d7e26502eef2acd874cd272a7b1990d9db8699ae0c4f6">SDL_AUDIO_PAUSED</link>
 }</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__audio_8h_1a24a02745f01041dd2825d7e26502eef2">SDL_AudioStatus</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__audio_8h_1a568e10207e6ff53f8e238a0d562ef594">SDL_GetAudioStatus</link> (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__audio_8h_1a24a02745f01041dd2825d7e26502eef2">SDL_AudioStatus</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__audio_8h_1ac86fde79b1afda3f0fb8e9a027434a69">SDL_GetAudioDeviceStatus</link> (<link linkend="__s_d_l__audio_8h_1a677d9d2a6f77a7502a0dc8b45ad211bb">SDL_AudioDeviceID</link> dev)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Initialization and cleanup    </title>
        <itemizedlist>
            <listitem><para>typedef <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> <link linkend="__s_d_l__audio_8h_1a677d9d2a6f77a7502a0dc8b45ad211bb">SDL_AudioDeviceID</link></para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__audio_8h_1ae3667d6ba706a3ca7affd8611632fa2c">SDL_AudioInit</link> (const char *driver_name)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__audio_8h_1a478c602cbfaab8663cb4f58a62600323">SDL_AudioQuit</link> (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> const char *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__audio_8h_1a1fa49ad53602ae0e45f224d5625d64a9">SDL_GetCurrentAudioDriver</link> (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__audio_8h_1a2edf30e7747584e28041b4986f89f440">SDL_OpenAudio</link> (<link linkend="_struct_s_d_l___audio_spec">SDL_AudioSpec</link> *desired, <link linkend="_struct_s_d_l___audio_spec">SDL_AudioSpec</link> *obtained)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__audio_8h_1ae165f64b3f0fecfebe1c97731600ca59">SDL_GetNumAudioDevices</link> (int iscapture)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> const char *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__audio_8h_1aac10198502a5a037a72dfa333bb06b7c">SDL_GetAudioDeviceName</link> (int <link linkend="__s_d_l__opengl__glext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>, int iscapture)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__audio_8h_1aab1f29540e28a8638ec08ecccea47c36">SDL_GetAudioDeviceSpec</link> (int <link linkend="__s_d_l__opengl__glext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>, int iscapture, <link linkend="_struct_s_d_l___audio_spec">SDL_AudioSpec</link> *spec)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__audio_8h_1a677d9d2a6f77a7502a0dc8b45ad211bb">SDL_AudioDeviceID</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__audio_8h_1af54523e415de7c7fdd0d48a76ab58bb3">SDL_OpenAudioDevice</link> (const char *device, int iscapture, const <link linkend="_struct_s_d_l___audio_spec">SDL_AudioSpec</link> *desired, <link linkend="_struct_s_d_l___audio_spec">SDL_AudioSpec</link> *obtained, int allowed_changes)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Access to the raw audio mixing buffer for the SDL library. </para>
</section>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="__s_d_l__audio_8h_1a4633772ee12935960a25ff8334c29990"/><section>
    <title>AUDIO_F32</title>
<indexterm><primary>AUDIO_F32</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>AUDIO_F32</secondary></indexterm>
<para><computeroutput>#define AUDIO_F32   <link linkend="__s_d_l__audio_8h_1afaef57ecb718053b572c539e27e72d61">AUDIO_F32LSB</link></computeroutput></para></section>
<anchor xml:id="__s_d_l__audio_8h_1afaef57ecb718053b572c539e27e72d61"/><section>
    <title>AUDIO_F32LSB</title>
<indexterm><primary>AUDIO_F32LSB</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>AUDIO_F32LSB</secondary></indexterm>
<para><computeroutput>#define AUDIO_F32LSB   0x8120</computeroutput></para>
<para>32-bit floating point samples </para>
</section>
<anchor xml:id="__s_d_l__audio_8h_1a2d57382c01fdcd78cbbbb480605d91ef"/><section>
    <title>AUDIO_F32MSB</title>
<indexterm><primary>AUDIO_F32MSB</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>AUDIO_F32MSB</secondary></indexterm>
<para><computeroutput>#define AUDIO_F32MSB   0x9120</computeroutput></para>
<para>As above, but big-endian byte order </para>
</section>
<anchor xml:id="__s_d_l__audio_8h_1af001a94efb4bea024c233cae0cf98e6b"/><section>
    <title>AUDIO_F32SYS</title>
<indexterm><primary>AUDIO_F32SYS</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>AUDIO_F32SYS</secondary></indexterm>
<para><computeroutput>#define AUDIO_F32SYS   <link linkend="__s_d_l__audio_8h_1afaef57ecb718053b572c539e27e72d61">AUDIO_F32LSB</link></computeroutput></para></section>
<anchor xml:id="__s_d_l__audio_8h_1a4f4950d8eee757ebed84e50fb9316b12"/><section>
    <title>AUDIO_S16</title>
<indexterm><primary>AUDIO_S16</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>AUDIO_S16</secondary></indexterm>
<para><computeroutput>#define AUDIO_S16   <link linkend="__s_d_l__audio_8h_1a23838d612e88ce72d82c3e51460f831b">AUDIO_S16LSB</link></computeroutput></para></section>
<anchor xml:id="__s_d_l__audio_8h_1a23838d612e88ce72d82c3e51460f831b"/><section>
    <title>AUDIO_S16LSB</title>
<indexterm><primary>AUDIO_S16LSB</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>AUDIO_S16LSB</secondary></indexterm>
<para><computeroutput>#define AUDIO_S16LSB   0x8010</computeroutput></para>
<para>Signed 16-bit samples </para>
</section>
<anchor xml:id="__s_d_l__audio_8h_1a3109dfb1d7aab29dff2b62d630e690ca"/><section>
    <title>AUDIO_S16MSB</title>
<indexterm><primary>AUDIO_S16MSB</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>AUDIO_S16MSB</secondary></indexterm>
<para><computeroutput>#define AUDIO_S16MSB   0x9010</computeroutput></para>
<para>As above, but big-endian byte order </para>
</section>
<anchor xml:id="__s_d_l__audio_8h_1a4722de7e16982dd078f2b8cc64b9bae7"/><section>
    <title>AUDIO_S16SYS</title>
<indexterm><primary>AUDIO_S16SYS</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>AUDIO_S16SYS</secondary></indexterm>
<para><computeroutput>#define AUDIO_S16SYS   <link linkend="__s_d_l__audio_8h_1a23838d612e88ce72d82c3e51460f831b">AUDIO_S16LSB</link></computeroutput></para></section>
<anchor xml:id="__s_d_l__audio_8h_1aaffc0931336d0d79717a144039670223"/><section>
    <title>AUDIO_S32</title>
<indexterm><primary>AUDIO_S32</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>AUDIO_S32</secondary></indexterm>
<para><computeroutput>#define AUDIO_S32   <link linkend="__s_d_l__audio_8h_1ac81f9cc5739cea67436daf2689d29559">AUDIO_S32LSB</link></computeroutput></para></section>
<anchor xml:id="__s_d_l__audio_8h_1ac81f9cc5739cea67436daf2689d29559"/><section>
    <title>AUDIO_S32LSB</title>
<indexterm><primary>AUDIO_S32LSB</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>AUDIO_S32LSB</secondary></indexterm>
<para><computeroutput>#define AUDIO_S32LSB   0x8020</computeroutput></para>
<para>32-bit integer samples </para>
</section>
<anchor xml:id="__s_d_l__audio_8h_1a30641d7487680630c231b3415ecd47b6"/><section>
    <title>AUDIO_S32MSB</title>
<indexterm><primary>AUDIO_S32MSB</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>AUDIO_S32MSB</secondary></indexterm>
<para><computeroutput>#define AUDIO_S32MSB   0x9020</computeroutput></para>
<para>As above, but big-endian byte order </para>
</section>
<anchor xml:id="__s_d_l__audio_8h_1aafcbadd8f6fa14a878178bf18b883675"/><section>
    <title>AUDIO_S32SYS</title>
<indexterm><primary>AUDIO_S32SYS</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>AUDIO_S32SYS</secondary></indexterm>
<para><computeroutput>#define AUDIO_S32SYS   <link linkend="__s_d_l__audio_8h_1ac81f9cc5739cea67436daf2689d29559">AUDIO_S32LSB</link></computeroutput></para></section>
<anchor xml:id="__s_d_l__audio_8h_1a883b3d4539451e49bf014dde0f9cca29"/><section>
    <title>AUDIO_S8</title>
<indexterm><primary>AUDIO_S8</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>AUDIO_S8</secondary></indexterm>
<para><computeroutput>#define AUDIO_S8   0x8008</computeroutput></para>
<para>Signed 8-bit samples </para>
</section>
<anchor xml:id="__s_d_l__audio_8h_1adee2cdf7dbda44620da17cd58ca819ea"/><section>
    <title>AUDIO_U16</title>
<indexterm><primary>AUDIO_U16</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>AUDIO_U16</secondary></indexterm>
<para><computeroutput>#define AUDIO_U16   <link linkend="__s_d_l__audio_8h_1a06808f806896c4d211314990c354b7fc">AUDIO_U16LSB</link></computeroutput></para></section>
<anchor xml:id="__s_d_l__audio_8h_1a06808f806896c4d211314990c354b7fc"/><section>
    <title>AUDIO_U16LSB</title>
<indexterm><primary>AUDIO_U16LSB</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>AUDIO_U16LSB</secondary></indexterm>
<para><computeroutput>#define AUDIO_U16LSB   0x0010</computeroutput></para>
<para>Unsigned 16-bit samples </para>
</section>
<anchor xml:id="__s_d_l__audio_8h_1a3b8052d0c49d14a2e3edf08eade52d3a"/><section>
    <title>AUDIO_U16MSB</title>
<indexterm><primary>AUDIO_U16MSB</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>AUDIO_U16MSB</secondary></indexterm>
<para><computeroutput>#define AUDIO_U16MSB   0x1010</computeroutput></para>
<para>As above, but big-endian byte order </para>
</section>
<anchor xml:id="__s_d_l__audio_8h_1afafc9f93ee2c583130c4152e243ba5b8"/><section>
    <title>AUDIO_U16SYS</title>
<indexterm><primary>AUDIO_U16SYS</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>AUDIO_U16SYS</secondary></indexterm>
<para><computeroutput>#define AUDIO_U16SYS   <link linkend="__s_d_l__audio_8h_1a06808f806896c4d211314990c354b7fc">AUDIO_U16LSB</link></computeroutput></para></section>
<anchor xml:id="__s_d_l__audio_8h_1a6468b4b3fc53ada655eca866e491d75f"/><section>
    <title>AUDIO_U8</title>
<indexterm><primary>AUDIO_U8</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>AUDIO_U8</secondary></indexterm>
<para><computeroutput>#define AUDIO_U8   0x0008</computeroutput></para>
<para>Unsigned 8-bit samples </para>
</section>
<anchor xml:id="__s_d_l__audio_8h_1acbee9b7a641274139377898c21df92e8"/><section>
    <title>SDL_AUDIO_ALLOW_ANY_CHANGE</title>
<indexterm><primary>SDL_AUDIO_ALLOW_ANY_CHANGE</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_AUDIO_ALLOW_ANY_CHANGE</secondary></indexterm>
<para><computeroutput>#define SDL_AUDIO_ALLOW_ANY_CHANGE   (<link linkend="__s_d_l__audio_8h_1a4b05381c3f0871e9a88b46959365f796">SDL_AUDIO_ALLOW_FREQUENCY_CHANGE</link>|<link linkend="__s_d_l__audio_8h_1a32dbc13d28bdc43d7e07e080e24fb573">SDL_AUDIO_ALLOW_FORMAT_CHANGE</link>|<link linkend="__s_d_l__audio_8h_1aad9eab304c2cee512410508811268575">SDL_AUDIO_ALLOW_CHANNELS_CHANGE</link>|<link linkend="__s_d_l__audio_8h_1a2f5fcb9e11d3479e9e987a5d434d88ba">SDL_AUDIO_ALLOW_SAMPLES_CHANGE</link>)</computeroutput></para></section>
<anchor xml:id="__s_d_l__audio_8h_1aad9eab304c2cee512410508811268575"/><section>
    <title>SDL_AUDIO_ALLOW_CHANNELS_CHANGE</title>
<indexterm><primary>SDL_AUDIO_ALLOW_CHANNELS_CHANGE</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_AUDIO_ALLOW_CHANNELS_CHANGE</secondary></indexterm>
<para><computeroutput>#define SDL_AUDIO_ALLOW_CHANNELS_CHANGE   0x00000004</computeroutput></para></section>
<anchor xml:id="__s_d_l__audio_8h_1a32dbc13d28bdc43d7e07e080e24fb573"/><section>
    <title>SDL_AUDIO_ALLOW_FORMAT_CHANGE</title>
<indexterm><primary>SDL_AUDIO_ALLOW_FORMAT_CHANGE</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_AUDIO_ALLOW_FORMAT_CHANGE</secondary></indexterm>
<para><computeroutput>#define SDL_AUDIO_ALLOW_FORMAT_CHANGE   0x00000002</computeroutput></para></section>
<anchor xml:id="__s_d_l__audio_8h_1a4b05381c3f0871e9a88b46959365f796"/><section>
    <title>SDL_AUDIO_ALLOW_FREQUENCY_CHANGE</title>
<indexterm><primary>SDL_AUDIO_ALLOW_FREQUENCY_CHANGE</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_AUDIO_ALLOW_FREQUENCY_CHANGE</secondary></indexterm>
<para><computeroutput>#define SDL_AUDIO_ALLOW_FREQUENCY_CHANGE   0x00000001</computeroutput></para></section>
<anchor xml:id="__s_d_l__audio_8h_1a2f5fcb9e11d3479e9e987a5d434d88ba"/><section>
    <title>SDL_AUDIO_ALLOW_SAMPLES_CHANGE</title>
<indexterm><primary>SDL_AUDIO_ALLOW_SAMPLES_CHANGE</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_AUDIO_ALLOW_SAMPLES_CHANGE</secondary></indexterm>
<para><computeroutput>#define SDL_AUDIO_ALLOW_SAMPLES_CHANGE   0x00000008</computeroutput></para></section>
<anchor xml:id="__s_d_l__audio_8h_1abe2f2a9193ad3a8fa822787098df266d"/><section>
    <title>SDL_AUDIO_BITSIZE</title>
<indexterm><primary>SDL_AUDIO_BITSIZE</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_AUDIO_BITSIZE</secondary></indexterm>
<para><computeroutput>#define SDL_AUDIO_BITSIZE( <link linkend="__s_d_l__opengl_8h_1ad0e63d0edcdbd3d79554076bf309fd47">x</link>)   (<link linkend="__s_d_l__opengl_8h_1ad0e63d0edcdbd3d79554076bf309fd47">x</link> &amp; <link linkend="__s_d_l__audio_8h_1ade51417b52dbd9511d56066caae0038b">SDL_AUDIO_MASK_BITSIZE</link>)</computeroutput></para></section>
<anchor xml:id="__s_d_l__audio_8h_1a27e82da51370d77f83e4ea2098c9d38c"/><section>
    <title>SDL_AUDIO_ISBIGENDIAN</title>
<indexterm><primary>SDL_AUDIO_ISBIGENDIAN</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_AUDIO_ISBIGENDIAN</secondary></indexterm>
<para><computeroutput>#define SDL_AUDIO_ISBIGENDIAN( <link linkend="__s_d_l__opengl_8h_1ad0e63d0edcdbd3d79554076bf309fd47">x</link>)   (<link linkend="__s_d_l__opengl_8h_1ad0e63d0edcdbd3d79554076bf309fd47">x</link> &amp; <link linkend="__s_d_l__audio_8h_1ab070cdd4d92ee3824cafefe24c620326">SDL_AUDIO_MASK_ENDIAN</link>)</computeroutput></para></section>
<anchor xml:id="__s_d_l__audio_8h_1a86ee1651c17955594a547e96b9c94890"/><section>
    <title>SDL_AUDIO_ISFLOAT</title>
<indexterm><primary>SDL_AUDIO_ISFLOAT</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_AUDIO_ISFLOAT</secondary></indexterm>
<para><computeroutput>#define SDL_AUDIO_ISFLOAT( <link linkend="__s_d_l__opengl_8h_1ad0e63d0edcdbd3d79554076bf309fd47">x</link>)   (<link linkend="__s_d_l__opengl_8h_1ad0e63d0edcdbd3d79554076bf309fd47">x</link> &amp; <link linkend="__s_d_l__audio_8h_1a50b4779246a7fbf4a39205a396ec7ea6">SDL_AUDIO_MASK_DATATYPE</link>)</computeroutput></para></section>
<anchor xml:id="__s_d_l__audio_8h_1a197decf956e451a5a10e7221974b0548"/><section>
    <title>SDL_AUDIO_ISINT</title>
<indexterm><primary>SDL_AUDIO_ISINT</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_AUDIO_ISINT</secondary></indexterm>
<para><computeroutput>#define SDL_AUDIO_ISINT( <link linkend="__s_d_l__opengl_8h_1ad0e63d0edcdbd3d79554076bf309fd47">x</link>)   (!<link linkend="__s_d_l__audio_8h_1a86ee1651c17955594a547e96b9c94890">SDL_AUDIO_ISFLOAT</link>(<link linkend="__s_d_l__opengl_8h_1ad0e63d0edcdbd3d79554076bf309fd47">x</link>))</computeroutput></para></section>
<anchor xml:id="__s_d_l__audio_8h_1a2026be07a23986f2b7681a3500c8c341"/><section>
    <title>SDL_AUDIO_ISLITTLEENDIAN</title>
<indexterm><primary>SDL_AUDIO_ISLITTLEENDIAN</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_AUDIO_ISLITTLEENDIAN</secondary></indexterm>
<para><computeroutput>#define SDL_AUDIO_ISLITTLEENDIAN( <link linkend="__s_d_l__opengl_8h_1ad0e63d0edcdbd3d79554076bf309fd47">x</link>)   (!<link linkend="__s_d_l__audio_8h_1a27e82da51370d77f83e4ea2098c9d38c">SDL_AUDIO_ISBIGENDIAN</link>(<link linkend="__s_d_l__opengl_8h_1ad0e63d0edcdbd3d79554076bf309fd47">x</link>))</computeroutput></para></section>
<anchor xml:id="__s_d_l__audio_8h_1a518fa9273a6a8b8b6f1d599ccca71434"/><section>
    <title>SDL_AUDIO_ISSIGNED</title>
<indexterm><primary>SDL_AUDIO_ISSIGNED</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_AUDIO_ISSIGNED</secondary></indexterm>
<para><computeroutput>#define SDL_AUDIO_ISSIGNED( <link linkend="__s_d_l__opengl_8h_1ad0e63d0edcdbd3d79554076bf309fd47">x</link>)   (<link linkend="__s_d_l__opengl_8h_1ad0e63d0edcdbd3d79554076bf309fd47">x</link> &amp; <link linkend="__s_d_l__audio_8h_1a06fc66d3c421c6c9b733854b73d104ce">SDL_AUDIO_MASK_SIGNED</link>)</computeroutput></para></section>
<anchor xml:id="__s_d_l__audio_8h_1aa9f715eb12c43474ad0aae52976e5095"/><section>
    <title>SDL_AUDIO_ISUNSIGNED</title>
<indexterm><primary>SDL_AUDIO_ISUNSIGNED</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_AUDIO_ISUNSIGNED</secondary></indexterm>
<para><computeroutput>#define SDL_AUDIO_ISUNSIGNED( <link linkend="__s_d_l__opengl_8h_1ad0e63d0edcdbd3d79554076bf309fd47">x</link>)   (!<link linkend="__s_d_l__audio_8h_1a518fa9273a6a8b8b6f1d599ccca71434">SDL_AUDIO_ISSIGNED</link>(<link linkend="__s_d_l__opengl_8h_1ad0e63d0edcdbd3d79554076bf309fd47">x</link>))</computeroutput></para></section>
<anchor xml:id="__s_d_l__audio_8h_1ade51417b52dbd9511d56066caae0038b"/><section>
    <title>SDL_AUDIO_MASK_BITSIZE</title>
<indexterm><primary>SDL_AUDIO_MASK_BITSIZE</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_AUDIO_MASK_BITSIZE</secondary></indexterm>
<para><computeroutput>#define SDL_AUDIO_MASK_BITSIZE   (0xFF)</computeroutput></para></section>
<anchor xml:id="__s_d_l__audio_8h_1a50b4779246a7fbf4a39205a396ec7ea6"/><section>
    <title>SDL_AUDIO_MASK_DATATYPE</title>
<indexterm><primary>SDL_AUDIO_MASK_DATATYPE</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_AUDIO_MASK_DATATYPE</secondary></indexterm>
<para><computeroutput>#define SDL_AUDIO_MASK_DATATYPE   (1&lt;&lt;8)</computeroutput></para></section>
<anchor xml:id="__s_d_l__audio_8h_1ab070cdd4d92ee3824cafefe24c620326"/><section>
    <title>SDL_AUDIO_MASK_ENDIAN</title>
<indexterm><primary>SDL_AUDIO_MASK_ENDIAN</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_AUDIO_MASK_ENDIAN</secondary></indexterm>
<para><computeroutput>#define SDL_AUDIO_MASK_ENDIAN   (1&lt;&lt;12)</computeroutput></para></section>
<anchor xml:id="__s_d_l__audio_8h_1a06fc66d3c421c6c9b733854b73d104ce"/><section>
    <title>SDL_AUDIO_MASK_SIGNED</title>
<indexterm><primary>SDL_AUDIO_MASK_SIGNED</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_AUDIO_MASK_SIGNED</secondary></indexterm>
<para><computeroutput>#define SDL_AUDIO_MASK_SIGNED   (1&lt;&lt;15)</computeroutput></para></section>
<anchor xml:id="__s_d_l__audio_8h_1a3d38380ac4a45a68a0e1c1a7a02bd290"/><section>
    <title>SDL_AUDIOCVT_MAX_FILTERS</title>
<indexterm><primary>SDL_AUDIOCVT_MAX_FILTERS</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_AUDIOCVT_MAX_FILTERS</secondary></indexterm>
<para><computeroutput>#define SDL_AUDIOCVT_MAX_FILTERS   9</computeroutput></para><para>

<para>Upper limit of filters in <link linkend="_struct_s_d_l___audio_c_v_t">SDL_AudioCVT</link>. </para>
</para>

<para>The maximum number of SDL_AudioFilter functions in <link linkend="_struct_s_d_l___audio_c_v_t">SDL_AudioCVT</link> is currently limited to 9. The <link linkend="_struct_s_d_l___audio_c_v_t_1afeb8dc60716644de3b681653442de1db">SDL_AudioCVT.filters</link> array has 10 pointers, one of which is the terminating NULL pointer. </para>
</section>
<anchor xml:id="__s_d_l__audio_8h_1ac34fc6df953e2bae89919edaaa740ff3"/><section>
    <title>SDL_AUDIOCVT_PACKED</title>
<indexterm><primary>SDL_AUDIOCVT_PACKED</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_AUDIOCVT_PACKED</secondary></indexterm>
<para><computeroutput>#define SDL_AUDIOCVT_PACKED</computeroutput></para></section>
<anchor xml:id="__s_d_l__audio_8h_1a611f76dc30ba9891239bcce3f9b472b5"/><section>
    <title>SDL_LoadWAV</title>
<indexterm><primary>SDL_LoadWAV</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_LoadWAV</secondary></indexterm>
<para><computeroutput>#define SDL_LoadWAV( file,  spec,  audio_buf,  audio_len)       <link linkend="__s_d_l__audio_8h_1a21df7371c70c5cb31d3b348adaf72c86">SDL_LoadWAV_RW</link>(<link linkend="__s_d_l__rwops_8h_1a898d9ad749f054f6b6780bff411fd33a">SDL_RWFromFile</link>(file, &quot;rb&quot;),1, spec,audio_buf,audio_len)</computeroutput></para>
<para>Loads a WAV from a file. Compatibility convenience function. </para>
</section>
<anchor xml:id="__s_d_l__audio_8h_1afa8e5e92d4424b0c599e7c813c91f720"/><section>
    <title>SDL_MIX_MAXVOLUME</title>
<indexterm><primary>SDL_MIX_MAXVOLUME</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_MIX_MAXVOLUME</secondary></indexterm>
<para><computeroutput>#define SDL_MIX_MAXVOLUME   128</computeroutput></para></section>
</section>
<section>
<title>Typedef Documentation</title>
<anchor xml:id="__s_d_l__audio_8h_1a71a65ffd977afe9c3fef116a5bc9ee27"/><section>
    <title>format</title>
<indexterm><primary>format</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>format</secondary></indexterm>
<para><computeroutput>typedef <link linkend="__s_d_l__opengl_8h_1acebcc1c5663f14ebde1d16831e5fed94">GLint</link> <link linkend="__s_d_l__opengl_8h_1acebcc1c5663f14ebde1d16831e5fed94">GLint</link> <link linkend="__s_d_l__opengl_8h_1acebcc1c5663f14ebde1d16831e5fed94">GLint</link> <link linkend="__s_d_l__opengl_8h_1acebcc1c5663f14ebde1d16831e5fed94">GLint</link> <link linkend="__s_d_l__opengl_8h_1a9289d5b99dc1f27f01480360f2e18ae0">GLsizei</link> <link linkend="__s_d_l__opengl_8h_1a9289d5b99dc1f27f01480360f2e18ae0">GLsizei</link> <link linkend="__s_d_l__opengl_8h_1a9289d5b99dc1f27f01480360f2e18ae0">GLsizei</link> <link linkend="__s_d_l__opengl_8h_1a5d5233918a454ad3975c620a69ac5f0b">GLenum</link> <link linkend="__s_d_l__audio_8h_1a71a65ffd977afe9c3fef116a5bc9ee27">format</link></computeroutput></para></section>
<anchor xml:id="__s_d_l__audio_8h_1a379fcc25845e46bfa80cb3619fc2821c"/><section>
    <title>SDL_AudioCallback</title>
<indexterm><primary>SDL_AudioCallback</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_AudioCallback</secondary></indexterm>
<para><computeroutput>typedef <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link>(<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> * SDL_AudioCallback) (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> *userdata, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> *<link linkend="__s_d_l__opengl__glext_8h_1a10d3bc96cdfc1d478f52c13d5ffd9316">stream</link>, int <link linkend="__s_d_l__opengl__glext_8h_1a652168017ea9a8bbcead03d5c16269fb">len</link>)</computeroutput></para>
<para>This function is called when the audio device needs more data.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>userdata</entry><entry>
<para>An application-specific parameter saved in the <link linkend="_struct_s_d_l___audio_spec">SDL_AudioSpec</link> structure </para>
</entry>
                            </row>
                            <row>
<entry>stream</entry><entry>
<para>A pointer to the audio data buffer. </para>
</entry>
                            </row>
                            <row>
<entry>len</entry><entry>
<para>The length of that buffer in bytes.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                Once the callback returns, the buffer will no longer be valid. Stereo samples are stored in a LRLRLR ordering.</para>

<para>You can choose to avoid callbacks and use <link linkend="__s_d_l__audio_8h_1a19ef6fa2396f581aaf4d9a9512972268">SDL_QueueAudio()</link> instead, if you like. Just open your audio device with a NULL callback. </para>
</section>
<anchor xml:id="__s_d_l__audio_8h_1afc284f22978d12646dbffa692fe0c0ae"/><section>
    <title>SDL_AudioCVT</title>
<indexterm><primary>SDL_AudioCVT</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_AudioCVT</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_struct_s_d_l___audio_c_v_t">SDL_AudioCVT</link> <link linkend="_struct_s_d_l___audio_c_v_t">SDL_AudioCVT</link></computeroutput></para></section>
<anchor xml:id="__s_d_l__audio_8h_1a677d9d2a6f77a7502a0dc8b45ad211bb"/><section>
    <title>SDL_AudioDeviceID</title>
<indexterm><primary>SDL_AudioDeviceID</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_AudioDeviceID</secondary></indexterm>
<para><computeroutput>typedef <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> <link linkend="__s_d_l__audio_8h_1a677d9d2a6f77a7502a0dc8b45ad211bb">SDL_AudioDeviceID</link></computeroutput></para>
<para>SDL Audio Device IDs.</para>

<para>A successful call to <link linkend="__s_d_l__audio_8h_1a2edf30e7747584e28041b4986f89f440">SDL_OpenAudio()</link> is always device id 1, and legacy SDL audio APIs assume you want this device ID. <link linkend="__s_d_l__audio_8h_1af54523e415de7c7fdd0d48a76ab58bb3">SDL_OpenAudioDevice()</link> calls always returns devices &gt;= 2 on success. The legacy calls are good both for backwards compatibility and when you don&apos;t care about multiple, specific, or capture devices. </para>
</section>
<anchor xml:id="__s_d_l__audio_8h_1a491ed103fd25d920c4e6b7495217ce66"/><section>
    <title>SDL_AudioFormat</title>
<indexterm><primary>SDL_AudioFormat</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_AudioFormat</secondary></indexterm>
<para><computeroutput>typedef <link linkend="__s_d_l__stdinc_8h_1a31fcc0a076c9068668173ee26d33e42b">Uint16</link> <link linkend="__s_d_l__audio_8h_1a491ed103fd25d920c4e6b7495217ce66">SDL_AudioFormat</link></computeroutput></para><para>

<para>Audio format flags. </para>
</para>

<para>These are what the 16 bits in SDL_AudioFormat currently mean... (Unspecified bits are always zero).</para>

<para><literallayout><computeroutput>++-----------------------sample is signed if set
||
||       ++-----------sample is bigendian if set
||       ||
||       ||          ++---sample is float if set
||       ||          ||
||       ||          || +---sample bit size---+
||       ||          || |                     |
15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00
</computeroutput></literallayout></para>

<para>There are macros in SDL 2.0 and later to query these bits. </para>
</section>
<anchor xml:id="__s_d_l__audio_8h_1ae95b698a5abe9ae3b36f0ab4617e9e14"/><section>
    <title>SDL_AudioSpec</title>
<indexterm><primary>SDL_AudioSpec</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_AudioSpec</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_struct_s_d_l___audio_spec">SDL_AudioSpec</link> <link linkend="_struct_s_d_l___audio_spec">SDL_AudioSpec</link></computeroutput></para>
<para>The calculated values in this structure are calculated by <link linkend="__s_d_l__audio_8h_1a2edf30e7747584e28041b4986f89f440">SDL_OpenAudio()</link>.</para>

<para>For multi-channel audio, the default SDL channel mapping is: 2: FL FR (stereo) 3: FL FR LFE (2.1 surround) 4: FL FR BL BR (quad) 5: FL FR FC BL BR (quad + center) 6: FL FR FC LFE SL SR (5.1 surround - last two can also be BL BR) 7: FL FR FC LFE BC SL SR (6.1 surround) 8: FL FR FC LFE BL BR SL SR (7.1 surround) </para>
</section>
<anchor xml:id="__s_d_l__audio_8h_1a1f8d82f8013b06777000675a9636071e"/><section>
    <title>SDL_AudioStream</title>
<indexterm><primary>SDL_AudioStream</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_AudioStream</secondary></indexterm>
<para><computeroutput>typedef struct _SDL_AudioStream <link linkend="__s_d_l__audio_8h_1a1f8d82f8013b06777000675a9636071e">SDL_AudioStream</link></computeroutput></para></section>
</section>
<section>
<title>Enumeration Type Documentation</title>
<anchor xml:id="__s_d_l__audio_8h_1a24a02745f01041dd2825d7e26502eef2"/><section>
    <title>SDL_AudioStatus</title>
<indexterm><primary>SDL_AudioStatus</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_AudioStatus</secondary></indexterm>
<para><computeroutput>enum <link linkend="__s_d_l__audio_8h_1a24a02745f01041dd2825d7e26502eef2">SDL_AudioStatus</link></computeroutput></para><informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>SDL_AUDIO_STOPPED</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_AUDIO_STOPPED</secondary></indexterm>
<anchor xml:id="__s_d_l__audio_8h_1a24a02745f01041dd2825d7e26502eef2a3a26bd0e1ac5d46eda5053d0526b5fba"/>SDL_AUDIO_STOPPED</entry><entry></entry></row><row><entry><indexterm><primary>SDL_AUDIO_PLAYING</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_AUDIO_PLAYING</secondary></indexterm>
<anchor xml:id="__s_d_l__audio_8h_1a24a02745f01041dd2825d7e26502eef2ab7e7b45db79e783703b43677a15c29a4"/>SDL_AUDIO_PLAYING</entry><entry></entry></row><row><entry><indexterm><primary>SDL_AUDIO_PAUSED</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_AUDIO_PAUSED</secondary></indexterm>
<anchor xml:id="__s_d_l__audio_8h_1a24a02745f01041dd2825d7e26502eef2acd874cd272a7b1990d9db8699ae0c4f6"/>SDL_AUDIO_PAUSED</entry><entry></entry></row>    </tbody>
    </tgroup>
</informaltable>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="__s_d_l__audio_8h_1ae3667d6ba706a3ca7affd8611632fa2c"/><section>
    <title>SDL_AudioInit()</title>
<indexterm><primary>SDL_AudioInit</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_AudioInit</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_AudioInit (const char * driver_name)</computeroutput></para>
<para>Use this function to initialize a particular audio driver.</para>

<para>This function is used internally, and should not be used unless you have a specific need to designate the audio driver you want to use. You should normally use <link linkend="__s_d_l_8h_1a8fc8d35348d7c74bad8392d776c937b8">SDL_Init()</link> or <link linkend="__s_d_l_8h_1adfbfddc0ec609b5e5e5cb1c89298e4db">SDL_InitSubSystem()</link>.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>driver_name</entry><entry>
<para>the name of the desired audio driver </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__audio_8h_1a478c602cbfaab8663cb4f58a62600323">SDL_AudioQuit</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__audio_8h_1a478c602cbfaab8663cb4f58a62600323"/><section>
    <title>SDL_AudioQuit()</title>
<indexterm><primary>SDL_AudioQuit</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_AudioQuit</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_AudioQuit (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> )</computeroutput></para>
<para>Use this function to shut down audio if you initialized it with <link linkend="__s_d_l__audio_8h_1ae3667d6ba706a3ca7affd8611632fa2c">SDL_AudioInit()</link>.</para>

<para>This function is used internally, and should not be used unless you have a specific need to specify the audio driver you want to use. You should normally use <link linkend="__s_d_l_8h_1afdabaf714781099083592051f2d9ac11">SDL_Quit()</link> or <link linkend="__s_d_l_8h_1a14e9091982e09097985e10e3ca65debb">SDL_QuitSubSystem()</link>.</para>

<para><formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__audio_8h_1ae3667d6ba706a3ca7affd8611632fa2c">SDL_AudioInit</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__audio_8h_1a4667c3464058d7be76c1f8349d7656de"/><section>
    <title>SDL_AudioStreamAvailable()</title>
<indexterm><primary>SDL_AudioStreamAvailable</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_AudioStreamAvailable</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_AudioStreamAvailable (<link linkend="__s_d_l__audio_8h_1a1f8d82f8013b06777000675a9636071e">SDL_AudioStream</link> * stream)</computeroutput></para>
<para>Get the number of converted/resampled bytes available.</para>

<para>The stream may be buffering data behind the scenes until it has enough to resample correctly, so this number might be lower than what you expect, or even be zero. Add more data or flush the stream if you need the data now.</para>

<para><formalpara><title>Since</title>

<para>This function is available since SDL 2.0.7.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__audio_8h_1a49212d7bdaed59c937ab08fdd3cf804e">SDL_NewAudioStream</link> </para>

<para><link linkend="__s_d_l__audio_8h_1ae1cb87e81c853b21f025f42f336ad814">SDL_AudioStreamPut</link> </para>

<para><link linkend="__s_d_l__audio_8h_1a6a8996f0cb3adf37d4c1c5ed4eef5b18">SDL_AudioStreamGet</link> </para>

<para><link linkend="__s_d_l__audio_8h_1add31a8f8ccd99c87b71bef2a9cf93f9b">SDL_AudioStreamFlush</link> </para>

<para><link linkend="__s_d_l__audio_8h_1a7a74da30372d4a2c3db7ceef406d65fb">SDL_AudioStreamClear</link> </para>

<para><link linkend="__s_d_l__audio_8h_1ab093ff9871e917dac8d2fa5169970cf5">SDL_FreeAudioStream</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__audio_8h_1a7a74da30372d4a2c3db7ceef406d65fb"/><section>
    <title>SDL_AudioStreamClear()</title>
<indexterm><primary>SDL_AudioStreamClear</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_AudioStreamClear</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_AudioStreamClear (<link linkend="__s_d_l__audio_8h_1a1f8d82f8013b06777000675a9636071e">SDL_AudioStream</link> * stream)</computeroutput></para>
<para>Clear any pending data in the stream without converting it</para>

<para><formalpara><title>Since</title>

<para>This function is available since SDL 2.0.7.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__audio_8h_1a49212d7bdaed59c937ab08fdd3cf804e">SDL_NewAudioStream</link> </para>

<para><link linkend="__s_d_l__audio_8h_1ae1cb87e81c853b21f025f42f336ad814">SDL_AudioStreamPut</link> </para>

<para><link linkend="__s_d_l__audio_8h_1a6a8996f0cb3adf37d4c1c5ed4eef5b18">SDL_AudioStreamGet</link> </para>

<para><link linkend="__s_d_l__audio_8h_1a4667c3464058d7be76c1f8349d7656de">SDL_AudioStreamAvailable</link> </para>

<para><link linkend="__s_d_l__audio_8h_1add31a8f8ccd99c87b71bef2a9cf93f9b">SDL_AudioStreamFlush</link> </para>

<para><link linkend="__s_d_l__audio_8h_1ab093ff9871e917dac8d2fa5169970cf5">SDL_FreeAudioStream</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__audio_8h_1add31a8f8ccd99c87b71bef2a9cf93f9b"/><section>
    <title>SDL_AudioStreamFlush()</title>
<indexterm><primary>SDL_AudioStreamFlush</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_AudioStreamFlush</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_AudioStreamFlush (<link linkend="__s_d_l__audio_8h_1a1f8d82f8013b06777000675a9636071e">SDL_AudioStream</link> * stream)</computeroutput></para>
<para>Tell the stream that you&apos;re done sending data, and anything being buffered should be converted/resampled and made available immediately.</para>

<para>It is legal to add more data to a stream after flushing, but there will be audio gaps in the output. Generally this is intended to signal the end of input, so the complete output becomes available.</para>

<para><formalpara><title>Since</title>

<para>This function is available since SDL 2.0.7.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__audio_8h_1a49212d7bdaed59c937ab08fdd3cf804e">SDL_NewAudioStream</link> </para>

<para><link linkend="__s_d_l__audio_8h_1ae1cb87e81c853b21f025f42f336ad814">SDL_AudioStreamPut</link> </para>

<para><link linkend="__s_d_l__audio_8h_1a6a8996f0cb3adf37d4c1c5ed4eef5b18">SDL_AudioStreamGet</link> </para>

<para><link linkend="__s_d_l__audio_8h_1a4667c3464058d7be76c1f8349d7656de">SDL_AudioStreamAvailable</link> </para>

<para><link linkend="__s_d_l__audio_8h_1a7a74da30372d4a2c3db7ceef406d65fb">SDL_AudioStreamClear</link> </para>

<para><link linkend="__s_d_l__audio_8h_1ab093ff9871e917dac8d2fa5169970cf5">SDL_FreeAudioStream</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__audio_8h_1a6a8996f0cb3adf37d4c1c5ed4eef5b18"/><section>
    <title>SDL_AudioStreamGet()</title>
<indexterm><primary>SDL_AudioStreamGet</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_AudioStreamGet</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_AudioStreamGet (<link linkend="__s_d_l__audio_8h_1a1f8d82f8013b06777000675a9636071e">SDL_AudioStream</link> * stream, <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> * buf, int len)</computeroutput></para>
<para>Get converted/resampled data from the stream</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>stream</entry><entry>
<para>The stream the audio is being requested from </para>
</entry>
                            </row>
                            <row>
<entry>buf</entry><entry>
<para>A buffer to fill with audio data </para>
</entry>
                            </row>
                            <row>
<entry>len</entry><entry>
<para>The maximum number of bytes to fill </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>the number of bytes read from the stream, or -1 on error</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.7.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__audio_8h_1a49212d7bdaed59c937ab08fdd3cf804e">SDL_NewAudioStream</link> </para>

<para><link linkend="__s_d_l__audio_8h_1ae1cb87e81c853b21f025f42f336ad814">SDL_AudioStreamPut</link> </para>

<para><link linkend="__s_d_l__audio_8h_1a4667c3464058d7be76c1f8349d7656de">SDL_AudioStreamAvailable</link> </para>

<para><link linkend="__s_d_l__audio_8h_1add31a8f8ccd99c87b71bef2a9cf93f9b">SDL_AudioStreamFlush</link> </para>

<para><link linkend="__s_d_l__audio_8h_1a7a74da30372d4a2c3db7ceef406d65fb">SDL_AudioStreamClear</link> </para>

<para><link linkend="__s_d_l__audio_8h_1ab093ff9871e917dac8d2fa5169970cf5">SDL_FreeAudioStream</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__audio_8h_1ae1cb87e81c853b21f025f42f336ad814"/><section>
    <title>SDL_AudioStreamPut()</title>
<indexterm><primary>SDL_AudioStreamPut</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_AudioStreamPut</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_AudioStreamPut (<link linkend="__s_d_l__audio_8h_1a1f8d82f8013b06777000675a9636071e">SDL_AudioStream</link> * stream, const <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> * buf, int len)</computeroutput></para>
<para>Add data to be converted/resampled to the stream.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>stream</entry><entry>
<para>The stream the audio data is being added to </para>
</entry>
                            </row>
                            <row>
<entry>buf</entry><entry>
<para>A pointer to the audio data to add </para>
</entry>
                            </row>
                            <row>
<entry>len</entry><entry>
<para>The number of bytes to write to the stream </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success, or -1 on error.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.7.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__audio_8h_1a49212d7bdaed59c937ab08fdd3cf804e">SDL_NewAudioStream</link> </para>

<para><link linkend="__s_d_l__audio_8h_1a6a8996f0cb3adf37d4c1c5ed4eef5b18">SDL_AudioStreamGet</link> </para>

<para><link linkend="__s_d_l__audio_8h_1a4667c3464058d7be76c1f8349d7656de">SDL_AudioStreamAvailable</link> </para>

<para><link linkend="__s_d_l__audio_8h_1add31a8f8ccd99c87b71bef2a9cf93f9b">SDL_AudioStreamFlush</link> </para>

<para><link linkend="__s_d_l__audio_8h_1a7a74da30372d4a2c3db7ceef406d65fb">SDL_AudioStreamClear</link> </para>

<para><link linkend="__s_d_l__audio_8h_1ab093ff9871e917dac8d2fa5169970cf5">SDL_FreeAudioStream</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__audio_8h_1a41e1602bc7cd4edb87ca779cf01d40bb"/><section>
    <title>SDL_BuildAudioCVT()</title>
<indexterm><primary>SDL_BuildAudioCVT</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_BuildAudioCVT</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_BuildAudioCVT (<link linkend="_struct_s_d_l___audio_c_v_t">SDL_AudioCVT</link> * cvt, <link linkend="__s_d_l__audio_8h_1a491ed103fd25d920c4e6b7495217ce66">SDL_AudioFormat</link> src_format, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> src_channels, int src_rate, <link linkend="__s_d_l__audio_8h_1a491ed103fd25d920c4e6b7495217ce66">SDL_AudioFormat</link> dst_format, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> dst_channels, int dst_rate)</computeroutput></para>
<para>Initialize an <link linkend="_struct_s_d_l___audio_c_v_t">SDL_AudioCVT</link> structure for conversion.</para>

<para>Before an <link linkend="_struct_s_d_l___audio_c_v_t">SDL_AudioCVT</link> structure can be used to convert audio data it must be initialized with source and destination information.</para>

<para>This function will zero out every field of the <link linkend="_struct_s_d_l___audio_c_v_t">SDL_AudioCVT</link>, so it must be called before the application fills in the final buffer information.</para>

<para>Once this function has returned successfully, and reported that a conversion is necessary, the application fills in the rest of the fields in <link linkend="_struct_s_d_l___audio_c_v_t">SDL_AudioCVT</link>, now that it knows how large a buffer it needs to allocate, and then can call <link linkend="__s_d_l__audio_8h_1a8e8660222356e07002dde4928118b7df">SDL_ConvertAudio()</link> to complete the conversion.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>cvt</entry><entry>
<para>an <link linkend="_struct_s_d_l___audio_c_v_t">SDL_AudioCVT</link> structure filled in with audio conversion information </para>
</entry>
                            </row>
                            <row>
<entry>src_format</entry><entry>
<para>the source format of the audio data; for more info see SDL_AudioFormat </para>
</entry>
                            </row>
                            <row>
<entry>src_channels</entry><entry>
<para>the number of channels in the source </para>
</entry>
                            </row>
                            <row>
<entry>src_rate</entry><entry>
<para>the frequency (sample-frames-per-second) of the source </para>
</entry>
                            </row>
                            <row>
<entry>dst_format</entry><entry>
<para>the destination format of the audio data; for more info see SDL_AudioFormat </para>
</entry>
                            </row>
                            <row>
<entry>dst_channels</entry><entry>
<para>the number of channels in the destination </para>
</entry>
                            </row>
                            <row>
<entry>dst_rate</entry><entry>
<para>the frequency (sample-frames-per-second) of the destination </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>1 if the audio filter is prepared, 0 if no conversion is needed, or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__audio_8h_1a8e8660222356e07002dde4928118b7df">SDL_ConvertAudio</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__audio_8h_1a073ed5d40cce01e839b34570c1c7ed50"/><section>
    <title>SDL_ClearQueuedAudio()</title>
<indexterm><primary>SDL_ClearQueuedAudio</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_ClearQueuedAudio</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_ClearQueuedAudio (<link linkend="__s_d_l__audio_8h_1a677d9d2a6f77a7502a0dc8b45ad211bb">SDL_AudioDeviceID</link> dev)</computeroutput></para>
<para>Drop any queued audio data waiting to be sent to the hardware.</para>

<para>Immediately after this call, <link linkend="__s_d_l__audio_8h_1a11a1d59fd68f8a416fa72bf14f5c9ec3">SDL_GetQueuedAudioSize()</link> will return 0. For output devices, the hardware will start playing silence if more audio isn&apos;t queued. For capture devices, the hardware will start filling the empty queue with new data if the capture device isn&apos;t paused.</para>

<para>This will not prevent playback of queued audio that&apos;s already been sent to the hardware, as we can not undo that, so expect there to be some fraction of a second of audio that might still be heard. This can be useful if you want to, say, drop any pending music or any unprocessed microphone input during a level change in your game.</para>

<para>You may not queue or dequeue audio on a device that is using an application-supplied callback; calling this function on such a device always returns 0. You have to use the audio callback or queue audio, but not both.</para>

<para>You should not call <link linkend="__s_d_l__audio_8h_1a7ffa484f230f6085e271a4f43e678f06">SDL_LockAudio()</link> on the device before clearing the queue; SDL handles locking internally for this function.</para>

<para>This function always succeeds and thus returns void.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>dev</entry><entry>
<para>the device ID of which to clear the audio queue</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.4.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__audio_8h_1a11a1d59fd68f8a416fa72bf14f5c9ec3">SDL_GetQueuedAudioSize</link> </para>

<para><link linkend="__s_d_l__audio_8h_1a19ef6fa2396f581aaf4d9a9512972268">SDL_QueueAudio</link> </para>

<para><link linkend="__s_d_l__audio_8h_1a6ed6333b8b294eafb6a9435fd8ff89fa">SDL_DequeueAudio</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__audio_8h_1aa176acc650e66e1d38814cbed3ca258e"/><section>
    <title>SDL_CloseAudio()</title>
<indexterm><primary>SDL_CloseAudio</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_CloseAudio</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_CloseAudio (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> )</computeroutput></para>
<para>This function is a legacy means of closing the audio device.</para>

<para>This function is equivalent to calling...</para>

<para><literallayout><computeroutput><link linkend="__s_d_l__audio_8h_1abd910f31079d53b6c0ea8bf32dac0ce6">SDL_CloseAudioDevice</link>(1);
</computeroutput></literallayout></para>

<para>...and is only useful if you used the legacy <link linkend="__s_d_l__audio_8h_1a2edf30e7747584e28041b4986f89f440">SDL_OpenAudio()</link> function.</para>

<para><formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__audio_8h_1a2edf30e7747584e28041b4986f89f440">SDL_OpenAudio</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__audio_8h_1abd910f31079d53b6c0ea8bf32dac0ce6"/><section>
    <title>SDL_CloseAudioDevice()</title>
<indexterm><primary>SDL_CloseAudioDevice</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_CloseAudioDevice</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_CloseAudioDevice (<link linkend="__s_d_l__audio_8h_1a677d9d2a6f77a7502a0dc8b45ad211bb">SDL_AudioDeviceID</link> dev)</computeroutput></para>
<para>Use this function to shut down audio processing and close the audio device.</para>

<para>The application should close open audio devices once they are no longer needed. Calling this function will wait until the device&apos;s audio callback is not running, release the audio hardware and then clean up internal state. No further audio will play from this device once this function returns.</para>

<para>This function may block briefly while pending audio data is played by the hardware, so that applications don&apos;t drop the last buffer of data they supplied.</para>

<para>The device ID is invalid as soon as the device is closed, and is eligible for reuse in a new <link linkend="__s_d_l__audio_8h_1af54523e415de7c7fdd0d48a76ab58bb3">SDL_OpenAudioDevice()</link> call immediately.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>dev</entry><entry>
<para>an audio device previously opened with <link linkend="__s_d_l__audio_8h_1af54523e415de7c7fdd0d48a76ab58bb3">SDL_OpenAudioDevice()</link></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__audio_8h_1af54523e415de7c7fdd0d48a76ab58bb3">SDL_OpenAudioDevice</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__audio_8h_1a8e8660222356e07002dde4928118b7df"/><section>
    <title>SDL_ConvertAudio()</title>
<indexterm><primary>SDL_ConvertAudio</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_ConvertAudio</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_ConvertAudio (<link linkend="_struct_s_d_l___audio_c_v_t">SDL_AudioCVT</link> * cvt)</computeroutput></para>
<para>Convert audio data to a desired audio format.</para>

<para>This function does the actual audio data conversion, after the application has called <link linkend="__s_d_l__audio_8h_1a41e1602bc7cd4edb87ca779cf01d40bb">SDL_BuildAudioCVT()</link> to prepare the conversion information and then filled in the buffer details.</para>

<para>Once the application has initialized the <computeroutput>cvt</computeroutput> structure using <link linkend="__s_d_l__audio_8h_1a41e1602bc7cd4edb87ca779cf01d40bb">SDL_BuildAudioCVT()</link>, allocated an audio buffer and filled it with audio data in the source format, this function will convert the buffer, in-place, to the desired format.</para>

<para>The data conversion may go through several passes; any given pass may possibly temporarily increase the size of the data. For example, SDL might expand 16-bit data to 32 bits before resampling to a lower frequency, shrinking the data size after having grown it briefly. Since the supplied buffer will be both the source and destination, converting as necessary in-place, the application must allocate a buffer that will fully contain the data during its largest conversion pass. After <link linkend="__s_d_l__audio_8h_1a41e1602bc7cd4edb87ca779cf01d40bb">SDL_BuildAudioCVT()</link> returns, the application should set the <computeroutput>cvt-&gt;len</computeroutput> field to the size, in bytes, of the source data, and allocate a buffer that is <computeroutput>cvt-&gt;len * cvt-&gt;len_mult</computeroutput> bytes long for the <computeroutput>buf</computeroutput> field.</para>

<para>The source data should be copied into this buffer before the call to <link linkend="__s_d_l__audio_8h_1a8e8660222356e07002dde4928118b7df">SDL_ConvertAudio()</link>. Upon successful return, this buffer will contain the converted audio, and <computeroutput>cvt-&gt;len_cvt</computeroutput> will be the size of the converted data, in bytes. Any bytes in the buffer past <computeroutput>cvt-&gt;len_cvt</computeroutput> are undefined once this function returns.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>cvt</entry><entry>
<para>an <link linkend="_struct_s_d_l___audio_c_v_t">SDL_AudioCVT</link> structure that was previously set up by <link linkend="__s_d_l__audio_8h_1a41e1602bc7cd4edb87ca779cf01d40bb">SDL_BuildAudioCVT()</link>. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 if the conversion was completed successfully or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__audio_8h_1a41e1602bc7cd4edb87ca779cf01d40bb">SDL_BuildAudioCVT</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__audio_8h_1a6ed6333b8b294eafb6a9435fd8ff89fa"/><section>
    <title>SDL_DequeueAudio()</title>
<indexterm><primary>SDL_DequeueAudio</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_DequeueAudio</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_DequeueAudio (<link linkend="__s_d_l__audio_8h_1a677d9d2a6f77a7502a0dc8b45ad211bb">SDL_AudioDeviceID</link> dev, <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> * data, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> len)</computeroutput></para>
<para>Dequeue more audio on non-callback devices.</para>

<para>If you are looking to queue audio for output on a non-callback playback device, you want <link linkend="__s_d_l__audio_8h_1a19ef6fa2396f581aaf4d9a9512972268">SDL_QueueAudio()</link> instead. <link linkend="__s_d_l__audio_8h_1a6ed6333b8b294eafb6a9435fd8ff89fa">SDL_DequeueAudio()</link> will always return 0 if you use it with playback devices.</para>

<para>SDL offers two ways to retrieve audio from a capture device: you can either supply a callback that SDL triggers with some frequency as the device records more audio data, (push method), or you can supply no callback, and then SDL will expect you to retrieve data at regular intervals (pull method) with this function.</para>

<para>There are no limits on the amount of data you can queue, short of exhaustion of address space. Data from the device will keep queuing as necessary without further intervention from you. This means you will eventually run out of memory if you aren&apos;t routinely dequeueing data.</para>

<para>Capture devices will not queue data when paused; if you are expecting to not need captured audio for some length of time, use <link linkend="__s_d_l__audio_8h_1ab4c8e2a896ccf86599435af81fca928c">SDL_PauseAudioDevice()</link> to stop the capture device from queueing more data. This can be useful during, say, level loading times. When unpaused, capture devices will start queueing data from that point, having flushed any capturable data available while paused.</para>

<para>This function is thread-safe, but dequeueing from the same device from two threads at once does not promise which thread will dequeue data first.</para>

<para>You may not dequeue audio from a device that is using an application-supplied callback; doing so returns an error. You have to use the audio callback, or dequeue audio with this function, but not both.</para>

<para>You should not call <link linkend="__s_d_l__audio_8h_1a7ffa484f230f6085e271a4f43e678f06">SDL_LockAudio()</link> on the device before dequeueing; SDL handles locking internally for this function.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>dev</entry><entry>
<para>the device ID from which we will dequeue audio </para>
</entry>
                            </row>
                            <row>
<entry>data</entry><entry>
<para>a pointer into where audio data should be copied </para>
</entry>
                            </row>
                            <row>
<entry>len</entry><entry>
<para>the number of bytes (not samples!) to which (data) points </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>the number of bytes dequeued, which could be less than requested; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.5.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__audio_8h_1a073ed5d40cce01e839b34570c1c7ed50">SDL_ClearQueuedAudio</link> </para>

<para><link linkend="__s_d_l__audio_8h_1a11a1d59fd68f8a416fa72bf14f5c9ec3">SDL_GetQueuedAudioSize</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__audio_8h_1ab093ff9871e917dac8d2fa5169970cf5"/><section>
    <title>SDL_FreeAudioStream()</title>
<indexterm><primary>SDL_FreeAudioStream</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_FreeAudioStream</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_FreeAudioStream (<link linkend="__s_d_l__audio_8h_1a1f8d82f8013b06777000675a9636071e">SDL_AudioStream</link> * stream)</computeroutput></para>
<para>Free an audio stream</para>

<para><formalpara><title>Since</title>

<para>This function is available since SDL 2.0.7.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__audio_8h_1a49212d7bdaed59c937ab08fdd3cf804e">SDL_NewAudioStream</link> </para>

<para><link linkend="__s_d_l__audio_8h_1ae1cb87e81c853b21f025f42f336ad814">SDL_AudioStreamPut</link> </para>

<para><link linkend="__s_d_l__audio_8h_1a6a8996f0cb3adf37d4c1c5ed4eef5b18">SDL_AudioStreamGet</link> </para>

<para><link linkend="__s_d_l__audio_8h_1a4667c3464058d7be76c1f8349d7656de">SDL_AudioStreamAvailable</link> </para>

<para><link linkend="__s_d_l__audio_8h_1add31a8f8ccd99c87b71bef2a9cf93f9b">SDL_AudioStreamFlush</link> </para>

<para><link linkend="__s_d_l__audio_8h_1a7a74da30372d4a2c3db7ceef406d65fb">SDL_AudioStreamClear</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__audio_8h_1a631aa8624575603df2c5ab9257feee59"/><section>
    <title>SDL_FreeWAV()</title>
<indexterm><primary>SDL_FreeWAV</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_FreeWAV</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_FreeWAV (<link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> * audio_buf)</computeroutput></para>
<para>Free data previously allocated with <link linkend="__s_d_l__audio_8h_1a611f76dc30ba9891239bcce3f9b472b5">SDL_LoadWAV()</link> or <link linkend="__s_d_l__audio_8h_1a21df7371c70c5cb31d3b348adaf72c86">SDL_LoadWAV_RW()</link>.</para>

<para>After a WAVE file has been opened with <link linkend="__s_d_l__audio_8h_1a611f76dc30ba9891239bcce3f9b472b5">SDL_LoadWAV()</link> or <link linkend="__s_d_l__audio_8h_1a21df7371c70c5cb31d3b348adaf72c86">SDL_LoadWAV_RW()</link> its data can eventually be freed with <link linkend="__s_d_l__audio_8h_1a631aa8624575603df2c5ab9257feee59">SDL_FreeWAV()</link>. It is safe to call this function with a NULL pointer.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>audio_buf</entry><entry>
<para>a pointer to the buffer created by <link linkend="__s_d_l__audio_8h_1a611f76dc30ba9891239bcce3f9b472b5">SDL_LoadWAV()</link> or <link linkend="__s_d_l__audio_8h_1a21df7371c70c5cb31d3b348adaf72c86">SDL_LoadWAV_RW()</link></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__audio_8h_1a611f76dc30ba9891239bcce3f9b472b5">SDL_LoadWAV</link> </para>

<para><link linkend="__s_d_l__audio_8h_1a21df7371c70c5cb31d3b348adaf72c86">SDL_LoadWAV_RW</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__audio_8h_1aac10198502a5a037a72dfa333bb06b7c"/><section>
    <title>SDL_GetAudioDeviceName()</title>
<indexterm><primary>SDL_GetAudioDeviceName</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_GetAudioDeviceName</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> const char *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetAudioDeviceName (int index, int iscapture)</computeroutput></para>
<para>Get the human-readable name of a specific audio device.</para>

<para>This function is only valid after successfully initializing the audio subsystem. The values returned by this function reflect the latest call to <link linkend="__s_d_l__audio_8h_1ae165f64b3f0fecfebe1c97731600ca59">SDL_GetNumAudioDevices()</link>; re-call that function to redetect available hardware.</para>

<para>The string returned by this function is UTF-8 encoded, read-only, and managed internally. You are not to free it. If you need to keep the string for any length of time, you should make your own copy of it, as it will be invalid next time any of several other SDL functions are called.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>index</entry><entry>
<para>the index of the audio device; valid values range from 0 to <link linkend="__s_d_l__audio_8h_1ae165f64b3f0fecfebe1c97731600ca59">SDL_GetNumAudioDevices()</link> - 1 </para>
</entry>
                            </row>
                            <row>
<entry>iscapture</entry><entry>
<para>non-zero to query the list of recording devices, zero to query the list of output devices. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>the name of the audio device at the requested index, or NULL on error.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__audio_8h_1ae165f64b3f0fecfebe1c97731600ca59">SDL_GetNumAudioDevices</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__audio_8h_1aab1f29540e28a8638ec08ecccea47c36"/><section>
    <title>SDL_GetAudioDeviceSpec()</title>
<indexterm><primary>SDL_GetAudioDeviceSpec</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_GetAudioDeviceSpec</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetAudioDeviceSpec (int index, int iscapture, <link linkend="_struct_s_d_l___audio_spec">SDL_AudioSpec</link> * spec)</computeroutput></para>
<para>Get the preferred audio format of a specific audio device.</para>

<para>This function is only valid after a successfully initializing the audio subsystem. The values returned by this function reflect the latest call to <link linkend="__s_d_l__audio_8h_1ae165f64b3f0fecfebe1c97731600ca59">SDL_GetNumAudioDevices()</link>; re-call that function to redetect available hardware.</para>

<para><computeroutput>spec</computeroutput> will be filled with the sample rate, sample format, and channel count. All other values in the structure are filled with 0. When the supported struct members are 0, SDL was unable to get the property from the backend.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>index</entry><entry>
<para>the index of the audio device; valid values range from 0 to <link linkend="__s_d_l__audio_8h_1ae165f64b3f0fecfebe1c97731600ca59">SDL_GetNumAudioDevices()</link> - 1 </para>
</entry>
                            </row>
                            <row>
<entry>iscapture</entry><entry>
<para>non-zero to query the list of recording devices, zero to query the list of output devices. </para>
</entry>
                            </row>
                            <row>
<entry>spec</entry><entry>
<para>The <link linkend="_struct_s_d_l___audio_spec">SDL_AudioSpec</link> to be initialized by this function. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success, nonzero on error</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.16.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__audio_8h_1ae165f64b3f0fecfebe1c97731600ca59">SDL_GetNumAudioDevices</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__audio_8h_1ac86fde79b1afda3f0fb8e9a027434a69"/><section>
    <title>SDL_GetAudioDeviceStatus()</title>
<indexterm><primary>SDL_GetAudioDeviceStatus</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_GetAudioDeviceStatus</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__audio_8h_1a24a02745f01041dd2825d7e26502eef2">SDL_AudioStatus</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetAudioDeviceStatus (<link linkend="__s_d_l__audio_8h_1a677d9d2a6f77a7502a0dc8b45ad211bb">SDL_AudioDeviceID</link> dev)</computeroutput></para>
<para>Use this function to get the current audio state of an audio device.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>dev</entry><entry>
<para>the ID of an audio device previously opened with <link linkend="__s_d_l__audio_8h_1af54523e415de7c7fdd0d48a76ab58bb3">SDL_OpenAudioDevice()</link> </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>the SDL_AudioStatus of the specified audio device.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__audio_8h_1ab4c8e2a896ccf86599435af81fca928c">SDL_PauseAudioDevice</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__audio_8h_1a607058f35dad9277f3ca097c8fdae610"/><section>
    <title>SDL_GetAudioDriver()</title>
<indexterm><primary>SDL_GetAudioDriver</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_GetAudioDriver</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> const char *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetAudioDriver (int index)</computeroutput></para>
<para>Use this function to get the name of a built in audio driver.</para>

<para>The list of audio drivers is given in the order that they are normally initialized by default; the drivers that seem more reasonable to choose first (as far as the SDL developers believe) are earlier in the list.</para>

<para>The names of drivers are all simple, low-ASCII identifiers, like &quot;alsa&quot;, &quot;coreaudio&quot; or &quot;xaudio2&quot;. These never have Unicode characters, and are not meant to be proper names.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>index</entry><entry>
<para>the index of the audio driver; the value ranges from 0 to <link linkend="__s_d_l__audio_8h_1ae3cb6a3321d9ee32f3c05ea0794c5fb8">SDL_GetNumAudioDrivers()</link> - 1 </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>the name of the audio driver at the requested index, or NULL if an invalid index was specified.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__audio_8h_1ae3cb6a3321d9ee32f3c05ea0794c5fb8">SDL_GetNumAudioDrivers</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__audio_8h_1a568e10207e6ff53f8e238a0d562ef594"/><section>
    <title>SDL_GetAudioStatus()</title>
<indexterm><primary>SDL_GetAudioStatus</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_GetAudioStatus</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__audio_8h_1a24a02745f01041dd2825d7e26502eef2">SDL_AudioStatus</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetAudioStatus (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> )</computeroutput></para>
<para>This function is a legacy means of querying the audio device.</para>

<para>New programs might want to use <link linkend="__s_d_l__audio_8h_1ac86fde79b1afda3f0fb8e9a027434a69">SDL_GetAudioDeviceStatus()</link> instead. This function is equivalent to calling...</para>

<para><literallayout><computeroutput><link linkend="__s_d_l__audio_8h_1ac86fde79b1afda3f0fb8e9a027434a69">SDL_GetAudioDeviceStatus</link>(1);
</computeroutput></literallayout></para>

<para>...and is only useful if you used the legacy <link linkend="__s_d_l__audio_8h_1a2edf30e7747584e28041b4986f89f440">SDL_OpenAudio()</link> function.</para>

<para><formalpara><title>Returns</title>

<para>the SDL_AudioStatus of the audio device opened by <link linkend="__s_d_l__audio_8h_1a2edf30e7747584e28041b4986f89f440">SDL_OpenAudio()</link>.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__audio_8h_1ac86fde79b1afda3f0fb8e9a027434a69">SDL_GetAudioDeviceStatus</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__audio_8h_1a1fa49ad53602ae0e45f224d5625d64a9"/><section>
    <title>SDL_GetCurrentAudioDriver()</title>
<indexterm><primary>SDL_GetCurrentAudioDriver</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_GetCurrentAudioDriver</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> const char *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetCurrentAudioDriver (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> )</computeroutput></para>
<para>Get the name of the current audio driver.</para>

<para>The returned string points to internal static memory and thus never becomes invalid, even if you quit the audio subsystem and initialize a new driver (although such a case would return a different static string from another call to this function, of course). As such, you should not modify or free the returned string.</para>

<para><formalpara><title>Returns</title>

<para>the name of the current audio driver or NULL if no driver has been initialized.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__audio_8h_1ae3667d6ba706a3ca7affd8611632fa2c">SDL_AudioInit</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__audio_8h_1ae165f64b3f0fecfebe1c97731600ca59"/><section>
    <title>SDL_GetNumAudioDevices()</title>
<indexterm><primary>SDL_GetNumAudioDevices</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_GetNumAudioDevices</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetNumAudioDevices (int iscapture)</computeroutput></para>
<para>Get the number of built-in audio devices.</para>

<para>This function is only valid after successfully initializing the audio subsystem.</para>

<para>Note that audio capture support is not implemented as of SDL 2.0.4, so the <computeroutput>iscapture</computeroutput> parameter is for future expansion and should always be zero for now.</para>

<para>This function will return -1 if an explicit list of devices can&apos;t be determined. Returning -1 is not an error. For example, if SDL is set up to talk to a remote audio server, it can&apos;t list every one available on the Internet, but it will still allow a specific host to be specified in <link linkend="__s_d_l__audio_8h_1af54523e415de7c7fdd0d48a76ab58bb3">SDL_OpenAudioDevice()</link>.</para>

<para>In many common cases, when this function returns a value &lt;= 0, it can still successfully open the default device (NULL for first argument of <link linkend="__s_d_l__audio_8h_1af54523e415de7c7fdd0d48a76ab58bb3">SDL_OpenAudioDevice()</link>).</para>

<para>This function may trigger a complete redetect of available hardware. It should not be called for each iteration of a loop, but rather once at the start of a loop:</para>

<para><literallayout><computeroutput><emphasis role="comment">//&#32;Don&apos;t&#32;do&#32;this:</emphasis>
<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="__s_d_l__audio_8h_1ae165f64b3f0fecfebe1c97731600ca59">SDL_GetNumAudioDevices</link>(0);&#32;i++)

<emphasis role="comment">//&#32;do&#32;this&#32;instead:</emphasis>
<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__s_d_l__opengl_8h_1a619bc20e8198de3bd3f3d7fc34de66b2">count</link>&#32;=&#32;<link linkend="__s_d_l__audio_8h_1ae165f64b3f0fecfebe1c97731600ca59">SDL_GetNumAudioDevices</link>(0);
<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="__s_d_l__opengl_8h_1a619bc20e8198de3bd3f3d7fc34de66b2">count</link>;&#32;++i)&#32;{&#32;do_something_here();&#32;}
</computeroutput></literallayout></para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>iscapture</entry><entry>
<para>zero to request playback devices, non-zero to request recording devices </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>the number of available devices exposed by the current driver or -1 if an explicit list of devices can&apos;t be determined. A return value of -1 does not necessarily mean an error condition.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__audio_8h_1aac10198502a5a037a72dfa333bb06b7c">SDL_GetAudioDeviceName</link> </para>

<para><link linkend="__s_d_l__audio_8h_1af54523e415de7c7fdd0d48a76ab58bb3">SDL_OpenAudioDevice</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__audio_8h_1ae3cb6a3321d9ee32f3c05ea0794c5fb8"/><section>
    <title>SDL_GetNumAudioDrivers()</title>
<indexterm><primary>SDL_GetNumAudioDrivers</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_GetNumAudioDrivers</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetNumAudioDrivers (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> )</computeroutput></para>
<para>Use this function to get the number of built-in audio drivers.</para>

<para>This function returns a hardcoded number. This never returns a negative value; if there are no drivers compiled into this build of SDL, this function returns zero. The presence of a driver in this list does not mean it will function, it just means SDL is capable of interacting with that interface. For example, a build of SDL might have esound support, but if there&apos;s no esound server available, SDL&apos;s esound driver would fail if used.</para>

<para>By default, SDL tries all drivers, in its preferred order, until one is found to be usable.</para>

<para><formalpara><title>Returns</title>

<para>the number of built-in audio drivers.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__audio_8h_1a607058f35dad9277f3ca097c8fdae610">SDL_GetAudioDriver</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__audio_8h_1a11a1d59fd68f8a416fa72bf14f5c9ec3"/><section>
    <title>SDL_GetQueuedAudioSize()</title>
<indexterm><primary>SDL_GetQueuedAudioSize</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_GetQueuedAudioSize</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetQueuedAudioSize (<link linkend="__s_d_l__audio_8h_1a677d9d2a6f77a7502a0dc8b45ad211bb">SDL_AudioDeviceID</link> dev)</computeroutput></para>
<para>Get the number of bytes of still-queued audio.</para>

<para>For playback devices: this is the number of bytes that have been queued for playback with <link linkend="__s_d_l__audio_8h_1a19ef6fa2396f581aaf4d9a9512972268">SDL_QueueAudio()</link>, but have not yet been sent to the hardware.</para>

<para>Once we&apos;ve sent it to the hardware, this function can not decide the exact byte boundary of what has been played. It&apos;s possible that we just gave the hardware several kilobytes right before you called this function, but it hasn&apos;t played any of it yet, or maybe half of it, etc.</para>

<para>For capture devices, this is the number of bytes that have been captured by the device and are waiting for you to dequeue. This number may grow at any time, so this only informs of the lower-bound of available data.</para>

<para>You may not queue or dequeue audio on a device that is using an application-supplied callback; calling this function on such a device always returns 0. You have to use the audio callback or queue audio, but not both.</para>

<para>You should not call <link linkend="__s_d_l__audio_8h_1a7ffa484f230f6085e271a4f43e678f06">SDL_LockAudio()</link> on the device before querying; SDL handles locking internally for this function.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>dev</entry><entry>
<para>the device ID of which we will query queued audio size </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>the number of bytes (not samples!) of queued audio.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.4.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__audio_8h_1a073ed5d40cce01e839b34570c1c7ed50">SDL_ClearQueuedAudio</link> </para>

<para><link linkend="__s_d_l__audio_8h_1a19ef6fa2396f581aaf4d9a9512972268">SDL_QueueAudio</link> </para>

<para><link linkend="__s_d_l__audio_8h_1a6ed6333b8b294eafb6a9435fd8ff89fa">SDL_DequeueAudio</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__audio_8h_1a21df7371c70c5cb31d3b348adaf72c86"/><section>
    <title>SDL_LoadWAV_RW()</title>
<indexterm><primary>SDL_LoadWAV_RW</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_LoadWAV_RW</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="_struct_s_d_l___audio_spec">SDL_AudioSpec</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_LoadWAV_RW (<link linkend="_struct_s_d_l___r_wops">SDL_RWops</link> * src, int freesrc, <link linkend="_struct_s_d_l___audio_spec">SDL_AudioSpec</link> * spec, <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> ** audio_buf, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> * audio_len)</computeroutput></para>
<para>Load the audio data of a WAVE file into memory.</para>

<para>Loading a WAVE file requires <computeroutput>src</computeroutput>, <computeroutput>spec</computeroutput>, <computeroutput>audio_buf</computeroutput> and <computeroutput>audio_len</computeroutput> to be valid pointers. The entire data portion of the file is then loaded into memory and decoded if necessary.</para>

<para>If <computeroutput>freesrc</computeroutput> is non-zero, the data source gets automatically closed and freed before the function returns.</para>

<para>Supported formats are RIFF WAVE files with the formats PCM (8, 16, 24, and 32 bits), IEEE Float (32 bits), Microsoft ADPCM and IMA ADPCM (4 bits), and A-law and mu-law (8 bits). Other formats are currently unsupported and cause an error.</para>

<para>If this function succeeds, the pointer returned by it is equal to <computeroutput>spec</computeroutput> and the pointer to the audio data allocated by the function is written to <computeroutput>audio_buf</computeroutput> and its length in bytes to <computeroutput>audio_len</computeroutput>. The <link linkend="_struct_s_d_l___audio_spec">SDL_AudioSpec</link> members <computeroutput>freq</computeroutput>, <computeroutput>channels</computeroutput>, and <computeroutput>format</computeroutput> are set to the values of the audio data in the buffer. The <computeroutput>samples</computeroutput> member is set to a sane default and all others are set to zero.</para>

<para>It&apos;s necessary to use <link linkend="__s_d_l__audio_8h_1a631aa8624575603df2c5ab9257feee59">SDL_FreeWAV()</link> to free the audio data returned in <computeroutput>audio_buf</computeroutput> when it is no longer used.</para>

<para>Because of the underspecification of the .WAV format, there are many problematic files in the wild that cause issues with strict decoders. To provide compatibility with these files, this decoder is lenient in regards to the truncation of the file, the fact chunk, and the size of the RIFF chunk. The hints <computeroutput>SDL_HINT_WAVE_RIFF_CHUNK_SIZE</computeroutput>, <computeroutput>SDL_HINT_WAVE_TRUNCATION</computeroutput>, and <computeroutput>SDL_HINT_WAVE_FACT_CHUNK</computeroutput> can be used to tune the behavior of the loading process.</para>

<para>Any file that is invalid (due to truncation, corruption, or wrong values in the headers), too big, or unsupported causes an error. Additionally, any critical I/O error from the data source will terminate the loading process with an error. The function returns NULL on error and in all cases (with the exception of <computeroutput>src</computeroutput> being NULL), an appropriate error message will be set.</para>

<para>It is required that the data source supports seeking.</para>

<para>Example:</para>

<para><literallayout><computeroutput><link linkend="__s_d_l__audio_8h_1a21df7371c70c5cb31d3b348adaf72c86">SDL_LoadWAV_RW</link>(<link linkend="__s_d_l__rwops_8h_1a898d9ad749f054f6b6780bff411fd33a">SDL_RWFromFile</link>(<emphasis role="stringliteral">&quot;sample.wav&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;rb&quot;</emphasis>),&#32;1,&#32;&amp;spec,&#32;&amp;<link linkend="__s_d_l__opengl__glext_8h_1aa3b73d9ca9f2e2396cbeae1ce6ce14be">buf</link>,&#32;&amp;<link linkend="__s_d_l__opengl__glext_8h_1a652168017ea9a8bbcead03d5c16269fb">len</link>);
</computeroutput></literallayout></para>

<para>Note that the SDL_LoadWAV macro does this same thing for you, but in a less messy way:</para>

<para><literallayout><computeroutput><link linkend="__s_d_l__audio_8h_1a611f76dc30ba9891239bcce3f9b472b5">SDL_LoadWAV</link>(<emphasis role="stringliteral">&quot;sample.wav&quot;</emphasis>,&#32;&amp;spec,&#32;&amp;<link linkend="__s_d_l__opengl__glext_8h_1aa3b73d9ca9f2e2396cbeae1ce6ce14be">buf</link>,&#32;&amp;<link linkend="__s_d_l__opengl__glext_8h_1a652168017ea9a8bbcead03d5c16269fb">len</link>);
</computeroutput></literallayout></para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>src</entry><entry>
<para>The data source for the WAVE data </para>
</entry>
                            </row>
                            <row>
<entry>freesrc</entry><entry>
<para>If non-zero, SDL will <emphasis>always</emphasis> free the data source </para>
</entry>
                            </row>
                            <row>
<entry>spec</entry><entry>
<para>An <link linkend="_struct_s_d_l___audio_spec">SDL_AudioSpec</link> that will be filled in with the wave file&apos;s format details </para>
</entry>
                            </row>
                            <row>
<entry>audio_buf</entry><entry>
<para>A pointer filled with the audio data, allocated by the function. </para>
</entry>
                            </row>
                            <row>
<entry>audio_len</entry><entry>
<para>A pointer filled with the length of the audio data buffer in bytes </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>This function, if successfully called, returns <computeroutput>spec</computeroutput>, which will be filled with the audio data format of the wave source data. <computeroutput>audio_buf</computeroutput> will be filled with a pointer to an allocated buffer containing the audio data, and <computeroutput>audio_len</computeroutput> is filled with the length of that audio buffer in bytes.</para>
</formalpara>
This function returns NULL if the .WAV file cannot be opened, uses an unknown data format, or is corrupt; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>

<para>When the application is done with the data returned in <computeroutput>audio_buf</computeroutput>, it should call <link linkend="__s_d_l__audio_8h_1a631aa8624575603df2c5ab9257feee59">SDL_FreeWAV()</link> to dispose of it.</para>

<para><formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__audio_8h_1a631aa8624575603df2c5ab9257feee59">SDL_FreeWAV</link> </para>

<para><link linkend="__s_d_l__audio_8h_1a611f76dc30ba9891239bcce3f9b472b5">SDL_LoadWAV</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__audio_8h_1a7ffa484f230f6085e271a4f43e678f06"/><section>
    <title>SDL_LockAudio()</title>
<indexterm><primary>SDL_LockAudio</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_LockAudio</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_LockAudio (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> )</computeroutput></para>
<para>This function is a legacy means of locking the audio device.</para>

<para>New programs might want to use <link linkend="__s_d_l__audio_8h_1a9769845303f88f084f051b99e55b62a1">SDL_LockAudioDevice()</link> instead. This function is equivalent to calling...</para>

<para><literallayout><computeroutput><link linkend="__s_d_l__audio_8h_1a9769845303f88f084f051b99e55b62a1">SDL_LockAudioDevice</link>(1);
</computeroutput></literallayout></para>

<para>...and is only useful if you used the legacy <link linkend="__s_d_l__audio_8h_1a2edf30e7747584e28041b4986f89f440">SDL_OpenAudio()</link> function.</para>

<para><formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__audio_8h_1a9769845303f88f084f051b99e55b62a1">SDL_LockAudioDevice</link> </para>

<para><link linkend="__s_d_l__audio_8h_1a76d8179bee14dad268e65378058d897d">SDL_UnlockAudio</link> </para>

<para><link linkend="__s_d_l__audio_8h_1a37427a5d47e10103f2fff8165d5f9000">SDL_UnlockAudioDevice</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__audio_8h_1a9769845303f88f084f051b99e55b62a1"/><section>
    <title>SDL_LockAudioDevice()</title>
<indexterm><primary>SDL_LockAudioDevice</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_LockAudioDevice</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_LockAudioDevice (<link linkend="__s_d_l__audio_8h_1a677d9d2a6f77a7502a0dc8b45ad211bb">SDL_AudioDeviceID</link> dev)</computeroutput></para>
<para>Use this function to lock out the audio callback function for a specified device.</para>

<para>The lock manipulated by these functions protects the audio callback function specified in <link linkend="__s_d_l__audio_8h_1af54523e415de7c7fdd0d48a76ab58bb3">SDL_OpenAudioDevice()</link>. During a <link linkend="__s_d_l__audio_8h_1a9769845303f88f084f051b99e55b62a1">SDL_LockAudioDevice()</link>/SDL_UnlockAudioDevice() pair, you can be guaranteed that the callback function for that device is not running, even if the device is not paused. While a device is locked, any other unpaused, unlocked devices may still run their callbacks.</para>

<para>Calling this function from inside your audio callback is unnecessary. SDL obtains this lock before calling your function, and releases it when the function returns.</para>

<para>You should not hold the lock longer than absolutely necessary. If you hold it too long, you&apos;ll experience dropouts in your audio playback. Ideally, your application locks the device, sets a few variables and unlocks again. Do not do heavy work while holding the lock for a device.</para>

<para>It is safe to lock the audio device multiple times, as long as you unlock it an equivalent number of times. The callback will not run until the device has been unlocked completely in this way. If your application fails to unlock the device appropriately, your callback will never run, you might hear repeating bursts of audio, and <link linkend="__s_d_l__audio_8h_1abd910f31079d53b6c0ea8bf32dac0ce6">SDL_CloseAudioDevice()</link> will probably deadlock.</para>

<para>Internally, the audio device lock is a mutex; if you lock from two threads at once, not only will you block the audio callback, you&apos;ll block the other thread.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>dev</entry><entry>
<para>the ID of the device to be locked</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__audio_8h_1a37427a5d47e10103f2fff8165d5f9000">SDL_UnlockAudioDevice</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__audio_8h_1ab9ad945b4b15d816802f5a79da06c9f9"/><section>
    <title>SDL_MixAudio()</title>
<indexterm><primary>SDL_MixAudio</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_MixAudio</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_MixAudio (<link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> * dst, const <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> * src, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> len, int volume)</computeroutput></para>
<para>This function is a legacy means of mixing audio.</para>

<para>This function is equivalent to calling...</para>

<para><literallayout><computeroutput><link linkend="__s_d_l__audio_8h_1a27a0ad33d17f87a2d7574be78d2f39b7">SDL_MixAudioFormat</link>(<link linkend="__s_d_l__opengl__glext_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>,&#32;<link linkend="__s_d_l__opengl__glext_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>,&#32;<link linkend="__s_d_l__audio_8h_1a71a65ffd977afe9c3fef116a5bc9ee27">format</link>,&#32;<link linkend="__s_d_l__opengl__glext_8h_1a652168017ea9a8bbcead03d5c16269fb">len</link>,&#32;volume);
</computeroutput></literallayout></para>

<para>...where <computeroutput>format</computeroutput> is the obtained format of the audio device from the legacy <link linkend="__s_d_l__audio_8h_1a2edf30e7747584e28041b4986f89f440">SDL_OpenAudio()</link> function.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>dst</entry><entry>
<para>the destination for the mixed audio </para>
</entry>
                            </row>
                            <row>
<entry>src</entry><entry>
<para>the source audio buffer to be mixed </para>
</entry>
                            </row>
                            <row>
<entry>len</entry><entry>
<para>the length of the audio buffer in bytes </para>
</entry>
                            </row>
                            <row>
<entry>volume</entry><entry>
<para>ranges from 0 - 128, and should be set to SDL_MIX_MAXVOLUME for full audio volume</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__audio_8h_1a27a0ad33d17f87a2d7574be78d2f39b7">SDL_MixAudioFormat</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__audio_8h_1a27a0ad33d17f87a2d7574be78d2f39b7"/><section>
    <title>SDL_MixAudioFormat()</title>
<indexterm><primary>SDL_MixAudioFormat</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_MixAudioFormat</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_MixAudioFormat (<link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> * dst, const <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> * src, <link linkend="__s_d_l__audio_8h_1a491ed103fd25d920c4e6b7495217ce66">SDL_AudioFormat</link> format, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> len, int volume)</computeroutput></para>
<para>Mix audio data in a specified format.</para>

<para>This takes an audio buffer <computeroutput>src</computeroutput> of <computeroutput>len</computeroutput> bytes of <computeroutput>format</computeroutput> data and mixes it into <computeroutput>dst</computeroutput>, performing addition, volume adjustment, and overflow clipping. The buffer pointed to by <computeroutput>dst</computeroutput> must also be <computeroutput>len</computeroutput> bytes of <computeroutput>format</computeroutput> data.</para>

<para>This is provided for convenience &#8211; you can mix your own audio data.</para>

<para>Do not use this function for mixing together more than two streams of sample data. The output from repeated application of this function may be distorted by clipping, because there is no accumulator with greater range than the input (not to mention this being an inefficient way of doing it).</para>

<para>It is a common misconception that this function is required to write audio data to an output stream in an audio callback. While you can do that, <link linkend="__s_d_l__audio_8h_1a27a0ad33d17f87a2d7574be78d2f39b7">SDL_MixAudioFormat()</link> is really only needed when you&apos;re mixing a single audio stream with a volume adjustment.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>dst</entry><entry>
<para>the destination for the mixed audio </para>
</entry>
                            </row>
                            <row>
<entry>src</entry><entry>
<para>the source audio buffer to be mixed </para>
</entry>
                            </row>
                            <row>
<entry>format</entry><entry>
<para>the SDL_AudioFormat structure representing the desired audio format </para>
</entry>
                            </row>
                            <row>
<entry>len</entry><entry>
<para>the length of the audio buffer in bytes </para>
</entry>
                            </row>
                            <row>
<entry>volume</entry><entry>
<para>ranges from 0 - 128, and should be set to SDL_MIX_MAXVOLUME for full audio volume</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0. </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__audio_8h_1a49212d7bdaed59c937ab08fdd3cf804e"/><section>
    <title>SDL_NewAudioStream()</title>
<indexterm><primary>SDL_NewAudioStream</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_NewAudioStream</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__audio_8h_1a1f8d82f8013b06777000675a9636071e">SDL_AudioStream</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_NewAudioStream (const <link linkend="__s_d_l__audio_8h_1a491ed103fd25d920c4e6b7495217ce66">SDL_AudioFormat</link> src_format, const <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> src_channels, const int src_rate, const <link linkend="__s_d_l__audio_8h_1a491ed103fd25d920c4e6b7495217ce66">SDL_AudioFormat</link> dst_format, const <link linkend="__s_d_l__stdinc_8h_1a2944638813a090aa23e62f4da842c3e2">Uint8</link> dst_channels, const int dst_rate)</computeroutput></para>
<para>Create a new audio stream.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>src_format</entry><entry>
<para>The format of the source audio </para>
</entry>
                            </row>
                            <row>
<entry>src_channels</entry><entry>
<para>The number of channels of the source audio </para>
</entry>
                            </row>
                            <row>
<entry>src_rate</entry><entry>
<para>The sampling rate of the source audio </para>
</entry>
                            </row>
                            <row>
<entry>dst_format</entry><entry>
<para>The format of the desired audio output </para>
</entry>
                            </row>
                            <row>
<entry>dst_channels</entry><entry>
<para>The number of channels of the desired audio output </para>
</entry>
                            </row>
                            <row>
<entry>dst_rate</entry><entry>
<para>The sampling rate of the desired audio output </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success, or -1 on error.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.7.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__audio_8h_1ae1cb87e81c853b21f025f42f336ad814">SDL_AudioStreamPut</link> </para>

<para><link linkend="__s_d_l__audio_8h_1a6a8996f0cb3adf37d4c1c5ed4eef5b18">SDL_AudioStreamGet</link> </para>

<para><link linkend="__s_d_l__audio_8h_1a4667c3464058d7be76c1f8349d7656de">SDL_AudioStreamAvailable</link> </para>

<para><link linkend="__s_d_l__audio_8h_1add31a8f8ccd99c87b71bef2a9cf93f9b">SDL_AudioStreamFlush</link> </para>

<para><link linkend="__s_d_l__audio_8h_1a7a74da30372d4a2c3db7ceef406d65fb">SDL_AudioStreamClear</link> </para>

<para><link linkend="__s_d_l__audio_8h_1ab093ff9871e917dac8d2fa5169970cf5">SDL_FreeAudioStream</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__audio_8h_1a2edf30e7747584e28041b4986f89f440"/><section>
    <title>SDL_OpenAudio()</title>
<indexterm><primary>SDL_OpenAudio</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_OpenAudio</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_OpenAudio (<link linkend="_struct_s_d_l___audio_spec">SDL_AudioSpec</link> * desired, <link linkend="_struct_s_d_l___audio_spec">SDL_AudioSpec</link> * obtained)</computeroutput></para>
<para>This function is a legacy means of opening the audio device.</para>

<para>This function remains for compatibility with SDL 1.2, but also because it&apos;s slightly easier to use than the new functions in SDL 2.0. The new, more powerful, and preferred way to do this is <link linkend="__s_d_l__audio_8h_1af54523e415de7c7fdd0d48a76ab58bb3">SDL_OpenAudioDevice()</link>.</para>

<para>This function is roughly equivalent to:</para>

<para><literallayout><computeroutput><link linkend="__s_d_l__audio_8h_1af54523e415de7c7fdd0d48a76ab58bb3">SDL_OpenAudioDevice</link>(<link linkend="_begin__code_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>,&#32;0,&#32;desired,&#32;obtained,&#32;<link linkend="__s_d_l__audio_8h_1acbee9b7a641274139377898c21df92e8">SDL_AUDIO_ALLOW_ANY_CHANGE</link>);
</computeroutput></literallayout></para>

<para>With two notable exceptions:</para>

<para><itemizedlist>
<listitem>
<para>If <computeroutput>obtained</computeroutput> is NULL, we use <computeroutput>desired</computeroutput> (and allow no changes), which means desired will be modified to have the correct values for silence, etc, and SDL will convert any differences between your app&apos;s specific request and the hardware behind the scenes.</para>
</listitem><listitem>
<para>The return value is always success or failure, and not a device ID, which means you can only have one device open at a time with this function.</para>
</listitem></itemizedlist>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>desired</entry><entry>
<para>an <link linkend="_struct_s_d_l___audio_spec">SDL_AudioSpec</link> structure representing the desired output format. Please refer to the SDL_OpenAudioDevice documentation for details on how to prepare this structure. </para>
</entry>
                            </row>
                            <row>
<entry>obtained</entry><entry>
<para>an <link linkend="_struct_s_d_l___audio_spec">SDL_AudioSpec</link> structure filled in with the actual parameters, or NULL. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 if successful, placing the actual hardware parameters in the structure pointed to by <computeroutput>obtained</computeroutput>.</para>
</formalpara>
If <computeroutput>obtained</computeroutput> is NULL, the audio data passed to the callback function will be guaranteed to be in the requested format, and will be automatically converted to the actual hardware audio format if necessary. If <computeroutput>obtained</computeroutput> is NULL, <computeroutput>desired</computeroutput> will have fields modified.</para>

<para>This function returns a negative error code on failure to open the audio device or failure to set up the audio thread; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>

<para><formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__audio_8h_1aa176acc650e66e1d38814cbed3ca258e">SDL_CloseAudio</link> </para>

<para><link linkend="__s_d_l__audio_8h_1a7ffa484f230f6085e271a4f43e678f06">SDL_LockAudio</link> </para>

<para><link linkend="__s_d_l__audio_8h_1aa68e60a33666ff4f2d36f3827b1d6061">SDL_PauseAudio</link> </para>

<para><link linkend="__s_d_l__audio_8h_1a76d8179bee14dad268e65378058d897d">SDL_UnlockAudio</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__audio_8h_1af54523e415de7c7fdd0d48a76ab58bb3"/><section>
    <title>SDL_OpenAudioDevice()</title>
<indexterm><primary>SDL_OpenAudioDevice</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_OpenAudioDevice</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__audio_8h_1a677d9d2a6f77a7502a0dc8b45ad211bb">SDL_AudioDeviceID</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_OpenAudioDevice (const char * device, int iscapture, const <link linkend="_struct_s_d_l___audio_spec">SDL_AudioSpec</link> * desired, <link linkend="_struct_s_d_l___audio_spec">SDL_AudioSpec</link> * obtained, int allowed_changes)</computeroutput></para>
<para>Open a specific audio device.</para>

<para><link linkend="__s_d_l__audio_8h_1a2edf30e7747584e28041b4986f89f440">SDL_OpenAudio()</link>, unlike this function, always acts on device ID 1. As such, this function will never return a 1 so as not to conflict with the legacy function.</para>

<para>Please note that SDL 2.0 before 2.0.5 did not support recording; as such, this function would fail if <computeroutput>iscapture</computeroutput> was not zero. Starting with SDL 2.0.5, recording is implemented and this value can be non-zero.</para>

<para>Passing in a <computeroutput>device</computeroutput> name of NULL requests the most reasonable default (and is equivalent to what <link linkend="__s_d_l__audio_8h_1a2edf30e7747584e28041b4986f89f440">SDL_OpenAudio()</link> does to choose a device). The <computeroutput>device</computeroutput> name is a UTF-8 string reported by <link linkend="__s_d_l__audio_8h_1aac10198502a5a037a72dfa333bb06b7c">SDL_GetAudioDeviceName()</link>, but some drivers allow arbitrary and driver-specific strings, such as a hostname/IP address for a remote audio server, or a filename in the diskaudio driver.</para>

<para>An opened audio device starts out paused, and should be enabled for playing by calling SDL_PauseAudioDevice(devid, 0) when you are ready for your audio callback function to be called. Since the audio driver may modify the requested size of the audio buffer, you should allocate any local mixing buffers after you open the audio device.</para>

<para>The audio callback runs in a separate thread in most cases; you can prevent race conditions between your callback and other threads without fully pausing playback with <link linkend="__s_d_l__audio_8h_1a9769845303f88f084f051b99e55b62a1">SDL_LockAudioDevice()</link>. For more information about the callback, see <link linkend="_struct_s_d_l___audio_spec">SDL_AudioSpec</link>.</para>

<para>Managing the audio spec via &apos;desired&apos; and &apos;obtained&apos;:</para>

<para>When filling in the desired audio spec structure:</para>

<para><itemizedlist>
<listitem>
<para><computeroutput>desired-&gt;freq</computeroutput> should be the frequency in sample-frames-per-second (Hz).</para>
</listitem><listitem>
<para><computeroutput>desired-&gt;format</computeroutput> should be the audio format (<computeroutput>AUDIO_S16SYS</computeroutput>, etc).</para>
</listitem><listitem>
<para><computeroutput>desired-&gt;samples</computeroutput> is the desired size of the audio buffer, in <emphasis>sample frames</emphasis> (with stereo output, two samples&#8211;left and right&#8211;would make a single sample frame). This number should be a power of two, and may be adjusted by the audio driver to a value more suitable for the hardware. Good values seem to range between 512 and 8096 inclusive, depending on the application and CPU speed. Smaller values reduce latency, but can lead to underflow if the application is doing heavy processing and cannot fill the audio buffer in time. Note that the number of sample frames is directly related to time by the following formula: <computeroutput>ms = (sampleframes*1000)/freq</computeroutput></para>
</listitem><listitem>
<para><computeroutput>desired-&gt;size</computeroutput> is the size in <emphasis>bytes</emphasis> of the audio buffer, and is calculated by <link linkend="__s_d_l__audio_8h_1af54523e415de7c7fdd0d48a76ab58bb3">SDL_OpenAudioDevice()</link>. You don&apos;t initialize this.</para>
</listitem><listitem>
<para><computeroutput>desired-&gt;silence</computeroutput> is the value used to set the buffer to silence, and is calculated by <link linkend="__s_d_l__audio_8h_1af54523e415de7c7fdd0d48a76ab58bb3">SDL_OpenAudioDevice()</link>. You don&apos;t initialize this.</para>
</listitem><listitem>
<para><computeroutput>desired-&gt;callback</computeroutput> should be set to a function that will be called when the audio device is ready for more data. It is passed a pointer to the audio buffer, and the length in bytes of the audio buffer. This function usually runs in a separate thread, and so you should protect data structures that it accesses by calling <link linkend="__s_d_l__audio_8h_1a9769845303f88f084f051b99e55b62a1">SDL_LockAudioDevice()</link> and <link linkend="__s_d_l__audio_8h_1a37427a5d47e10103f2fff8165d5f9000">SDL_UnlockAudioDevice()</link> in your code. Alternately, you may pass a NULL pointer here, and call <link linkend="__s_d_l__audio_8h_1a19ef6fa2396f581aaf4d9a9512972268">SDL_QueueAudio()</link> with some frequency, to queue more audio samples to be played (or for capture devices, call <link linkend="__s_d_l__audio_8h_1a6ed6333b8b294eafb6a9435fd8ff89fa">SDL_DequeueAudio()</link> with some frequency, to obtain audio samples).</para>
</listitem><listitem>
<para><computeroutput>desired-&gt;userdata</computeroutput> is passed as the first parameter to your callback function. If you passed a NULL callback, this value is ignored.</para>
</listitem></itemizedlist>
</para>

<para><computeroutput>allowed_changes</computeroutput> can have the following flags OR&apos;d together:</para>

<para><itemizedlist>
<listitem>
<para><computeroutput>SDL_AUDIO_ALLOW_FREQUENCY_CHANGE</computeroutput></para>
</listitem><listitem>
<para><computeroutput>SDL_AUDIO_ALLOW_FORMAT_CHANGE</computeroutput></para>
</listitem><listitem>
<para><computeroutput>SDL_AUDIO_ALLOW_CHANNELS_CHANGE</computeroutput></para>
</listitem><listitem>
<para><computeroutput>SDL_AUDIO_ALLOW_ANY_CHANGE</computeroutput></para>
</listitem></itemizedlist>
</para>

<para>These flags specify how SDL should behave when a device cannot offer a specific feature. If the application requests a feature that the hardware doesn&apos;t offer, SDL will always try to get the closest equivalent.</para>

<para>For example, if you ask for float32 audio format, but the sound card only supports int16, SDL will set the hardware to int16. If you had set SDL_AUDIO_ALLOW_FORMAT_CHANGE, SDL will change the format in the <computeroutput>obtained</computeroutput> structure. If that flag was <emphasis>not</emphasis> set, SDL will prepare to convert your callback&apos;s float32 audio to int16 before feeding it to the hardware and will keep the originally requested format in the <computeroutput>obtained</computeroutput> structure.</para>

<para>The resulting audio specs, varying depending on hardware and on what changes were allowed, will then be written back to <computeroutput>obtained</computeroutput>.</para>

<para>If your application can only handle one specific data format, pass a zero for <computeroutput>allowed_changes</computeroutput> and let SDL transparently handle any differences.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>device</entry><entry>
<para>a UTF-8 string reported by <link linkend="__s_d_l__audio_8h_1aac10198502a5a037a72dfa333bb06b7c">SDL_GetAudioDeviceName()</link> or a driver-specific name as appropriate. NULL requests the most reasonable default device. </para>
</entry>
                            </row>
                            <row>
<entry>iscapture</entry><entry>
<para>non-zero to specify a device should be opened for recording, not playback </para>
</entry>
                            </row>
                            <row>
<entry>desired</entry><entry>
<para>an <link linkend="_struct_s_d_l___audio_spec">SDL_AudioSpec</link> structure representing the desired output format; see <link linkend="__s_d_l__audio_8h_1a2edf30e7747584e28041b4986f89f440">SDL_OpenAudio()</link> for more information </para>
</entry>
                            </row>
                            <row>
<entry>obtained</entry><entry>
<para>an <link linkend="_struct_s_d_l___audio_spec">SDL_AudioSpec</link> structure filled in with the actual output format; see <link linkend="__s_d_l__audio_8h_1a2edf30e7747584e28041b4986f89f440">SDL_OpenAudio()</link> for more information </para>
</entry>
                            </row>
                            <row>
<entry>allowed_changes</entry><entry>
<para>0, or one or more flags OR&apos;d together </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>a valid device ID that is &gt; 0 on success or 0 on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
For compatibility with SDL 1.2, this will never return 1, since SDL reserves that ID for the legacy <link linkend="__s_d_l__audio_8h_1a2edf30e7747584e28041b4986f89f440">SDL_OpenAudio()</link> function.</para>

<para><formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__audio_8h_1abd910f31079d53b6c0ea8bf32dac0ce6">SDL_CloseAudioDevice</link> </para>

<para><link linkend="__s_d_l__audio_8h_1aac10198502a5a037a72dfa333bb06b7c">SDL_GetAudioDeviceName</link> </para>

<para><link linkend="__s_d_l__audio_8h_1a9769845303f88f084f051b99e55b62a1">SDL_LockAudioDevice</link> </para>

<para><link linkend="__s_d_l__audio_8h_1a2edf30e7747584e28041b4986f89f440">SDL_OpenAudio</link> </para>

<para><link linkend="__s_d_l__audio_8h_1ab4c8e2a896ccf86599435af81fca928c">SDL_PauseAudioDevice</link> </para>

<para><link linkend="__s_d_l__audio_8h_1a37427a5d47e10103f2fff8165d5f9000">SDL_UnlockAudioDevice</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__audio_8h_1aa68e60a33666ff4f2d36f3827b1d6061"/><section>
    <title>SDL_PauseAudio()</title>
<indexterm><primary>SDL_PauseAudio</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_PauseAudio</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_PauseAudio (int pause_on)</computeroutput></para>
<para>This function is a legacy means of pausing the audio device.</para>

<para>New programs might want to use <link linkend="__s_d_l__audio_8h_1ab4c8e2a896ccf86599435af81fca928c">SDL_PauseAudioDevice()</link> instead. This function is equivalent to calling...</para>

<para><literallayout><computeroutput><link linkend="__s_d_l__audio_8h_1ab4c8e2a896ccf86599435af81fca928c">SDL_PauseAudioDevice</link>(1,&#32;pause_on);
</computeroutput></literallayout></para>

<para>...and is only useful if you used the legacy <link linkend="__s_d_l__audio_8h_1a2edf30e7747584e28041b4986f89f440">SDL_OpenAudio()</link> function.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>pause_on</entry><entry>
<para>non-zero to pause, 0 to unpause</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__audio_8h_1a568e10207e6ff53f8e238a0d562ef594">SDL_GetAudioStatus</link> </para>

<para><link linkend="__s_d_l__audio_8h_1ab4c8e2a896ccf86599435af81fca928c">SDL_PauseAudioDevice</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__audio_8h_1ab4c8e2a896ccf86599435af81fca928c"/><section>
    <title>SDL_PauseAudioDevice()</title>
<indexterm><primary>SDL_PauseAudioDevice</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_PauseAudioDevice</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_PauseAudioDevice (<link linkend="__s_d_l__audio_8h_1a677d9d2a6f77a7502a0dc8b45ad211bb">SDL_AudioDeviceID</link> dev, int pause_on)</computeroutput></para>
<para>Use this function to pause and unpause audio playback on a specified device.</para>

<para>This function pauses and unpauses the audio callback processing for a given device. Newly-opened audio devices start in the paused state, so you must call this function with <emphasis role="bold">pause_on</emphasis>=0 after opening the specified audio device to start playing sound. This allows you to safely initialize data for your callback function after opening the audio device. Silence will be written to the audio device while paused, and the audio callback is guaranteed to not be called. Pausing one device does not prevent other unpaused devices from running their callbacks.</para>

<para>Pausing state does not stack; even if you pause a device several times, a single unpause will start the device playing again, and vice versa. This is different from how <link linkend="__s_d_l__audio_8h_1a9769845303f88f084f051b99e55b62a1">SDL_LockAudioDevice()</link> works.</para>

<para>If you just need to protect a few variables from race conditions vs your callback, you shouldn&apos;t pause the audio device, as it will lead to dropouts in the audio playback. Instead, you should use <link linkend="__s_d_l__audio_8h_1a9769845303f88f084f051b99e55b62a1">SDL_LockAudioDevice()</link>.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>dev</entry><entry>
<para>a device opened by <link linkend="__s_d_l__audio_8h_1af54523e415de7c7fdd0d48a76ab58bb3">SDL_OpenAudioDevice()</link> </para>
</entry>
                            </row>
                            <row>
<entry>pause_on</entry><entry>
<para>non-zero to pause, 0 to unpause</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__audio_8h_1a9769845303f88f084f051b99e55b62a1">SDL_LockAudioDevice</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__audio_8h_1a19ef6fa2396f581aaf4d9a9512972268"/><section>
    <title>SDL_QueueAudio()</title>
<indexterm><primary>SDL_QueueAudio</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_QueueAudio</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_QueueAudio (<link linkend="__s_d_l__audio_8h_1a677d9d2a6f77a7502a0dc8b45ad211bb">SDL_AudioDeviceID</link> dev, const <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> * data, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> len)</computeroutput></para>
<para>Queue more audio on non-callback devices.</para>

<para>If you are looking to retrieve queued audio from a non-callback capture device, you want <link linkend="__s_d_l__audio_8h_1a6ed6333b8b294eafb6a9435fd8ff89fa">SDL_DequeueAudio()</link> instead. <link linkend="__s_d_l__audio_8h_1a19ef6fa2396f581aaf4d9a9512972268">SDL_QueueAudio()</link> will return -1 to signify an error if you use it with capture devices.</para>

<para>SDL offers two ways to feed audio to the device: you can either supply a callback that SDL triggers with some frequency to obtain more audio (pull method), or you can supply no callback, and then SDL will expect you to supply data at regular intervals (push method) with this function.</para>

<para>There are no limits on the amount of data you can queue, short of exhaustion of address space. Queued data will drain to the device as necessary without further intervention from you. If the device needs audio but there is not enough queued, it will play silence to make up the difference. This means you will have skips in your audio playback if you aren&apos;t routinely queueing sufficient data.</para>

<para>This function copies the supplied data, so you are safe to free it when the function returns. This function is thread-safe, but queueing to the same device from two threads at once does not promise which buffer will be queued first.</para>

<para>You may not queue audio on a device that is using an application-supplied callback; doing so returns an error. You have to use the audio callback or queue audio with this function, but not both.</para>

<para>You should not call <link linkend="__s_d_l__audio_8h_1a7ffa484f230f6085e271a4f43e678f06">SDL_LockAudio()</link> on the device before queueing; SDL handles locking internally for this function.</para>

<para>Note that SDL2 does not support planar audio. You will need to resample from planar audio formats into a non-planar one (see SDL_AudioFormat) before queuing audio.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>dev</entry><entry>
<para>the device ID to which we will queue audio </para>
</entry>
                            </row>
                            <row>
<entry>data</entry><entry>
<para>the data to queue to the device for later playback </para>
</entry>
                            </row>
                            <row>
<entry>len</entry><entry>
<para>the number of bytes (not samples!) to which <computeroutput>data</computeroutput> points </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success or a negative error code on failure; call <link linkend="__s_d_l__error_8h_1adaef317de186f072f8328798de29d51a">SDL_GetError()</link> for more information.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.4.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__audio_8h_1a073ed5d40cce01e839b34570c1c7ed50">SDL_ClearQueuedAudio</link> </para>

<para><link linkend="__s_d_l__audio_8h_1a11a1d59fd68f8a416fa72bf14f5c9ec3">SDL_GetQueuedAudioSize</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__audio_8h_1a76d8179bee14dad268e65378058d897d"/><section>
    <title>SDL_UnlockAudio()</title>
<indexterm><primary>SDL_UnlockAudio</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_UnlockAudio</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_UnlockAudio (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> )</computeroutput></para>
<para>This function is a legacy means of unlocking the audio device.</para>

<para>New programs might want to use <link linkend="__s_d_l__audio_8h_1a37427a5d47e10103f2fff8165d5f9000">SDL_UnlockAudioDevice()</link> instead. This function is equivalent to calling...</para>

<para><literallayout><computeroutput><link linkend="__s_d_l__audio_8h_1a37427a5d47e10103f2fff8165d5f9000">SDL_UnlockAudioDevice</link>(1);
</computeroutput></literallayout></para>

<para>...and is only useful if you used the legacy <link linkend="__s_d_l__audio_8h_1a2edf30e7747584e28041b4986f89f440">SDL_OpenAudio()</link> function.</para>

<para><formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__audio_8h_1a7ffa484f230f6085e271a4f43e678f06">SDL_LockAudio</link> </para>

<para><link linkend="__s_d_l__audio_8h_1a37427a5d47e10103f2fff8165d5f9000">SDL_UnlockAudioDevice</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__audio_8h_1a37427a5d47e10103f2fff8165d5f9000"/><section>
    <title>SDL_UnlockAudioDevice()</title>
<indexterm><primary>SDL_UnlockAudioDevice</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>SDL_UnlockAudioDevice</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_UnlockAudioDevice (<link linkend="__s_d_l__audio_8h_1a677d9d2a6f77a7502a0dc8b45ad211bb">SDL_AudioDeviceID</link> dev)</computeroutput></para>
<para>Use this function to unlock the audio callback function for a specified device.</para>

<para>This function should be paired with a previous <link linkend="__s_d_l__audio_8h_1a9769845303f88f084f051b99e55b62a1">SDL_LockAudioDevice()</link> call.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>dev</entry><entry>
<para>the ID of the device to be unlocked</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__audio_8h_1a9769845303f88f084f051b99e55b62a1">SDL_LockAudioDevice</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__audio_8h_1aa5cb90967788ada2711894ca158ece01"/><section>
    <title>void()</title>
<indexterm><primary>void</primary><secondary>SDL_audio.h</secondary></indexterm>
<indexterm><primary>SDL_audio.h</primary><secondary>void</secondary></indexterm>
<para><computeroutput>typedef void (<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> * SDL_AudioFilter)</computeroutput></para></section>
</section>
</section>
