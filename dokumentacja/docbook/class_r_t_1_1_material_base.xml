<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_r_t_1_1_material_base" xml:lang="en-US">
<title>RT::MaterialBase Class Reference</title>
<indexterm><primary>RT::MaterialBase</primary></indexterm>
<para>
<computeroutput>#include &lt;materialbase.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for RT::MaterialBase:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_r_t_1_1_material_base.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_r_t_1_1_material_base_1afc66df6eff4e978f498e541b1750221c">MaterialBase</link> ()</para>
</listitem>
            <listitem><para>virtual <link linkend="_class_r_t_1_1_material_base_1a68eb6a4d3a0c5fd01f858c4a217e6187">~MaterialBase</link> ()</para>
</listitem>
            <listitem><para>virtual <link linkend="_classqb_vector">qbVector</link>&lt; double &gt; <link linkend="_class_r_t_1_1_material_base_1aa8b05496fa1fed6988efd524eb5dbe48">ComputeColor</link> (const std::vector&lt; std::shared_ptr&lt; <link linkend="_class_r_t_1_1_object_base">RT::ObjectBase</link> &gt; &gt; &amp;objectList, const std::vector&lt; std::shared_ptr&lt; <link linkend="_class_r_t_1_1_light_base">RT::LightBase</link> &gt; &gt; &amp;lightList, const std::shared_ptr&lt; <link linkend="_class_r_t_1_1_object_base">RT::ObjectBase</link> &gt; &amp;currentObject, const <link linkend="_classqb_vector">qbVector</link>&lt; double &gt; &amp;intPoint, const <link linkend="_classqb_vector">qbVector</link>&lt; double &gt; &amp;localNormal, const <link linkend="_class_r_t_1_1_ray">RT::Ray</link> &amp;cameraRay)</para>
</listitem>
            <listitem><para><link linkend="_classqb_vector">qbVector</link>&lt; double &gt; <link linkend="_class_r_t_1_1_material_base_1a5981b94c2858393d5d3308e4fe047768">ComputeReflectionColor</link> (const std::vector&lt; std::shared_ptr&lt; <link linkend="_class_r_t_1_1_object_base">RT::ObjectBase</link> &gt; &gt; &amp;objectList, const std::vector&lt; std::shared_ptr&lt; <link linkend="_class_r_t_1_1_light_base">RT::LightBase</link> &gt; &gt; &amp;lightList, const std::shared_ptr&lt; <link linkend="_class_r_t_1_1_object_base">RT::ObjectBase</link> &gt; &amp;currentObject, const <link linkend="_classqb_vector">qbVector</link>&lt; double &gt; &amp;intPoint, const <link linkend="_classqb_vector">qbVector</link>&lt; double &gt; &amp;localNormal, const <link linkend="_class_r_t_1_1_ray">RT::Ray</link> &amp;incidentRay)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_r_t_1_1_material_base_1ac7549ffbbac551a9e343a3d1a29c30b4">CastRay</link> (const <link linkend="_class_r_t_1_1_ray">RT::Ray</link> &amp;castRay, const std::vector&lt; std::shared_ptr&lt; <link linkend="_class_r_t_1_1_object_base">RT::ObjectBase</link> &gt; &gt; &amp;objectList, const std::shared_ptr&lt; <link linkend="_class_r_t_1_1_object_base">RT::ObjectBase</link> &gt; &amp;thisObject, std::shared_ptr&lt; <link linkend="_class_r_t_1_1_object_base">RT::ObjectBase</link> &gt; &amp;closestObject, <link linkend="_classqb_vector">qbVector</link>&lt; double &gt; &amp;closestIntPoint, <link linkend="_classqb_vector">qbVector</link>&lt; double &gt; &amp;closestLocalNormal, <link linkend="_classqb_vector">qbVector</link>&lt; double &gt; &amp;closestLocalColor)</para>
</listitem>
            <listitem><para><link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="_class_r_t_1_1_material_base_1a6a1070eefc722456176a821f447e6ef2">AssignTexture</link> (const std::shared_ptr&lt; <link linkend="_class_r_t_1_1_texture_1_1_texture_base">RT::Texture::TextureBase</link> &gt; &amp;inputTexture)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>static <link linkend="_classqb_vector">qbVector</link>&lt; double &gt; <link linkend="_class_r_t_1_1_material_base_1a2a8f6d812302097b550388ed3deed6b7">ComputeDiffuseColor</link> (const std::vector&lt; std::shared_ptr&lt; <link linkend="_class_r_t_1_1_object_base">RT::ObjectBase</link> &gt; &gt; &amp;objectList, const std::vector&lt; std::shared_ptr&lt; <link linkend="_class_r_t_1_1_light_base">RT::LightBase</link> &gt; &gt; &amp;lightList, const std::shared_ptr&lt; <link linkend="_class_r_t_1_1_object_base">RT::ObjectBase</link> &gt; &amp;currentObject, const <link linkend="_classqb_vector">qbVector</link>&lt; double &gt; &amp;intPoint, const <link linkend="_classqb_vector">qbVector</link>&lt; double &gt; &amp;localNormal, const <link linkend="_classqb_vector">qbVector</link>&lt; double &gt; &amp;baseColor)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Attributes    </title>
        <itemizedlist>
            <listitem><para>std::vector&lt; std::shared_ptr&lt; <link linkend="_class_r_t_1_1_texture_1_1_texture_base">RT::Texture::TextureBase</link> &gt; &gt; <link linkend="_class_r_t_1_1_material_base_1a22c94fe436f4b7944381238983ec0472">m_textureList</link></para>
</listitem>
            <listitem><para>bool <link linkend="_class_r_t_1_1_material_base_1acbde6abdad78b526022475a8e2b39d2a">m_hasTexture</link> = false</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Attributes    </title>
        <itemizedlist>
            <listitem><para>static int <link linkend="_class_r_t_1_1_material_base_1a2e2661a371b1689d72d929ca21f8e8eb">m_maxReflectionRays</link></para>
</listitem>
            <listitem><para>static int <link linkend="_class_r_t_1_1_material_base_1acb27faf3834b1db091139c8a970ea4bc">m_reflectionRayCount</link></para>
</listitem>
            <listitem><para>static <link linkend="_classqb_vector">qbVector</link>&lt; double &gt; <link linkend="_class_r_t_1_1_material_base_1a97579f592fb17d8077e16e2b48d6e826">m_ambientColor</link> {std::vector&lt;double&gt; {1.0, 1.0, 1.0}}</para>
</listitem>
            <listitem><para>static double <link linkend="_class_r_t_1_1_material_base_1a6297b836279524bc2772b3a066f1a5d8">m_ambientIntensity</link> = 0.2</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_r_t_1_1_material_base_1afc66df6eff4e978f498e541b1750221c"/><section>
    <title>MaterialBase()</title>
<indexterm><primary>MaterialBase</primary><secondary>RT::MaterialBase</secondary></indexterm>
<indexterm><primary>RT::MaterialBase</primary><secondary>MaterialBase</secondary></indexterm>
<para><computeroutput>RT::MaterialBase::MaterialBase ( )</computeroutput></para></section>
<anchor xml:id="_class_r_t_1_1_material_base_1a68eb6a4d3a0c5fd01f858c4a217e6187"/><section>
    <title>~MaterialBase()</title>
<indexterm><primary>~MaterialBase</primary><secondary>RT::MaterialBase</secondary></indexterm>
<indexterm><primary>RT::MaterialBase</primary><secondary>~MaterialBase</secondary></indexterm>
<para><computeroutput>RT::MaterialBase::~MaterialBase ( )<computeroutput>[virtual]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_r_t_1_1_material_base_1a6a1070eefc722456176a821f447e6ef2"/><section>
    <title>AssignTexture()</title>
<indexterm><primary>AssignTexture</primary><secondary>RT::MaterialBase</secondary></indexterm>
<indexterm><primary>RT::MaterialBase</primary><secondary>AssignTexture</secondary></indexterm>
<para><computeroutput><link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> RT::MaterialBase::AssignTexture (const std::shared_ptr&lt; <link linkend="_class_r_t_1_1_texture_1_1_texture_base">RT::Texture::TextureBase</link> &gt; &amp; inputTexture)</computeroutput></para></section>
<anchor xml:id="_class_r_t_1_1_material_base_1ac7549ffbbac551a9e343a3d1a29c30b4"/><section>
    <title>CastRay()</title>
<indexterm><primary>CastRay</primary><secondary>RT::MaterialBase</secondary></indexterm>
<indexterm><primary>RT::MaterialBase</primary><secondary>CastRay</secondary></indexterm>
<para><computeroutput>bool RT::MaterialBase::CastRay (const <link linkend="_class_r_t_1_1_ray">RT::Ray</link> &amp; castRay, const std::vector&lt; std::shared_ptr&lt; <link linkend="_class_r_t_1_1_object_base">RT::ObjectBase</link> &gt; &gt; &amp; objectList, const std::shared_ptr&lt; <link linkend="_class_r_t_1_1_object_base">RT::ObjectBase</link> &gt; &amp; thisObject, std::shared_ptr&lt; <link linkend="_class_r_t_1_1_object_base">RT::ObjectBase</link> &gt; &amp; closestObject, <link linkend="_classqb_vector">qbVector</link>&lt; double &gt; &amp; closestIntPoint, <link linkend="_classqb_vector">qbVector</link>&lt; double &gt; &amp; closestLocalNormal, <link linkend="_classqb_vector">qbVector</link>&lt; double &gt; &amp; closestLocalColor)</computeroutput></para></section>
<anchor xml:id="_class_r_t_1_1_material_base_1aa8b05496fa1fed6988efd524eb5dbe48"/><section>
    <title>ComputeColor()</title>
<indexterm><primary>ComputeColor</primary><secondary>RT::MaterialBase</secondary></indexterm>
<indexterm><primary>RT::MaterialBase</primary><secondary>ComputeColor</secondary></indexterm>
<para><computeroutput><link linkend="_classqb_vector">qbVector</link>&lt; double &gt; RT::MaterialBase::ComputeColor (const std::vector&lt; std::shared_ptr&lt; <link linkend="_class_r_t_1_1_object_base">RT::ObjectBase</link> &gt; &gt; &amp; objectList, const std::vector&lt; std::shared_ptr&lt; <link linkend="_class_r_t_1_1_light_base">RT::LightBase</link> &gt; &gt; &amp; lightList, const std::shared_ptr&lt; <link linkend="_class_r_t_1_1_object_base">RT::ObjectBase</link> &gt; &amp; currentObject, const <link linkend="_classqb_vector">qbVector</link>&lt; double &gt; &amp; intPoint, const <link linkend="_classqb_vector">qbVector</link>&lt; double &gt; &amp; localNormal, const <link linkend="_class_r_t_1_1_ray">RT::Ray</link> &amp; cameraRay)<computeroutput>[virtual]</computeroutput></computeroutput></para><para>
Reimplemented in <link linkend="_class_r_t_1_1_simple_material_1a27119202e1ef25225faa2b425bd681e4">RT::SimpleMaterial</link>, and <link linkend="_class_r_t_1_1_simple_refractive_1a988530ca94a0cf72b9035f74c4527f96">RT::SimpleRefractive</link>.</para>
</section>
<anchor xml:id="_class_r_t_1_1_material_base_1a2a8f6d812302097b550388ed3deed6b7"/><section>
    <title>ComputeDiffuseColor()</title>
<indexterm><primary>ComputeDiffuseColor</primary><secondary>RT::MaterialBase</secondary></indexterm>
<indexterm><primary>RT::MaterialBase</primary><secondary>ComputeDiffuseColor</secondary></indexterm>
<para><computeroutput><link linkend="_classqb_vector">qbVector</link>&lt; double &gt; RT::MaterialBase::ComputeDiffuseColor (const std::vector&lt; std::shared_ptr&lt; <link linkend="_class_r_t_1_1_object_base">RT::ObjectBase</link> &gt; &gt; &amp; objectList, const std::vector&lt; std::shared_ptr&lt; <link linkend="_class_r_t_1_1_light_base">RT::LightBase</link> &gt; &gt; &amp; lightList, const std::shared_ptr&lt; <link linkend="_class_r_t_1_1_object_base">RT::ObjectBase</link> &gt; &amp; currentObject, const <link linkend="_classqb_vector">qbVector</link>&lt; double &gt; &amp; intPoint, const <link linkend="_classqb_vector">qbVector</link>&lt; double &gt; &amp; localNormal, const <link linkend="_classqb_vector">qbVector</link>&lt; double &gt; &amp; baseColor)<computeroutput>[static]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_r_t_1_1_material_base_1a5981b94c2858393d5d3308e4fe047768"/><section>
    <title>ComputeReflectionColor()</title>
<indexterm><primary>ComputeReflectionColor</primary><secondary>RT::MaterialBase</secondary></indexterm>
<indexterm><primary>RT::MaterialBase</primary><secondary>ComputeReflectionColor</secondary></indexterm>
<para><computeroutput><link linkend="_classqb_vector">qbVector</link>&lt; double &gt; RT::MaterialBase::ComputeReflectionColor (const std::vector&lt; std::shared_ptr&lt; <link linkend="_class_r_t_1_1_object_base">RT::ObjectBase</link> &gt; &gt; &amp; objectList, const std::vector&lt; std::shared_ptr&lt; <link linkend="_class_r_t_1_1_light_base">RT::LightBase</link> &gt; &gt; &amp; lightList, const std::shared_ptr&lt; <link linkend="_class_r_t_1_1_object_base">RT::ObjectBase</link> &gt; &amp; currentObject, const <link linkend="_classqb_vector">qbVector</link>&lt; double &gt; &amp; intPoint, const <link linkend="_classqb_vector">qbVector</link>&lt; double &gt; &amp; localNormal, const <link linkend="_class_r_t_1_1_ray">RT::Ray</link> &amp; incidentRay)</computeroutput></para></section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_r_t_1_1_material_base_1a97579f592fb17d8077e16e2b48d6e826"/><section>
    <title>m_ambientColor</title>
<indexterm><primary>m_ambientColor</primary><secondary>RT::MaterialBase</secondary></indexterm>
<indexterm><primary>RT::MaterialBase</primary><secondary>m_ambientColor</secondary></indexterm>
<para><computeroutput><link linkend="_classqb_vector">qbVector</link>&lt;double&gt; RT::MaterialBase::m_ambientColor {std::vector&lt;double&gt; {1.0, 1.0, 1.0}}<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_r_t_1_1_material_base_1a6297b836279524bc2772b3a066f1a5d8"/><section>
    <title>m_ambientIntensity</title>
<indexterm><primary>m_ambientIntensity</primary><secondary>RT::MaterialBase</secondary></indexterm>
<indexterm><primary>RT::MaterialBase</primary><secondary>m_ambientIntensity</secondary></indexterm>
<para><computeroutput>double RT::MaterialBase::m_ambientIntensity = 0.2<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_r_t_1_1_material_base_1acbde6abdad78b526022475a8e2b39d2a"/><section>
    <title>m_hasTexture</title>
<indexterm><primary>m_hasTexture</primary><secondary>RT::MaterialBase</secondary></indexterm>
<indexterm><primary>RT::MaterialBase</primary><secondary>m_hasTexture</secondary></indexterm>
<para><computeroutput>bool RT::MaterialBase::m_hasTexture = false</computeroutput></para></section>
<anchor xml:id="_class_r_t_1_1_material_base_1a2e2661a371b1689d72d929ca21f8e8eb"/><section>
    <title>m_maxReflectionRays</title>
<indexterm><primary>m_maxReflectionRays</primary><secondary>RT::MaterialBase</secondary></indexterm>
<indexterm><primary>RT::MaterialBase</primary><secondary>m_maxReflectionRays</secondary></indexterm>
<para><computeroutput>int RT::MaterialBase::m_maxReflectionRays<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_r_t_1_1_material_base_1acb27faf3834b1db091139c8a970ea4bc"/><section>
    <title>m_reflectionRayCount</title>
<indexterm><primary>m_reflectionRayCount</primary><secondary>RT::MaterialBase</secondary></indexterm>
<indexterm><primary>RT::MaterialBase</primary><secondary>m_reflectionRayCount</secondary></indexterm>
<para><computeroutput>int RT::MaterialBase::m_reflectionRayCount<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_r_t_1_1_material_base_1a22c94fe436f4b7944381238983ec0472"/><section>
    <title>m_textureList</title>
<indexterm><primary>m_textureList</primary><secondary>RT::MaterialBase</secondary></indexterm>
<indexterm><primary>RT::MaterialBase</primary><secondary>m_textureList</secondary></indexterm>
<para><computeroutput>std::vector&lt;std::shared_ptr&lt;<link linkend="_class_r_t_1_1_texture_1_1_texture_base">RT::Texture::TextureBase</link>&gt; &gt; RT::MaterialBase::m_textureList</computeroutput></para></section>
<para>
The documentation for this class was generated from the following files:</para>
D:/RayTracing/RayTrace/Materials/<link linkend="_materialbase_8h">materialbase.h</link>D:/RayTracing/RayTrace/Materials/<link linkend="_materialbase_8cpp">materialbase.cpp</link></section>
</section>
