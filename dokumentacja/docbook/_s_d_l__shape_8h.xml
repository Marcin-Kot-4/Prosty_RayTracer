<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__s_d_l__shape_8h" xml:lang="en-US">
<title>D:/RayTracing/include/SDL_shape.h File Reference</title>
<indexterm><primary>D:/RayTracing/include/SDL_shape.h</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &quot;SDL_stdinc.h&quot;
#include &quot;SDL_pixels.h&quot;
#include &quot;SDL_rect.h&quot;
#include &quot;SDL_surface.h&quot;
#include &quot;SDL_video.h&quot;
#include &quot;begin_code.h&quot;
#include &quot;close_code.h&quot;
</programlisting><simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>union <link linkend="_union_s_d_l___window_shape_params">SDL_WindowShapeParams</link></para>

<para>A union containing parameters for shaped windows. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct_s_d_l___window_shape_mode">SDL_WindowShapeMode</link></para>

<para>A struct that tags the <link linkend="_union_s_d_l___window_shape_params">SDL_WindowShapeParams</link> union with an enum describing the type of its contents. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#define <link linkend="__s_d_l__shape_8h_1a45e50a0ce349a4e200338d634fa73de5">SDL_NONSHAPEABLE_WINDOW</link>   -1</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__shape_8h_1a1cfaf1e1a560ef7f68f59f46a9a0b1fd">SDL_INVALID_SHAPE_ARGUMENT</link>   -2</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__shape_8h_1aa7306c8f1a1b87b398a9842383303232">SDL_WINDOW_LACKS_SHAPE</link>   -3</para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__shape_8h_1af8e3c7bdeca58eb82cb8faed8d385cdc">SDL_SHAPEMODEALPHA</link>(<link linkend="__s_d_l__opengl__glext_8h_1a1e71d9c196e4683cc06c4b54d53f7ef5">mode</link>)   (<link linkend="__s_d_l__opengl__glext_8h_1a1e71d9c196e4683cc06c4b54d53f7ef5">mode</link> == <link linkend="__s_d_l__shape_8h_1aa30948f2699e316a43b740eccebe5c20aca1bc38c9b5179cbed0e9e176cd84d9e">ShapeModeDefault</link> || <link linkend="__s_d_l__opengl__glext_8h_1a1e71d9c196e4683cc06c4b54d53f7ef5">mode</link> == <link linkend="__s_d_l__shape_8h_1aa30948f2699e316a43b740eccebe5c20a0ba1cff6129858a1136728ffdc787926">ShapeModeBinarizeAlpha</link> || <link linkend="__s_d_l__opengl__glext_8h_1a1e71d9c196e4683cc06c4b54d53f7ef5">mode</link> == <link linkend="__s_d_l__shape_8h_1aa30948f2699e316a43b740eccebe5c20ae478c81ede522586674806541e145993">ShapeModeReverseBinarizeAlpha</link>)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Typedefs    </title>
        <itemizedlist>
            <listitem><para>typedef struct <link linkend="_struct_s_d_l___window_shape_mode">SDL_WindowShapeMode</link> <link linkend="__s_d_l__shape_8h_1a7c3c38083471976868424ca18e89295d">SDL_WindowShapeMode</link></para>

<para>A struct that tags the <link linkend="_union_s_d_l___window_shape_params">SDL_WindowShapeParams</link> union with an enum describing the type of its contents. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Enumerations    </title>
        <itemizedlist>
            <listitem><para>enum <link linkend="__s_d_l__shape_8h_1aa30948f2699e316a43b740eccebe5c20">WindowShapeMode</link> { <link linkend="__s_d_l__shape_8h_1aa30948f2699e316a43b740eccebe5c20aca1bc38c9b5179cbed0e9e176cd84d9e">ShapeModeDefault</link>
, <link linkend="__s_d_l__shape_8h_1aa30948f2699e316a43b740eccebe5c20a0ba1cff6129858a1136728ffdc787926">ShapeModeBinarizeAlpha</link>
, <link linkend="__s_d_l__shape_8h_1aa30948f2699e316a43b740eccebe5c20ae478c81ede522586674806541e145993">ShapeModeReverseBinarizeAlpha</link>
, <link linkend="__s_d_l__shape_8h_1aa30948f2699e316a43b740eccebe5c20a1d3ca52e90d5b3086e22120c2899f214">ShapeModeColorKey</link>
 }</para>

<para>An enum denoting the specific type of contents present in an <link linkend="_union_s_d_l___window_shape_params">SDL_WindowShapeParams</link> union. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__shape_8h_1aa3fd07ce85c885b4124e855875c1f52a">SDL_CreateShapedWindow</link> (const char *title, unsigned int <link linkend="__s_d_l__opengl_8h_1ad0e63d0edcdbd3d79554076bf309fd47">x</link>, unsigned int <link linkend="__s_d_l__opengl_8h_1a1675d9d7bb68e1657ff028643b4037e3">y</link>, unsigned int <link linkend="__s_d_l__opengl__glext_8h_1a6ee8f168a7ab6785a9bb57c6715dad99">w</link>, unsigned int <link linkend="__s_d_l__opengl__glext_8h_1afa0fb1b5e976920c0abeff2dca3ed774">h</link>, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> <link linkend="__s_d_l__opengl__glext_8h_1ac7ba7d3cce3d19ca020e056b37231289">flags</link>)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__shape_8h_1a28630f0f6b298bac4d0efe850d7d327e">SDL_IsShapedWindow</link> (const <link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__shape_8h_1a90d52818802235df9689922be5a4cf5a">SDL_SetWindowShape</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window, <link linkend="_struct_s_d_l___surface">SDL_Surface</link> *shape, <link linkend="_struct_s_d_l___window_shape_mode">SDL_WindowShapeMode</link> *shape_mode)</para>
</listitem>
            <listitem><para><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> <link linkend="__s_d_l__shape_8h_1a64dba6f6440cf6984d8da868fd758711">SDL_GetShapedWindowMode</link> (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *window, <link linkend="_struct_s_d_l___window_shape_mode">SDL_WindowShapeMode</link> *shape_mode)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Header file for the shaped window API. </para>
</section>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="__s_d_l__shape_8h_1a1cfaf1e1a560ef7f68f59f46a9a0b1fd"/><section>
    <title>SDL_INVALID_SHAPE_ARGUMENT</title>
<indexterm><primary>SDL_INVALID_SHAPE_ARGUMENT</primary><secondary>SDL_shape.h</secondary></indexterm>
<indexterm><primary>SDL_shape.h</primary><secondary>SDL_INVALID_SHAPE_ARGUMENT</secondary></indexterm>
<para><computeroutput>#define SDL_INVALID_SHAPE_ARGUMENT   -2</computeroutput></para></section>
<anchor xml:id="__s_d_l__shape_8h_1a45e50a0ce349a4e200338d634fa73de5"/><section>
    <title>SDL_NONSHAPEABLE_WINDOW</title>
<indexterm><primary>SDL_NONSHAPEABLE_WINDOW</primary><secondary>SDL_shape.h</secondary></indexterm>
<indexterm><primary>SDL_shape.h</primary><secondary>SDL_NONSHAPEABLE_WINDOW</secondary></indexterm>
<para><computeroutput>#define SDL_NONSHAPEABLE_WINDOW   -1</computeroutput></para></section>
<anchor xml:id="__s_d_l__shape_8h_1af8e3c7bdeca58eb82cb8faed8d385cdc"/><section>
    <title>SDL_SHAPEMODEALPHA</title>
<indexterm><primary>SDL_SHAPEMODEALPHA</primary><secondary>SDL_shape.h</secondary></indexterm>
<indexterm><primary>SDL_shape.h</primary><secondary>SDL_SHAPEMODEALPHA</secondary></indexterm>
<para><computeroutput>#define SDL_SHAPEMODEALPHA( <link linkend="__s_d_l__opengl__glext_8h_1a1e71d9c196e4683cc06c4b54d53f7ef5">mode</link>)   (<link linkend="__s_d_l__opengl__glext_8h_1a1e71d9c196e4683cc06c4b54d53f7ef5">mode</link> == <link linkend="__s_d_l__shape_8h_1aa30948f2699e316a43b740eccebe5c20aca1bc38c9b5179cbed0e9e176cd84d9e">ShapeModeDefault</link> || <link linkend="__s_d_l__opengl__glext_8h_1a1e71d9c196e4683cc06c4b54d53f7ef5">mode</link> == <link linkend="__s_d_l__shape_8h_1aa30948f2699e316a43b740eccebe5c20a0ba1cff6129858a1136728ffdc787926">ShapeModeBinarizeAlpha</link> || <link linkend="__s_d_l__opengl__glext_8h_1a1e71d9c196e4683cc06c4b54d53f7ef5">mode</link> == <link linkend="__s_d_l__shape_8h_1aa30948f2699e316a43b740eccebe5c20ae478c81ede522586674806541e145993">ShapeModeReverseBinarizeAlpha</link>)</computeroutput></para></section>
<anchor xml:id="__s_d_l__shape_8h_1aa7306c8f1a1b87b398a9842383303232"/><section>
    <title>SDL_WINDOW_LACKS_SHAPE</title>
<indexterm><primary>SDL_WINDOW_LACKS_SHAPE</primary><secondary>SDL_shape.h</secondary></indexterm>
<indexterm><primary>SDL_shape.h</primary><secondary>SDL_WINDOW_LACKS_SHAPE</secondary></indexterm>
<para><computeroutput>#define SDL_WINDOW_LACKS_SHAPE   -3</computeroutput></para></section>
</section>
<section>
<title>Typedef Documentation</title>
<anchor xml:id="__s_d_l__shape_8h_1a7c3c38083471976868424ca18e89295d"/><section>
    <title>SDL_WindowShapeMode</title>
<indexterm><primary>SDL_WindowShapeMode</primary><secondary>SDL_shape.h</secondary></indexterm>
<indexterm><primary>SDL_shape.h</primary><secondary>SDL_WindowShapeMode</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_struct_s_d_l___window_shape_mode">SDL_WindowShapeMode</link> <link linkend="_struct_s_d_l___window_shape_mode">SDL_WindowShapeMode</link></computeroutput></para><para>

<para>A struct that tags the <link linkend="_union_s_d_l___window_shape_params">SDL_WindowShapeParams</link> union with an enum describing the type of its contents. </para>
</para>
</section>
</section>
<section>
<title>Enumeration Type Documentation</title>
<anchor xml:id="__s_d_l__shape_8h_1aa30948f2699e316a43b740eccebe5c20"/><section>
    <title>WindowShapeMode</title>
<indexterm><primary>WindowShapeMode</primary><secondary>SDL_shape.h</secondary></indexterm>
<indexterm><primary>SDL_shape.h</primary><secondary>WindowShapeMode</secondary></indexterm>
<para><computeroutput>enum <link linkend="__s_d_l__shape_8h_1aa30948f2699e316a43b740eccebe5c20">WindowShapeMode</link></computeroutput></para><para>

<para>An enum denoting the specific type of contents present in an <link linkend="_union_s_d_l___window_shape_params">SDL_WindowShapeParams</link> union. </para>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>ShapeModeDefault</primary><secondary>SDL_shape.h</secondary></indexterm>
<indexterm><primary>SDL_shape.h</primary><secondary>ShapeModeDefault</secondary></indexterm>
<anchor xml:id="__s_d_l__shape_8h_1aa30948f2699e316a43b740eccebe5c20aca1bc38c9b5179cbed0e9e176cd84d9e"/>ShapeModeDefault</entry><entry>
<para>The default mode, a binarized alpha cutoff of 1. </para>
</entry></row><row><entry><indexterm><primary>ShapeModeBinarizeAlpha</primary><secondary>SDL_shape.h</secondary></indexterm>
<indexterm><primary>SDL_shape.h</primary><secondary>ShapeModeBinarizeAlpha</secondary></indexterm>
<anchor xml:id="__s_d_l__shape_8h_1aa30948f2699e316a43b740eccebe5c20a0ba1cff6129858a1136728ffdc787926"/>ShapeModeBinarizeAlpha</entry><entry>
<para>A binarized alpha cutoff with a given integer value. </para>
</entry></row><row><entry><indexterm><primary>ShapeModeReverseBinarizeAlpha</primary><secondary>SDL_shape.h</secondary></indexterm>
<indexterm><primary>SDL_shape.h</primary><secondary>ShapeModeReverseBinarizeAlpha</secondary></indexterm>
<anchor xml:id="__s_d_l__shape_8h_1aa30948f2699e316a43b740eccebe5c20ae478c81ede522586674806541e145993"/>ShapeModeReverseBinarizeAlpha</entry><entry>
<para>A binarized alpha cutoff with a given integer value, but with the opposite comparison. </para>
</entry></row><row><entry><indexterm><primary>ShapeModeColorKey</primary><secondary>SDL_shape.h</secondary></indexterm>
<indexterm><primary>SDL_shape.h</primary><secondary>ShapeModeColorKey</secondary></indexterm>
<anchor xml:id="__s_d_l__shape_8h_1aa30948f2699e316a43b740eccebe5c20a1d3ca52e90d5b3086e22120c2899f214"/>ShapeModeColorKey</entry><entry>
<para>A color key is applied. </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="__s_d_l__shape_8h_1aa3fd07ce85c885b4124e855875c1f52a"/><section>
    <title>SDL_CreateShapedWindow()</title>
<indexterm><primary>SDL_CreateShapedWindow</primary><secondary>SDL_shape.h</secondary></indexterm>
<indexterm><primary>SDL_shape.h</primary><secondary>SDL_CreateShapedWindow</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> *<link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_CreateShapedWindow (const char * title, unsigned int x, unsigned int y, unsigned int w, unsigned int h, <link linkend="__s_d_l__stdinc_8h_1add440eff171ea5f55cb00c4a9ab8672d">Uint32</link> flags)</computeroutput></para>
<para>Create a window that can be shaped with the specified position, dimensions, and flags.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>title</entry><entry>
<para>The title of the window, in UTF-8 encoding. </para>
</entry>
                            </row>
                            <row>
<entry>x</entry><entry>
<para>The x position of the window, <link linkend="__s_d_l__video_8h_1a8d2f428ddef3b4ccf08915814e35d9c7">SDL_WINDOWPOS_CENTERED</link>, or <link linkend="__s_d_l__video_8h_1a20917558a7e5fb159647980218726a52">SDL_WINDOWPOS_UNDEFINED</link>. </para>
</entry>
                            </row>
                            <row>
<entry>y</entry><entry>
<para>The y position of the window, <link linkend="__s_d_l__video_8h_1a8d2f428ddef3b4ccf08915814e35d9c7">SDL_WINDOWPOS_CENTERED</link>, or <link linkend="__s_d_l__video_8h_1a20917558a7e5fb159647980218726a52">SDL_WINDOWPOS_UNDEFINED</link>. </para>
</entry>
                            </row>
                            <row>
<entry>w</entry><entry>
<para>The width of the window. </para>
</entry>
                            </row>
                            <row>
<entry>h</entry><entry>
<para>The height of the window. </para>
</entry>
                            </row>
                            <row>
<entry>flags</entry><entry>
<para>The flags for the window, a mask of SDL_WINDOW_BORDERLESS with any of the following: <link linkend="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18a5cf8af096f1870b0c2b12267cabd1f7a">SDL_WINDOW_OPENGL</link>, <link linkend="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18aaf410e1082e45a55ef9176163610dba2">SDL_WINDOW_INPUT_GRABBED</link>, <link linkend="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18adda25e98e54964c0c2ec9ac31f5e629c">SDL_WINDOW_HIDDEN</link>, <link linkend="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18aaf59a5e2f762aa2b6d2e49b0ca220fd8">SDL_WINDOW_RESIZABLE</link>, <link linkend="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18acd8063a617f2ce05f694ecdbf56f811a">SDL_WINDOW_MAXIMIZED</link>, <link linkend="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18a7f08ee26b5773412a212233ddc168c5a">SDL_WINDOW_MINIMIZED</link>, <link linkend="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18af7baea7dc9c0e4f09b28793504b02e4c">SDL_WINDOW_BORDERLESS</link> is always set, and <link linkend="__s_d_l__video_8h_1ab10f4fd6a082ef06fcae96860c95fb18ac7b8279bdf5e22a0b4a95aae3d846923">SDL_WINDOW_FULLSCREEN</link> is always unset. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>the window created, or NULL if window creation failed.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__video_8h_1a72609295a4faee0587268339ccff80c2">SDL_DestroyWindow</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__shape_8h_1a64dba6f6440cf6984d8da868fd758711"/><section>
    <title>SDL_GetShapedWindowMode()</title>
<indexterm><primary>SDL_GetShapedWindowMode</primary><secondary>SDL_shape.h</secondary></indexterm>
<indexterm><primary>SDL_shape.h</primary><secondary>SDL_GetShapedWindowMode</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_GetShapedWindowMode (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window, <link linkend="_struct_s_d_l___window_shape_mode">SDL_WindowShapeMode</link> * shape_mode)</computeroutput></para>
<para>Get the shape parameters of a shaped window.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>The shaped window whose parameters should be retrieved. </para>
</entry>
                            </row>
                            <row>
<entry>shape_mode</entry><entry>
<para>An empty shape-mode structure to fill, or NULL to check whether the window has a shape. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 if the window has a shape and, provided shape_mode was not NULL, shape_mode has been filled with the mode data, SDL_NONSHAPEABLE_WINDOW if the SDL_Window given is not a shaped window, or SDL_WINDOW_LACKS_SHAPE if the SDL_Window given is a shapeable window currently lacking a shape.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="_struct_s_d_l___window_shape_mode">SDL_WindowShapeMode</link> </para>

<para><link linkend="__s_d_l__shape_8h_1a90d52818802235df9689922be5a4cf5a">SDL_SetWindowShape</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__shape_8h_1a28630f0f6b298bac4d0efe850d7d327e"/><section>
    <title>SDL_IsShapedWindow()</title>
<indexterm><primary>SDL_IsShapedWindow</primary><secondary>SDL_shape.h</secondary></indexterm>
<indexterm><primary>SDL_shape.h</primary><secondary>SDL_IsShapedWindow</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> <link linkend="__s_d_l__stdinc_8h_1a8fca68df0f976765230fe589a7c7733b">SDL_bool</link> <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_IsShapedWindow (const <link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window)</computeroutput></para>
<para>Return whether the given window is a shaped window.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>The window to query for being shaped. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>SDL_TRUE if the window is a window that can be shaped, SDL_FALSE if the window is unshaped or NULL.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="__s_d_l__shape_8h_1aa3fd07ce85c885b4124e855875c1f52a">SDL_CreateShapedWindow</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__shape_8h_1a90d52818802235df9689922be5a4cf5a"/><section>
    <title>SDL_SetWindowShape()</title>
<indexterm><primary>SDL_SetWindowShape</primary><secondary>SDL_shape.h</secondary></indexterm>
<indexterm><primary>SDL_shape.h</primary><secondary>SDL_SetWindowShape</secondary></indexterm>
<para><computeroutput><link linkend="_begin__code_8h_1aa4c7a931f4a968f818b2a1b10a432185">DECLSPEC</link> int <link linkend="_begin__code_8h_1a81faf4ba0455dc75f2e0507eddb79401">SDLCALL</link> SDL_SetWindowShape (<link linkend="__s_d_l__video_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * window, <link linkend="_struct_s_d_l___surface">SDL_Surface</link> * shape, <link linkend="_struct_s_d_l___window_shape_mode">SDL_WindowShapeMode</link> * shape_mode)</computeroutput></para>
<para>Set the shape and parameters of a shaped window.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>The shaped window whose parameters should be set. </para>
</entry>
                            </row>
                            <row>
<entry>shape</entry><entry>
<para>A surface encoding the desired shape for the window. </para>
</entry>
                            </row>
                            <row>
<entry>shape_mode</entry><entry>
<para>The parameters to set for the shaped window. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success, SDL_INVALID_SHAPE_ARGUMENT on an invalid shape argument, or SDL_NONSHAPEABLE_WINDOW if the SDL_Window given does not reference a valid shaped window.</para>
</formalpara>
<formalpara><title>Since</title>

<para>This function is available since SDL 2.0.0.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="_struct_s_d_l___window_shape_mode">SDL_WindowShapeMode</link> </para>

<para><link linkend="__s_d_l__shape_8h_1a64dba6f6440cf6984d8da868fd758711">SDL_GetShapedWindowMode</link> </para>
</formalpara>
</para>
</section>
</section>
</section>
