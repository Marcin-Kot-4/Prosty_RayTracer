<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__s_d_l__test__assert_8h" xml:lang="en-US">
<title>D:/RayTracing/include/SDL_test_assert.h File Reference</title>
<indexterm><primary>D:/RayTracing/include/SDL_test_assert.h</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &quot;begin_code.h&quot;
#include &quot;close_code.h&quot;
</programlisting><simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#define <link linkend="__s_d_l__test__assert_8h_1adc9dbc949d8699a6f6515211a2efa0cf">ASSERT_FAIL</link>   0</para>

<para>Fails the assert. </para>
</listitem>
            <listitem><para>#define <link linkend="__s_d_l__test__assert_8h_1ae67a2f28e6df1e351df870754835a09a">ASSERT_PASS</link>   1</para>

<para>Passes the assert. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="__s_d_l__test__assert_8h_1a633252c9cb122f42c502ca43d6f842ad">SDLTest_Assert</link> (int assertCondition, <link linkend="__s_d_l__stdinc_8h_1ab13a729d2e3e2d1e1b3b2dc0bfb858eb">SDL_PRINTF_FORMAT_STRING</link> const char *assertDescription,...) <link linkend="__s_d_l__stdinc_8h_1ab974676e45d9edeef6598d601d4fdd6a">SDL_PRINTF_VARARG_FUNC</link>(2)</para>

<para>Assert that logs and break execution flow on failures. </para>
</listitem>
            <listitem><para>int <link linkend="__s_d_l__test__assert_8h_1a9f6f6cecd54a5f7aeaf0c89e0f8fe0ab">SDLTest_AssertCheck</link> (int assertCondition, <link linkend="__s_d_l__stdinc_8h_1ab13a729d2e3e2d1e1b3b2dc0bfb858eb">SDL_PRINTF_FORMAT_STRING</link> const char *assertDescription,...) <link linkend="__s_d_l__stdinc_8h_1ab974676e45d9edeef6598d601d4fdd6a">SDL_PRINTF_VARARG_FUNC</link>(2)</para>

<para>Assert for test cases that logs but does not break execution flow on failures. Updates assertion counters. </para>
</listitem>
            <listitem><para><link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="__s_d_l__test__assert_8h_1a2156b479e33af1aa7e2c7d03c5cbb4c9">SDLTest_AssertPass</link> (<link linkend="__s_d_l__stdinc_8h_1ab13a729d2e3e2d1e1b3b2dc0bfb858eb">SDL_PRINTF_FORMAT_STRING</link> const char *assertDescription,...) <link linkend="__s_d_l__stdinc_8h_1ab974676e45d9edeef6598d601d4fdd6a">SDL_PRINTF_VARARG_FUNC</link>(1)</para>

<para>Explicitly pass without checking an assertion condition. Updates assertion counter. </para>
</listitem>
            <listitem><para><link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="__s_d_l__test__assert_8h_1a1f78edbf1f7a38ebfeb2a2c76e3a5e60">SDLTest_ResetAssertSummary</link> (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link>)</para>

<para>Resets the assert summary counters to zero. </para>
</listitem>
            <listitem><para><link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> <link linkend="__s_d_l__test__assert_8h_1a7e34c7c9d66a164ed785de905c75ab54">SDLTest_LogAssertSummary</link> (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link>)</para>

<para>Logs summary of all assertions (total, pass, fail) since last reset as INFO or ERROR. </para>
</listitem>
            <listitem><para>int <link linkend="__s_d_l__test__assert_8h_1ad8cea91b1ce4db4fdea8ebab455c2190">SDLTest_AssertSummaryToTestResult</link> (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link>)</para>

<para>Converts the current assert summary state to a test result. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Include file for SDL test framework.</para>

<para>This code is a part of the SDL2_test library, not the main SDL library. </para>
</section>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="__s_d_l__test__assert_8h_1adc9dbc949d8699a6f6515211a2efa0cf"/><section>
    <title>ASSERT_FAIL</title>
<indexterm><primary>ASSERT_FAIL</primary><secondary>SDL_test_assert.h</secondary></indexterm>
<indexterm><primary>SDL_test_assert.h</primary><secondary>ASSERT_FAIL</secondary></indexterm>
<para><computeroutput>#define ASSERT_FAIL   0</computeroutput></para><para>

<para>Fails the assert. </para>
</para>
</section>
<anchor xml:id="__s_d_l__test__assert_8h_1ae67a2f28e6df1e351df870754835a09a"/><section>
    <title>ASSERT_PASS</title>
<indexterm><primary>ASSERT_PASS</primary><secondary>SDL_test_assert.h</secondary></indexterm>
<indexterm><primary>SDL_test_assert.h</primary><secondary>ASSERT_PASS</secondary></indexterm>
<para><computeroutput>#define ASSERT_PASS   1</computeroutput></para><para>

<para>Passes the assert. </para>
</para>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="__s_d_l__test__assert_8h_1a633252c9cb122f42c502ca43d6f842ad"/><section>
    <title>SDLTest_Assert()</title>
<indexterm><primary>SDLTest_Assert</primary><secondary>SDL_test_assert.h</secondary></indexterm>
<indexterm><primary>SDL_test_assert.h</primary><secondary>SDLTest_Assert</secondary></indexterm>
<para><computeroutput><link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> SDLTest_Assert (int assertCondition, <link linkend="__s_d_l__stdinc_8h_1ab13a729d2e3e2d1e1b3b2dc0bfb858eb">SDL_PRINTF_FORMAT_STRING</link> const char * assertDescription,  ...)</computeroutput></para><para>

<para>Assert that logs and break execution flow on failures. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>assertCondition</entry><entry>
<para>Evaluated condition or variable to assert; fail (==0) or pass (!=0). </para>
</entry>
                            </row>
                            <row>
<entry>assertDescription</entry><entry>
<para>Message to log with the assert describing it. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="__s_d_l__test__assert_8h_1a9f6f6cecd54a5f7aeaf0c89e0f8fe0ab"/><section>
    <title>SDLTest_AssertCheck()</title>
<indexterm><primary>SDLTest_AssertCheck</primary><secondary>SDL_test_assert.h</secondary></indexterm>
<indexterm><primary>SDL_test_assert.h</primary><secondary>SDLTest_AssertCheck</secondary></indexterm>
<para><computeroutput>int SDLTest_AssertCheck (int assertCondition, <link linkend="__s_d_l__stdinc_8h_1ab13a729d2e3e2d1e1b3b2dc0bfb858eb">SDL_PRINTF_FORMAT_STRING</link> const char * assertDescription,  ...)</computeroutput></para><para>

<para>Assert for test cases that logs but does not break execution flow on failures. Updates assertion counters. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>assertCondition</entry><entry>
<para>Evaluated condition or variable to assert; fail (==0) or pass (!=0). </para>
</entry>
                            </row>
                            <row>
<entry>assertDescription</entry><entry>
<para>Message to log with the assert describing it.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>the assertCondition so it can be used to externally to break execution flow if desired. </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__test__assert_8h_1a2156b479e33af1aa7e2c7d03c5cbb4c9"/><section>
    <title>SDLTest_AssertPass()</title>
<indexterm><primary>SDLTest_AssertPass</primary><secondary>SDL_test_assert.h</secondary></indexterm>
<indexterm><primary>SDL_test_assert.h</primary><secondary>SDLTest_AssertPass</secondary></indexterm>
<para><computeroutput><link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> SDLTest_AssertPass (<link linkend="__s_d_l__stdinc_8h_1ab13a729d2e3e2d1e1b3b2dc0bfb858eb">SDL_PRINTF_FORMAT_STRING</link> const char * assertDescription,  ...)</computeroutput></para><para>

<para>Explicitly pass without checking an assertion condition. Updates assertion counter. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>assertDescription</entry><entry>
<para>Message to log with the assert describing it. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="__s_d_l__test__assert_8h_1ad8cea91b1ce4db4fdea8ebab455c2190"/><section>
    <title>SDLTest_AssertSummaryToTestResult()</title>
<indexterm><primary>SDLTest_AssertSummaryToTestResult</primary><secondary>SDL_test_assert.h</secondary></indexterm>
<indexterm><primary>SDL_test_assert.h</primary><secondary>SDLTest_AssertSummaryToTestResult</secondary></indexterm>
<para><computeroutput>int SDLTest_AssertSummaryToTestResult (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> )</computeroutput></para><para>

<para>Converts the current assert summary state to a test result. </para>
</para>

<para><formalpara><title>Returns</title>

<para>TEST_RESULT_PASSED, TEST_RESULT_FAILED, or TEST_RESULT_NO_ASSERT </para>
</formalpara>
</para>
</section>
<anchor xml:id="__s_d_l__test__assert_8h_1a7e34c7c9d66a164ed785de905c75ab54"/><section>
    <title>SDLTest_LogAssertSummary()</title>
<indexterm><primary>SDLTest_LogAssertSummary</primary><secondary>SDL_test_assert.h</secondary></indexterm>
<indexterm><primary>SDL_test_assert.h</primary><secondary>SDLTest_LogAssertSummary</secondary></indexterm>
<para><computeroutput><link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> SDLTest_LogAssertSummary (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> )</computeroutput></para><para>

<para>Logs summary of all assertions (total, pass, fail) since last reset as INFO or ERROR. </para>
</para>
</section>
<anchor xml:id="__s_d_l__test__assert_8h_1a1f78edbf1f7a38ebfeb2a2c76e3a5e60"/><section>
    <title>SDLTest_ResetAssertSummary()</title>
<indexterm><primary>SDLTest_ResetAssertSummary</primary><secondary>SDL_test_assert.h</secondary></indexterm>
<indexterm><primary>SDL_test_assert.h</primary><secondary>SDLTest_ResetAssertSummary</secondary></indexterm>
<para><computeroutput><link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> SDLTest_ResetAssertSummary (<link linkend="__s_d_l__opengles2__gl2ext_8h_1ae5d8fa23ad07c48bb609509eae494c95">void</link> )</computeroutput></para><para>

<para>Resets the assert summary counters to zero. </para>
</para>
</section>
</section>
</section>
